// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"igKGj":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "890e741a975ef6c8";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"1xC6H":[function(require,module,exports) {
var Refresh = require("6d18d6bd340e7473");
var ErrorOverlay = require("74ad5ea14201648c");
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};
ErrorOverlay.setEditorHandler(function editorHandler(errorLocation) {
    let file = `${errorLocation.fileName}:${errorLocation.lineNumber || 1}:${errorLocation.colNumber || 1}`;
    fetch(`/__parcel_launch_editor?file=${encodeURIComponent(file)}`);
});
ErrorOverlay.startReportingRuntimeErrors({
    onError: function() {}
});
window.addEventListener("parcelhmraccept", ()=>{
    ErrorOverlay.dismissRuntimeErrors();
});

},{"6d18d6bd340e7473":"786KC","74ad5ea14201648c":"1dldy"}],"786KC":[function(require,module,exports) {
"use strict";
module.exports = require("96622d495519d4e");

},{"96622d495519d4e":"hdge7"}],"hdge7":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
    }
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === "function" ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== "function") {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += "\n---\n" + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== "function" && typeof type !== "object") return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === "object" && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + "$render");
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + "$type");
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {},
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {},
                onCommitFiberUnmount: function() {}
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === "function" && typeof injected.setRefreshHandler === "function") // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === "function" && typeof injected.setRefreshHandler === "function") // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {};
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = "needsSignature";
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case "needsSignature":
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === "function";
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = "needsCustomHooks";
                    }
                    break;
                case "needsCustomHooks":
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = "resolved";
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case "function":
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== "constructor") // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === "string" && /^[A-Z]/.test(name);
            case "object":
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"1dldy":[function(require,module,exports) {
var process = require("d1546958eb39fdcf");
!function(e, t) {
    module.exports = t();
}(window, function() {
    return function(e) {
        var t = {};
        function r(n) {
            if (t[n]) return t[n].exports;
            var o = t[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return e[n].call(o.exports, o, o.exports, r), o.l = !0, o.exports;
        }
        return r.m = e, r.c = t, r.d = function(e, t, n) {
            r.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: n
            });
        }, r.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        }, r.t = function(e, t) {
            if (1 & t && (e = r(e)), 8 & t) return e;
            if (4 & t && "object" == typeof e && e && e.__esModule) return e;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e) for(var o in e)r.d(n, o, (function(t) {
                return e[t];
            }).bind(null, o));
            return n;
        }, r.n = function(e) {
            var t = e && e.__esModule ? function() {
                return e.default;
            } : function() {
                return e;
            };
            return r.d(t, "a", t), t;
        }, r.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 15);
    }([
        function(e, t, r) {
            e.exports = r(8);
        },
        function(e, t) {
            t.getArg = function(e, t, r) {
                if (t in e) return e[t];
                if (3 === arguments.length) return r;
                throw new Error('"' + t + '" is a required argument.');
            };
            var r = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/, n = /^data:.+\,.+$/;
            function o(e) {
                var t = e.match(r);
                return t ? {
                    scheme: t[1],
                    auth: t[2],
                    host: t[3],
                    port: t[4],
                    path: t[5]
                } : null;
            }
            function a(e) {
                var t = "";
                return e.scheme && (t += e.scheme + ":"), t += "//", e.auth && (t += e.auth + "@"), e.host && (t += e.host), e.port && (t += ":" + e.port), e.path && (t += e.path), t;
            }
            function i(e) {
                var r = e, n = o(e);
                if (n) {
                    if (!n.path) return e;
                    r = n.path;
                }
                for(var i, l = t.isAbsolute(r), u = r.split(/\/+/), c = 0, s = u.length - 1; s >= 0; s--)"." === (i = u[s]) ? u.splice(s, 1) : ".." === i ? c++ : c > 0 && ("" === i ? (u.splice(s + 1, c), c = 0) : (u.splice(s, 2), c--));
                return "" === (r = u.join("/")) && (r = l ? "/" : "."), n ? (n.path = r, a(n)) : r;
            }
            t.urlParse = o, t.urlGenerate = a, t.normalize = i, t.join = function(e, t) {
                "" === e && (e = "."), "" === t && (t = ".");
                var r = o(t), l = o(e);
                if (l && (e = l.path || "/"), r && !r.scheme) return l && (r.scheme = l.scheme), a(r);
                if (r || t.match(n)) return t;
                if (l && !l.host && !l.path) return l.host = t, a(l);
                var u = "/" === t.charAt(0) ? t : i(e.replace(/\/+$/, "") + "/" + t);
                return l ? (l.path = u, a(l)) : u;
            }, t.isAbsolute = function(e) {
                return "/" === e.charAt(0) || !!e.match(r);
            }, t.relative = function(e, t) {
                "" === e && (e = "."), e = e.replace(/\/$/, "");
                for(var r = 0; 0 !== t.indexOf(e + "/");){
                    var n = e.lastIndexOf("/");
                    if (n < 0) return t;
                    if ((e = e.slice(0, n)).match(/^([^\/]+:\/)?\/*$/)) return t;
                    ++r;
                }
                return Array(r + 1).join("../") + t.substr(e.length + 1);
            };
            var l = !("__proto__" in Object.create(null));
            function u(e) {
                return e;
            }
            function c(e) {
                if (!e) return !1;
                var t = e.length;
                if (t < 9) return !1;
                if (95 !== e.charCodeAt(t - 1) || 95 !== e.charCodeAt(t - 2) || 111 !== e.charCodeAt(t - 3) || 116 !== e.charCodeAt(t - 4) || 111 !== e.charCodeAt(t - 5) || 114 !== e.charCodeAt(t - 6) || 112 !== e.charCodeAt(t - 7) || 95 !== e.charCodeAt(t - 8) || 95 !== e.charCodeAt(t - 9)) return !1;
                for(var r = t - 10; r >= 0; r--)if (36 !== e.charCodeAt(r)) return !1;
                return !0;
            }
            function s(e, t) {
                return e === t ? 0 : e > t ? 1 : -1;
            }
            t.toSetString = l ? u : function(e) {
                return c(e) ? "$" + e : e;
            }, t.fromSetString = l ? u : function(e) {
                return c(e) ? e.slice(1) : e;
            }, t.compareByOriginalPositions = function(e, t, r) {
                var n = e.source - t.source;
                return 0 !== n ? n : 0 !== (n = e.originalLine - t.originalLine) ? n : 0 !== (n = e.originalColumn - t.originalColumn) || r ? n : 0 !== (n = e.generatedColumn - t.generatedColumn) ? n : 0 !== (n = e.generatedLine - t.generatedLine) ? n : e.name - t.name;
            }, t.compareByGeneratedPositionsDeflated = function(e, t, r) {
                var n = e.generatedLine - t.generatedLine;
                return 0 !== n ? n : 0 !== (n = e.generatedColumn - t.generatedColumn) || r ? n : 0 !== (n = e.source - t.source) ? n : 0 !== (n = e.originalLine - t.originalLine) ? n : 0 !== (n = e.originalColumn - t.originalColumn) ? n : e.name - t.name;
            }, t.compareByGeneratedPositionsInflated = function(e, t) {
                var r = e.generatedLine - t.generatedLine;
                return 0 !== r ? r : 0 !== (r = e.generatedColumn - t.generatedColumn) ? r : 0 !== (r = s(e.source, t.source)) ? r : 0 !== (r = e.originalLine - t.originalLine) ? r : 0 !== (r = e.originalColumn - t.originalColumn) ? r : s(e.name, t.name);
            };
        },
        function(e, t) {
            function r(e, t) {
                for(var r = 0, n = e.length - 1; n >= 0; n--){
                    var o = e[n];
                    "." === o ? e.splice(n, 1) : ".." === o ? (e.splice(n, 1), r++) : r && (e.splice(n, 1), r--);
                }
                if (t) for(; r--; r)e.unshift("..");
                return e;
            }
            function n(e, t) {
                if (e.filter) return e.filter(t);
                for(var r = [], n = 0; n < e.length; n++)t(e[n], n, e) && r.push(e[n]);
                return r;
            }
            t.resolve = function() {
                for(var e = "", t = !1, o = arguments.length - 1; o >= -1 && !t; o--){
                    var a = o >= 0 ? arguments[o] : process.cwd();
                    if ("string" != typeof a) throw new TypeError("Arguments to path.resolve must be strings");
                    a && (e = a + "/" + e, t = "/" === a.charAt(0));
                }
                return (t ? "/" : "") + (e = r(n(e.split("/"), function(e) {
                    return !!e;
                }), !t).join("/")) || ".";
            }, t.normalize = function(e) {
                var a = t.isAbsolute(e), i = "/" === o(e, -1);
                return (e = r(n(e.split("/"), function(e) {
                    return !!e;
                }), !a).join("/")) || a || (e = "."), e && i && (e += "/"), (a ? "/" : "") + e;
            }, t.isAbsolute = function(e) {
                return "/" === e.charAt(0);
            }, t.join = function() {
                var e = Array.prototype.slice.call(arguments, 0);
                return t.normalize(n(e, function(e, t) {
                    if ("string" != typeof e) throw new TypeError("Arguments to path.join must be strings");
                    return e;
                }).join("/"));
            }, t.relative = function(e, r) {
                function n(e) {
                    for(var t = 0; t < e.length && "" === e[t]; t++);
                    for(var r = e.length - 1; r >= 0 && "" === e[r]; r--);
                    return t > r ? [] : e.slice(t, r - t + 1);
                }
                e = t.resolve(e).substr(1), r = t.resolve(r).substr(1);
                for(var o = n(e.split("/")), a = n(r.split("/")), i = Math.min(o.length, a.length), l = i, u = 0; u < i; u++)if (o[u] !== a[u]) {
                    l = u;
                    break;
                }
                var c = [];
                for(u = l; u < o.length; u++)c.push("..");
                return (c = c.concat(a.slice(l))).join("/");
            }, t.sep = "/", t.delimiter = ":", t.dirname = function(e) {
                if ("string" != typeof e && (e += ""), 0 === e.length) return ".";
                for(var t = e.charCodeAt(0), r = 47 === t, n = -1, o = !0, a = e.length - 1; a >= 1; --a)if (47 === (t = e.charCodeAt(a))) {
                    if (!o) {
                        n = a;
                        break;
                    }
                } else o = !1;
                return -1 === n ? r ? "/" : "." : r && 1 === n ? "/" : e.slice(0, n);
            }, t.basename = function(e, t) {
                var r = function(e) {
                    "string" != typeof e && (e += "");
                    var t, r = 0, n = -1, o = !0;
                    for(t = e.length - 1; t >= 0; --t)if (47 === e.charCodeAt(t)) {
                        if (!o) {
                            r = t + 1;
                            break;
                        }
                    } else -1 === n && (o = !1, n = t + 1);
                    return -1 === n ? "" : e.slice(r, n);
                }(e);
                return t && r.substr(-1 * t.length) === t && (r = r.substr(0, r.length - t.length)), r;
            }, t.extname = function(e) {
                "string" != typeof e && (e += "");
                for(var t = -1, r = 0, n = -1, o = !0, a = 0, i = e.length - 1; i >= 0; --i){
                    var l = e.charCodeAt(i);
                    if (47 !== l) -1 === n && (o = !1, n = i + 1), 46 === l ? -1 === t ? t = i : 1 !== a && (a = 1) : -1 !== t && (a = -1);
                    else if (!o) {
                        r = i + 1;
                        break;
                    }
                }
                return -1 === t || -1 === n || 0 === a || 1 === a && t === n - 1 && t === r + 1 ? "" : e.slice(t, n);
            };
            var o = "b" === "ab".substr(-1) ? function(e, t, r) {
                return e.substr(t, r);
            } : function(e, t, r) {
                return t < 0 && (t = e.length + t), e.substr(t, r);
            };
        },
        function(e, t, r) {
            t.SourceMapGenerator = r(4).SourceMapGenerator, t.SourceMapConsumer = r(11).SourceMapConsumer, t.SourceNode = r(14).SourceNode;
        },
        function(e, t, r) {
            var n = r(5), o = r(1), a = r(6).ArraySet, i = r(10).MappingList;
            function l(e) {
                e || (e = {}), this._file = o.getArg(e, "file", null), this._sourceRoot = o.getArg(e, "sourceRoot", null), this._skipValidation = o.getArg(e, "skipValidation", !1), this._sources = new a, this._names = new a, this._mappings = new i, this._sourcesContents = null;
            }
            l.prototype._version = 3, l.fromSourceMap = function(e) {
                var t = e.sourceRoot, r = new l({
                    file: e.file,
                    sourceRoot: t
                });
                return e.eachMapping(function(e) {
                    var n = {
                        generated: {
                            line: e.generatedLine,
                            column: e.generatedColumn
                        }
                    };
                    null != e.source && (n.source = e.source, null != t && (n.source = o.relative(t, n.source)), n.original = {
                        line: e.originalLine,
                        column: e.originalColumn
                    }, null != e.name && (n.name = e.name)), r.addMapping(n);
                }), e.sources.forEach(function(t) {
                    var n = e.sourceContentFor(t);
                    null != n && r.setSourceContent(t, n);
                }), r;
            }, l.prototype.addMapping = function(e) {
                var t = o.getArg(e, "generated"), r = o.getArg(e, "original", null), n = o.getArg(e, "source", null), a = o.getArg(e, "name", null);
                this._skipValidation || this._validateMapping(t, r, n, a), null != n && (n = String(n), this._sources.has(n) || this._sources.add(n)), null != a && (a = String(a), this._names.has(a) || this._names.add(a)), this._mappings.add({
                    generatedLine: t.line,
                    generatedColumn: t.column,
                    originalLine: null != r && r.line,
                    originalColumn: null != r && r.column,
                    source: n,
                    name: a
                });
            }, l.prototype.setSourceContent = function(e, t) {
                var r = e;
                null != this._sourceRoot && (r = o.relative(this._sourceRoot, r)), null != t ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[o.toSetString(r)] = t) : this._sourcesContents && (delete this._sourcesContents[o.toSetString(r)], 0 === Object.keys(this._sourcesContents).length && (this._sourcesContents = null));
            }, l.prototype.applySourceMap = function(e, t, r) {
                var n = t;
                if (null == t) {
                    if (null == e.file) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
                    n = e.file;
                }
                var i = this._sourceRoot;
                null != i && (n = o.relative(i, n));
                var l = new a, u = new a;
                this._mappings.unsortedForEach(function(t) {
                    if (t.source === n && null != t.originalLine) {
                        var a = e.originalPositionFor({
                            line: t.originalLine,
                            column: t.originalColumn
                        });
                        null != a.source && (t.source = a.source, null != r && (t.source = o.join(r, t.source)), null != i && (t.source = o.relative(i, t.source)), t.originalLine = a.line, t.originalColumn = a.column, null != a.name && (t.name = a.name));
                    }
                    var c = t.source;
                    null == c || l.has(c) || l.add(c);
                    var s = t.name;
                    null == s || u.has(s) || u.add(s);
                }, this), this._sources = l, this._names = u, e.sources.forEach(function(t) {
                    var n = e.sourceContentFor(t);
                    null != n && (null != r && (t = o.join(r, t)), null != i && (t = o.relative(i, t)), this.setSourceContent(t, n));
                }, this);
            }, l.prototype._validateMapping = function(e, t, r, n) {
                if (t && "number" != typeof t.line && "number" != typeof t.column) throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
                if ((!(e && "line" in e && "column" in e && e.line > 0 && e.column >= 0) || t || r || n) && !(e && "line" in e && "column" in e && t && "line" in t && "column" in t && e.line > 0 && e.column >= 0 && t.line > 0 && t.column >= 0 && r)) throw new Error("Invalid mapping: " + JSON.stringify({
                    generated: e,
                    source: r,
                    original: t,
                    name: n
                }));
            }, l.prototype._serializeMappings = function() {
                for(var e, t, r, a, i = 0, l = 1, u = 0, c = 0, s = 0, f = 0, d = "", p = this._mappings.toArray(), h = 0, g = p.length; h < g; h++){
                    if (e = "", (t = p[h]).generatedLine !== l) for(i = 0; t.generatedLine !== l;)e += ";", l++;
                    else if (h > 0) {
                        if (!o.compareByGeneratedPositionsInflated(t, p[h - 1])) continue;
                        e += ",";
                    }
                    e += n.encode(t.generatedColumn - i), i = t.generatedColumn, null != t.source && (a = this._sources.indexOf(t.source), e += n.encode(a - f), f = a, e += n.encode(t.originalLine - 1 - c), c = t.originalLine - 1, e += n.encode(t.originalColumn - u), u = t.originalColumn, null != t.name && (r = this._names.indexOf(t.name), e += n.encode(r - s), s = r)), d += e;
                }
                return d;
            }, l.prototype._generateSourcesContent = function(e, t) {
                return e.map(function(e) {
                    if (!this._sourcesContents) return null;
                    null != t && (e = o.relative(t, e));
                    var r = o.toSetString(e);
                    return Object.prototype.hasOwnProperty.call(this._sourcesContents, r) ? this._sourcesContents[r] : null;
                }, this);
            }, l.prototype.toJSON = function() {
                var e = {
                    version: this._version,
                    sources: this._sources.toArray(),
                    names: this._names.toArray(),
                    mappings: this._serializeMappings()
                };
                return null != this._file && (e.file = this._file), null != this._sourceRoot && (e.sourceRoot = this._sourceRoot), this._sourcesContents && (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)), e;
            }, l.prototype.toString = function() {
                return JSON.stringify(this.toJSON());
            }, t.SourceMapGenerator = l;
        },
        function(e, t, r) {
            var n = r(9);
            t.encode = function(e) {
                var t, r = "", o = function(e) {
                    return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
                }(e);
                do t = 31 & o, (o >>>= 5) > 0 && (t |= 32), r += n.encode(t);
                while (o > 0);
                return r;
            }, t.decode = function(e, t, r) {
                var o, a, i, l, u = e.length, c = 0, s = 0;
                do {
                    if (t >= u) throw new Error("Expected more digits in base 64 VLQ value.");
                    if (-1 === (a = n.decode(e.charCodeAt(t++)))) throw new Error("Invalid base64 digit: " + e.charAt(t - 1));
                    o = !!(32 & a), c += (a &= 31) << s, s += 5;
                }while (o);
                r.value = (l = (i = c) >> 1, 1 == (1 & i) ? -l : l), r.rest = t;
            };
        },
        function(e, t, r) {
            var n = r(1), o = Object.prototype.hasOwnProperty, a = "undefined" != typeof Map;
            function i() {
                this._array = [], this._set = a ? new Map : Object.create(null);
            }
            i.fromArray = function(e, t) {
                for(var r = new i, n = 0, o = e.length; n < o; n++)r.add(e[n], t);
                return r;
            }, i.prototype.size = function() {
                return a ? this._set.size : Object.getOwnPropertyNames(this._set).length;
            }, i.prototype.add = function(e, t) {
                var r = a ? e : n.toSetString(e), i = a ? this.has(e) : o.call(this._set, r), l = this._array.length;
                i && !t || this._array.push(e), i || (a ? this._set.set(e, l) : this._set[r] = l);
            }, i.prototype.has = function(e) {
                if (a) return this._set.has(e);
                var t = n.toSetString(e);
                return o.call(this._set, t);
            }, i.prototype.indexOf = function(e) {
                if (a) {
                    var t = this._set.get(e);
                    if (t >= 0) return t;
                } else {
                    var r = n.toSetString(e);
                    if (o.call(this._set, r)) return this._set[r];
                }
                throw new Error('"' + e + '" is not in the set.');
            }, i.prototype.at = function(e) {
                if (e >= 0 && e < this._array.length) return this._array[e];
                throw new Error("No element indexed by " + e);
            }, i.prototype.toArray = function() {
                return this._array.slice();
            }, t.ArraySet = i;
        },
        function(e, t, r) {
            "use strict";
            function n(e) {
                return Array.isArray(e) || (e = [
                    e
                ]), Promise.all(e.map(function(e) {
                    return e.then(function(e) {
                        return {
                            isFulfilled: !0,
                            isRejected: !1,
                            value: e
                        };
                    }).catch(function(e) {
                        return {
                            isFulfilled: !1,
                            isRejected: !0,
                            reason: e
                        };
                    });
                }));
            }
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.settle = n, t.default = n;
        },
        function(e, t, r) {
            var n = function(e) {
                "use strict";
                var t, r = Object.prototype, n = r.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, a = o.iterator || "@@iterator", i = o.asyncIterator || "@@asyncIterator", l = o.toStringTag || "@@toStringTag";
                function u(e, t, r) {
                    return Object.defineProperty(e, t, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }), e[t];
                }
                try {
                    u({}, "");
                } catch (e) {
                    u = function(e, t, r) {
                        return e[t] = r;
                    };
                }
                function c(e, t, r, n) {
                    var o = t && t.prototype instanceof m ? t : m, a = Object.create(o.prototype), i = new T(n || []);
                    return a._invoke = function(e, t, r) {
                        var n = f;
                        return function(o, a) {
                            if (n === p) throw new Error("Generator is already running");
                            if (n === h) {
                                if ("throw" === o) throw a;
                                return L();
                            }
                            for(r.method = o, r.arg = a;;){
                                var i = r.delegate;
                                if (i) {
                                    var l = _(i, r);
                                    if (l) {
                                        if (l === g) continue;
                                        return l;
                                    }
                                }
                                if ("next" === r.method) r.sent = r._sent = r.arg;
                                else if ("throw" === r.method) {
                                    if (n === f) throw n = h, r.arg;
                                    r.dispatchException(r.arg);
                                } else "return" === r.method && r.abrupt("return", r.arg);
                                n = p;
                                var u = s(e, t, r);
                                if ("normal" === u.type) {
                                    if (n = r.done ? h : d, u.arg === g) continue;
                                    return {
                                        value: u.arg,
                                        done: r.done
                                    };
                                }
                                "throw" === u.type && (n = h, r.method = "throw", r.arg = u.arg);
                            }
                        };
                    }(e, r, i), a;
                }
                function s(e, t, r) {
                    try {
                        return {
                            type: "normal",
                            arg: e.call(t, r)
                        };
                    } catch (e) {
                        return {
                            type: "throw",
                            arg: e
                        };
                    }
                }
                e.wrap = c;
                var f = "suspendedStart", d = "suspendedYield", p = "executing", h = "completed", g = {};
                function m() {}
                function v() {}
                function y() {}
                var b = {};
                b[a] = function() {
                    return this;
                };
                var w = Object.getPrototypeOf, k = w && w(w(P([])));
                k && k !== r && n.call(k, a) && (b = k);
                var E = y.prototype = m.prototype = Object.create(b);
                function S(e) {
                    [
                        "next",
                        "throw",
                        "return"
                    ].forEach(function(t) {
                        u(e, t, function(e) {
                            return this._invoke(t, e);
                        });
                    });
                }
                function x(e, t) {
                    var r;
                    this._invoke = function(o, a) {
                        function i() {
                            return new t(function(r, i) {
                                !function r(o, a, i, l) {
                                    var u = s(e[o], e, a);
                                    if ("throw" !== u.type) {
                                        var c = u.arg, f = c.value;
                                        return f && "object" == typeof f && n.call(f, "__await") ? t.resolve(f.__await).then(function(e) {
                                            r("next", e, i, l);
                                        }, function(e) {
                                            r("throw", e, i, l);
                                        }) : t.resolve(f).then(function(e) {
                                            c.value = e, i(c);
                                        }, function(e) {
                                            return r("throw", e, i, l);
                                        });
                                    }
                                    l(u.arg);
                                }(o, a, r, i);
                            });
                        }
                        return r = r ? r.then(i, i) : i();
                    };
                }
                function _(e, r) {
                    var n = e.iterator[r.method];
                    if (n === t) {
                        if (r.delegate = null, "throw" === r.method) {
                            if (e.iterator.return && (r.method = "return", r.arg = t, _(e, r), "throw" === r.method)) return g;
                            r.method = "throw", r.arg = new TypeError("The iterator does not provide a 'throw' method");
                        }
                        return g;
                    }
                    var o = s(n, e.iterator, r.arg);
                    if ("throw" === o.type) return r.method = "throw", r.arg = o.arg, r.delegate = null, g;
                    var a = o.arg;
                    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, g) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, g);
                }
                function C(e) {
                    var t = {
                        tryLoc: e[0]
                    };
                    1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t);
                }
                function O(e) {
                    var t = e.completion || {};
                    t.type = "normal", delete t.arg, e.completion = t;
                }
                function T(e) {
                    this.tryEntries = [
                        {
                            tryLoc: "root"
                        }
                    ], e.forEach(C, this), this.reset(!0);
                }
                function P(e) {
                    if (e) {
                        var r = e[a];
                        if (r) return r.call(e);
                        if ("function" == typeof e.next) return e;
                        if (!isNaN(e.length)) {
                            var o = -1, i = function r() {
                                for(; ++o < e.length;)if (n.call(e, o)) return r.value = e[o], r.done = !1, r;
                                return r.value = t, r.done = !0, r;
                            };
                            return i.next = i;
                        }
                    }
                    return {
                        next: L
                    };
                }
                function L() {
                    return {
                        value: t,
                        done: !0
                    };
                }
                return v.prototype = E.constructor = y, y.constructor = v, v.displayName = u(y, l, "GeneratorFunction"), e.isGeneratorFunction = function(e) {
                    var t = "function" == typeof e && e.constructor;
                    return !!t && (t === v || "GeneratorFunction" === (t.displayName || t.name));
                }, e.mark = function(e) {
                    return Object.setPrototypeOf ? Object.setPrototypeOf(e, y) : (e.__proto__ = y, u(e, l, "GeneratorFunction")), e.prototype = Object.create(E), e;
                }, e.awrap = function(e) {
                    return {
                        __await: e
                    };
                }, S(x.prototype), x.prototype[i] = function() {
                    return this;
                }, e.AsyncIterator = x, e.async = function(t, r, n, o, a) {
                    void 0 === a && (a = Promise);
                    var i = new x(c(t, r, n, o), a);
                    return e.isGeneratorFunction(r) ? i : i.next().then(function(e) {
                        return e.done ? e.value : i.next();
                    });
                }, S(E), u(E, l, "Generator"), E[a] = function() {
                    return this;
                }, E.toString = function() {
                    return "[object Generator]";
                }, e.keys = function(e) {
                    var t = [];
                    for(var r in e)t.push(r);
                    return t.reverse(), function r() {
                        for(; t.length;){
                            var n = t.pop();
                            if (n in e) return r.value = n, r.done = !1, r;
                        }
                        return r.done = !0, r;
                    };
                }, e.values = P, T.prototype = {
                    constructor: T,
                    reset: function(e) {
                        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(O), !e) for(var r in this)"t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
                    },
                    stop: function() {
                        this.done = !0;
                        var e = this.tryEntries[0].completion;
                        if ("throw" === e.type) throw e.arg;
                        return this.rval;
                    },
                    dispatchException: function(e) {
                        if (this.done) throw e;
                        var r = this;
                        function o(n, o) {
                            return l.type = "throw", l.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
                        }
                        for(var a = this.tryEntries.length - 1; a >= 0; --a){
                            var i = this.tryEntries[a], l = i.completion;
                            if ("root" === i.tryLoc) return o("end");
                            if (i.tryLoc <= this.prev) {
                                var u = n.call(i, "catchLoc"), c = n.call(i, "finallyLoc");
                                if (u && c) {
                                    if (this.prev < i.catchLoc) return o(i.catchLoc, !0);
                                    if (this.prev < i.finallyLoc) return o(i.finallyLoc);
                                } else if (u) {
                                    if (this.prev < i.catchLoc) return o(i.catchLoc, !0);
                                } else {
                                    if (!c) throw new Error("try statement without catch or finally");
                                    if (this.prev < i.finallyLoc) return o(i.finallyLoc);
                                }
                            }
                        }
                    },
                    abrupt: function(e, t) {
                        for(var r = this.tryEntries.length - 1; r >= 0; --r){
                            var o = this.tryEntries[r];
                            if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                                var a = o;
                                break;
                            }
                        }
                        a && ("break" === e || "continue" === e) && a.tryLoc <= t && t <= a.finallyLoc && (a = null);
                        var i = a ? a.completion : {};
                        return i.type = e, i.arg = t, a ? (this.method = "next", this.next = a.finallyLoc, g) : this.complete(i);
                    },
                    complete: function(e, t) {
                        if ("throw" === e.type) throw e.arg;
                        return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), g;
                    },
                    finish: function(e) {
                        for(var t = this.tryEntries.length - 1; t >= 0; --t){
                            var r = this.tryEntries[t];
                            if (r.finallyLoc === e) return this.complete(r.completion, r.afterLoc), O(r), g;
                        }
                    },
                    catch: function(e) {
                        for(var t = this.tryEntries.length - 1; t >= 0; --t){
                            var r = this.tryEntries[t];
                            if (r.tryLoc === e) {
                                var n = r.completion;
                                if ("throw" === n.type) {
                                    var o = n.arg;
                                    O(r);
                                }
                                return o;
                            }
                        }
                        throw new Error("illegal catch attempt");
                    },
                    delegateYield: function(e, r, n) {
                        return this.delegate = {
                            iterator: P(e),
                            resultName: r,
                            nextLoc: n
                        }, "next" === this.method && (this.arg = t), g;
                    }
                }, e;
            }(e.exports);
            try {
                regeneratorRuntime = n;
            } catch (e) {
                Function("r", "regeneratorRuntime = r")(n);
            }
        },
        function(e, t) {
            var r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
            t.encode = function(e) {
                if (0 <= e && e < r.length) return r[e];
                throw new TypeError("Must be between 0 and 63: " + e);
            }, t.decode = function(e) {
                return 65 <= e && e <= 90 ? e - 65 : 97 <= e && e <= 122 ? e - 97 + 26 : 48 <= e && e <= 57 ? e - 48 + 52 : 43 == e ? 62 : 47 == e ? 63 : -1;
            };
        },
        function(e, t, r) {
            var n = r(1);
            function o() {
                this._array = [], this._sorted = !0, this._last = {
                    generatedLine: -1,
                    generatedColumn: 0
                };
            }
            o.prototype.unsortedForEach = function(e, t) {
                this._array.forEach(e, t);
            }, o.prototype.add = function(e) {
                var t, r, o, a, i, l;
                t = this._last, r = e, o = t.generatedLine, a = r.generatedLine, i = t.generatedColumn, l = r.generatedColumn, a > o || a == o && l >= i || n.compareByGeneratedPositionsInflated(t, r) <= 0 ? (this._last = e, this._array.push(e)) : (this._sorted = !1, this._array.push(e));
            }, o.prototype.toArray = function() {
                return this._sorted || (this._array.sort(n.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
            }, t.MappingList = o;
        },
        function(e, t, r) {
            var n = r(1), o = r(12), a = r(6).ArraySet, i = r(5), l = r(13).quickSort;
            function u(e) {
                var t = e;
                return "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, ""))), null != t.sections ? new f(t) : new c(t);
            }
            function c(e) {
                var t = e;
                "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
                var r = n.getArg(t, "version"), o = n.getArg(t, "sources"), i = n.getArg(t, "names", []), l = n.getArg(t, "sourceRoot", null), u = n.getArg(t, "sourcesContent", null), c = n.getArg(t, "mappings"), s = n.getArg(t, "file", null);
                if (r != this._version) throw new Error("Unsupported version: " + r);
                o = o.map(String).map(n.normalize).map(function(e) {
                    return l && n.isAbsolute(l) && n.isAbsolute(e) ? n.relative(l, e) : e;
                }), this._names = a.fromArray(i.map(String), !0), this._sources = a.fromArray(o, !0), this.sourceRoot = l, this.sourcesContent = u, this._mappings = c, this.file = s;
            }
            function s() {
                this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
            }
            function f(e) {
                var t = e;
                "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
                var r = n.getArg(t, "version"), o = n.getArg(t, "sections");
                if (r != this._version) throw new Error("Unsupported version: " + r);
                this._sources = new a, this._names = new a;
                var i = {
                    line: -1,
                    column: 0
                };
                this._sections = o.map(function(e) {
                    if (e.url) throw new Error("Support for url field in sections not implemented.");
                    var t = n.getArg(e, "offset"), r = n.getArg(t, "line"), o = n.getArg(t, "column");
                    if (r < i.line || r === i.line && o < i.column) throw new Error("Section offsets must be ordered and non-overlapping.");
                    return i = t, {
                        generatedOffset: {
                            generatedLine: r + 1,
                            generatedColumn: o + 1
                        },
                        consumer: new u(n.getArg(e, "map"))
                    };
                });
            }
            u.fromSourceMap = function(e) {
                return c.fromSourceMap(e);
            }, u.prototype._version = 3, u.prototype.__generatedMappings = null, Object.defineProperty(u.prototype, "_generatedMappings", {
                get: function() {
                    return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
                }
            }), u.prototype.__originalMappings = null, Object.defineProperty(u.prototype, "_originalMappings", {
                get: function() {
                    return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
                }
            }), u.prototype._charIsMappingSeparator = function(e, t) {
                var r = e.charAt(t);
                return ";" === r || "," === r;
            }, u.prototype._parseMappings = function(e, t) {
                throw new Error("Subclasses must implement _parseMappings");
            }, u.GENERATED_ORDER = 1, u.ORIGINAL_ORDER = 2, u.GREATEST_LOWER_BOUND = 1, u.LEAST_UPPER_BOUND = 2, u.prototype.eachMapping = function(e, t, r) {
                var o, a = t || null;
                switch(r || u.GENERATED_ORDER){
                    case u.GENERATED_ORDER:
                        o = this._generatedMappings;
                        break;
                    case u.ORIGINAL_ORDER:
                        o = this._originalMappings;
                        break;
                    default:
                        throw new Error("Unknown order of iteration.");
                }
                var i = this.sourceRoot;
                o.map(function(e) {
                    var t = null === e.source ? null : this._sources.at(e.source);
                    return null != t && null != i && (t = n.join(i, t)), {
                        source: t,
                        generatedLine: e.generatedLine,
                        generatedColumn: e.generatedColumn,
                        originalLine: e.originalLine,
                        originalColumn: e.originalColumn,
                        name: null === e.name ? null : this._names.at(e.name)
                    };
                }, this).forEach(e, a);
            }, u.prototype.allGeneratedPositionsFor = function(e) {
                var t = n.getArg(e, "line"), r = {
                    source: n.getArg(e, "source"),
                    originalLine: t,
                    originalColumn: n.getArg(e, "column", 0)
                };
                if (null != this.sourceRoot && (r.source = n.relative(this.sourceRoot, r.source)), !this._sources.has(r.source)) return [];
                r.source = this._sources.indexOf(r.source);
                var a = [], i = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", n.compareByOriginalPositions, o.LEAST_UPPER_BOUND);
                if (i >= 0) {
                    var l = this._originalMappings[i];
                    if (void 0 === e.column) for(var u = l.originalLine; l && l.originalLine === u;)a.push({
                        line: n.getArg(l, "generatedLine", null),
                        column: n.getArg(l, "generatedColumn", null),
                        lastColumn: n.getArg(l, "lastGeneratedColumn", null)
                    }), l = this._originalMappings[++i];
                    else for(var c = l.originalColumn; l && l.originalLine === t && l.originalColumn == c;)a.push({
                        line: n.getArg(l, "generatedLine", null),
                        column: n.getArg(l, "generatedColumn", null),
                        lastColumn: n.getArg(l, "lastGeneratedColumn", null)
                    }), l = this._originalMappings[++i];
                }
                return a;
            }, t.SourceMapConsumer = u, c.prototype = Object.create(u.prototype), c.prototype.consumer = u, c.fromSourceMap = function(e) {
                var t = Object.create(c.prototype), r = t._names = a.fromArray(e._names.toArray(), !0), o = t._sources = a.fromArray(e._sources.toArray(), !0);
                t.sourceRoot = e._sourceRoot, t.sourcesContent = e._generateSourcesContent(t._sources.toArray(), t.sourceRoot), t.file = e._file;
                for(var i = e._mappings.toArray().slice(), u = t.__generatedMappings = [], f = t.__originalMappings = [], d = 0, p = i.length; d < p; d++){
                    var h = i[d], g = new s;
                    g.generatedLine = h.generatedLine, g.generatedColumn = h.generatedColumn, h.source && (g.source = o.indexOf(h.source), g.originalLine = h.originalLine, g.originalColumn = h.originalColumn, h.name && (g.name = r.indexOf(h.name)), f.push(g)), u.push(g);
                }
                return l(t.__originalMappings, n.compareByOriginalPositions), t;
            }, c.prototype._version = 3, Object.defineProperty(c.prototype, "sources", {
                get: function() {
                    return this._sources.toArray().map(function(e) {
                        return null != this.sourceRoot ? n.join(this.sourceRoot, e) : e;
                    }, this);
                }
            }), c.prototype._parseMappings = function(e, t) {
                for(var r, o, a, u, c, f = 1, d = 0, p = 0, h = 0, g = 0, m = 0, v = e.length, y = 0, b = {}, w = {}, k = [], E = []; y < v;)if (";" === e.charAt(y)) f++, y++, d = 0;
                else if ("," === e.charAt(y)) y++;
                else {
                    for((r = new s).generatedLine = f, u = y; u < v && !this._charIsMappingSeparator(e, u); u++);
                    if (a = b[o = e.slice(y, u)]) y += o.length;
                    else {
                        for(a = []; y < u;)i.decode(e, y, w), c = w.value, y = w.rest, a.push(c);
                        if (2 === a.length) throw new Error("Found a source, but no line and column");
                        if (3 === a.length) throw new Error("Found a source and line, but no column");
                        b[o] = a;
                    }
                    r.generatedColumn = d + a[0], d = r.generatedColumn, a.length > 1 && (r.source = g + a[1], g += a[1], r.originalLine = p + a[2], p = r.originalLine, r.originalLine += 1, r.originalColumn = h + a[3], h = r.originalColumn, a.length > 4 && (r.name = m + a[4], m += a[4])), E.push(r), "number" == typeof r.originalLine && k.push(r);
                }
                l(E, n.compareByGeneratedPositionsDeflated), this.__generatedMappings = E, l(k, n.compareByOriginalPositions), this.__originalMappings = k;
            }, c.prototype._findMapping = function(e, t, r, n, a, i) {
                if (e[r] <= 0) throw new TypeError("Line must be greater than or equal to 1, got " + e[r]);
                if (e[n] < 0) throw new TypeError("Column must be greater than or equal to 0, got " + e[n]);
                return o.search(e, t, a, i);
            }, c.prototype.computeColumnSpans = function() {
                for(var e = 0; e < this._generatedMappings.length; ++e){
                    var t = this._generatedMappings[e];
                    if (e + 1 < this._generatedMappings.length) {
                        var r = this._generatedMappings[e + 1];
                        if (t.generatedLine === r.generatedLine) {
                            t.lastGeneratedColumn = r.generatedColumn - 1;
                            continue;
                        }
                    }
                    t.lastGeneratedColumn = 1 / 0;
                }
            }, c.prototype.originalPositionFor = function(e) {
                var t = {
                    generatedLine: n.getArg(e, "line"),
                    generatedColumn: n.getArg(e, "column")
                }, r = this._findMapping(t, this._generatedMappings, "generatedLine", "generatedColumn", n.compareByGeneratedPositionsDeflated, n.getArg(e, "bias", u.GREATEST_LOWER_BOUND));
                if (r >= 0) {
                    var o = this._generatedMappings[r];
                    if (o.generatedLine === t.generatedLine) {
                        var a = n.getArg(o, "source", null);
                        null !== a && (a = this._sources.at(a), null != this.sourceRoot && (a = n.join(this.sourceRoot, a)));
                        var i = n.getArg(o, "name", null);
                        return null !== i && (i = this._names.at(i)), {
                            source: a,
                            line: n.getArg(o, "originalLine", null),
                            column: n.getArg(o, "originalColumn", null),
                            name: i
                        };
                    }
                }
                return {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                };
            }, c.prototype.hasContentsOfAllSources = function() {
                return !!this.sourcesContent && this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(e) {
                    return null == e;
                });
            }, c.prototype.sourceContentFor = function(e, t) {
                if (!this.sourcesContent) return null;
                if (null != this.sourceRoot && (e = n.relative(this.sourceRoot, e)), this._sources.has(e)) return this.sourcesContent[this._sources.indexOf(e)];
                var r;
                if (null != this.sourceRoot && (r = n.urlParse(this.sourceRoot))) {
                    var o = e.replace(/^file:\/\//, "");
                    if ("file" == r.scheme && this._sources.has(o)) return this.sourcesContent[this._sources.indexOf(o)];
                    if ((!r.path || "/" == r.path) && this._sources.has("/" + e)) return this.sourcesContent[this._sources.indexOf("/" + e)];
                }
                if (t) return null;
                throw new Error('"' + e + '" is not in the SourceMap.');
            }, c.prototype.generatedPositionFor = function(e) {
                var t = n.getArg(e, "source");
                if (null != this.sourceRoot && (t = n.relative(this.sourceRoot, t)), !this._sources.has(t)) return {
                    line: null,
                    column: null,
                    lastColumn: null
                };
                var r = {
                    source: t = this._sources.indexOf(t),
                    originalLine: n.getArg(e, "line"),
                    originalColumn: n.getArg(e, "column")
                }, o = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", n.compareByOriginalPositions, n.getArg(e, "bias", u.GREATEST_LOWER_BOUND));
                if (o >= 0) {
                    var a = this._originalMappings[o];
                    if (a.source === r.source) return {
                        line: n.getArg(a, "generatedLine", null),
                        column: n.getArg(a, "generatedColumn", null),
                        lastColumn: n.getArg(a, "lastGeneratedColumn", null)
                    };
                }
                return {
                    line: null,
                    column: null,
                    lastColumn: null
                };
            }, t.BasicSourceMapConsumer = c, f.prototype = Object.create(u.prototype), f.prototype.constructor = u, f.prototype._version = 3, Object.defineProperty(f.prototype, "sources", {
                get: function() {
                    for(var e = [], t = 0; t < this._sections.length; t++)for(var r = 0; r < this._sections[t].consumer.sources.length; r++)e.push(this._sections[t].consumer.sources[r]);
                    return e;
                }
            }), f.prototype.originalPositionFor = function(e) {
                var t = {
                    generatedLine: n.getArg(e, "line"),
                    generatedColumn: n.getArg(e, "column")
                }, r = o.search(t, this._sections, function(e, t) {
                    var r = e.generatedLine - t.generatedOffset.generatedLine;
                    return r || e.generatedColumn - t.generatedOffset.generatedColumn;
                }), a = this._sections[r];
                return a ? a.consumer.originalPositionFor({
                    line: t.generatedLine - (a.generatedOffset.generatedLine - 1),
                    column: t.generatedColumn - (a.generatedOffset.generatedLine === t.generatedLine ? a.generatedOffset.generatedColumn - 1 : 0),
                    bias: e.bias
                }) : {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                };
            }, f.prototype.hasContentsOfAllSources = function() {
                return this._sections.every(function(e) {
                    return e.consumer.hasContentsOfAllSources();
                });
            }, f.prototype.sourceContentFor = function(e, t) {
                for(var r = 0; r < this._sections.length; r++){
                    var n = this._sections[r].consumer.sourceContentFor(e, !0);
                    if (n) return n;
                }
                if (t) return null;
                throw new Error('"' + e + '" is not in the SourceMap.');
            }, f.prototype.generatedPositionFor = function(e) {
                for(var t = 0; t < this._sections.length; t++){
                    var r = this._sections[t];
                    if (-1 !== r.consumer.sources.indexOf(n.getArg(e, "source"))) {
                        var o = r.consumer.generatedPositionFor(e);
                        if (o) return {
                            line: o.line + (r.generatedOffset.generatedLine - 1),
                            column: o.column + (r.generatedOffset.generatedLine === o.line ? r.generatedOffset.generatedColumn - 1 : 0)
                        };
                    }
                }
                return {
                    line: null,
                    column: null
                };
            }, f.prototype._parseMappings = function(e, t) {
                this.__generatedMappings = [], this.__originalMappings = [];
                for(var r = 0; r < this._sections.length; r++)for(var o = this._sections[r], a = o.consumer._generatedMappings, i = 0; i < a.length; i++){
                    var u = a[i], c = o.consumer._sources.at(u.source);
                    null !== o.consumer.sourceRoot && (c = n.join(o.consumer.sourceRoot, c)), this._sources.add(c), c = this._sources.indexOf(c);
                    var s = o.consumer._names.at(u.name);
                    this._names.add(s), s = this._names.indexOf(s);
                    var f = {
                        source: c,
                        generatedLine: u.generatedLine + (o.generatedOffset.generatedLine - 1),
                        generatedColumn: u.generatedColumn + (o.generatedOffset.generatedLine === u.generatedLine ? o.generatedOffset.generatedColumn - 1 : 0),
                        originalLine: u.originalLine,
                        originalColumn: u.originalColumn,
                        name: s
                    };
                    this.__generatedMappings.push(f), "number" == typeof f.originalLine && this.__originalMappings.push(f);
                }
                l(this.__generatedMappings, n.compareByGeneratedPositionsDeflated), l(this.__originalMappings, n.compareByOriginalPositions);
            }, t.IndexedSourceMapConsumer = f;
        },
        function(e, t) {
            t.GREATEST_LOWER_BOUND = 1, t.LEAST_UPPER_BOUND = 2, t.search = function(e, r, n, o) {
                if (0 === r.length) return -1;
                var a = function e(r, n, o, a, i, l) {
                    var u = Math.floor((n - r) / 2) + r, c = i(o, a[u], !0);
                    return 0 === c ? u : c > 0 ? n - u > 1 ? e(u, n, o, a, i, l) : l == t.LEAST_UPPER_BOUND ? n < a.length ? n : -1 : u : u - r > 1 ? e(r, u, o, a, i, l) : l == t.LEAST_UPPER_BOUND ? u : r < 0 ? -1 : r;
                }(-1, r.length, e, r, n, o || t.GREATEST_LOWER_BOUND);
                if (a < 0) return -1;
                for(; a - 1 >= 0 && 0 === n(r[a], r[a - 1], !0);)--a;
                return a;
            };
        },
        function(e, t) {
            function r(e, t, r) {
                var n = e[t];
                e[t] = e[r], e[r] = n;
            }
            function n(e, t, o, a) {
                if (o < a) {
                    var i = o - 1;
                    r(e, (s = o, f = a, Math.round(s + Math.random() * (f - s))), a);
                    for(var l = e[a], u = o; u < a; u++)t(e[u], l) <= 0 && r(e, i += 1, u);
                    r(e, i + 1, u);
                    var c = i + 1;
                    n(e, t, o, c - 1), n(e, t, c + 1, a);
                }
                var s, f;
            }
            t.quickSort = function(e, t) {
                n(e, t, 0, e.length - 1);
            };
        },
        function(e, t, r) {
            var n = r(4).SourceMapGenerator, o = r(1), a = /(\r?\n)/, i = "$$$isSourceNode$$$";
            function l(e, t, r, n, o) {
                this.children = [], this.sourceContents = {}, this.line = null == e ? null : e, this.column = null == t ? null : t, this.source = null == r ? null : r, this.name = null == o ? null : o, this[i] = !0, null != n && this.add(n);
            }
            l.fromStringWithSourceMap = function(e, t, r) {
                var n = new l, i = e.split(a), u = 0, c = function() {
                    return e() + (e() || "");
                    function e() {
                        return u < i.length ? i[u++] : void 0;
                    }
                }, s = 1, f = 0, d = null;
                return t.eachMapping(function(e) {
                    if (null !== d) {
                        if (!(s < e.generatedLine)) {
                            var t = (r = i[u]).substr(0, e.generatedColumn - f);
                            return i[u] = r.substr(e.generatedColumn - f), f = e.generatedColumn, p(d, t), void (d = e);
                        }
                        p(d, c()), s++, f = 0;
                    }
                    for(; s < e.generatedLine;)n.add(c()), s++;
                    if (f < e.generatedColumn) {
                        var r = i[u];
                        n.add(r.substr(0, e.generatedColumn)), i[u] = r.substr(e.generatedColumn), f = e.generatedColumn;
                    }
                    d = e;
                }, this), u < i.length && (d && p(d, c()), n.add(i.splice(u).join(""))), t.sources.forEach(function(e) {
                    var a = t.sourceContentFor(e);
                    null != a && (null != r && (e = o.join(r, e)), n.setSourceContent(e, a));
                }), n;
                function p(e, t) {
                    if (null === e || void 0 === e.source) n.add(t);
                    else {
                        var a = r ? o.join(r, e.source) : e.source;
                        n.add(new l(e.originalLine, e.originalColumn, a, t, e.name));
                    }
                }
            }, l.prototype.add = function(e) {
                if (Array.isArray(e)) e.forEach(function(e) {
                    this.add(e);
                }, this);
                else {
                    if (!e[i] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
                    e && this.children.push(e);
                }
                return this;
            }, l.prototype.prepend = function(e) {
                if (Array.isArray(e)) for(var t = e.length - 1; t >= 0; t--)this.prepend(e[t]);
                else {
                    if (!e[i] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
                    this.children.unshift(e);
                }
                return this;
            }, l.prototype.walk = function(e) {
                for(var t, r = 0, n = this.children.length; r < n; r++)(t = this.children[r])[i] ? t.walk(e) : "" !== t && e(t, {
                    source: this.source,
                    line: this.line,
                    column: this.column,
                    name: this.name
                });
            }, l.prototype.join = function(e) {
                var t, r, n = this.children.length;
                if (n > 0) {
                    for(t = [], r = 0; r < n - 1; r++)t.push(this.children[r]), t.push(e);
                    t.push(this.children[r]), this.children = t;
                }
                return this;
            }, l.prototype.replaceRight = function(e, t) {
                var r = this.children[this.children.length - 1];
                return r[i] ? r.replaceRight(e, t) : "string" == typeof r ? this.children[this.children.length - 1] = r.replace(e, t) : this.children.push("".replace(e, t)), this;
            }, l.prototype.setSourceContent = function(e, t) {
                this.sourceContents[o.toSetString(e)] = t;
            }, l.prototype.walkSourceContents = function(e) {
                for(var t = 0, r = this.children.length; t < r; t++)this.children[t][i] && this.children[t].walkSourceContents(e);
                var n = Object.keys(this.sourceContents);
                for(t = 0, r = n.length; t < r; t++)e(o.fromSetString(n[t]), this.sourceContents[n[t]]);
            }, l.prototype.toString = function() {
                var e = "";
                return this.walk(function(t) {
                    e += t;
                }), e;
            }, l.prototype.toStringWithSourceMap = function(e) {
                var t = {
                    code: "",
                    line: 1,
                    column: 0
                }, r = new n(e), o = !1, a = null, i = null, l = null, u = null;
                return this.walk(function(e, n) {
                    t.code += e, null !== n.source && null !== n.line && null !== n.column ? (a === n.source && i === n.line && l === n.column && u === n.name || r.addMapping({
                        source: n.source,
                        original: {
                            line: n.line,
                            column: n.column
                        },
                        generated: {
                            line: t.line,
                            column: t.column
                        },
                        name: n.name
                    }), a = n.source, i = n.line, l = n.column, u = n.name, o = !0) : o && (r.addMapping({
                        generated: {
                            line: t.line,
                            column: t.column
                        }
                    }), a = null, o = !1);
                    for(var c = 0, s = e.length; c < s; c++)10 === e.charCodeAt(c) ? (t.line++, t.column = 0, c + 1 === s ? (a = null, o = !1) : o && r.addMapping({
                        source: n.source,
                        original: {
                            line: n.line,
                            column: n.column
                        },
                        generated: {
                            line: t.line,
                            column: t.column
                        },
                        name: n.name
                    })) : t.column++;
                }), this.walkSourceContents(function(e, t) {
                    r.setSourceContent(e, t);
                }), {
                    code: t.code,
                    map: r
                };
            }, t.SourceNode = l;
        },
        function(e, t, r) {
            "use strict";
            r.r(t), r.d(t, "setEditorHandler", function() {
                return ue;
            }), r.d(t, "reportBuildError", function() {
                return ce;
            }), r.d(t, "reportRuntimeError", function() {
                return se;
            }), r.d(t, "dismissBuildError", function() {
                return fe;
            }), r.d(t, "startReportingRuntimeErrors", function() {
                return de;
            }), r.d(t, "dismissRuntimeErrors", function() {
                return he;
            }), r.d(t, "stopReportingRuntimeErrors", function() {
                return ge;
            });
            var n = null;
            function o(e, t) {
                if (t.error) {
                    var r = t.error;
                    r instanceof Error ? e(r) : e(new Error(r));
                }
            }
            function a(e, t) {
                null === n && (n = o.bind(void 0, t), e.addEventListener("error", n));
            }
            var i = null;
            function l(e, t) {
                if (null == t || null == t.reason) return e(new Error("Unknown"));
                var r = t.reason;
                return r instanceof Error ? e(r) : e(new Error(r));
            }
            function u(e, t) {
                null === i && (i = l.bind(void 0, t), e.addEventListener("unhandledrejection", i));
            }
            var c = !1, s = 10, f = 50;
            var d = [], p = function() {
                "undefined" != typeof console && (console.reactStack = function(e) {
                    return d.push(e);
                }, console.reactStackEnd = function(e) {
                    return d.pop();
                });
            }, h = function() {
                "undefined" != typeof console && (console.reactStack = void 0, console.reactStackEnd = void 0);
            }, g = function(e, t) {
                if ("undefined" != typeof console) {
                    var r = console[e];
                    "function" == typeof r && (console[e] = function() {
                        try {
                            var e = arguments[0];
                            "string" == typeof e && d.length > 0 && t(e, d[d.length - 1]);
                        } catch (e) {
                            setTimeout(function() {
                                throw e;
                            });
                        }
                        return r.apply(this, arguments);
                    });
                }
            };
            function m(e, t) {
                return (m = Object.setPrototypeOf || function(e, t) {
                    return e.__proto__ = t, e;
                })(e, t);
            }
            function v(e, t, r) {
                return (v = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), !0;
                    } catch (e) {
                        return !1;
                    }
                }() ? Reflect.construct : function(e, t, r) {
                    var n = [
                        null
                    ];
                    n.push.apply(n, t);
                    var o = new (Function.bind.apply(e, n));
                    return r && m(o, r.prototype), o;
                }).apply(null, arguments);
            }
            function y(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for(var r = 0, n = new Array(t); r < t; r++)n[r] = e[r];
                return n;
            }
            function b(e) {
                return function(e) {
                    if (Array.isArray(e)) return y(e);
                }(e) || function(e) {
                    if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);
                }(e) || function(e, t) {
                    if (e) {
                        if ("string" == typeof e) return y(e, t);
                        var r = Object.prototype.toString.call(e).slice(8, -1);
                        return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? y(e, t) : void 0;
                    }
                }(e) || function() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
            }
            function w(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                }
            }
            function k(e, t, r) {
                return t && w(e.prototype, t), r && w(e, r), e;
            }
            function E(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }
            var S = function e(t, r) {
                var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                E(this, e), this.lineNumber = t, this.content = r, this.highlight = n;
            }, x = function() {
                function e() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, u = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, c = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, s = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : null;
                    E(this, e), t && 0 === t.indexOf("Object.") && (t = t.slice(7)), "friendlySyntaxErrorLabel" !== t && "exports.__esModule" !== t && "<anonymous>" !== t && t || (t = null), this.functionName = t, this.fileName = r, this.lineNumber = n, this.columnNumber = o, this._originalFunctionName = i, this._originalFileName = l, this._originalLineNumber = u, this._originalColumnNumber = c, this._scriptCode = a, this._originalScriptCode = s;
                }
                return k(e, [
                    {
                        key: "getFunctionName",
                        value: function() {
                            return this.functionName || "(anonymous function)";
                        }
                    },
                    {
                        key: "getSource",
                        value: function() {
                            var e = "";
                            return null != this.fileName && (e += this.fileName + ":"), null != this.lineNumber && (e += this.lineNumber + ":"), null != this.columnNumber && (e += this.columnNumber + ":"), e.slice(0, -1);
                        }
                    },
                    {
                        key: "toString",
                        value: function() {
                            var e = this.getFunctionName(), t = this.getSource();
                            return "".concat(e).concat(t ? " (".concat(t, ")") : "");
                        }
                    }
                ]), e;
            }(), _ = /\(?(.+?)(?::(\d+))?(?::(\d+))?\)?$/;
            function C(e) {
                return _.exec(e).slice(1).map(function(e) {
                    var t = Number(e);
                    return isNaN(t) ? e : t;
                });
            }
            var O = /^\s*(at|in)\s.+(:\d+)/, T = /(^|@)\S+:\d+|.+line\s+\d+\s+>\s+(eval|Function).+/;
            function P(e) {
                return e.filter(function(e) {
                    return O.test(e) || T.test(e);
                }).map(function(e) {
                    if (T.test(e)) {
                        var t = !1;
                        / > (eval|Function)/.test(e) && (e = e.replace(/ line (\d+)(?: > eval line \d+)* > (eval|Function):\d+:\d+/g, ":$1"), t = !0);
                        var r = e.split(/[@]/g), n = r.pop();
                        return v(x, [
                            r.join("@") || (t ? "eval" : null)
                        ].concat(b(C(n))));
                    }
                    -1 !== e.indexOf("(eval ") && (e = e.replace(/(\(eval at [^()]*)|(\),.*$)/g, "")), -1 !== e.indexOf("(at ") && (e = e.replace(/\(at /, "("));
                    var o = e.trim().split(/\s+/g).slice(1), a = o.pop();
                    return v(x, [
                        o.join(" ") || null
                    ].concat(b(C(a))));
                });
            }
            function L(e) {
                if (null == e) throw new Error("You cannot pass a null object.");
                if ("string" == typeof e) return P(e.split("\n"));
                if (Array.isArray(e)) return P(e);
                if ("string" == typeof e.stack) return P(e.stack.split("\n"));
                throw new Error("The error you provided does not contain a stack trace.");
            }
            var R = r(0), A = r.n(R);
            function N(e, t, r, n, o, a, i) {
                try {
                    var l = e[a](i), u = l.value;
                } catch (e) {
                    return void r(e);
                }
                l.done ? t(u) : Promise.resolve(u).then(n, o);
            }
            function j(e) {
                return function() {
                    var t = this, r = arguments;
                    return new Promise(function(n, o) {
                        var a = e.apply(t, r);
                        function i(e) {
                            N(a, n, o, i, l, "next", e);
                        }
                        function l(e) {
                            N(a, n, o, i, l, "throw", e);
                        }
                        i(void 0);
                    });
                };
            }
            var M = r(3), I = function() {
                function e(t) {
                    E(this, e), this.__source_map = t;
                }
                return k(e, [
                    {
                        key: "getOriginalPosition",
                        value: function(e, t) {
                            var r = this.__source_map.originalPositionFor({
                                line: e,
                                column: t
                            });
                            return {
                                line: r.line,
                                column: r.column,
                                source: r.source
                            };
                        }
                    },
                    {
                        key: "getGeneratedPosition",
                        value: function(e, t, r) {
                            var n = this.__source_map.generatedPositionFor({
                                source: e,
                                line: t,
                                column: r
                            });
                            return {
                                line: n.line,
                                column: n.column
                            };
                        }
                    },
                    {
                        key: "getSource",
                        value: function(e) {
                            return this.__source_map.sourceContentFor(e);
                        }
                    },
                    {
                        key: "getSources",
                        value: function() {
                            return this.__source_map.sources;
                        }
                    }
                ]), e;
            }();
            function D(e, t) {
                for(var r = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/gm, n = null;;){
                    var o = r.exec(t);
                    if (null == o) break;
                    n = o;
                }
                return n && n[1] ? Promise.resolve(n[1].toString()) : Promise.reject("Cannot find a source map directive for ".concat(e, "."));
            }
            function z(e, t) {
                return q.apply(this, arguments);
            }
            function q() {
                return (q = j(A.a.mark(function e(t, r) {
                    var n, o, a, i, l, u;
                    return A.a.wrap(function(e) {
                        for(;;)switch(e.prev = e.next){
                            case 0:
                                return e.next = 2, D(t, r);
                            case 2:
                                if (0 !== (n = e.sent).indexOf("data:")) {
                                    e.next = 14;
                                    break;
                                }
                                if (o = /^data:application\/json;([\w=:"-]+;)*base64,/, a = n.match(o)) {
                                    e.next = 8;
                                    break;
                                }
                                throw new Error("Sorry, non-base64 inline source-map encoding is not supported.");
                            case 8:
                                return n = n.substring(a[0].length), n = window.atob(n), n = JSON.parse(n), e.abrupt("return", new I(new M.SourceMapConsumer(n)));
                            case 14:
                                return i = t.lastIndexOf("/"), l = t.substring(0, i + 1) + n, e.next = 18, fetch(l).then(function(e) {
                                    return e.json();
                                });
                            case 18:
                                return u = e.sent, e.abrupt("return", new I(new M.SourceMapConsumer(u)));
                            case 20:
                            case "end":
                                return e.stop();
                        }
                    }, e);
                }))).apply(this, arguments);
            }
            function F(e, t, r) {
                "string" == typeof r && (r = r.split("\n"));
                for(var n = [], o = Math.max(0, e - 1 - t); o <= Math.min(r.length - 1, e - 1 + t); ++o)n.push(new S(o + 1, r[o], o === e - 1));
                return n;
            }
            var U = r(7);
            function B(e) {
                return H.apply(this, arguments);
            }
            function H() {
                return (H = j(A.a.mark(function e(t) {
                    var r, n, o, a = arguments;
                    return A.a.wrap(function(e) {
                        for(;;)switch(e.prev = e.next){
                            case 0:
                                return r = a.length > 1 && void 0 !== a[1] ? a[1] : 3, n = {}, o = [], t.forEach(function(e) {
                                    var t = e.fileName;
                                    null != t && -1 === o.indexOf(t) && o.push(t);
                                }), e.next = 6, Object(U.settle)(o.map(function() {
                                    var e = j(A.a.mark(function e(t) {
                                        var r, o, a;
                                        return A.a.wrap(function(e) {
                                            for(;;)switch(e.prev = e.next){
                                                case 0:
                                                    return r = 0 === t.indexOf("webpack-internal:") ? "/__get-internal-source?fileName=".concat(encodeURIComponent(t)) : t, e.next = 3, fetch(r).then(function(e) {
                                                        return e.text();
                                                    });
                                                case 3:
                                                    return o = e.sent, e.next = 6, z(t, o);
                                                case 6:
                                                    a = e.sent, n[t] = {
                                                        fileSource: o,
                                                        map: a
                                                    };
                                                case 8:
                                                case "end":
                                                    return e.stop();
                                            }
                                        }, e);
                                    }));
                                    return function(t) {
                                        return e.apply(this, arguments);
                                    };
                                }()));
                            case 6:
                                return e.abrupt("return", t.map(function(e) {
                                    var t = e.functionName, o = e.fileName, a = e.lineNumber, i = e.columnNumber, l = n[o] || {}, u = l.map, c = l.fileSource;
                                    if (null == u || null == a) return e;
                                    var s = u.getOriginalPosition(a, i), f = s.source, d = s.line, p = s.column, h = null == f ? [] : u.getSource(f);
                                    return new x(t, o, a, i, F(a, r, c), t, f, d, p, F(d, r, h));
                                }));
                            case 7:
                            case "end":
                                return e.stop();
                        }
                    }, e);
                }))).apply(this, arguments);
            }
            var $ = r(2), V = r.n($);
            function W(e, t) {
                var r = -1, n = -1;
                do ++r, n = t.indexOf(e, n + 1);
                while (-1 !== n);
                return r;
            }
            function G(e, t) {
                return Q.apply(this, arguments);
            }
            function Q() {
                return (Q = j(A.a.mark(function e(t, r) {
                    var n, o, a, i, l = arguments;
                    return A.a.wrap(function(e) {
                        for(;;)switch(e.prev = e.next){
                            case 0:
                                if (n = l.length > 2 && void 0 !== l[2] ? l[2] : 3, o = "object" == typeof t ? t.contents : null, a = "object" == typeof t ? t.uri : t, null != o) {
                                    e.next = 7;
                                    break;
                                }
                                return e.next = 6, fetch(a).then(function(e) {
                                    return e.text();
                                });
                            case 6:
                                o = e.sent;
                            case 7:
                                return e.next = 9, z(a, o);
                            case 9:
                                return i = e.sent, e.abrupt("return", r.map(function(e) {
                                    var t = e.functionName, r = e.lineNumber, l = e.columnNumber;
                                    if (null != e._originalLineNumber) return e;
                                    var u = e.fileName;
                                    if (u && (u = V.a.normalize(u.replace(/[\\]+/g, "/"))), null == u) return e;
                                    var c = u, s = i.getSources().map(function(e) {
                                        return e.replace(/[\\]+/g, "/");
                                    }).filter(function(e) {
                                        var t = (e = V.a.normalize(e)).lastIndexOf(c);
                                        return -1 !== t && t === e.length - c.length;
                                    }).map(function(e) {
                                        return {
                                            token: e,
                                            seps: W(V.a.sep, V.a.normalize(e)),
                                            penalties: W("node_modules", e) + W("~", e)
                                        };
                                    }).sort(function(e, t) {
                                        var r = Math.sign(e.seps - t.seps);
                                        return 0 !== r ? r : Math.sign(e.penalties - t.penalties);
                                    });
                                    if (s.length < 1 || null == r) return new x(null, null, null, null, null, t, c, r, l, null);
                                    var f = s[0].token, d = i.getGeneratedPosition(f, r, l), p = d.line, h = d.column, g = i.getSource(f);
                                    return new x(t, a, p, h || null, F(p, n, o || []), t, c, r, l, F(r, n, g));
                                }));
                            case 11:
                            case "end":
                                return e.stop();
                        }
                    }, e);
                }))).apply(this, arguments);
            }
            var Y = function(e) {
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 3, r = L(e);
                return (e.__unmap_source ? G(e.__unmap_source, r, t) : B(r, t)).then(function(e) {
                    return 0 === e.map(function(e) {
                        return e._originalFileName;
                    }).filter(function(e) {
                        return null != e && -1 === e.indexOf("node_modules");
                    }).length ? null : e.filter(function(e) {
                        var t = e.functionName;
                        return null == t || -1 === t.indexOf("__stack_frame_overlay_proxy_console__");
                    });
                });
            }, X = function(e) {
                return function(t) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    Y(t, r, 3).then(function(n) {
                        null != n && e({
                            error: t,
                            unhandledRejection: r,
                            contextSize: 3,
                            stackFrames: n
                        });
                    }).catch(function(e) {
                        console.log("Could not get the stack frames of error:", e);
                    });
                };
            };
            function K(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "/static/js/bundle.js", r = X(e);
                return a(window, function(e) {
                    return r(e, !1);
                }), u(window, function(e) {
                    return r(e, !0);
                }), function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f;
                    if (!c) try {
                        s = Error.stackTraceLimit, Error.stackTraceLimit = e, c = !0;
                    } catch (e) {}
                }(), p(), g("error", function(e, n) {
                    var o = function(e, t) {
                        for(var r, n, o = function(e) {
                            return e.split("\n").filter(function(e) {
                                return !e.match(/^\s*in/);
                            }).join("\n");
                        }(e), a = "", i = 0; i < t.length; ++i){
                            var l = t[i], u = l.fileName, c = l.lineNumber;
                            if (null != u && null != c && !(u === r && "number" == typeof c && "number" == typeof n && Math.abs(c - n) < 3)) {
                                r = u, n = c;
                                var s = t[i].name;
                                a += "in ".concat(s = s || "(anonymous function)", " (at ").concat(u, ":").concat(c, ")\n");
                            }
                        }
                        return {
                            message: o,
                            stack: a
                        };
                    }(e, n);
                    r({
                        message: o.message,
                        stack: o.stack,
                        __unmap_source: t
                    }, !1);
                }), function() {
                    var e;
                    !function() {
                        if (c) try {
                            Error.stackTraceLimit = s, c = !1;
                        } catch (e) {}
                    }(), e = window, null !== i && (e.removeEventListener("unhandledrejection", i), i = null), function(e) {
                        null !== n && (e.removeEventListener("error", n), n = null);
                    }(window), h();
                };
            }
            var J = {
                position: "fixed",
                top: "0",
                left: "0",
                width: "100%",
                height: "100%",
                border: "none",
                "z-index": 2147483647
            };
            var Z = '/*! For license information please see iframe-bundle.js.LICENSE.txt */\n!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=208)}([function(e,t,r){"use strict";e.exports=r(183)},function(e,t,r){var n=r(8),o=r(35).f,a=r(18),i=r(21),l=r(38),u=r(60),c=r(64);e.exports=function(e,t){var r,s,f,d,p,h=e.target,g=e.global,v=e.stat;if(r=g?n:v?n[h]||l(h,{}):(n[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=o(r,s))&&p.value:r[s],!c(g?s:h+(v?".":"#")+s,e.forced)&&void 0!==f){if(typeof d===typeof f)continue;u(d,f)}(e.sham||f&&f.sham)&&a(d,"sham",!0),i(r,s,d,e)}}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){e.exports=!1},function(e,t,r){var n=r(2),o=r(66),a=r(26),i=r(7),l=r(45),u=r(69),c=function(e,t){this.stopped=e,this.result=t};e.exports=function(e,t,r){var s,f,d,p,h,g,v,m=r&&r.that,y=!(!r||!r.AS_ENTRIES),b=!(!r||!r.IS_ITERATOR),w=!(!r||!r.INTERRUPTED),k=i(t,m,1+y+w),E=function(e){return s&&u(s),new c(!0,e)},x=function(e){return y?(n(e),w?k(e[0],e[1],E):k(e[0],e[1])):w?k(e,E):k(e)};if(b)s=e;else{if("function"!=typeof(f=l(e)))throw TypeError("Target is not iterable");if(o(f)){for(d=0,p=a(e.length);p>d;d++)if((h=x(e[d]))&&h instanceof c)return h;return new c(!1)}s=f.call(e)}for(g=s.next;!(v=g.call(s)).done;){try{h=x(v.value)}catch(e){throw u(s),e}if("object"==typeof h&&h&&h instanceof c)return h}return new c(!1)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,r){var n=r(8),o=r(40),a=r(11),i=r(31),l=r(44),u=r(67),c=o("wks"),s=n.Symbol,f=u?s:s&&s.withoutSetter||i;e.exports=function(e){return a(c,e)||(l&&a(s,e)?c[e]=s[e]:c[e]=f("Symbol."+e)),c[e]}},function(e,t,r){var n=r(5);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,r){(function(t){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof t&&t)||function(){return this}()||Function("return this")()}).call(this,r(34))},function(e,t,r){var n=r(61),o=r(11),a=r(82),i=r(14).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});o(t,e)||i(t,e,{value:a.f(e)})}},function(e,t,r){var n=r(61),o=r(8),a=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?a(n[e])||a(o[e]):n[e]&&n[e][t]||o[e]&&o[e][t]}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t,r){var n=r(16),o=r(57),a=r(2),i=r(29),l=Object.defineProperty;t.f=n?l:function(e,t,r){if(a(e),t=i(t,!0),a(r),o)try{return l(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Map.prototype.entries.call(e)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,r){var n=r(2),o=r(5),a=r(6)("species");e.exports=function(e,t){var r,i=n(e).constructor;return void 0===i||void 0==(r=n(i)[a])?t:o(r)}},function(e,t,r){var n=r(16),o=r(14),a=r(23);e.exports=n?function(e,t,r){return o.f(e,t,a(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Set.prototype.values.call(e)}},function(e,t,r){var n=r(56),o=r(37);e.exports=function(e){return n(o(e))}},function(e,t,r){var n=r(8),o=r(18),a=r(11),i=r(38),l=r(59),u=r(24),c=u.get,s=u.enforce,f=String(String).split("String");(e.exports=function(e,t,r,l){var u,c=!!l&&!!l.unsafe,d=!!l&&!!l.enumerable,p=!!l&&!!l.noTargetGet;"function"==typeof r&&("string"!=typeof t||a(r,"name")||o(r,"name",t),(u=s(r)).source||(u.source=f.join("string"==typeof t?t:""))),e!==n?(c?!p&&e[t]&&(d=!0):delete e[t],d?e[t]=r:o(e,t,r)):d?e[t]=r:i(t,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||l(this)}))},function(e,t,r){var n=r(14).f,o=r(11),a=r(6)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,a)&&n(e,a,{configurable:!0,value:t})}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,r){var n,o,a,i=r(92),l=r(8),u=r(13),c=r(18),s=r(11),f=r(39),d=r(30),p=r(25),h=l.WeakMap;if(i){var g=f.state||(f.state=new h),v=g.get,m=g.has,y=g.set;n=function(e,t){return t.facade=e,y.call(g,e,t),t},o=function(e){return v.call(g,e)||{}},a=function(e){return m.call(g,e)}}else{var b=d("state");p[b]=!0,n=function(e,t){return t.facade=e,c(e,b,t),t},o=function(e){return s(e,b)?e[b]:{}},a=function(e){return s(e,b)}}e.exports={set:n,get:o,has:a,enforce:function(e){return a(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return r}}}},function(e,t){e.exports={}},function(e,t,r){var n=r(42),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t){e.exports={}},function(e,t,r){var n=r(37);e.exports=function(e){return Object(n(e))}},function(e,t,r){var n=r(13);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can\'t convert object to primitive value")}},function(e,t,r){var n=r(40),o=r(31),a=n("keys");e.exports=function(e){return a[e]||(a[e]=o(e))}},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++r+n).toString(36)}},function(e,t,r){var n,o=r(2),a=r(99),i=r(43),l=r(25),u=r(100),c=r(58),s=r(30),f=s("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=n?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=c("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var r=i.length;r--;)delete h.prototype[i[r]];return h()};l[f]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(d.prototype=o(e),r=new d,d.prototype=null,r[f]=e):r=h(),void 0===t?r:a(r,t)}},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=[[{color:"0, 0, 0",class:"ansi-black"},{color:"187, 0, 0",class:"ansi-red"},{color:"0, 187, 0",class:"ansi-green"},{color:"187, 187, 0",class:"ansi-yellow"},{color:"0, 0, 187",class:"ansi-blue"},{color:"187, 0, 187",class:"ansi-magenta"},{color:"0, 187, 187",class:"ansi-cyan"},{color:"255,255,255",class:"ansi-white"}],[{color:"85, 85, 85",class:"ansi-bright-black"},{color:"255, 85, 85",class:"ansi-bright-red"},{color:"0, 255, 0",class:"ansi-bright-green"},{color:"255, 255, 85",class:"ansi-bright-yellow"},{color:"85, 85, 255",class:"ansi-bright-blue"},{color:"255, 85, 255",class:"ansi-bright-magenta"},{color:"85, 255, 255",class:"ansi-bright-cyan"},{color:"255, 255, 255",class:"ansi-bright-white"}]],a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.fg=this.bg=this.fg_truecolor=this.bg_truecolor=null,this.bright=0}return n(e,null,[{key:"escapeForHtml",value:function(t){return(new e).escapeForHtml(t)}},{key:"linkify",value:function(t){return(new e).linkify(t)}},{key:"ansiToHtml",value:function(t,r){return(new e).ansiToHtml(t,r)}},{key:"ansiToJson",value:function(t,r){return(new e).ansiToJson(t,r)}},{key:"ansiToText",value:function(t){return(new e).ansiToText(t)}}]),n(e,[{key:"setupPalette",value:function(){this.PALETTE_COLORS=[];for(var e=0;e<2;++e)for(var t=0;t<8;++t)this.PALETTE_COLORS.push(o[e][t].color);for(var r=[0,95,135,175,215,255],n=function(e,t,n){return r[e]+", "+r[t]+", "+r[n]},a=0;a<6;++a)for(var i=0;i<6;++i)for(var l=0;l<6;++l)this.PALETTE_COLORS.push(n(a,i,l));for(var u=8,c=0;c<24;++c,u+=10)this.PALETTE_COLORS.push(n(u,u,u))}},{key:"escapeForHtml",value:function(e){return e.replace(/[&<>]/gm,(function(e){return"&"==e?"&amp;":"<"==e?"&lt;":">"==e?"&gt;":""}))}},{key:"linkify",value:function(e){return e.replace(/(https?:\\/\\/[^\\s]+)/gm,(function(e){return\'<a href="\'+e+\'">\'+e+"</a>"}))}},{key:"ansiToHtml",value:function(e,t){return this.process(e,t,!0)}},{key:"ansiToJson",value:function(e,t){return(t=t||{}).json=!0,t.clearLine=!1,this.process(e,t,!0)}},{key:"ansiToText",value:function(e){return this.process(e,{},!1)}},{key:"process",value:function(e,t,r){var n=this,o=e.split(/\\033\\[/),a=o.shift();void 0!==t&&null!==t||(t={}),t.clearLine=/\\r/.test(e);var i=o.map((function(e){return n.processChunk(e,t,r)}));if(t&&t.json){var l=this.processChunkJson("");return l.content=a,l.clearLine=t.clearLine,i.unshift(l),t.remove_empty&&(i=i.filter((function(e){return!e.isEmpty()}))),i}return i.unshift(a),i.join("")}},{key:"processChunkJson",value:function(e,t,r){var n=(t="undefined"==typeof t?{}:t).use_classes="undefined"!=typeof t.use_classes&&t.use_classes,a=t.key=n?"class":"color",i={content:e,fg:null,bg:null,fg_truecolor:null,bg_truecolor:null,clearLine:t.clearLine,decoration:null,was_processed:!1,isEmpty:function(){return!i.content}},l=e.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);if(!l)return i;i.content=l[4];var u=l[2].split(";");if(""!==l[1]||"m"!==l[3])return i;if(!r)return i;var c=this;for(c.decoration=null;u.length>0;){var s=u.shift(),f=parseInt(s);if(isNaN(f)||0===f)c.fg=c.bg=c.decoration=null;else if(1===f)c.decoration="bold";else if(2===f)c.decoration="dim";else if(3==f)c.decoration="italic";else if(4==f)c.decoration="underline";else if(5==f)c.decoration="blink";else if(7===f)c.decoration="reverse";else if(8===f)c.decoration="hidden";else if(9===f)c.decoration="strikethrough";else if(39==f)c.fg=null;else if(49==f)c.bg=null;else if(f>=30&&f<38)c.fg=o[0][f%10][a];else if(f>=90&&f<98)c.fg=o[1][f%10][a];else if(f>=40&&f<48)c.bg=o[0][f%10][a];else if(f>=100&&f<108)c.bg=o[1][f%10][a];else if(38===f||48===f){var d=38===f;if(u.length>=1){var p=u.shift();if("5"===p&&u.length>=1){var h=parseInt(u.shift());if(h>=0&&h<=255)if(n){var g=h>=16?"ansi-palette-"+h:o[h>7?1:0][h%8].class;d?c.fg=g:c.bg=g}else this.PALETTE_COLORS||c.setupPalette(),d?c.fg=this.PALETTE_COLORS[h]:c.bg=this.PALETTE_COLORS[h]}else if("2"===p&&u.length>=3){var v=parseInt(u.shift()),m=parseInt(u.shift()),y=parseInt(u.shift());if(v>=0&&v<=255&&m>=0&&m<=255&&y>=0&&y<=255){var b=v+", "+m+", "+y;n?d?(c.fg="ansi-truecolor",c.fg_truecolor=b):(c.bg="ansi-truecolor",c.bg_truecolor=b):d?c.fg=b:c.bg=b}}}}}if(null===c.fg&&null===c.bg&&null===c.decoration)return i;return i.fg=c.fg,i.bg=c.bg,i.fg_truecolor=c.fg_truecolor,i.bg_truecolor=c.bg_truecolor,i.decoration=c.decoration,i.was_processed=!0,i}},{key:"processChunk",value:function(e,t,r){var n=this;t=t||{};var o=this.processChunkJson(e,t,r);if(t.json)return o;if(o.isEmpty())return"";if(!o.was_processed)return o.content;var a=t.use_classes,i=[],l=[],u={},c=function(e){var t=[],r=void 0;for(r in e)e.hasOwnProperty(r)&&t.push("data-"+r+\'="\'+n.escapeForHtml(e[r])+\'"\');return t.length>0?" "+t.join(" "):""};return o.fg&&(a?(l.push(o.fg+"-fg"),null!==o.fg_truecolor&&(u["ansi-truecolor-fg"]=o.fg_truecolor,o.fg_truecolor=null)):i.push("color:rgb("+o.fg+")")),o.bg&&(a?(l.push(o.bg+"-bg"),null!==o.bg_truecolor&&(u["ansi-truecolor-bg"]=o.bg_truecolor,o.bg_truecolor=null)):i.push("background-color:rgb("+o.bg+")")),o.decoration&&(a?l.push("ansi-"+o.decoration):"bold"===o.decoration?i.push("font-weight:bold"):"dim"===o.decoration?i.push("opacity:0.5"):"italic"===o.decoration?i.push("font-style:italic"):"reverse"===o.decoration?i.push("filter:invert(100%)"):"hidden"===o.decoration?i.push("visibility:hidden"):"strikethrough"===o.decoration?i.push("text-decoration:line-through"):i.push("text-decoration:"+o.decoration)),a?\'<span class="\'+l.join(" ")+\'"\'+c(u)+">"+o.content+"</span>":\'<span style="\'+i.join(";")+\'"\'+c(u)+">"+o.content+"</span>"}}]),e}();e.exports=a},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"===typeof window&&(r=window)}e.exports=r},function(e,t,r){var n=r(16),o=r(55),a=r(23),i=r(20),l=r(29),u=r(11),c=r(57),s=Object.getOwnPropertyDescriptor;t.f=n?s:function(e,t){if(e=i(e),t=l(t,!0),c)try{return s(e,t)}catch(e){}if(u(e,t))return a(!o.f.call(e,t),e[t])}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can\'t call method on "+e);return e}},function(e,t,r){var n=r(8),o=r(18);e.exports=function(e,t){try{o(n,e,t)}catch(r){n[e]=t}return t}},function(e,t,r){var n=r(8),o=r(38),a="__core-js_shared__",i=n[a]||o(a,{});e.exports=i},function(e,t,r){var n=r(3),o=r(39);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.8.3",mode:n?"pure":"global",copyright:"\xa9 2021 Denis Pushkarev (zloirock.ru)"})},function(e,t,r){var n=r(62),o=r(43).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,r){var n=r(12);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(e,t,r){var n=r(68),o=r(27),a=r(6)("iterator");e.exports=function(e){if(void 0!=e)return e[a]||e["@@iterator"]||o[n(e)]}},function(e,t,r){var n={};n[r(6)("toStringTag")]="z",e.exports="[object z]"===String(n)},function(e,t,r){"use strict";var n=r(1),o=r(102),a=r(76),i=r(72),l=r(22),u=r(18),c=r(21),s=r(6),f=r(3),d=r(27),p=r(75),h=p.IteratorPrototype,g=p.BUGGY_SAFARI_ITERATORS,v=s("iterator"),m="keys",y="values",b="entries",w=function(){return this};e.exports=function(e,t,r,s,p,k,E){o(r,t,s);var x,S,_,T=function(e){if(e===p&&N)return N;if(!g&&e in P)return P[e];switch(e){case m:case y:case b:return function(){return new r(this,e)}}return function(){return new r(this)}},C=t+" Iterator",O=!1,P=e.prototype,R=P[v]||P["@@iterator"]||p&&P[p],N=!g&&R||T(p),L="Array"==t&&P.entries||R;if(L&&(x=a(L.call(new e)),h!==Object.prototype&&x.next&&(f||a(x)===h||(i?i(x,h):"function"!=typeof x[v]&&u(x,v,w)),l(x,C,!0,!0),f&&(d[C]=w))),p==y&&R&&R.name!==y&&(O=!0,N=function(){return R.call(this)}),f&&!E||P[v]===N||u(P,v,N),d[t]=N,p)if(S={values:T(y),keys:k?N:T(m),entries:T(b)},E)for(_ in S)(g||O||!(_ in P))&&c(P,_,S[_]);else n({target:t,proto:!0,forced:g||O},S);return S}},function(e,t,r){var n=r(2),o=r(45);e.exports=function(e){var t=o(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return n(t.call(e))}},function(e,t,r){var n=r(36);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){"use strict";var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,l,u=i(e),c=1;c<arguments.length;c++){for(var s in r=Object(arguments[c]))o.call(r,s)&&(u[s]=r[s]);if(n){l=n(r);for(var f=0;f<l.length;f++)a.call(r,l[f])&&(u[l[f]]=r[l[f]])}}return u}},function(e,t){var r,n,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"===typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"===typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],s=!1,f=-1;function d(){s&&u&&(s=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=l(d);s=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function g(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||s||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){var n=r(191);e.exports=function(e,t){var r;if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=n(e))||t&&e&&"number"===typeof e.length){r&&(e=r);var o=0,a=function(){};return{s:a,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,u=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return l=e.done,e},e:function(e){u=!0,i=e},f:function(){try{l||null==r.return||r.return()}finally{if(u)throw i}}}}},function(e,t,r){"use strict";!function e(){if("undefined"!==typeof{}&&"function"===typeof{}.checkDCE)try{({}).checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(184)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(64),i=r(21),l=r(65),u=r(4),c=r(70),s=r(13),f=r(12),d=r(71),p=r(22),h=r(97);e.exports=function(e,t,r){var g=-1!==e.indexOf("Map"),v=-1!==e.indexOf("Weak"),m=g?"set":"add",y=o[e],b=y&&y.prototype,w=y,k={},E=function(e){var t=b[e];i(b,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return v&&!s(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:function(e,r){return t.call(this,0===e?0:e,r),this})};if(a(e,"function"!=typeof y||!(v||b.forEach&&!f((function(){(new y).entries().next()})))))w=r.getConstructor(t,e,g,m),l.REQUIRED=!0;else if(a(e,!0)){var x=new w,S=x[m](v?{}:-0,1)!=x,_=f((function(){x.has(1)})),T=d((function(e){new y(e)})),C=!v&&f((function(){for(var e=new y,t=5;t--;)e[m](t,t);return!e.has(-0)}));T||((w=t((function(t,r){c(t,w,e);var n=h(new y,t,w);return void 0!=r&&u(r,n[m],{that:n,AS_ENTRIES:g}),n}))).prototype=b,b.constructor=w),(_||C)&&(E("delete"),E("has"),g&&E("get")),(C||S)&&E(m),v&&b.clear&&delete b.clear}return k[e]=w,n({global:!0,forced:w!=y},k),p(w,e),v||r.setStrong(w,e,g),w}},function(e,t,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!n.call({1:2},1);t.f=a?function(e){var t=o(this,e);return!!t&&t.enumerable}:n},function(e,t,r){var n=r(12),o=r(36),a="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?a.call(e,""):Object(e)}:Object},function(e,t,r){var n=r(16),o=r(12),a=r(58);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(8),o=r(13),a=n.document,i=o(a)&&o(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},function(e,t,r){var n=r(39),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return o.call(e)}),e.exports=n.inspectSource},function(e,t,r){var n=r(11),o=r(93),a=r(35),i=r(14);e.exports=function(e,t){for(var r=o(t),l=i.f,u=a.f,c=0;c<r.length;c++){var s=r[c];n(e,s)||l(e,s,u(t,s))}}},function(e,t,r){var n=r(8);e.exports=n},function(e,t,r){var n=r(11),o=r(20),a=r(94).indexOf,i=r(25);e.exports=function(e,t){var r,l=o(e),u=0,c=[];for(r in l)!n(i,r)&&n(l,r)&&c.push(r);for(;t.length>u;)n(l,r=t[u++])&&(~a(c,r)||c.push(r));return c}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(12),o=/#|\\.prototype\\./,a=function(e,t){var r=l[i(e)];return r==c||r!=u&&("function"==typeof t?n(t):!!t)},i=a.normalize=function(e){return String(e).replace(o,".").toLowerCase()},l=a.data={},u=a.NATIVE="N",c=a.POLYFILL="P";e.exports=a},function(e,t,r){var n=r(25),o=r(13),a=r(11),i=r(14).f,l=r(31),u=r(96),c=l("meta"),s=0,f=Object.isExtensible||function(){return!0},d=function(e){i(e,c,{value:{objectID:"O"+ ++s,weakData:{}}})},p=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,c)){if(!f(e))return"F";if(!t)return"E";d(e)}return e[c].objectID},getWeakData:function(e,t){if(!a(e,c)){if(!f(e))return!0;if(!t)return!1;d(e)}return e[c].weakData},onFreeze:function(e){return u&&p.REQUIRED&&f(e)&&!a(e,c)&&d(e),e}};n[c]=!0},function(e,t,r){var n=r(6),o=r(27),a=n("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[a]===e)}},function(e,t,r){var n=r(44);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,r){var n=r(46),o=r(36),a=r(6)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=n?o:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?r:i?o(t):"Object"==(n=o(t))&&"function"==typeof t.callee?"Arguments":n}},function(e,t,r){var n=r(2);e.exports=function(e){var t=e.return;if(void 0!==t)return n(t.call(e)).value}},function(e,t){e.exports=function(e,t,r){if(!(e instanceof t))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return e}},function(e,t,r){var n=r(6)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},e(a)}catch(e){}return r}},function(e,t,r){var n=r(2),o=r(98);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),t=r instanceof Array}catch(e){}return function(r,a){return n(r),o(a),t?e.call(r,a):r.__proto__=a,r}}():void 0)},function(e,t,r){"use strict";var n=r(14).f,o=r(32),a=r(101),i=r(7),l=r(70),u=r(4),c=r(47),s=r(104),f=r(16),d=r(65).fastKey,p=r(24),h=p.set,g=p.getterFor;e.exports={getConstructor:function(e,t,r,c){var s=e((function(e,n){l(e,s,t),h(e,{type:t,index:o(null),first:void 0,last:void 0,size:0}),f||(e.size=0),void 0!=n&&u(n,e[c],{that:e,AS_ENTRIES:r})})),p=g(t),v=function(e,t,r){var n,o,a=p(e),i=m(e,t);return i?i.value=r:(a.last=i={index:o=d(t,!0),key:t,value:r,previous:n=a.last,next:void 0,removed:!1},a.first||(a.first=i),n&&(n.next=i),f?a.size++:e.size++,"F"!==o&&(a.index[o]=i)),e},m=function(e,t){var r,n=p(e),o=d(t);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key==t)return r};return a(s.prototype,{clear:function(){for(var e=p(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=this,r=p(t),n=m(t,e);if(n){var o=n.next,a=n.previous;delete r.index[n.index],n.removed=!0,a&&(a.next=o),o&&(o.previous=a),r.first==n&&(r.first=o),r.last==n&&(r.last=a),f?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=p(this),n=i(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!m(this,e)}}),a(s.prototype,r?{get:function(e){var t=m(this,e);return t&&t.value},set:function(e,t){return v(this,0===e?0:e,t)}}:{add:function(e){return v(this,e=0===e?0:e,e)}}),f&&n(s.prototype,"size",{get:function(){return p(this).size}}),s},setStrong:function(e,t,r){var n=t+" Iterator",o=g(t),a=g(n);c(e,t,(function(e,t){h(this,{type:n,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=a(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?"keys"==t?{value:r.key,done:!1}:"values"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),s(t)}}},function(e,t,r){var n=r(62),o=r(43);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){"use strict";var n,o,a,i=r(12),l=r(76),u=r(18),c=r(11),s=r(6),f=r(3),d=s("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(o=l(l(a)))!==Object.prototype&&(n=o):p=!0);var h=void 0==n||i((function(){var e={};return n[d].call(e)!==e}));h&&(n={}),f&&!h||c(n,d)||u(n,d,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},function(e,t,r){var n=r(11),o=r(28),a=r(30),i=r(103),l=a("IE_PROTO"),u=Object.prototype;e.exports=i?Object.getPrototypeOf:function(e){return e=o(e),n(e,l)?e[l]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,r){var n=r(46),o=r(21),a=r(105);n||o(Object.prototype,"toString",a,{unsafe:!0})},function(e,t,r){"use strict";var n=r(107).charAt,o=r(24),a=r(47),i="String Iterator",l=o.set,u=o.getterFor(i);a(String,"String",(function(e){l(this,{type:i,string:String(e),index:0})}),(function(){var e,t=u(this),r=t.string,o=t.index;return o>=r.length?{value:void 0,done:!0}:(e=n(r,o),t.index+=e.length,{value:e,done:!1})}))},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e,t=n(this),r=o(t.delete),a=!0,i=0,l=arguments.length;i<l;i++)e=r.call(t,arguments[i]),a=a&&e;return!!a}},function(e,t,r){"use strict";var n=r(5),o=r(7),a=r(4);e.exports=function(e){var t,r,i,l,u=arguments.length,c=u>1?arguments[1]:void 0;return n(this),(t=void 0!==c)&&n(c),void 0==e?new this:(r=[],t?(i=0,l=o(c,u>2?arguments[2]:void 0,2),a(e,(function(e){r.push(l(e,i++))}))):a(e,r.push,{that:r}),new this(r))}},function(e,t,r){"use strict";e.exports=function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}},function(e,t,r){var n=r(6);t.f=n},function(e,t,r){var n=r(13),o=r(49),a=r(6)("species");e.exports=function(e,t){var r;return o(e)&&("function"!=typeof(r=e.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[a])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)}},function(e,t,r){"use strict";var n=r(29),o=r(14),a=r(23);e.exports=function(e,t,r){var i=n(t);i in e?o.f(e,i,a(0,r)):e[i]=r}},function(e,t,r){var n,o,a=r(8),i=r(168),l=a.process,u=l&&l.versions,c=u&&u.v8;c?o=(n=c.split("."))[0]+n[1]:i&&(!(n=i.match(/Edge\\/(\\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\\/(\\d+)/))&&(o=n[1]),e.exports=o&&+o},function(e,t,r){"use strict";var n=r(178);function o(){}var a=null,i={};function l(e){if("object"!==typeof this)throw new TypeError("Promises must be constructed via new");if("function"!==typeof e)throw new TypeError("Promise constructor\'s argument is not a function");this._U=0,this._V=0,this._W=null,this._X=null,e!==o&&p(e,this)}function u(e,t){for(;3===e._V;)e=e._W;if(l._Y&&l._Y(e),0===e._V)return 0===e._U?(e._U=1,void(e._X=t)):1===e._U?(e._U=2,void(e._X=[e._X,t])):void e._X.push(t);!function(e,t){n((function(){var r=1===e._V?t.onFulfilled:t.onRejected;if(null!==r){var n=function(e,t){try{return e(t)}catch(e){return a=e,i}}(r,e._W);n===i?s(t.promise,a):c(t.promise,n)}else 1===e._V?c(t.promise,e._W):s(t.promise,e._W)}))}(e,t)}function c(e,t){if(t===e)return s(e,new TypeError("A promise cannot be resolved with itself."));if(t&&("object"===typeof t||"function"===typeof t)){var r=function(e){try{return e.then}catch(e){return a=e,i}}(t);if(r===i)return s(e,a);if(r===e.then&&t instanceof l)return e._V=3,e._W=t,void f(e);if("function"===typeof r)return void p(r.bind(t),e)}e._V=1,e._W=t,f(e)}function s(e,t){e._V=2,e._W=t,l._Z&&l._Z(e,t),f(e)}function f(e){if(1===e._U&&(u(e,e._X),e._X=null),2===e._U){for(var t=0;t<e._X.length;t++)u(e,e._X[t]);e._X=null}}function d(e,t,r){this.onFulfilled="function"===typeof e?e:null,this.onRejected="function"===typeof t?t:null,this.promise=r}function p(e,t){var r=!1,n=function(e,t,r){try{e(t,r)}catch(e){return a=e,i}}(e,(function(e){r||(r=!0,c(t,e))}),(function(e){r||(r=!0,s(t,e))}));r||n!==i||(r=!0,s(t,a))}e.exports=l,l._Y=null,l._Z=null,l._0=o,l.prototype.then=function(e,t){if(this.constructor!==l)return function(e,t,r){return new e.constructor((function(n,a){var i=new l(o);i.then(n,a),u(e,new d(t,r,i))}))}(this,e,t);var r=new l(o);return u(this,new d(e,t,r)),r}},function(e,t,r){var n=r(204),o={};for(var a in n)n.hasOwnProperty(a)&&(o[n[a]]=a);var i=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var l in i)if(i.hasOwnProperty(l)){if(!("channels"in i[l]))throw new Error("missing channels property: "+l);if(!("labels"in i[l]))throw new Error("missing channel labels property: "+l);if(i[l].labels.length!==i[l].channels)throw new Error("channel and label counts mismatch: "+l);var u=i[l].channels,c=i[l].labels;delete i[l].channels,delete i[l].labels,Object.defineProperty(i[l],"channels",{value:u}),Object.defineProperty(i[l],"labels",{value:c})}i.rgb.hsl=function(e){var t,r,n=e[0]/255,o=e[1]/255,a=e[2]/255,i=Math.min(n,o,a),l=Math.max(n,o,a),u=l-i;return l===i?t=0:n===l?t=(o-a)/u:o===l?t=2+(a-n)/u:a===l&&(t=4+(n-o)/u),(t=Math.min(60*t,360))<0&&(t+=360),r=(i+l)/2,[t,100*(l===i?0:r<=.5?u/(l+i):u/(2-l-i)),100*r]},i.rgb.hsv=function(e){var t,r,n,o,a,i=e[0]/255,l=e[1]/255,u=e[2]/255,c=Math.max(i,l,u),s=c-Math.min(i,l,u),f=function(e){return(c-e)/6/s+.5};return 0===s?o=a=0:(a=s/c,t=f(i),r=f(l),n=f(u),i===c?o=n-r:l===c?o=1/3+t-n:u===c&&(o=2/3+r-t),o<0?o+=1:o>1&&(o-=1)),[360*o,100*a,100*c]},i.rgb.hwb=function(e){var t=e[0],r=e[1],n=e[2];return[i.rgb.hsl(e)[0],100*(1/255*Math.min(t,Math.min(r,n))),100*(n=1-1/255*Math.max(t,Math.max(r,n)))]},i.rgb.cmyk=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255;return[100*((1-r-(t=Math.min(1-r,1-n,1-o)))/(1-t)||0),100*((1-n-t)/(1-t)||0),100*((1-o-t)/(1-t)||0),100*t]},i.rgb.keyword=function(e){var t=o[e];if(t)return t;var r,a,i,l=1/0;for(var u in n)if(n.hasOwnProperty(u)){var c=n[u],s=(a=e,i=c,Math.pow(a[0]-i[0],2)+Math.pow(a[1]-i[1],2)+Math.pow(a[2]-i[2],2));s<l&&(l=s,r=u)}return r},i.keyword.rgb=function(e){return n[e]},i.rgb.xyz=function(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*r+.0722*n),100*(.0193*t+.1192*r+.9505*n)]},i.rgb.lab=function(e){var t=i.rgb.xyz(e),r=t[0],n=t[1],o=t[2];return n/=100,o/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(r-n),200*(n-(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116))]},i.hsl.rgb=function(e){var t,r,n,o,a,i=e[0]/360,l=e[1]/100,u=e[2]/100;if(0===l)return[a=255*u,a,a];t=2*u-(r=u<.5?u*(1+l):u+l-u*l),o=[0,0,0];for(var c=0;c<3;c++)(n=i+1/3*-(c-1))<0&&n++,n>1&&n--,a=6*n<1?t+6*(r-t)*n:2*n<1?r:3*n<2?t+(r-t)*(2/3-n)*6:t,o[c]=255*a;return o},i.hsl.hsv=function(e){var t=e[0],r=e[1]/100,n=e[2]/100,o=r,a=Math.max(n,.01);return r*=(n*=2)<=1?n:2-n,o*=a<=1?a:2-a,[t,100*(0===n?2*o/(a+o):2*r/(n+r)),100*((n+r)/2)]},i.hsv.rgb=function(e){var t=e[0]/60,r=e[1]/100,n=e[2]/100,o=Math.floor(t)%6,a=t-Math.floor(t),i=255*n*(1-r),l=255*n*(1-r*a),u=255*n*(1-r*(1-a));switch(n*=255,o){case 0:return[n,u,i];case 1:return[l,n,i];case 2:return[i,n,u];case 3:return[i,l,n];case 4:return[u,i,n];case 5:return[n,i,l]}},i.hsv.hsl=function(e){var t,r,n,o=e[0],a=e[1]/100,i=e[2]/100,l=Math.max(i,.01);return n=(2-a)*i,r=a*l,[o,100*(r=(r/=(t=(2-a)*l)<=1?t:2-t)||0),100*(n/=2)]},i.hwb.rgb=function(e){var t,r,n,o,a,i,l,u=e[0]/360,c=e[1]/100,s=e[2]/100,f=c+s;switch(f>1&&(c/=f,s/=f),n=6*u-(t=Math.floor(6*u)),0!==(1&t)&&(n=1-n),o=c+n*((r=1-s)-c),t){default:case 6:case 0:a=r,i=o,l=c;break;case 1:a=o,i=r,l=c;break;case 2:a=c,i=r,l=o;break;case 3:a=c,i=o,l=r;break;case 4:a=o,i=c,l=r;break;case 5:a=r,i=c,l=o}return[255*a,255*i,255*l]},i.cmyk.rgb=function(e){var t=e[0]/100,r=e[1]/100,n=e[2]/100,o=e[3]/100;return[255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o)),255*(1-Math.min(1,n*(1-o)+o))]},i.xyz.rgb=function(e){var t,r,n,o=e[0]/100,a=e[1]/100,i=e[2]/100;return r=-.9689*o+1.8758*a+.0415*i,n=.0557*o+-.204*a+1.057*i,t=(t=3.2406*o+-1.5372*a+-.4986*i)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,[255*(t=Math.min(Math.max(0,t),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]},i.xyz.lab=function(e){var t=e[0],r=e[1],n=e[2];return r/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(t-r),200*(r-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]},i.lab.xyz=function(e){var t,r,n,o=e[0];t=e[1]/500+(r=(o+16)/116),n=r-e[2]/200;var a=Math.pow(r,3),i=Math.pow(t,3),l=Math.pow(n,3);return r=a>.008856?a:(r-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,n=l>.008856?l:(n-16/116)/7.787,[t*=95.047,r*=100,n*=108.883]},i.lab.lch=function(e){var t,r=e[0],n=e[1],o=e[2];return(t=360*Math.atan2(o,n)/2/Math.PI)<0&&(t+=360),[r,Math.sqrt(n*n+o*o),t]},i.lch.lab=function(e){var t,r=e[0],n=e[1];return t=e[2]/360*2*Math.PI,[r,n*Math.cos(t),n*Math.sin(t)]},i.rgb.ansi16=function(e){var t=e[0],r=e[1],n=e[2],o=1 in arguments?arguments[1]:i.rgb.hsv(e)[2];if(0===(o=Math.round(o/50)))return 30;var a=30+(Math.round(n/255)<<2|Math.round(r/255)<<1|Math.round(t/255));return 2===o&&(a+=60),a},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){var t=e[0],r=e[1],n=e[2];return t===r&&r===n?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(r/255*5)+Math.round(n/255*5)},i.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var r=.5*(1+~~(e>50));return[(1&t)*r*255,(t>>1&1)*r*255,(t>>2&1)*r*255]},i.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var r;return e-=16,[Math.floor(e/36)/5*255,Math.floor((r=e%36)/6)/5*255,r%6/5*255]},i.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var r=t[0];3===t[0].length&&(r=r.split("").map((function(e){return e+e})).join(""));var n=parseInt(r,16);return[n>>16&255,n>>8&255,255&n]},i.rgb.hcg=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255,a=Math.max(Math.max(r,n),o),i=Math.min(Math.min(r,n),o),l=a-i;return t=l<=0?0:a===r?(n-o)/l%6:a===n?2+(o-r)/l:4+(r-n)/l+4,t/=6,[360*(t%=1),100*l,100*(l<1?i/(1-l):0)]},i.hsl.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=1,o=0;return(n=r<.5?2*t*r:2*t*(1-r))<1&&(o=(r-.5*n)/(1-n)),[e[0],100*n,100*o]},i.hsv.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=t*r,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.hcg.rgb=function(e){var t=e[0]/360,r=e[1]/100,n=e[2]/100;if(0===r)return[255*n,255*n,255*n];var o,a=[0,0,0],i=t%1*6,l=i%1,u=1-l;switch(Math.floor(i)){case 0:a[0]=1,a[1]=l,a[2]=0;break;case 1:a[0]=u,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=l;break;case 3:a[0]=0,a[1]=u,a[2]=1;break;case 4:a[0]=l,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=u}return o=(1-r)*n,[255*(r*a[0]+o),255*(r*a[1]+o),255*(r*a[2]+o)]},i.hcg.hsv=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t),n=0;return r>0&&(n=t/r),[e[0],100*n,100*r]},i.hcg.hsl=function(e){var t=e[1]/100,r=e[2]/100*(1-t)+.5*t,n=0;return r>0&&r<.5?n=t/(2*r):r>=.5&&r<1&&(n=t/(2*(1-r))),[e[0],100*n,100*r]},i.hcg.hwb=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t);return[e[0],100*(r-t),100*(1-r)]},i.hwb.hcg=function(e){var t=e[1]/100,r=1-e[2]/100,n=r-t,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=i.gray.hsv=function(e){return[0,0,e[0]]},i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),r=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(r.length)+r},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(187);t.XmlEntities=n.XmlEntities;var o=r(188);t.Html4Entities=o.Html4Entities;var a=r(189);t.Html5Entities=a.Html5Entities,t.AllHtmlEntities=a.Html5Entities},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.codeFrameColumns=c,t.default=function(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!a){a=!0;var i="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(e.emitWarning)e.emitWarning(i,"DeprecationWarning");else{var l=new Error(i);l.name="DeprecationWarning",console.warn(new Error(i))}}var u={start:{column:n=Math.max(n,0),line:r}};return c(t,u,o)};var n=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=n?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=e[a]}r.default=e,t&&t.set(e,r);return r}(r(190));function o(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}var a=!1;function i(e){return{gutter:e.grey,marker:e.red.bold,message:e.red.bold}}var l=/\\r\\n|[\\n\\r\\u2028\\u2029]/;function u(e,t,r){var n=Object.assign({column:0,line:-1},e.start),o=Object.assign({},n,e.end),a=r||{},i=a.linesAbove,l=void 0===i?2:i,u=a.linesBelow,c=void 0===u?3:u,s=n.line,f=n.column,d=o.line,p=o.column,h=Math.max(s-(l+1),0),g=Math.min(t.length,d+c);-1===s&&(h=0),-1===d&&(g=t.length);var v=d-s,m={};if(v)for(var y=0;y<=v;y++){var b=y+s;if(f)if(0===y){var w=t[b-1].length;m[b]=[f,w-f+1]}else if(y===v)m[b]=[0,p];else{var k=t[b-y].length;m[b]=[0,k]}else m[b]=!0}else m[s]=f===p?!f||[f,0]:[f,p-f];return{start:h,end:g,markerLines:m}}function c(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=(r.highlightCode||r.forceColor)&&(0,n.shouldHighlight)(r),a=(0,n.getChalk)(r),c=i(a),s=function(e,t){return o?e(t):t},f=e.split(l),d=u(t,f,r),p=d.start,h=d.end,g=d.markerLines,v=t.start&&"number"===typeof t.start.column,m=String(h).length,y=o?(0,n.default)(e,r):e,b=y.split(l).slice(p,h).map((function(e,t){var n=p+1+t,o=" ".concat(n).slice(-m),a=" ".concat(o," | "),i=g[n],l=!g[n+1];if(i){var u="";if(Array.isArray(i)){var f=e.slice(0,Math.max(i[0]-1,0)).replace(/[^\\t]/g," "),d=i[1]||1;u=["\\n ",s(c.gutter,a.replace(/\\d/g," ")),f,s(c.marker,"^").repeat(d)].join(""),l&&r.message&&(u+=" "+s(c.message,r.message))}return[s(c.marker,">"),s(c.gutter,a),e,u].join("")}return" ".concat(s(c.gutter,a)).concat(e)})).join("\\n");return r.message&&!v&&(b="".concat(" ".repeat(m+1)).concat(r.message,"\\n").concat(b)),o?a.reset(b):b}}).call(this,r(51))},function(e,t,r){"use strict";r(91),r(77),r(106),r(78),r(108),r(109),r(110),r(111),r(112),r(113),r(114),r(115),r(117),r(118),r(119),r(120),r(121),r(122),r(123),r(124),r(125),r(126),r(128),r(129),r(130),r(131),r(132),r(133),r(134),r(135),r(136),r(137),r(138),r(139),r(140),r(141),r(142),r(143),r(144),r(145),r(149),r(181).polyfill()},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(8),o=r(59),a=n.WeakMap;e.exports="function"===typeof a&&/native code/.test(o(a))},function(e,t,r){var n=r(10),o=r(41),a=r(63),i=r(2);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(i(e)),r=a.f;return r?t.concat(r(e)):t}},function(e,t,r){var n=r(20),o=r(26),a=r(95),i=function(e){return function(t,r,i){var l,u=n(t),c=o(u.length),s=a(i,c);if(e&&r!=r){for(;c>s;)if((l=u[s++])!=l)return!0}else for(;c>s;s++)if((e||s in u)&&u[s]===r)return e||s||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},function(e,t,r){var n=r(42),o=Math.max,a=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):a(r,t)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,t,r){var n=r(13),o=r(72);e.exports=function(e,t,r){var a,i;return o&&"function"==typeof(a=t.constructor)&&a!==r&&n(i=a.prototype)&&i!==r.prototype&&o(e,i),e}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e)&&null!==e)throw TypeError("Can\'t set "+String(e)+" as a prototype");return e}},function(e,t,r){var n=r(16),o=r(14),a=r(2),i=r(74);e.exports=n?Object.defineProperties:function(e,t){a(e);for(var r,n=i(t),l=n.length,u=0;l>u;)o.f(e,r=n[u++],t[r]);return e}},function(e,t,r){var n=r(10);e.exports=n("document","documentElement")},function(e,t,r){var n=r(21);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},function(e,t,r){"use strict";var n=r(75).IteratorPrototype,o=r(32),a=r(23),i=r(22),l=r(27),u=function(){return this};e.exports=function(e,t,r){var c=t+" Iterator";return e.prototype=o(n,{next:a(1,r)}),i(e,c,!1,!0),l[c]=u,e}},function(e,t,r){var n=r(12);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,r){"use strict";var n=r(10),o=r(14),a=r(6),i=r(16),l=a("species");e.exports=function(e){var t=n(e),r=o.f;i&&t&&!t[l]&&r(t,l,{configurable:!0,get:function(){return this}})}},function(e,t,r){"use strict";var n=r(46),o=r(68);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(42),o=r(37),a=function(e){return function(t,r){var a,i,l=String(o(t)),u=n(r),c=l.length;return u<0||u>=c?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===c||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):a:e?l.slice(u,u+2):i-56320+(a-55296<<10)+65536}};e.exports={codeAt:a(!1),charAt:a(!0)}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Map",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r,o){if(!n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){n(r,e,t)&&d.call(o,e,r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{findKey:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Map",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{groupBy:function(e,t){var r=new this;a(t);var n=a(r.has),i=a(r.get),l=a(r.set);return o(e,(function(e){var o=t(e);n.call(r,o)?i.call(r,o).push(e):l.call(r,o,[e])})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(116),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{includes:function(e){return u(i(a(this)),(function(t,r,n){if(l(r,e))return n()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{keyBy:function(e,t){var r=new this;a(t);var n=a(r.set);return o(e,(function(e){n.call(r,t(e),e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{keyOf:function(e){return l(i(a(this)),(function(t,r,n){if(r===e)return n(t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapKeys:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,n(r,e,t),r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapValues:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,e,n(r,e,t))}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{merge:function(e){for(var t=a(this),r=i(t.set),n=0;n<arguments.length;)l(arguments[n++],r,{that:t,AS_ENTRIES:!0});return t}})},function(e,t,r){r(1)({target:"Map",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r,a){n?(n=!1,o=a):o=e(o,a,r,t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty map with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5);n({target:"Map",proto:!0,real:!0,forced:o},{update:function(e,t){var r=a(this),n=arguments.length;i(t);var o=r.has(e);if(!o&&n<3)throw TypeError("Updating absent value");var l=o?r.get(e):i(n>2?arguments[2]:void 0)(e,r);return r.set(e,t(l,e,r)),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(127);n({target:"Set",proto:!0,real:!0,forced:o},{addAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e=n(this),t=o(e.add),r=0,a=arguments.length;r<a;r++)t.call(e,arguments[r]);return e}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Set",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{difference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete);return c(e,(function(e){n.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r){if(!n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){n(e,e,t)&&d.call(o,e)}),{IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r(e)}),{IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Set",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{intersection:function(e){var t=i(this),r=new(u(t,a("Set"))),n=l(t.has),o=l(r.add);return c(e,(function(e){n.call(t,e)&&o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isDisjointFrom:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!0===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(48),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSubsetOf:function(e){var t=u(this),r=i(e),n=r.has;return"function"!=typeof n&&(r=new(a("Set"))(e),n=l(r.has)),!c(t,(function(e,t){if(!1===n.call(r,e))return t()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSupersetOf:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!1===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(19),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{join:function(e){var t=a(this),r=i(t),n=void 0===e?",":String(e),o=[];return l(r,o.push,{that:o,IS_ITERATOR:!0}),o.join(n)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{map:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){d.call(o,n(e,e,t))}),{IS_ITERATOR:!0}),o}})},function(e,t,r){r(1)({target:"Set",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r){n?(n=!1,o=r):o=e(o,r,r,t)}),{IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty set with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{symmetricDifference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete),o=l(r.add);return c(e,(function(e){n.call(r,e)||o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{union:function(e){var t=i(this),r=new(u(t,a("Set")))(t);return c(e,l(r.add),{that:r}),r}})},function(e,t,r){var n=r(8),o=r(146),a=r(147),i=r(18),l=r(6),u=l("iterator"),c=l("toStringTag"),s=a.values;for(var f in o){var d=n[f],p=d&&d.prototype;if(p){if(p[u]!==s)try{i(p,u,s)}catch(e){p[u]=s}if(p[c]||i(p,c,f),o[f])for(var h in a)if(p[h]!==a[h])try{i(p,h,a[h])}catch(e){p[h]=a[h]}}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,r){"use strict";var n=r(20),o=r(148),a=r(27),i=r(24),l=r(47),u="Array Iterator",c=i.set,s=i.getterFor(u);e.exports=l(Array,"Array",(function(e,t){c(this,{type:u,target:n(e),index:0,kind:t})}),(function(){var e=s(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values"),a.Arguments=a.Array,o("keys"),o("values"),o("entries")},function(e,t,r){var n=r(6),o=r(32),a=r(14),i=n("unscopables"),l=Array.prototype;void 0==l[i]&&a.f(l,i,{configurable:!0,value:o(null)}),e.exports=function(e){l[i][e]=!0}},function(e,t,r){"use strict";r(150),r(153),r(154),r(155),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(169),r(172),r(173),r(77),r(78),r(174),r(175),r(176),"undefined"===typeof Promise&&(r(177).enable(),self.Promise=r(179)),"undefined"!==typeof window&&r(180),Object.assign=r(50)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(10),i=r(3),l=r(16),u=r(44),c=r(67),s=r(12),f=r(11),d=r(49),p=r(13),h=r(2),g=r(28),v=r(20),m=r(29),y=r(23),b=r(32),w=r(74),k=r(41),E=r(151),x=r(63),S=r(35),_=r(14),T=r(55),C=r(18),O=r(21),P=r(40),R=r(30),N=r(25),L=r(31),A=r(6),I=r(82),j=r(9),M=r(22),D=r(24),q=r(152).forEach,z=R("hidden"),U="Symbol",F=A("toPrimitive"),B=D.set,V=D.getterFor(U),H=Object.prototype,W=o.Symbol,$=a("JSON","stringify"),G=S.f,Q=_.f,Y=E.f,K=T.f,X=P("symbols"),J=P("op-symbols"),Z=P("string-to-symbol-registry"),ee=P("symbol-to-string-registry"),te=P("wks"),re=o.QObject,ne=!re||!re.prototype||!re.prototype.findChild,oe=l&&s((function(){return 7!=b(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=G(H,t);n&&delete H[t],Q(e,t,r),n&&e!==H&&Q(H,t,n)}:Q,ae=function(e,t){var r=X[e]=b(W.prototype);return B(r,{type:U,tag:e,description:t}),l||(r.description=t),r},ie=c?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof W},le=function(e,t,r){e===H&&le(J,t,r),h(e);var n=m(t,!0);return h(r),f(X,n)?(r.enumerable?(f(e,z)&&e[z][n]&&(e[z][n]=!1),r=b(r,{enumerable:y(0,!1)})):(f(e,z)||Q(e,z,y(1,{})),e[z][n]=!0),oe(e,n,r)):Q(e,n,r)},ue=function(e,t){h(e);var r=v(t),n=w(r).concat(de(r));return q(n,(function(t){l&&!ce.call(r,t)||le(e,t,r[t])})),e},ce=function(e){var t=m(e,!0),r=K.call(this,t);return!(this===H&&f(X,t)&&!f(J,t))&&(!(r||!f(this,t)||!f(X,t)||f(this,z)&&this[z][t])||r)},se=function(e,t){var r=v(e),n=m(t,!0);if(r!==H||!f(X,n)||f(J,n)){var o=G(r,n);return!o||!f(X,n)||f(r,z)&&r[z][n]||(o.enumerable=!0),o}},fe=function(e){var t=Y(v(e)),r=[];return q(t,(function(e){f(X,e)||f(N,e)||r.push(e)})),r},de=function(e){var t=e===H,r=Y(t?J:v(e)),n=[];return q(r,(function(e){!f(X,e)||t&&!f(H,e)||n.push(X[e])})),n};(u||(O((W=function(){if(this instanceof W)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=L(e),r=function e(r){this===H&&e.call(J,r),f(this,z)&&f(this[z],t)&&(this[z][t]=!1),oe(this,t,y(1,r))};return l&&ne&&oe(H,t,{configurable:!0,set:r}),ae(t,e)}).prototype,"toString",(function(){return V(this).tag})),O(W,"withoutSetter",(function(e){return ae(L(e),e)})),T.f=ce,_.f=le,S.f=se,k.f=E.f=fe,x.f=de,I.f=function(e){return ae(A(e),e)},l&&(Q(W.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),i||O(H,"propertyIsEnumerable",ce,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:W}),q(w(te),(function(e){j(e)})),n({target:U,stat:!0,forced:!u},{for:function(e){var t=String(e);if(f(Z,t))return Z[t];var r=W(t);return Z[t]=r,ee[r]=t,r},keyFor:function(e){if(!ie(e))throw TypeError(e+" is not a symbol");if(f(ee,e))return ee[e]},useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!l},{create:function(e,t){return void 0===t?b(e):ue(b(e),t)},defineProperty:le,defineProperties:ue,getOwnPropertyDescriptor:se}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:fe,getOwnPropertySymbols:de}),n({target:"Object",stat:!0,forced:s((function(){x.f(1)}))},{getOwnPropertySymbols:function(e){return x.f(g(e))}}),$)&&n({target:"JSON",stat:!0,forced:!u||s((function(){var e=W();return"[null]"!=$([e])||"{}"!=$({a:e})||"{}"!=$(Object(e))}))},{stringify:function(e,t,r){for(var n,o=[e],a=1;arguments.length>a;)o.push(arguments[a++]);if(n=t,(p(t)||void 0!==e)&&!ie(e))return d(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ie(t))return t}),o[1]=t,$.apply(null,o)}});W.prototype[F]||C(W.prototype,F,W.prototype.valueOf),M(W,U),N[z]=!0},function(e,t,r){var n=r(20),o=r(41).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(n(e))}},function(e,t,r){var n=r(7),o=r(56),a=r(28),i=r(26),l=r(83),u=[].push,c=function(e){var t=1==e,r=2==e,c=3==e,s=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,g,v,m){for(var y,b,w=a(h),k=o(w),E=n(g,v,3),x=i(k.length),S=0,_=m||l,T=t?_(h,x):r||d?_(h,0):void 0;x>S;S++)if((p||S in k)&&(b=E(y=k[S],S,w),e))if(t)T[S]=b;else if(b)switch(e){case 3:return!0;case 5:return y;case 6:return S;case 2:u.call(T,y)}else switch(e){case 4:return!1;case 7:u.call(T,y)}return f?-1:c||s?s:T}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},function(e,t,r){"use strict";var n=r(1),o=r(16),a=r(8),i=r(11),l=r(13),u=r(14).f,c=r(60),s=a.Symbol;if(o&&"function"==typeof s&&(!("description"in s.prototype)||void 0!==s().description)){var f={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new s(e):void 0===e?s():s(e);return""===e&&(f[t]=!0),t};c(d,s);var p=d.prototype=s.prototype;p.constructor=d;var h=p.toString,g="Symbol(test)"==String(s("test")),v=/^Symbol\\((.*)\\)[^)]+$/;u(p,"description",{configurable:!0,get:function(){var e=l(this)?this.valueOf():this,t=h.call(e);if(i(f,e))return"";var r=g?t.slice(7,-1):t.replace(v,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:d})}},function(e,t,r){r(9)("asyncIterator")},function(e,t,r){r(9)("hasInstance")},function(e,t,r){r(9)("isConcatSpreadable")},function(e,t,r){r(9)("iterator")},function(e,t,r){r(9)("match")},function(e,t,r){r(9)("replace")},function(e,t,r){r(9)("search")},function(e,t,r){r(9)("species")},function(e,t,r){r(9)("split")},function(e,t,r){r(9)("toPrimitive")},function(e,t,r){r(9)("toStringTag")},function(e,t,r){r(9)("unscopables")},function(e,t,r){"use strict";var n=r(1),o=r(12),a=r(49),i=r(13),l=r(28),u=r(26),c=r(84),s=r(83),f=r(167),d=r(6),p=r(85),h=d("isConcatSpreadable"),g=9007199254740991,v="Maximum allowed index exceeded",m=p>=51||!o((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),y=f("concat"),b=function(e){if(!i(e))return!1;var t=e[h];return void 0!==t?!!t:a(e)};n({target:"Array",proto:!0,forced:!m||!y},{concat:function(e){var t,r,n,o,a,i=l(this),f=s(i,0),d=0;for(t=-1,n=arguments.length;t<n;t++)if(b(a=-1===t?i:arguments[t])){if(d+(o=u(a.length))>g)throw TypeError(v);for(r=0;r<o;r++,d++)r in a&&c(f,d,a[r])}else{if(d>=g)throw TypeError(v);c(f,d++,a)}return f.length=d,f}})},function(e,t,r){var n=r(12),o=r(6),a=r(85),i=o("species");e.exports=function(e){return a>=51||!n((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t,r){var n=r(10);e.exports=n("navigator","userAgent")||""},function(e,t,r){var n=r(1),o=r(170);n({target:"Array",stat:!0,forced:!r(71)((function(e){Array.from(e)}))},{from:o})},function(e,t,r){"use strict";var n=r(7),o=r(28),a=r(171),i=r(66),l=r(26),u=r(84),c=r(45);e.exports=function(e){var t,r,s,f,d,p,h=o(e),g="function"==typeof this?this:Array,v=arguments.length,m=v>1?arguments[1]:void 0,y=void 0!==m,b=c(h),w=0;if(y&&(m=n(m,v>2?arguments[2]:void 0,2)),void 0==b||g==Array&&i(b))for(r=new g(t=l(h.length));t>w;w++)p=y?m(h[w],w):h[w],u(r,w,p);else for(d=(f=b.call(h)).next,r=new g;!(s=d.call(f)).done;w++)p=y?a(f,m,[s.value,w],!0):s.value,u(r,w,p);return r.length=w,r}},function(e,t,r){var n=r(2),o=r(69);e.exports=function(e,t,r,a){try{return a?t(n(r)[0],r[1]):t(r)}catch(t){throw o(e),t}}},function(e,t,r){var n=r(8);r(22)(n.JSON,"JSON",!0)},function(e,t,r){r(22)(Math,"Math",!0)},function(e,t,r){r(9)("dispose")},function(e,t,r){r(9)("observable")},function(e,t,r){r(9)("patternMatch")},function(e,t,r){"use strict";var n=r(86),o=[ReferenceError,TypeError,RangeError],a=!1;function i(){a=!1,n._Y=null,n._Z=null}function l(e,t){return t.some((function(t){return e instanceof t}))}t.disable=i,t.enable=function(e){e=e||{},a&&i();a=!0;var t=0,r=0,u={};function c(t){(e.allRejections||l(u[t].error,e.whitelist||o))&&(u[t].displayId=r++,e.onUnhandled?(u[t].logged=!0,e.onUnhandled(u[t].displayId,u[t].error)):(u[t].logged=!0,function(e,t){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):"),((t&&(t.stack||t))+"").split("\\n").forEach((function(e){console.warn("  "+e)}))}(u[t].displayId,u[t].error)))}n._Y=function(t){2===t._V&&u[t._1]&&(u[t._1].logged?function(t){u[t].logged&&(e.onHandled?e.onHandled(u[t].displayId,u[t].error):u[t].onUnhandled||(console.warn("Promise Rejection Handled (id: "+u[t].displayId+"):"),console.warn(\'  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id \'+u[t].displayId+".")))}(t._1):clearTimeout(u[t._1].timeout),delete u[t._1])},n._Z=function(e,r){0===e._U&&(e._1=t++,u[e._1]={displayId:null,error:r,timeout:setTimeout(c.bind(null,e._1),l(r,o)?100:2e3),logged:!1})}}},function(e,t,r){"use strict";(function(t){function r(e){o.length||(n(),!0),o[o.length]=e}e.exports=r;var n,o=[],a=0;function i(){for(;a<o.length;){var e=a;if(a+=1,o[e].call(),a>1024){for(var t=0,r=o.length-a;t<r;t++)o[t]=o[t+a];o.length-=a,a=0}}o.length=0,a=0,!1}var l,u,c,s="undefined"!==typeof t?t:self,f=s.MutationObserver||s.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(n,0),r=setInterval(n,50);function n(){clearTimeout(t),clearInterval(r),e()}}}"function"===typeof f?(l=1,u=new f(i),c=document.createTextNode(""),u.observe(c,{characterData:!0}),n=function(){l=-l,c.data=l}):n=d(i),r.requestFlush=n,r.makeRequestCallFromTimer=d}).call(this,r(34))},function(e,t,r){"use strict";var n=r(86);e.exports=n;var o=s(!0),a=s(!1),i=s(null),l=s(void 0),u=s(0),c=s("");function s(e){var t=new n(n._0);return t._V=1,t._W=e,t}n.resolve=function(e){if(e instanceof n)return e;if(null===e)return i;if(void 0===e)return l;if(!0===e)return o;if(!1===e)return a;if(0===e)return u;if(""===e)return c;if("object"===typeof e||"function"===typeof e)try{var t=e.then;if("function"===typeof t)return new n(t.bind(e))}catch(e){return new n((function(t,r){r(e)}))}return s(e)};var f=function(e){return"function"===typeof Array.from?(f=Array.from,Array.from(e)):(f=function(e){return Array.prototype.slice.call(e)},Array.prototype.slice.call(e))};n.all=function(e){var t=f(e);return new n((function(e,r){if(0===t.length)return e([]);var o=t.length;function a(i,l){if(l&&("object"===typeof l||"function"===typeof l)){if(l instanceof n&&l.then===n.prototype.then){for(;3===l._V;)l=l._W;return 1===l._V?a(i,l._W):(2===l._V&&r(l._W),void l.then((function(e){a(i,e)}),r))}var u=l.then;if("function"===typeof u)return void new n(u.bind(l)).then((function(e){a(i,e)}),r)}t[i]=l,0===--o&&e(t)}for(var i=0;i<t.length;i++)a(i,t[i])}))},n.reject=function(e){return new n((function(t,r){r(e)}))},n.race=function(e){return new n((function(t,r){f(e).forEach((function(e){n.resolve(e).then(t,r)}))}))},n.prototype.catch=function(e){return this.then(null,e)}},function(e,t,r){"use strict";r.r(t),r.d(t,"Headers",(function(){return h})),r.d(t,"Request",(function(){return k})),r.d(t,"Response",(function(){return x})),r.d(t,"DOMException",(function(){return _})),r.d(t,"fetch",(function(){return T}));var n="undefined"!==typeof globalThis&&globalThis||"undefined"!==typeof self&&self||"undefined"!==typeof n&&n,o="URLSearchParams"in n,a="Symbol"in n&&"iterator"in Symbol,i="FileReader"in n&&"Blob"in n&&function(){try{return new Blob,!0}catch(e){return!1}}(),l="FormData"in n,u="ArrayBuffer"in n;if(u)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],s=ArrayBuffer.isView||function(e){return e&&c.indexOf(Object.prototype.toString.call(e))>-1};function f(e){if("string"!==typeof e&&(e=String(e)),/[^a-z0-9\\-#$%&\'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function d(e){return"string"!==typeof e&&(e=String(e)),e}function p(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return a&&(t[Symbol.iterator]=function(){return t}),t}function h(e){this.map={},e instanceof h?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function g(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function v(e){return new Promise((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function m(e){var t=new FileReader,r=v(t);return t.readAsArrayBuffer(e),r}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function b(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"===typeof e?this._bodyText=e:i&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:l&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:o&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():u&&i&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(e)||s(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"===typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var e=g(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var e=g(this);return e||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(m)}),this.text=function(){var e,t,r,n=g(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,r=v(t),t.readAsText(e),r;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},l&&(this.formData=function(){return this.text().then(E)}),this.json=function(){return this.text().then(JSON.parse)},this}h.prototype.append=function(e,t){e=f(e),t=d(t);var r=this.map[e];this.map[e]=r?r+", "+t:t},h.prototype.delete=function(e){delete this.map[f(e)]},h.prototype.get=function(e){return e=f(e),this.has(e)?this.map[e]:null},h.prototype.has=function(e){return this.map.hasOwnProperty(f(e))},h.prototype.set=function(e,t){this.map[f(e)]=d(t)},h.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},h.prototype.keys=function(){var e=[];return this.forEach((function(t,r){e.push(r)})),p(e)},h.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),p(e)},h.prototype.entries=function(){var e=[];return this.forEach((function(t,r){e.push([r,t])})),p(e)},a&&(h.prototype[Symbol.iterator]=h.prototype.entries);var w=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function k(e,t){if(!(this instanceof k))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');var r,n,o=(t=t||{}).body;if(e instanceof k){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new h(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new h(t.headers)),this.method=(r=t.method||this.method||"GET",n=r.toUpperCase(),w.indexOf(n)>-1?n:r),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),("GET"===this.method||"HEAD"===this.method)&&("no-store"===t.cache||"no-cache"===t.cache)){var a=/([?&])_=[^&]*/;if(a.test(this.url))this.url=this.url.replace(a,"$1_="+(new Date).getTime());else{this.url+=(/\\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function E(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var r=e.split("="),n=r.shift().replace(/\\+/g," "),o=r.join("=").replace(/\\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(o))}})),t}function x(e,t){if(!(this instanceof x))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"",this.headers=new h(t.headers),this.url=t.url||"",this._initBody(e)}k.prototype.clone=function(){return new k(this,{body:this._bodyInit})},b.call(k.prototype),b.call(x.prototype),x.prototype.clone=function(){return new x(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},x.error=function(){var e=new x(null,{status:0,statusText:""});return e.type="error",e};var S=[301,302,303,307,308];x.redirect=function(e,t){if(-1===S.indexOf(t))throw new RangeError("Invalid status code");return new x(null,{status:t,headers:{location:e}})};var _=n.DOMException;try{new _}catch(e){(_=function(e,t){this.message=e,this.name=t;var r=Error(e);this.stack=r.stack}).prototype=Object.create(Error.prototype),_.prototype.constructor=_}function T(e,t){return new Promise((function(r,o){var a=new k(e,t);if(a.signal&&a.signal.aborted)return o(new _("Aborted","AbortError"));var l=new XMLHttpRequest;function c(){l.abort()}l.onload=function(){var e,t,n={status:l.status,statusText:l.statusText,headers:(e=l.getAllResponseHeaders()||"",t=new h,e.replace(/\\r?\\n[\\t ]+/g," ").split("\\r").map((function(e){return 0===e.indexOf("\\n")?e.substr(1,e.length):e})).forEach((function(e){var r=e.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();t.append(n,o)}})),t)};n.url="responseURL"in l?l.responseURL:n.headers.get("X-Request-URL");var o="response"in l?l.response:l.responseText;setTimeout((function(){r(new x(o,n))}),0)},l.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.onabort=function(){setTimeout((function(){o(new _("Aborted","AbortError"))}),0)},l.open(a.method,function(e){try{return""===e&&n.location.href?n.location.href:e}catch(t){return e}}(a.url),!0),"include"===a.credentials?l.withCredentials=!0:"omit"===a.credentials&&(l.withCredentials=!1),"responseType"in l&&(i?l.responseType="blob":u&&a.headers.get("Content-Type")&&-1!==a.headers.get("Content-Type").indexOf("application/octet-stream")&&(l.responseType="arraybuffer")),!t||"object"!==typeof t.headers||t.headers instanceof h?a.headers.forEach((function(e,t){l.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){l.setRequestHeader(e,d(t.headers[e]))})),a.signal&&(a.signal.addEventListener("abort",c),l.onreadystatechange=function(){4===l.readyState&&a.signal.removeEventListener("abort",c)}),l.send("undefined"===typeof a._bodyInit?null:a._bodyInit)}))}T.polyfill=!0,n.fetch||(n.fetch=T,n.Headers=h,n.Request=k,n.Response=x)},function(e,t,r){(function(t){for(var n=r(182),o="undefined"===typeof window?t:window,a=["moz","webkit"],i="AnimationFrame",l=o["request"+i],u=o["cancel"+i]||o["cancelRequest"+i],c=0;!l&&c<a.length;c++)l=o[a[c]+"Request"+i],u=o[a[c]+"Cancel"+i]||o[a[c]+"CancelRequest"+i];if(!l||!u){var s=0,f=0,d=[];l=function(e){if(0===d.length){var t=n(),r=Math.max(0,16.666666666666668-(t-s));s=r+t,setTimeout((function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(s)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(r))}return d.push({handle:++f,callback:e,cancelled:!1}),f},u=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return l.call(o,e)},e.exports.cancel=function(){u.apply(o,arguments)},e.exports.polyfill=function(e){e||(e=o),e.requestAnimationFrame=l,e.cancelAnimationFrame=u}}).call(this,r(34))},function(e,t,r){(function(t){(function(){var r,n,o,a,i,l;"undefined"!==typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!==typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(r()-i)/1e6},n=t.hrtime,a=(r=function(){var e;return 1e9*(e=n())[0]+e[1]})(),l=1e9*t.uptime(),i=a-l):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,r(51))},function(e,t,r){"use strict";var n=r(50),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"===typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"===typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function v(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}function m(){}function y(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=v.prototype;var b=y.prototype=new m;b.constructor=y,n(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var n,a={},i=null,l=null;if(null!=t)for(n in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,n)&&!E.hasOwnProperty(n)&&(a[n]=t[n]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(n in u=e.defaultProps)void 0===a[n]&&(a[n]=u[n]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function S(e){return"object"===typeof e&&null!==e&&e.$$typeof===o}var _=/\\/+/g;function T(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,r,n,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===n?"."+T(u,0):n,Array.isArray(i)?(r="",null!=e&&(r=e.replace(_,"$&/")+"/"),C(i,t,r,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,n=""===n?".":n+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=n+T(l=e[c],c);u+=C(l,t,r,s,i)}else if("function"===typeof(s=function(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(l=e.next()).done;)u+=C(l=l.value,t,r,s=n+T(l,c++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,r){if(null==e)return e;var n=[],o=0;return C(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function N(){var e=R.current;if(null===e)throw Error(p(321));return e}var L={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:O,forEach:function(e,t,r){O(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null===e||void 0===e)throw Error(p(267,e));var a=n({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)k.call(t,s)&&!E.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return N().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,r){return N().useReducer(e,t,r)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.1"},function(e,t,r){"use strict";var n=r(0),o=r(50),a=r(185);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));var l=new Set,u={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),d=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},g={};function v(e,t,r,n,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,r,n){var o=m.hasOwnProperty(t)?m[t]:null;(null!==o?0===o.type:!n&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,r,n){if(null===t||"undefined"===typeof t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!p.call(g,e)||!p.call(h,e)&&(d.test(e)?g[e]=!0:(h[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,x=60106,S=60107,_=60108,T=60114,C=60109,O=60110,P=60112,R=60113,N=60120,L=60115,A=60116,I=60121,j=60128,M=60129,D=60130,q=60131;if("function"===typeof Symbol&&Symbol.for){var z=Symbol.for;E=z("react.element"),x=z("react.portal"),S=z("react.fragment"),_=z("react.strict_mode"),T=z("react.profiler"),C=z("react.provider"),O=z("react.context"),P=z("react.forward_ref"),R=z("react.suspense"),N=z("react.suspense_list"),L=z("react.memo"),A=z("react.lazy"),I=z("react.block"),z("react.scope"),j=z("react.opaque.id"),M=z("react.debug_trace_mode"),D=z("react.offscreen"),q=z("react.legacy_hidden")}var U,F="function"===typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=F&&e[F]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\\n( *(at )?)/);U=t&&t[1]||""}return"\\n"+U+e}var H=!1;function W(e,t){if(!e||H)return"";H=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(e){if(e&&n&&"string"===typeof e.stack){for(var o=e.stack.split("\\n"),a=n.stack.split("\\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?V(e):""}function $(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return e=W(e.type,!1);case 11:return e=W(e.type.render,!1);case 22:return e=W(e.type._render,!1);case 1:return e=W(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case T:return"Profiler";case _:return"StrictMode";case R:return"Suspense";case N:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return G(e.type);case I:return G(e._render);case A:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof r&&"function"===typeof r.get&&"function"===typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=Y(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function J(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ee(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=Q(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function re(e,t){te(e,t);var r=Q(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,r):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ne(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function oe(e,t,r){"number"===t&&J(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+Q(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:Q(r)}}function ce(e,t){var r=Q(t.value),n=Q(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ge,ve,me=(ve=function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((ge=ge||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ge.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ye(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},we=["Webkit","ms","Moz","O"];function ke(e,t,r){return null==t||"boolean"===typeof t||""===t?"":r||"number"!==typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=ke(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(be).forEach((function(e){we.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!==typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!==typeof t.style)throw Error(i(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Te(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Oe=null,Pe=null;function Re(e){if(e=eo(e)){if("function"!==typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=ro(t),Ce(e.stateNode,e.type,t))}}function Ne(e){Oe?Pe?Pe.push(e):Pe=[e]:Oe=e}function Le(){if(Oe){var e=Oe,t=Pe;if(Pe=Oe=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}function Ae(e,t){return e(t)}function Ie(e,t,r,n,o){return e(t,r,n,o)}function je(){}var Me=Ae,De=!1,qe=!1;function ze(){null===Oe&&null===Pe||(je(),Le())}function Ue(e,t){var r=e.stateNode;if(null===r)return null;var n=ro(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!==typeof r)throw Error(i(231,t,typeof r));return r}var Fe=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ve){Fe=!1}function Ve(e,t,r,n,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(r,c)}catch(e){this.onError(e)}}var He=!1,We=null,$e=!1,Ge=null,Qe={onError:function(e){He=!0,We=e}};function Ye(e,t,r,n,o,a,i,l,u){He=!1,We=null,Ve.apply(Qe,arguments)}function Ke(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!==(1026&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Je(e){if(Ke(e)!==e)throw Error(i(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(n=o.return)){r=n;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===r)return Je(o),e;if(a===n)return Je(o),t;a=a.sibling}throw Error(i(188))}if(r.return!==n.return)r=o,n=a;else{for(var l=!1,u=o.child;u;){if(u===r){l=!0,r=o,n=a;break}if(u===n){l=!0,n=o,r=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===r){l=!0,r=a,n=o;break}if(u===n){l=!0,n=a,r=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var r=e.alternate;null!==t;){if(t===e||t===r)return!0;t=t.return}return!1}var tt,rt,nt,ot,at=!1,it=[],lt=null,ut=null,ct=null,st=new Map,ft=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,r,n,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|r,nativeEvent:o,targetContainers:[n]}}function gt(e,t){switch(e){case"focusin":case"focusout":lt=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":ct=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ft.delete(t.pointerId)}}function vt(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e=ht(t,r,n,o,a),null!==t&&(null!==(t=eo(t))&&rt(t)),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Zn(e.target);if(null!==t){var r=Ke(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=Xe(r)))return e.blockedOn=t,void ot(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(r)}))}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=eo(r))&&rt(t),e.blockedOn=r,!1;t.shift()}return!0}function bt(e,t,r){yt(e)&&r.delete(t)}function wt(){for(at=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=eo(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r){e.blockedOn=r;break}t.shift()}null===e.blockedOn&&it.shift()}null!==lt&&yt(lt)&&(lt=null),null!==ut&&yt(ut)&&(ut=null),null!==ct&&yt(ct)&&(ct=null),st.forEach(bt),ft.forEach(bt)}function kt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,wt)))}function Et(e){function t(t){return kt(t,e)}if(0<it.length){kt(it[0],e);for(var r=1;r<it.length;r++){var n=it[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==lt&&kt(lt,e),null!==ut&&kt(ut,e),null!==ct&&kt(ct,e),st.forEach(t),ft.forEach(t),r=0;r<dt.length;r++)(n=dt[r]).blockedOn===e&&(n.blockedOn=null);for(;0<dt.length&&null===(r=dt[0]).blockedOn;)mt(r),null===r.blockedOn&&dt.shift()}function xt(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var St={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},_t={},Tt={};function Ct(e){if(_t[e])return _t[e];if(!St[e])return e;var t,r=St[e];for(t in r)if(r.hasOwnProperty(t)&&t in Tt)return _t[e]=r[t];return e}f&&(Tt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Ot=Ct("animationend"),Pt=Ct("animationiteration"),Rt=Ct("animationstart"),Nt=Ct("transitionend"),Lt=new Map,At=new Map,It=["abort","abort",Ot,"animationEnd",Pt,"animationIteration",Rt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function jt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1];o="on"+(o[0].toUpperCase()+o.slice(1)),At.set(n,t),Lt.set(n,o),c(o,[n])}}(0,a.unstable_now)();var Mt=8;function Dt(e){if(0!==(1&e))return Mt=15,1;if(0!==(2&e))return Mt=14,2;if(0!==(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!==(32&e)?(Mt=11,32):0!==(t=192&e)?(Mt=10,t):0!==(256&e)?(Mt=9,256):0!==(t=3584&e)?(Mt=8,t):0!==(4096&e)?(Mt=7,4096):0!==(t=4186112&e)?(Mt=6,t):0!==(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!==(134217728&e)?(Mt=3,134217728):0!==(t=805306368&e)?(Mt=2,t):0!==(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function qt(e,t){var r=e.pendingLanes;if(0===r)return Mt=0;var n=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)n=a,o=Mt=15;else if(0!==(a=134217727&r)){var u=a&~i;0!==u?(n=Dt(u),o=Mt):0!==(l&=a)&&(n=Dt(l),o=Mt)}else 0!==(a=r&~i)?(n=Dt(a),o=Mt):0!==l&&(n=Dt(l),o=Mt);if(0===n)return 0;if(n=r&((0>(n=31-Ht(n))?0:1<<n)<<1)-1,0!==t&&t!==n&&0===(t&i)){if(Dt(t),o<=Mt)return t;Mt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)o=1<<(r=31-Ht(t)),n|=e[r],t&=~o;return n}function zt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ut(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Ut(10,t):e;case 10:return 0===(e=Ft(192&~t))?Ut(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&(0===(e=Ft(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function Bt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function Vt(e,t,r){e.pendingLanes|=t;var n=t-1;e.suspendedLanes&=n,e.pingedLanes&=n,(e=e.eventTimes)[t=31-Ht(t)]=r}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/$t|0)|0},Wt=Math.log,$t=Math.LN2;var Gt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Yt=!0;function Kt(e,t,r,n){De||je();var o=Jt,a=De;De=!0;try{Ie(o,e,t,r,n)}finally{(De=a)||ze()}}function Xt(e,t,r,n){Qt(Gt,Jt.bind(null,e,t,r,n))}function Jt(e,t,r,n){var o;if(Yt)if((o=0===(4&t))&&0<it.length&&-1<pt.indexOf(e))e=ht(null,e,t,r,n),it.push(e);else{var a=Zt(e,t,r,n);if(null===a)o&&gt(e,n);else{if(o){if(-1<pt.indexOf(e))return e=ht(a,e,t,r,n),void it.push(e);if(function(e,t,r,n,o){switch(t){case"focusin":return lt=vt(lt,e,t,r,n,o),!0;case"dragenter":return ut=vt(ut,e,t,r,n,o),!0;case"mouseover":return ct=vt(ct,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,vt(st.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,ft.set(a,vt(ft.get(a)||null,e,t,r,n,o)),!0}return!1}(a,e,t,r,n))return;gt(e,n)}Ln(e,t,n,null,r)}}}function Zt(e,t,r,n){var o=Te(n);if(null!==(o=Zn(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ln(e,t,n,o,r),null}var er=null,tr=null,rr=null;function nr(){if(rr)return rr;var e,t,r=tr,n=r.length,o="value"in er?er.value:er.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return rr=o.slice(e,1<t?1-t:void 0)}function or(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function ar(){return!0}function ir(){return!1}function lr(e){function t(t,r,n,o,a){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?ar:ir,this.isPropagationStopped=ir,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ar)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ar)},persist:function(){},isPersistent:ar}),t}var ur,cr,sr,fr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dr=lr(fr),pr=o({},fr,{view:0,detail:0}),hr=lr(pr),gr=o({},pr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Tr,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sr&&(sr&&"mousemove"===e.type?(ur=e.screenX-sr.screenX,cr=e.screenY-sr.screenY):cr=ur=0,sr=e),ur)},movementY:function(e){return"movementY"in e?e.movementY:cr}}),vr=lr(gr),mr=lr(o({},gr,{dataTransfer:0})),yr=lr(o({},pr,{relatedTarget:0})),br=lr(o({},fr,{animationName:0,elapsedTime:0,pseudoElement:0})),wr=lr(o({},fr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),kr=lr(o({},fr,{data:0})),Er={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _r(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Tr(){return _r}var Cr=lr(o({},pr,{key:function(e){if(e.key){var t=Er[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=or(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xr[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Tr,charCode:function(e){return"keypress"===e.type?or(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?or(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Or=lr(o({},gr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pr=lr(o({},pr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Tr})),Rr=lr(o({},fr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nr=lr(o({},gr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Lr=[9,13,27,32],Ar=f&&"CompositionEvent"in window,Ir=null;f&&"documentMode"in document&&(Ir=document.documentMode);var jr=f&&"TextEvent"in window&&!Ir,Mr=f&&(!Ar||Ir&&8<Ir&&11>=Ir),Dr=String.fromCharCode(32),qr=!1;function zr(e,t){switch(e){case"keyup":return-1!==Lr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ur(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Fr=!1;var Br={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Br[e.type]:"textarea"===t}function Hr(e,t,r,n){Ne(n),0<(t=In(t,"onChange")).length&&(r=new dr("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Wr=null,$r=null;function Gr(e){Tn(e,0)}function Qr(e){if(X(to(e)))return e}function Yr(e,t){if("change"===e)return t}var Kr=!1;if(f){var Xr;if(f){var Jr="oninput"in document;if(!Jr){var Zr=document.createElement("div");Zr.setAttribute("oninput","return;"),Jr="function"===typeof Zr.oninput}Xr=Jr}else Xr=!1;Kr=Xr&&(!document.documentMode||9<document.documentMode)}function en(){Wr&&(Wr.detachEvent("onpropertychange",tn),$r=Wr=null)}function tn(e){if("value"===e.propertyName&&Qr($r)){var t=[];if(Hr(t,$r,e,Te(e)),e=Gr,De)e(t);else{De=!0;try{Ae(e,t)}finally{De=!1,ze()}}}}function rn(e,t,r){"focusin"===e?(en(),$r=r,(Wr=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qr($r)}function on(e,t){if("click"===e)return Qr(t)}function an(e,t){if("input"===e||"change"===e)return Qr(t)}var ln="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t},un=Object.prototype.hasOwnProperty;function cn(e,t){if(ln(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!un.call(t,r[n])||!ln(e[r[n]],t[r[n]]))return!1;return!0}function sn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var r,n=sn(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=sn(n)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pn(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var r="string"===typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=J((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gn=f&&"documentMode"in document&&11>=document.documentMode,vn=null,mn=null,yn=null,bn=!1;function wn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;bn||null==vn||vn!==J(n)||("selectionStart"in(n=vn)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},yn&&cn(yn,n)||(yn=n,0<(n=In(mn,"onSelect")).length&&(t=new dr("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=vn)))}jt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),jt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),jt(It,2);for(var kn="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),En=0;En<kn.length;En++)At.set(kn[En],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sn=new Set("cancel close invalid load scroll toggle".split(" ").concat(xn));function _n(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,o,a,l,u,c){if(Ye.apply(this,arguments),He){if(!He)throw Error(i(198));var s=We;He=!1,We=null,$e||($e=!0,Ge=s)}}(n,t,void 0,e),e.currentTarget=null}function Tn(e,t){t=0!==(4&t);for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var a=void 0;if(t)for(var i=n.length-1;0<=i;i--){var l=n[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}else for(i=0;i<n.length;i++){if(u=(l=n[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}}}if($e)throw e=Ge,$e=!1,Ge=null,e}function Cn(e,t){var r=no(t),n=e+"__bubble";r.has(n)||(Nn(t,e,2,!1),r.add(n))}var On="_reactListening"+Math.random().toString(36).slice(2);function Pn(e){e[On]||(e[On]=!0,l.forEach((function(t){Sn.has(t)||Rn(t,!1,e,null),Rn(t,!0,e,null)})))}function Rn(e,t,r,n){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=r;if("selectionchange"===e&&9!==r.nodeType&&(a=r.ownerDocument),null!==n&&!t&&Sn.has(e)){if("scroll"!==e)return;o|=2,a=n}var i=no(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Nn(a,e,o,t),i.add(l))}function Nn(e,t,r,n){var o=At.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Xt;break;default:o=Jt}r=o.bind(null,t,r,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),n?void 0!==o?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):void 0!==o?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Ln(e,t,r,n,o){var a=n;if(0===(1&t)&&0===(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var l=n.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=n.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Zn(l)))return;if(5===(u=i.tag)||6===u){n=a=i;continue e}l=l.parentNode}}n=n.return}!function(e,t,r){if(qe)return e(t,r);qe=!0;try{Me(e,t,r)}finally{qe=!1,ze()}}((function(){var n=a,o=Te(r),i=[];e:{var l=Lt.get(e);if(void 0!==l){var u=dr,c=e;switch(e){case"keypress":if(0===or(r))break e;case"keydown":case"keyup":u=Cr;break;case"focusin":c="focus",u=yr;break;case"focusout":c="blur",u=yr;break;case"beforeblur":case"afterblur":u=yr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pr;break;case Ot:case Pt:case Rt:u=br;break;case Nt:u=Rr;break;case"scroll":u=hr;break;case"wheel":u=Nr;break;case"copy":case"cut":case"paste":u=wr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Or}var s=0!==(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=n;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==d&&(null!=(g=Ue(h,d))&&s.push(An(h,g,p)))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,r,o),i.push({event:l,listeners:s}))}}if(0===(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!==(16&t)||!(c=r.relatedTarget||r.fromElement)||!Zn(c)&&!c[Xn])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=n,null!==(c=(c=r.relatedTarget||r.toElement)?Zn(c):null)&&(c!==(f=Ke(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=n),u!==c)){if(s=vr,g="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Or,g="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:to(u),p=null==c?l:to(c),(l=new s(g,h+"leave",u,r,o)).target=f,l.relatedTarget=p,g=null,Zn(o)===n&&((s=new s(d,h+"enter",c,r,o)).target=p,s.relatedTarget=f,g=s),f=g,u&&c)e:{for(d=c,h=0,p=s=u;p;p=jn(p))h++;for(p=0,g=d;g;g=jn(g))p++;for(;0<h-p;)s=jn(s),h--;for(;0<p-h;)d=jn(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=jn(s),d=jn(d)}s=null}else s=null;null!==u&&Mn(i,l,u,s,!1),null!==c&&null!==f&&Mn(i,f,c,s,!0)}if("select"===(u=(l=n?to(n):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Yr;else if(Vr(l))if(Kr)v=an;else{v=nn;var m=rn}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=on);switch(v&&(v=v(e,n))?Hr(i,v,r,o):(m&&m(e,l,n),"focusout"===e&&(m=l._wrapperState)&&m.controlled&&"number"===l.type&&oe(l,"number",l.value)),m=n?to(n):window,e){case"focusin":(Vr(m)||"true"===m.contentEditable)&&(vn=m,mn=n,yn=null);break;case"focusout":yn=mn=vn=null;break;case"mousedown":bn=!0;break;case"contextmenu":case"mouseup":case"dragend":bn=!1,wn(i,r,o);break;case"selectionchange":if(gn)break;case"keydown":case"keyup":wn(i,r,o)}var y;if(Ar)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fr?zr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Mr&&"ko"!==r.locale&&(Fr||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fr&&(y=nr()):(tr="value"in(er=o)?er.value:er.textContent,Fr=!0)),0<(m=In(n,b)).length&&(b=new kr(b,e,null,r,o),i.push({event:b,listeners:m}),y?b.data=y:null!==(y=Ur(r))&&(b.data=y))),(y=jr?function(e,t){switch(e){case"compositionend":return Ur(t);case"keypress":return 32!==t.which?null:(qr=!0,Dr);case"textInput":return(e=t.data)===Dr&&qr?null:e;default:return null}}(e,r):function(e,t){if(Fr)return"compositionend"===e||!Ar&&zr(e,t)?(e=nr(),rr=tr=er=null,Fr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mr&&"ko"!==t.locale?null:t.data;default:return null}}(e,r))&&(0<(n=In(n,"onBeforeInput")).length&&(o=new kr("onBeforeInput","beforeinput",null,r,o),i.push({event:o,listeners:n}),o.data=y))}Tn(i,t)}))}function An(e,t,r){return{instance:e,listener:t,currentTarget:r}}function In(e,t){for(var r=t+"Capture",n=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ue(e,r))&&n.unshift(An(e,a,o)),null!=(a=Ue(e,t))&&n.push(An(e,a,o))),e=e.return}return n}function jn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t,r,n,o){for(var a=t._reactName,i=[];null!==r&&r!==n;){var l=r,u=l.alternate,c=l.stateNode;if(null!==u&&u===n)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Ue(r,a))&&i.unshift(An(r,u,l)):o||null!=(u=Ue(r,a))&&i.push(An(r,u,l))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}function Dn(){}var qn=null,zn=null;function Un(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Bn="function"===typeof setTimeout?setTimeout:void 0,Vn="function"===typeof clearTimeout?clearTimeout:void 0;function Hn(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $n(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var Gn=0;var Qn=Math.random().toString(36).slice(2),Yn="__reactFiber$"+Qn,Kn="__reactProps$"+Qn,Xn="__reactContainer$"+Qn,Jn="__reactEvents$"+Qn;function Zn(e){var t=e[Yn];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Xn]||r[Yn]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=$n(e);null!==e;){if(r=e[Yn])return r;e=$n(e)}return t}r=(e=r).parentNode}return null}function eo(e){return!(e=e[Yn]||e[Xn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function to(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ro(e){return e[Kn]||null}function no(e){var t=e[Jn];return void 0===t&&(t=e[Jn]=new Set),t}var oo=[],ao=-1;function io(e){return{current:e}}function lo(e){0>ao||(e.current=oo[ao],oo[ao]=null,ao--)}function uo(e,t){ao++,oo[ao]=e.current,e.current=t}var co={},so=io(co),fo=io(!1),po=co;function ho(e,t){var r=e.type.contextTypes;if(!r)return co;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!==(e=e.childContextTypes)&&void 0!==e}function vo(){lo(fo),lo(so)}function mo(e,t,r){if(so.current!==co)throw Error(i(168));uo(so,t),uo(fo,r)}function yo(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!==typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,G(t)||"Unknown",a));return o({},r,n)}function bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,po=so.current,uo(so,e),uo(fo,fo.current),!0}function wo(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=yo(e,t,po),n.__reactInternalMemoizedMergedChildContext=e,lo(fo),lo(so),uo(so,e)):lo(fo),uo(fo,r)}var ko=null,Eo=null,xo=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,_o=a.unstable_cancelCallback,To=a.unstable_shouldYield,Co=a.unstable_requestPaint,Oo=a.unstable_now,Po=a.unstable_getCurrentPriorityLevel,Ro=a.unstable_ImmediatePriority,No=a.unstable_UserBlockingPriority,Lo=a.unstable_NormalPriority,Ao=a.unstable_LowPriority,Io=a.unstable_IdlePriority,jo={},Mo=void 0!==Co?Co:function(){},Do=null,qo=null,zo=!1,Uo=Oo(),Fo=1e4>Uo?Oo:function(){return Oo()-Uo};function Bo(){switch(Po()){case Ro:return 99;case No:return 98;case Lo:return 97;case Ao:return 96;case Io:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return Ro;case 98:return No;case 97:return Lo;case 96:return Ao;case 95:return Io;default:throw Error(i(332))}}function Ho(e,t){return e=Vo(e),xo(e,t)}function Wo(e,t,r){return e=Vo(e),So(e,t,r)}function $o(){if(null!==qo){var e=qo;qo=null,_o(e)}Go()}function Go(){if(!zo&&null!==Do){zo=!0;var e=0;try{var t=Do;Ho(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),So(Ro,$o),t}finally{zo=!1}}}var Qo=k.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var Ko=io(null),Xo=null,Jo=null,Zo=null;function ea(){Zo=Jo=Xo=null}function ta(e){var t=Ko.current;lo(Ko),e.type._context._currentValue=t}function ra(e,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)===t){if(null===r||(r.childLanes&t)===t)break;r.childLanes|=t}else e.childLanes|=t,null!==r&&(r.childLanes|=t);e=e.return}}function na(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(Ii=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"===typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(i(308));Jo=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ua(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ca(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function sa(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var o=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?o=a=i:a=a.next=i,r=r.next}while(null!==r);null===a?o=a=t:a=a.next=t}else o=a=t;return r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function fa(e,t,r,n){var a=e.updateQueue;aa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var c=u,s=c.next;c.next=null,null===l?i=s:l.next=s,l=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=a.baseState,l=0,f=s=c=null;;){u=i.lane;var p=i.eventTime;if((n&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,g=i;switch(u=t,p=r,g.tag){case 1:if("function"===typeof(h=g.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null===(u="function"===typeof(h=g.payload)?h.call(p,d,u):h)||void 0===u)break e;d=o({},d,u);break e;case 2:aa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(c=d),a.baseState=c,a.firstBaseUpdate=s,a.lastBaseUpdate=f,ql|=l,e.lanes=l,e.memoizedState=d}}function da(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=r,"function"!==typeof o)throw Error(i(191,o));o.call(n)}}}var pa=(new n.Component).refs;function ha(e,t,r,n){r=null===(r=r(n,t=e.memoizedState))||void 0===r?t:o({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.tag=1,a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=cu(),n=su(e),o=ua(r,n);o.tag=2,void 0!==t&&null!==t&&(o.callback=t),ca(e,o),fu(e,n,r)}};function va(e,t,r,n,o,a,i){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!cn(r,n)||!cn(o,a))}function ma(e,t,r){var n=!1,o=co,a=t.contextType;return"object"===typeof a&&null!==a?a=oa(a):(o=go(t)?po:so.current,a=(n=null!==(n=t.contextTypes)&&void 0!==n)?ho(e,o):co),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,r,n){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function ba(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=pa,ia(e);var a=t.contextType;"object"===typeof a&&null!==a?o.context=oa(a):(a=go(t)?po:so.current,o.context=ho(e,a)),fa(e,r,o,n),o.state=e.memoizedState,"function"===typeof(a=t.getDerivedStateFromProps)&&(ha(e,t,a,r),o.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof o.getSnapshotBeforeUpdate||"function"!==typeof o.UNSAFE_componentWillMount&&"function"!==typeof o.componentWillMount||(t=o.state,"function"===typeof o.componentWillMount&&o.componentWillMount(),"function"===typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ga.enqueueReplaceState(o,o.state,null),fa(e,r,o,n),o.state=e.memoizedState),"function"===typeof o.componentDidMount&&(e.flags|=4)}var wa=Array.isArray;function ka(e,t,r){if(null!==(e=r.ref)&&"function"!==typeof e&&"object"!==typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=n.refs;t===pa&&(t=n.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!==typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function Ea(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function xa(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.flags=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Vu(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags=2,r):n:(t.flags=2,r):r}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,r,n){return null===t||6!==t.tag?((t=Gu(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function c(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=ka(e,t,r),n.return=e,n):((n=Hu(r.type,r.key,r.props,null,e.mode,n)).ref=ka(e,t,r),n.return=e,n)}function s(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Qu(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function f(e,t,r,n,a){return null===t||7!==t.tag?((t=Wu(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function d(e,t,r){if("string"===typeof t||"number"===typeof t)return(t=Gu(""+t,e.mode,r)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case E:return(r=Hu(t.type,t.key,t.props,null,e.mode,r)).ref=ka(e,null,t),r.return=e,r;case x:return(t=Qu(t,e.mode,r)).return=e,t}if(wa(t)||B(t))return(t=Wu(t,e.mode,r,null)).return=e,t;Ea(e,t)}return null}function p(e,t,r,n){var o=null!==t?t.key:null;if("string"===typeof r||"number"===typeof r)return null!==o?null:u(e,t,""+r,n);if("object"===typeof r&&null!==r){switch(r.$$typeof){case E:return r.key===o?r.type===S?f(e,t,r.props.children,n,o):c(e,t,r,n):null;case x:return r.key===o?s(e,t,r,n):null}if(wa(r)||B(r))return null!==o?null:f(e,t,r,n,null);Ea(e,r)}return null}function h(e,t,r,n,o){if("string"===typeof n||"number"===typeof n)return u(t,e=e.get(r)||null,""+n,o);if("object"===typeof n&&null!==n){switch(n.$$typeof){case E:return e=e.get(null===n.key?r:n.key)||null,n.type===S?f(t,e,n.props.children,o,n.key):c(t,e,n,o);case x:return s(t,e=e.get(null===n.key?r:n.key)||null,n,o)}if(wa(n)||B(n))return f(t,e=e.get(r)||null,n,o,null);Ea(t,n)}return null}function g(o,i,l,u){for(var c=null,s=null,f=i,g=i=0,v=null;null!==f&&g<l.length;g++){f.index>g?(v=f,f=null):v=f.sibling;var m=p(o,f,l[g],u);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),i=a(m,i,g),null===s?c=m:s.sibling=m,s=m,f=v}if(g===l.length)return r(o,f),c;if(null===f){for(;g<l.length;g++)null!==(f=d(o,l[g],u))&&(i=a(f,i,g),null===s?c=f:s.sibling=f,s=f);return c}for(f=n(o,f);g<l.length;g++)null!==(v=h(f,o,g,l[g],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?g:v.key),i=a(v,i,g),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,l,u,c){var s=B(u);if("function"!==typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,g=l,v=l=0,m=null,y=u.next();null!==g&&!y.done;v++,y=u.next()){g.index>v?(m=g,g=null):m=g.sibling;var b=p(o,g,y.value,c);if(null===b){null===g&&(g=m);break}e&&g&&null===b.alternate&&t(o,g),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b,g=m}if(y.done)return r(o,g),s;if(null===g){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,c))&&(l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return s}for(g=n(o,g);!y.done;v++,y=u.next())null!==(y=h(g,o,v,y.value,c))&&(e&&null!==y.alternate&&g.delete(null===y.key?v:y.key),l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return e&&g.forEach((function(e){return t(o,e)})),s}return function(e,n,a,u){var c="object"===typeof a&&null!==a&&a.type===S&&null===a.key;c&&(a=a.props.children);var s="object"===typeof a&&null!==a;if(s)switch(a.$$typeof){case E:e:{for(s=a.key,c=n;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===S){r(e,c.sibling),(n=o(c,a.props.children)).return=e,e=n;break e}break;default:if(c.elementType===a.type){r(e,c.sibling),(n=o(c,a.props)).ref=ka(e,c,a),n.return=e,e=n;break e}}r(e,c);break}t(e,c),c=c.sibling}a.type===S?((n=Wu(a.props.children,e.mode,u,a.key)).return=e,e=n):((u=Hu(a.type,a.key,a.props,null,e.mode,u)).ref=ka(e,n,a),u.return=e,e=u)}return l(e);case x:e:{for(c=a.key;null!==n;){if(n.key===c){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){r(e,n.sibling),(n=o(n,a.children||[])).return=e,e=n;break e}r(e,n);break}t(e,n),n=n.sibling}(n=Qu(a,e.mode,u)).return=e,e=n}return l(e)}if("string"===typeof a||"number"===typeof a)return a=""+a,null!==n&&6===n.tag?(r(e,n.sibling),(n=o(n,a)).return=e,e=n):(r(e,n),(n=Gu(a,e.mode,u)).return=e,e=n),l(e);if(wa(a))return g(e,n,a,u);if(B(a))return v(e,n,a,u);if(s&&Ea(e,a),"undefined"===typeof a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,G(e.type)||"Component"))}return r(e,n)}}var Sa=xa(!0),_a=xa(!1),Ta={},Ca=io(Ta),Oa=io(Ta),Pa=io(Ta);function Ra(e){if(e===Ta)throw Error(i(174));return e}function Na(e,t){switch(uo(Pa,t),uo(Oa,e),uo(Ca,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Ca),uo(Ca,t)}function La(){lo(Ca),lo(Oa),lo(Pa)}function Aa(e){Ra(Pa.current);var t=Ra(Ca.current),r=he(t,e.type);t!==r&&(uo(Oa,e),uo(Ca,r))}function Ia(e){Oa.current===e&&(lo(Ca),lo(Oa))}var ja=io(0);function Ma(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,qa=null,za=!1;function Ua(e,t){var r=Fu(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Fa(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ba(e){if(za){var t=qa;if(t){var r=t;if(!Fa(e,t)){if(!(t=Wn(r.nextSibling))||!Fa(e,t))return e.flags=-1025&e.flags|2,za=!1,void(Da=e);Ua(Da,r)}Da=e,qa=Wn(t.firstChild)}else e.flags=-1025&e.flags|2,za=!1,Da=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ha(e){if(e!==Da)return!1;if(!za)return Va(e),za=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fn(t,e.memoizedProps))for(t=qa;t;)Ua(e,t),t=Wn(t.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){qa=Wn(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}qa=null}}else qa=Da?Wn(e.stateNode.nextSibling):null;return!0}function Wa(){qa=Da=null,za=!1}var $a=[];function Ga(){for(var e=0;e<$a.length;e++)$a[e]._workInProgressVersionPrimary=null;$a.length=0}var Qa=k.ReactCurrentDispatcher,Ya=k.ReactCurrentBatchConfig,Ka=0,Xa=null,Ja=null,Za=null,ei=!1,ti=!1;function ri(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function oi(e,t,r,n,o,a){if(Ka=a,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?Ri:Ni,e=r(n,o),ti){a=0;do{if(ti=!1,!(25>a))throw Error(i(301));a+=1,Za=Ja=null,t.updateQueue=null,Qa.current=Li,e=r(n,o)}while(ti)}if(Qa.current=Pi,t=null!==Ja&&null!==Ja.next,Ka=0,Za=Ja=Xa=null,ei=!1,t)throw Error(i(300));return e}function ai(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Za?Xa.memoizedState=Za=e:Za=Za.next=e,Za}function ii(){if(null===Ja){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=Ja.next;var t=null===Za?Xa.memoizedState:Za.next;if(null!==t)Za=t,Ja=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ja=e).memoizedState,baseState:Ja.baseState,baseQueue:Ja.baseQueue,queue:Ja.queue,next:null},null===Za?Xa.memoizedState=Za=e:Za=Za.next=e}return Za}function li(e,t){return"function"===typeof t?t(e):t}function ui(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=Ja,o=n.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}n.baseQueue=o=a,r.pending=null}if(null!==o){o=o.next,n=n.baseState;var u=l=a=null,c=o;do{var s=c.lane;if((Ka&s)===s)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),n=c.eagerReducer===e?c.eagerState:e(n,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,a=n):u=u.next=f,Xa.lanes|=s,ql|=s}c=c.next}while(null!==c&&c!==o);null===u?a=n:u.next=l,ln(n,t.memoizedState)||(Ii=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=u,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function ci(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,a=t.memoizedState;if(null!==o){r.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ln(a,t.memoizedState)||(Ii=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function si(e,t,r){var n=t._getVersion;n=n(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===n:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=n,$a.push(t))),e)return r(t._source);throw $a.push(t),Error(i(350))}function fi(e,t,r,n){var o=Rl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Qa.current,c=u.useState((function(){return si(o,t,r)})),s=c[1],f=c[0];c=Za;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,g=d.source;d=d.subscribe;var v=Xa;return e.memoizedState={refs:p,source:t,subscribe:n},u.useEffect((function(){p.getSnapshot=r,p.setSnapshot=s;var e=a(t._source);if(!ln(l,e)){e=r(t._source),ln(f,e)||(s(e),e=su(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var n=o.entanglements,i=e;0<i;){var u=31-Ht(i),c=1<<u;n[u]|=e,i&=~c}}}),[r,t,n]),u.useEffect((function(){return n(t._source,(function(){var e=p.getSnapshot,r=p.setSnapshot;try{r(e(t._source));var n=su(v);o.mutableReadLanes|=n&o.pendingLanes}catch(e){r((function(){throw e}))}}))}),[t,n]),ln(h,r)&&ln(g,t)&&ln(d,n)||((e={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:f}).dispatch=s=Oi.bind(null,Xa,e),c.queue=e,c.baseQueue=null,f=si(o,t,r),c.memoizedState=c.baseState=f),f}function di(e,t,r){return fi(ii(),e,t,r)}function pi(e){var t=ai();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:e}).dispatch=Oi.bind(null,Xa,e),[t.memoizedState,e]}function hi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=Xa.updateQueue)?(t={lastEffect:null},Xa.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function gi(e){return e={current:e},ai().memoizedState=e}function vi(){return ii().memoizedState}function mi(e,t,r,n){var o=ai();Xa.flags|=e,o.memoizedState=hi(1|t,r,void 0,void 0===n?null:n)}function yi(e,t,r,n){var o=ii();n=void 0===n?null:n;var a=void 0;if(null!==Ja){var i=Ja.memoizedState;if(a=i.destroy,null!==n&&ni(n,i.deps))return void hi(t,r,a,n)}Xa.flags|=e,o.memoizedState=hi(1|t,r,a,n)}function bi(e,t){return mi(516,4,e,t)}function wi(e,t){return yi(516,4,e,t)}function ki(e,t){return yi(4,2,e,t)}function Ei(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xi(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,yi(4,2,Ei.bind(null,t,e),r)}function Si(){}function _i(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Ti(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ci(e,t){var r=Bo();Ho(98>r?98:r,(function(){e(!0)})),Ho(97<r?97:r,(function(){var r=Ya.transition;Ya.transition=1;try{e(!1),t()}finally{Ya.transition=r}}))}function Oi(e,t,r){var n=cu(),o=su(e),a={lane:o,action:r,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Xa||null!==i&&i===Xa)ti=ei=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,r);if(a.eagerReducer=i,a.eagerState=u,ln(u,l))return}catch(e){}fu(e,o,n)}}var Pi={readContext:oa,useCallback:ri,useContext:ri,useEffect:ri,useImperativeHandle:ri,useLayoutEffect:ri,useMemo:ri,useReducer:ri,useRef:ri,useState:ri,useDebugValue:ri,useDeferredValue:ri,useTransition:ri,useMutableSource:ri,useOpaqueIdentifier:ri,unstable_isNewReconciler:!1},Ri={readContext:oa,useCallback:function(e,t){return ai().memoizedState=[e,void 0===t?null:t],e},useContext:oa,useEffect:bi,useImperativeHandle:function(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,mi(4,2,Ei.bind(null,t,e),r)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var r=ai();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=ai();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oi.bind(null,Xa,e),[n.memoizedState,e]},useRef:gi,useState:pi,useDebugValue:Si,useDeferredValue:function(e){var t=pi(e),r=t[0],n=t[1];return bi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=pi(!1),t=e[0];return gi(e=Ci.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,r){var n=ai();return n.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:r},fi(n,e,t,r)},useOpaqueIdentifier:function(){if(za){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,r("r:"+(Gn++).toString(36))),Error(i(355))})),r=pi(t)[1];return 0===(2&Xa.mode)&&(Xa.flags|=516,hi(5,(function(){r("r:"+(Gn++).toString(36))}),void 0,null)),t}return pi(t="r:"+(Gn++).toString(36)),t},unstable_isNewReconciler:!1},Ni={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ui,useRef:vi,useState:function(){return ui(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ui(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ui(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ui(li)[0]},unstable_isNewReconciler:!1},Li={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ci,useRef:vi,useState:function(){return ci(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ci(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ci(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ci(li)[0]},unstable_isNewReconciler:!1},Ai=k.ReactCurrentOwner,Ii=!1;function ji(e,t,r,n){t.child=null===e?_a(t,null,r,n):Sa(t,e.child,r,n)}function Mi(e,t,r,n,o){r=r.render;var a=t.ref;return na(t,o),n=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Di(e,t,r,n,o,a){if(null===e){var i=r.type;return"function"!==typeof i||Bu(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Hu(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,qi(e,t,i,n,o,a))}return i=e.child,0===(o&a)&&(o=i.memoizedProps,(r=null!==(r=r.compare)?r:cn)(o,n)&&e.ref===t.ref)?rl(e,t,a):(t.flags|=1,(e=Vu(i,n)).ref=t.ref,e.return=t,t.child=e)}function qi(e,t,r,n,o,a){if(null!==e&&cn(e.memoizedProps,n)&&e.ref===t.ref){if(Ii=!1,0===(a&o))return t.lanes=e.lanes,rl(e,t,a);0!==(16384&e.flags)&&(Ii=!0)}return Fi(e,t,r,n,a)}function zi(e,t,r){var n=t.pendingProps,o=n.children,a=null!==e?e.memoizedState:null;if("hidden"===n.mode||"unstable-defer-without-hiding"===n.mode)if(0===(4&t.mode))t.memoizedState={baseLanes:0},bu(t,r);else{if(0===(1073741824&r))return e=null!==a?a.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(t,e),null;t.memoizedState={baseLanes:0},bu(t,null!==a?a.baseLanes:r)}else null!==a?(n=a.baseLanes|r,t.memoizedState=null):n=r,bu(t,n);return ji(e,t,o,r),t.child}function Ui(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=128)}function Fi(e,t,r,n,o){var a=go(r)?po:so.current;return a=ho(t,a),na(t,o),r=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Bi(e,t,r,n,o){if(go(r)){var a=!0;bo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,r,n),ba(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=r.contextType;"object"===typeof c&&null!==c?c=oa(c):c=ho(t,c=go(r)?po:so.current);var s=r.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof i.getSnapshotBeforeUpdate;f||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==n||u!==c)&&ya(t,i,n,c),aa=!1;var d=t.memoizedState;i.state=d,fa(t,n,i,o),u=t.memoizedState,l!==n||d!==u||fo.current||aa?("function"===typeof s&&(ha(t,r,s,n),u=t.memoizedState),(l=aa||va(t,r,l,n,d,u,c))?(f||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||("function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"===typeof i.componentDidMount&&(t.flags|=4)):("function"===typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=n,t.memoizedState=u),i.props=n,i.state=u,i.context=c,n=l):("function"===typeof i.componentDidMount&&(t.flags|=4),n=!1)}else{i=t.stateNode,la(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:Yo(t.type,l),i.props=c,f=t.pendingProps,d=i.context,"object"===typeof(u=r.contextType)&&null!==u?u=oa(u):u=ho(t,u=go(r)?po:so.current);var p=r.getDerivedStateFromProps;(s="function"===typeof p||"function"===typeof i.getSnapshotBeforeUpdate)||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ya(t,i,n,u),aa=!1,d=t.memoizedState,i.state=d,fa(t,n,i,o);var h=t.memoizedState;l!==f||d!==h||fo.current||aa?("function"===typeof p&&(ha(t,r,p,n),h=t.memoizedState),(c=aa||va(t,r,c,n,d,h,u))?(s||"function"!==typeof i.UNSAFE_componentWillUpdate&&"function"!==typeof i.componentWillUpdate||("function"===typeof i.componentWillUpdate&&i.componentWillUpdate(n,h,u),"function"===typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,h,u)),"function"===typeof i.componentDidUpdate&&(t.flags|=4),"function"===typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=n,t.memoizedState=h),i.props=n,i.state=h,i.context=u,n=c):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),n=!1)}return Vi(e,t,r,n,a,o)}function Vi(e,t,r,n,o,a){Ui(e,t);var i=0!==(64&t.flags);if(!n&&!i)return o&&wo(t,r,!1),rl(e,t,a);n=t.stateNode,Ai.current=t;var l=i&&"function"!==typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):ji(e,t,l,a),t.memoizedState=n.state,o&&wo(t,r,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Na(e,t.containerInfo)}var Wi,$i,Gi,Qi={dehydrated:null,retryLane:0};function Yi(e,t,r){var n,o=t.pendingProps,a=ja.current,i=!1;return(n=0!==(64&t.flags))||(n=(null===e||null!==e.memoizedState)&&0!==(2&a)),n?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),uo(ja,1&a),null===e?(void 0!==o.fallback&&Ba(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,e):"number"===typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,t.lanes=33554432,e):((r=$u({mode:"visible",children:e},t.mode,r,null)).return=t,t.child=r)):(e.memoizedState,i?(o=Ji(e,t,o.children,o.fallback,r),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:r}:{baseLanes:a.baseLanes|r},i.childLanes=e.childLanes&~r,t.memoizedState=Qi,o):(r=Xi(e,t,o.children,r),t.memoizedState=null,r))}function Ki(e,t,r,n){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0===(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=$u(t,o,0,null),r=Wu(r,o,n,null),a.return=e,r.return=e,a.sibling=r,e.child=a,r}function Xi(e,t,r,n){var o=e.child;return e=o.sibling,r=Vu(o,{mode:"visible",children:r}),0===(2&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=r}function Ji(e,t,r,n,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:r};return 0===(2&a)&&t.child!==i?((r=t.child).childLanes=0,r.pendingProps=l,null!==(i=r.lastEffect)?(t.firstEffect=r.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):r=Vu(i,l),null!==e?n=Vu(e,n):(n=Wu(n,a,o,null)).flags|=2,n.return=t,r.return=t,r.sibling=n,t.child=r,n}function Zi(e,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ra(e.return,t)}function el(e,t,r,n,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailMode=o,i.lastEffect=a)}function tl(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(ji(e,t,n.children,r),0!==(2&(n=ja.current)))n=1&n|2,t.flags|=64;else{if(null!==e&&0!==(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Zi(e,r);else if(19===e.tag)Zi(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(uo(ja,n),0===(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===Ma(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),el(t,!1,o,r,a,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ma(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}el(t,!0,r,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function rl(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),ql|=t.lanes,0!==(r&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=Vu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Vu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}return null}function nl(e,t){if(!za)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function ol(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return go(t.type)&&vo(),null;case 3:return La(),lo(fo),lo(so),Ga(),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:n.hydrate||(t.flags|=256)),null;case 5:Ia(t);var a=Ra(Pa.current);if(r=t.type,null!==e&&null!=t.stateNode)$i(e,t,r,n),e.ref!==t.ref&&(t.flags|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ra(Ca.current),Ha(t)){n=t.stateNode,r=t.type;var l=t.memoizedProps;switch(n[Yn]=t,n[Kn]=l,r){case"dialog":Cn("cancel",n),Cn("close",n);break;case"iframe":case"object":case"embed":Cn("load",n);break;case"video":case"audio":for(e=0;e<xn.length;e++)Cn(xn[e],n);break;case"source":Cn("error",n);break;case"img":case"image":case"link":Cn("error",n),Cn("load",n);break;case"details":Cn("toggle",n);break;case"input":ee(n,l),Cn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!l.multiple},Cn("invalid",n);break;case"textarea":ue(n,l),Cn("invalid",n)}for(var c in Se(r,l),e=null,l)l.hasOwnProperty(c)&&(a=l[c],"children"===c?"string"===typeof a?n.textContent!==a&&(e=["children",a]):"number"===typeof a&&n.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&Cn("scroll",n));switch(r){case"input":K(n),ne(n,l,!0);break;case"textarea":K(n),se(n);break;case"select":case"option":break;default:"function"===typeof l.onClick&&(n.onclick=Dn)}n=e,t.updateQueue=n,null!==n&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(r)),e===fe?"script"===r?((e=c.createElement("div")).innerHTML="<script><\\/script>",e=e.removeChild(e.firstChild)):"string"===typeof n.is?e=c.createElement(r,{is:n.is}):(e=c.createElement(r),"select"===r&&(c=e,n.multiple?c.multiple=!0:n.size&&(c.size=n.size))):e=c.createElementNS(e,r),e[Yn]=t,e[Kn]=n,Wi(e,t),t.stateNode=e,c=_e(r,n),r){case"dialog":Cn("cancel",e),Cn("close",e),a=n;break;case"iframe":case"object":case"embed":Cn("load",e),a=n;break;case"video":case"audio":for(a=0;a<xn.length;a++)Cn(xn[a],e);a=n;break;case"source":Cn("error",e),a=n;break;case"img":case"image":case"link":Cn("error",e),Cn("load",e),a=n;break;case"details":Cn("toggle",e),a=n;break;case"input":ee(e,n),a=Z(e,n),Cn("invalid",e);break;case"option":a=ae(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=o({},n,{value:void 0}),Cn("invalid",e);break;case"textarea":ue(e,n),a=le(e,n),Cn("invalid",e);break;default:a=n}Se(r,a);var s=a;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?Ee(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===l?"string"===typeof f?("textarea"!==r||""!==f)&&ye(e,f):"number"===typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Cn("scroll",e):null!=f&&w(e,l,f,c))}switch(r){case"input":K(e),ne(e,n,!1);break;case"textarea":K(e),se(e);break;case"option":null!=n.value&&e.setAttribute("value",""+Q(n.value));break;case"select":e.multiple=!!n.multiple,null!=(l=n.value)?ie(e,!!n.multiple,l,!1):null!=n.defaultValue&&ie(e,!!n.multiple,n.defaultValue,!0);break;default:"function"===typeof a.onClick&&(e.onclick=Dn)}Un(r,n)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Gi(0,t,e.memoizedProps,n);else{if("string"!==typeof n&&null===t.stateNode)throw Error(i(166));r=Ra(Pa.current),Ra(Ca.current),Ha(t)?(n=t.stateNode,r=t.memoizedProps,n[Yn]=t,n.nodeValue!==r&&(t.flags|=4)):((n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[Yn]=t,t.stateNode=n)}return null;case 13:return lo(ja),n=t.memoizedState,0!==(64&t.flags)?(t.lanes=r,t):(n=null!==n,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):r=null!==e.memoizedState,n&&!r&&0!==(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!==(1&ja.current)?0===jl&&(jl=3):(0!==jl&&3!==jl||(jl=4),null===Rl||0===(134217727&ql)&&0===(134217727&zl)||gu(Rl,Ll))),(n||r)&&(t.flags|=4),null);case 4:return La(),null===e&&Pn(t.stateNode.containerInfo),null;case 10:return ta(t),null;case 17:return go(t.type)&&vo(),null;case 19:if(lo(ja),null===(n=t.memoizedState))return null;if(l=0!==(64&t.flags),null===(c=n.rendering))if(l)nl(n,!1);else{if(0!==jl||null!==e&&0!==(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ma(e))){for(t.flags|=64,nl(n,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=r,r=t.child;null!==r;)e=n,(l=r).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(c=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=c.childLanes,l.lanes=c.lanes,l.child=c.child,l.memoizedProps=c.memoizedProps,l.memoizedState=c.memoizedState,l.updateQueue=c.updateQueue,l.type=c.type,e=c.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return uo(ja,1&ja.current|2),t.child}e=e.sibling}null!==n.tail&&Fo()>Vl&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ma(c))){if(t.flags|=64,l=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),nl(n,!0),null===n.tail&&"hidden"===n.tailMode&&!c.alternate&&!za)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-n.renderingStartTime>Vl&&1073741824!==r&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432);n.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=n.last)?r.sibling=c:t.child=c,n.last=c)}return null!==n.tail?(r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Fo(),r.sibling=null,t=ja.current,uo(ja,l?1&t|2:1&t),r):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!==(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==n.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:go(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(La(),lo(fo),lo(so),Ga(),0!==(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ia(e),null;case 13:return lo(ja),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(ja),null;case 4:return La(),null;case 10:return ta(e),null;case 23:case 24:return wu(),null;default:return null}}function il(e,t){try{var r="",n=t;do{r+=$(n),n=n.return}while(n);var o=r}catch(e){o="\\nError generating stack: "+e.message+"\\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},$i=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,Ra(Ca.current);var i,l=null;switch(r){case"input":a=Z(e,a),n=Z(e,n),l=[];break;case"option":a=ae(e,a),n=ae(e,n),l=[];break;case"select":a=o({},a,{value:void 0}),n=o({},n,{value:void 0}),l=[];break;case"textarea":a=le(e,a),n=le(e,n),l=[];break;default:"function"!==typeof a.onClick&&"function"===typeof n.onClick&&(e.onclick=Dn)}for(f in Se(r,n),r=null,a)if(!n.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var c=a[f];for(i in c)c.hasOwnProperty(i)&&(r||(r={}),r[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in n){var s=n[f];if(c=null!=a?a[f]:void 0,n.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(r||(r={}),r[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(r||(r={}),r[i]=s[i])}else r||(l||(l=[]),l.push(f,r)),r=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(l=l||[]).push(f,s)):"children"===f?"string"!==typeof s&&"number"!==typeof s||(l=l||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Cn("scroll",e),l||c===s||(l=[])):"object"===typeof s&&null!==s&&s.$$typeof===j?s.toString():(l=l||[]).push(f,s))}r&&(l=l||[]).push("style",r);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Gi=function(e,t,r,n){r!==n&&(t.flags|=4)};var ul="function"===typeof WeakMap?WeakMap:Map;function cl(e,t,r){(r=ua(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Gl||(Gl=!0,Ql=n),ll(0,t)},r}function sl(e,t,r){(r=ua(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"===typeof n){var o=t.value;r.payload=function(){return ll(0,t),n(o)}}var a=e.stateNode;return null!==a&&"function"===typeof a.componentDidCatch&&(r.callback=function(){"function"!==typeof n&&(null===Yl?Yl=new Set([this]):Yl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}var fl="function"===typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(t){Du(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:Yo(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hn(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function hl(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3===(3&e.tag)){var n=e.create;e.destroy=n()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;n=o.next,0!==(4&(o=o.tag))&&0!==(1&o)&&(Iu(r,e),Au(r,e)),e=n}while(e!==t)}return;case 1:return e=r.stateNode,4&r.flags&&(null===t?e.componentDidMount():(n=r.elementType===r.type?t.memoizedProps:Yo(r.type,t.memoizedProps),e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=r.updateQueue)&&da(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:e=r.child.stateNode;break;case 1:e=r.child.stateNode}da(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.flags&&Un(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&Et(r)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function gl(e,t){for(var r=e;;){if(5===r.tag){var n=r.stateNode;if(t)"function"===typeof(n=n.style).setProperty?n.setProperty("display","none","important"):n.display="none";else{n=r.stateNode;var o=r.memoizedProps.style;o=void 0!==o&&null!==o&&o.hasOwnProperty("display")?o.display:null,n.style.display=ke("display",o)}}else if(6===r.tag)r.stateNode.nodeValue=t?"":r.memoizedProps;else if((23!==r.tag&&24!==r.tag||null===r.memoizedState||r===e)&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function vl(e,t){if(Eo&&"function"===typeof Eo.onCommitFiberUnmount)try{Eo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var n=r,o=n.destroy;if(n=n.tag,void 0!==o)if(0!==(4&n))Iu(t,r);else{n=t;try{o()}catch(e){Du(n,e)}}r=r.next}while(r!==e)}break;case 1:if(dl(t),"function"===typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Du(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function ml(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var r=t;switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&r.flags&&(ye(t,""),r.flags&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||yl(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.flags)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.flags)){r=r.stateNode;break e}}n?wl(e,r,t):kl(e,r,t)}function wl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!==(r=r._reactRootContainer)&&void 0!==r||null!==t.onclick||(t.onclick=Dn));else if(4!==n&&null!==(e=e.child))for(wl(e,t,r),e=e.sibling;null!==e;)wl(e,t,r),e=e.sibling}function kl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(kl(e,t,r),e=e.sibling;null!==e;)kl(e,t,r),e=e.sibling}function El(e,t){for(var r,n,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(r=a.stateNode,a.tag){case 5:n=!1;break e;case 3:case 4:r=r.containerInfo,n=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,c=u;;)if(vl(l,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}n?(l=r,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,n=!0,o.child.return=o,o=o.child;continue}}else if(vl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function xl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var n=r=r.next;do{3===(3&n.tag)&&(e=n.destroy,n.destroy=void 0,void 0!==e&&e()),n=n.next}while(n!==r)}return;case 1:return;case 5:if(null!=(r=t.stateNode)){n=t.memoizedProps;var o=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(r[Kn]=n,"input"===e&&"radio"===n.type&&null!=n.name&&te(r,n),_e(e,o),t=_e(e,n),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?Ee(r,u):"dangerouslySetInnerHTML"===l?me(r,u):"children"===l?ye(r,u):w(r,l,u,t)}switch(e){case"input":re(r,n);break;case"textarea":ce(r,n);break;case"select":e=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(a=n.value)?ie(r,!!n.multiple,a,!1):e!==!!n.multiple&&(null!=n.defaultValue?ie(r,!!n.multiple,n.defaultValue,!0):ie(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((r=t.stateNode).hydrate&&(r.hydrate=!1,Et(r.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bl=Fo(),gl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void gl(t,null!==t.memoizedState)}throw Error(i(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new fl),t.forEach((function(t){var n=zu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function _l(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Tl=Math.ceil,Cl=k.ReactCurrentDispatcher,Ol=k.ReactCurrentOwner,Pl=0,Rl=null,Nl=null,Ll=0,Al=0,Il=io(0),jl=0,Ml=null,Dl=0,ql=0,zl=0,Ul=0,Fl=null,Bl=0,Vl=1/0;function Hl(){Vl=Fo()+500}var Wl,$l=null,Gl=!1,Ql=null,Yl=null,Kl=!1,Xl=null,Jl=90,Zl=[],eu=[],tu=null,ru=0,nu=null,ou=-1,au=0,iu=0,lu=null,uu=!1;function cu(){return 0!==(48&Pl)?Fo():-1!==ou?ou:ou=Fo()}function su(e){if(0===(2&(e=e.mode)))return 1;if(0===(4&e))return 99===Bo()?1:2;if(0===au&&(au=Dl),0!==Qo.transition){0!==iu&&(iu=null!==Fl?Fl.pendingLanes:0),e=au;var t=4186112&~iu;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Bo(),0!==(4&Pl)&&98===e?e=Ut(12,au):e=Ut(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),au),e}function fu(e,t,r){if(50<ru)throw ru=0,nu=null,Error(i(185));if(null===(e=du(e,t)))return null;Vt(e,t,r),e===Rl&&(zl|=t,4===jl&&gu(e,Ll));var n=Bo();1===t?0!==(8&Pl)&&0===(48&Pl)?vu(e):(pu(e,r),0===Pl&&(Hl(),$o())):(0===(4&Pl)||98!==n&&99!==n||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,r)),Fl=e}function du(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}function pu(e,t){for(var r=e.callbackNode,n=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Ht(l),c=1<<u,s=a[u];if(-1===s){if(0===(c&n)||0!==(c&o)){s=t,Dt(c);var f=Mt;a[u]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);l&=~c}if(n=qt(e,e===Rl?Ll:0),t=Mt,0===n)null!==r&&(r!==jo&&_o(r),e.callbackNode=null,e.callbackPriority=0);else{if(null!==r){if(e.callbackPriority===t)return;r!==jo&&_o(r)}15===t?(r=vu.bind(null,e),null===Do?(Do=[r],qo=So(Ro,Go)):Do.push(r),r=jo):14===t?r=Wo(99,vu.bind(null,e)):r=Wo(r=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),hu.bind(null,e)),e.callbackPriority=t,e.callbackNode=r}}function hu(e){if(ou=-1,iu=au=0,0!==(48&Pl))throw Error(i(327));var t=e.callbackNode;if(Lu()&&e.callbackNode!==t)return null;var r=qt(e,e===Rl?Ll:0);if(0===r)return null;var n=r,o=Pl;Pl|=16;var a=xu();for(Rl===e&&Ll===n||(Hl(),ku(e,n));;)try{Tu();break}catch(t){Eu(e,t)}if(ea(),Cl.current=a,Pl=o,null!==Nl?n=0:(Rl=null,Ll=0,n=jl),0!==(Dl&zl))ku(e,0);else if(0!==n){if(2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(r=zt(e))&&(n=Su(e,r))),1===n)throw t=Ml,ku(e,0),gu(e,r),pu(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=r,n){case 0:case 1:throw Error(i(345));case 2:Pu(e);break;case 3:if(gu(e,r),(62914560&r)===r&&10<(n=Bl+500-Fo())){if(0!==qt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){cu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Bn(Pu.bind(null,e),n);break}Pu(e);break;case 4:if(gu(e,r),(4186112&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var l=31-Ht(r);a=1<<l,(l=n[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Fo()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Tl(r/1960))-r)){e.timeoutHandle=Bn(Pu.bind(null,e),r);break}Pu(e);break;case 5:Pu(e);break;default:throw Error(i(329))}}return pu(e,Fo()),e.callbackNode===t?hu.bind(null,e):null}function gu(e,t){for(t&=~Ul,t&=~zl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-Ht(t),n=1<<r;e[r]=-1,t&=~n}}function vu(e){if(0!==(48&Pl))throw Error(i(327));if(Lu(),e===Rl&&0!==(e.expiredLanes&Ll)){var t=Ll,r=Su(e,t);0!==(Dl&zl)&&(r=Su(e,t=qt(e,t)))}else r=Su(e,t=qt(e,0));if(0!==e.tag&&2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(t=zt(e))&&(r=Su(e,t))),1===r)throw r=Ml,ku(e,0),gu(e,t),pu(e,Fo()),r;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),pu(e,Fo()),null}function mu(e,t){var r=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function yu(e,t){var r=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function bu(e,t){uo(Il,Al),Al|=t,Dl|=t}function wu(){Al=Il.current,lo(Il)}function ku(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,Vn(r)),null!==Nl)for(r=Nl.return;null!==r;){var n=r;switch(n.tag){case 1:null!==(n=n.type.childContextTypes)&&void 0!==n&&vo();break;case 3:La(),lo(fo),lo(so),Ga();break;case 5:Ia(n);break;case 4:La();break;case 13:case 19:lo(ja);break;case 10:ta(n);break;case 23:case 24:wu()}r=r.return}Rl=e,Nl=Vu(e.current,null),Ll=Al=Dl=t,jl=0,Ml=null,Ul=zl=ql=0}function Eu(e,t){for(;;){var r=Nl;try{if(ea(),Qa.current=Pi,ei){for(var n=Xa.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}ei=!1}if(Ka=0,Za=Ja=Xa=null,ti=!1,Ol.current=null,null===r||null===r.return){jl=1,Ml=t,Nl=null;break}e:{var a=e,i=r.return,l=r,u=t;if(t=Ll,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"===typeof u&&"function"===typeof u.then){var c=u;if(0===(2&l.mode)){var s=l.alternate;s?(l.updateQueue=s.updateQueue,l.memoizedState=s.memoizedState,l.lanes=s.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!==(1&ja.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var g=d.memoizedProps;p=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var m=new Set;m.add(c),d.updateQueue=m}else v.add(c);if(0===(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ua(-1,1);y.tag=2,ca(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ul,u=new Set,b.set(c,u)):void 0===(u=b.get(c))&&(u=new Set,b.set(c,u)),!u.has(l)){u.add(l);var w=qu.bind(null,a,c,l);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((G(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==jl&&(jl=2),u=il(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,sa(d,cl(0,a,t));break e;case 1:a=u;var k=d.type,E=d.stateNode;if(0===(64&d.flags)&&("function"===typeof k.getDerivedStateFromError||null!==E&&"function"===typeof E.componentDidCatch&&(null===Yl||!Yl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,sa(d,sl(d,a,t));break e}}d=d.return}while(null!==d)}Ou(r)}catch(e){t=e,Nl===r&&null!==r&&(Nl=r=r.return);continue}break}}function xu(){var e=Cl.current;return Cl.current=Pi,null===e?Pi:e}function Su(e,t){var r=Pl;Pl|=16;var n=xu();for(Rl===e&&Ll===t||ku(e,t);;)try{_u();break}catch(t){Eu(e,t)}if(ea(),Pl=r,Cl.current=n,null!==Nl)throw Error(i(261));return Rl=null,Ll=0,jl}function _u(){for(;null!==Nl;)Cu(Nl)}function Tu(){for(;null!==Nl&&!To();)Cu(Nl)}function Cu(e){var t=Wl(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?Ou(e):Nl=t,Ol.current=null}function Ou(e){var t=e;do{var r=t.alternate;if(e=t.return,0===(2048&t.flags)){if(null!==(r=ol(r,t,Al)))return void(Nl=r);if(24!==(r=t).tag&&23!==r.tag||null===r.memoizedState||0!==(1073741824&Al)||0===(4&r.mode)){for(var n=0,o=r.child;null!==o;)n|=o.lanes|o.childLanes,o=o.sibling;r.childLanes=n}null!==e&&0===(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(r=al(t)))return r.flags&=2047,void(Nl=r);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===jl&&(jl=5)}function Pu(e){var t=Bo();return Ho(99,Ru.bind(null,e,t)),null}function Ru(e,t){do{Lu()}while(null!==Xl);if(0!==(48&Pl))throw Error(i(327));var r=e.finishedWork;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(i(177));e.callbackNode=null;var n=r.lanes|r.childLanes,o=n,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var c=31-Ht(a),s=1<<c;o[c]=0,l[c]=-1,u[c]=-1,a&=~s}if(null!==tu&&0===(24&n)&&tu.has(e)&&tu.delete(e),e===Rl&&(Nl=Rl=null,Ll=0),1<r.flags?null!==r.lastEffect?(r.lastEffect.nextEffect=r,n=r.firstEffect):n=r:n=r.firstEffect,null!==n){if(o=Pl,Pl|=32,Ol.current=null,qn=Yt,hn(l=pn())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(s=u.getSelection&&u.getSelection())&&0!==s.rangeCount){u=s.anchorNode,a=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,g=0,v=l,m=null;t:for(;;){for(var y;v!==u||0!==a&&3!==v.nodeType||(d=f+a),v!==c||0!==s&&3!==v.nodeType||(p=f+s),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)m=v,v=y;for(;;){if(v===l)break t;if(m===u&&++h===a&&(d=f),m===c&&++g===s&&(p=f),null!==(y=v.nextSibling))break;m=(v=m).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zn={focusedElem:l,selectionRange:u},Yt=!1,lu=null,uu=!1,$l=n;do{try{Nu()}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);lu=null,$l=n;do{try{for(l=e;null!==$l;){var b=$l.flags;if(16&b&&ye($l.stateNode,""),128&b){var w=$l.alternate;if(null!==w){var k=w.ref;null!==k&&("function"===typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl($l),$l.flags&=-3;break;case 6:bl($l),$l.flags&=-3,xl($l.alternate,$l);break;case 1024:$l.flags&=-1025;break;case 1028:$l.flags&=-1025,xl($l.alternate,$l);break;case 4:xl($l.alternate,$l);break;case 8:El(l,u=$l);var E=u.alternate;ml(u),null!==E&&ml(E)}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);if(k=zn,w=pn(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&dn(b.ownerDocument.documentElement,b)){null!==l&&hn(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!k.extend&&E>l&&(u=l,l=E,E=u),u=fn(b,E),a=fn(b,l),u&&a&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),E>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"===typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Yt=!!qn,zn=qn=null,e.current=r,$l=n;do{try{for(b=e;null!==$l;){var x=$l.flags;if(36&x&&hl(b,$l.alternate,$l),128&x){w=void 0;var S=$l.ref;if(null!==S){var _=$l.stateNode;switch($l.tag){case 5:w=_;break;default:w=_}"function"===typeof S?S(w):S.current=w}}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);$l=null,Mo(),Pl=o}else e.current=r;if(Kl)Kl=!1,Xl=e,Jl=t;else for($l=n;null!==$l;)t=$l.nextEffect,$l.nextEffect=null,8&$l.flags&&((x=$l).sibling=null,x.stateNode=null),$l=t;if(0===(n=e.pendingLanes)&&(Yl=null),1===n?e===nu?ru++:(ru=0,nu=e):ru=0,r=r.stateNode,Eo&&"function"===typeof Eo.onCommitFiberRoot)try{Eo.onCommitFiberRoot(ko,r,void 0,64===(64&r.current.flags))}catch(e){}if(pu(e,Fo()),Gl)throw Gl=!1,e=Ql,Ql=null,e;return 0!==(8&Pl)||$o(),null}function Nu(){for(;null!==$l;){var e=$l.alternate;uu||null===lu||(0!==(8&$l.flags)?et($l,lu)&&(uu=!0):13===$l.tag&&_l(e,$l)&&et($l,lu)&&(uu=!0));var t=$l.flags;0!==(256&t)&&pl(e,$l),0===(512&t)||Kl||(Kl=!0,Wo(97,(function(){return Lu(),null}))),$l=$l.nextEffect}}function Lu(){if(90!==Jl){var e=97<Jl?97:Jl;return Jl=90,Ho(e,ju)}return!1}function Au(e,t){Zl.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function Iu(e,t){eu.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function ju(){if(null===Xl)return!1;var e=Xl;if(Xl=null,0!==(48&Pl))throw Error(i(331));var t=Pl;Pl|=32;var r=eu;eu=[];for(var n=0;n<r.length;n+=2){var o=r[n],a=r[n+1],l=o.destroy;if(o.destroy=void 0,"function"===typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(r=Zl,Zl=[],n=0;n<r.length;n+=2){o=r[n],a=r[n+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pl=t,$o(),!0}function Mu(e,t,r){ca(e,t=cl(0,t=il(r,t),1)),t=cu(),null!==(e=du(e,1))&&(Vt(e,1,t),pu(e,t))}function Du(e,t){if(3===e.tag)Mu(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){Mu(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"===typeof r.type.getDerivedStateFromError||"function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n))){var o=sl(r,e=il(t,e),1);if(ca(r,o),o=cu(),null!==(r=du(r,1)))Vt(r,1,o),pu(r,o);else if("function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n)))try{n.componentDidCatch(t,e)}catch(e){}break}}r=r.return}}function qu(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=cu(),e.pingedLanes|=e.suspendedLanes&r,Rl===e&&(Ll&r)===r&&(4===jl||3===jl&&(62914560&Ll)===Ll&&500>Fo()-Bl?ku(e,0):Ul|=r),pu(e,t)}function zu(e,t){var r=e.stateNode;null!==r&&r.delete(t),0===(t=0)&&(0===(2&(t=e.mode))?t=1:0===(4&t)?t=99===Bo()?1:2:(0===au&&(au=Dl),0===(t=Ft(62914560&~au))&&(t=4194304))),r=cu(),null!==(e=du(e,t))&&(Vt(e,t,r),pu(e,r))}function Uu(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,r,n){return new Uu(e,t,r,n)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vu(e,t){var r=e.alternate;return null===r?((r=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Hu(e,t,r,n,o,a){var l=2;if(n=e,"function"===typeof e)Bu(e)&&(l=1);else if("string"===typeof e)l=5;else e:switch(e){case S:return Wu(r.children,o,a,t);case M:l=8,o|=16;break;case _:l=8,o|=1;break;case T:return(e=Fu(12,r,t,8|o)).elementType=T,e.type=T,e.lanes=a,e;case R:return(e=Fu(13,r,t,o)).type=R,e.elementType=R,e.lanes=a,e;case N:return(e=Fu(19,r,t,o)).elementType=N,e.lanes=a,e;case D:return $u(r,o,a,t);case q:return(e=Fu(24,r,t,o)).elementType=q,e.lanes=a,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case O:l=9;break e;case P:l=11;break e;case L:l=14;break e;case A:l=16,n=null;break e;case I:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Fu(l,r,t,o)).elementType=e,t.type=n,t.lanes=a,t}function Wu(e,t,r,n){return(e=Fu(7,e,n,t)).lanes=r,e}function $u(e,t,r,n){return(e=Fu(23,e,n,t)).elementType=D,e.lanes=r,e}function Gu(e,t,r){return(e=Fu(6,e,null,t)).lanes=r,e}function Qu(e,t,r){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yu(e,t,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Ku(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Xu(e,t,r,n){var o=t.current,a=cu(),l=su(o);e:if(r){t:{if(Ke(r=r._reactInternals)!==r||1!==r.tag)throw Error(i(170));var u=r;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(go(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===r.tag){var c=r.type;if(go(c)){r=yo(r,c,u);break e}}r=u}else r=co;return null===t.context?t.context=r:t.pendingContext=r,(t=ua(a,l)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),ca(o,t),fu(o,l,a),l}function Ju(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Zu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function ec(e,t){Zu(e,t),(e=e.alternate)&&Zu(e,t)}function tc(e,t,r){var n=null!=r&&null!=r.hydrationOptions&&r.hydrationOptions.mutableSources||null;if(r=new Yu(e,t,null!=r&&!0===r.hydrate),t=Fu(3,null,null,2===t?7:1===t?3:0),r.current=t,t.stateNode=r,ia(t),e[Xn]=r.current,Pn(8===e.nodeType?e.parentNode:e),n)for(e=0;e<n.length;e++){var o=(t=n[e])._getVersion;o=o(t._source),null==r.mutableSourceEagerHydrationData?r.mutableSourceEagerHydrationData=[t,o]:r.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=r}function rc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function nc(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a._internalRoot;if("function"===typeof o){var l=o;o=function(){var e=Ju(i);l.call(e)}}Xu(t,i,e,o)}else{if(a=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new tc(e,0,t?{hydrate:!0}:void 0)}(r,n),i=a._internalRoot,"function"===typeof o){var u=o;o=function(){var e=Ju(i);u.call(e)}}yu((function(){Xu(t,i,e,o)}))}return Ju(i)}function oc(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rc(t))throw Error(i(200));return Ku(e,t,null,r)}Wl=function(e,t,r){var n=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fo.current)Ii=!0;else{if(0===(r&n)){switch(Ii=!1,t.tag){case 3:Hi(t),Wa();break;case 5:Aa(t);break;case 1:go(t.type)&&bo(t);break;case 4:Na(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value;var o=t.type._context;uo(Ko,o._currentValue),o._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!==(r&t.child.childLanes)?Yi(e,t,r):(uo(ja,1&ja.current),null!==(t=rl(e,t,r))?t.sibling:null);uo(ja,1&ja.current);break;case 19:if(n=0!==(r&t.childLanes),0!==(64&e.flags)){if(n)return tl(e,t,r);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(ja,ja.current),n)break;return null;case 23:case 24:return t.lanes=0,zi(e,t,r)}return rl(e,t,r)}Ii=0!==(16384&e.flags)}else Ii=!1;switch(t.lanes=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=ho(t,so.current),na(t,r),o=oi(null,t,n,e,o,r),t.flags|=1,"object"===typeof o&&null!==o&&"function"===typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(n)){var a=!0;bo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=n.getDerivedStateFromProps;"function"===typeof l&&ha(t,n,l,e),o.updater=ga,t.stateNode=o,o._reactInternals=t,ba(t,n,e,r),t=Vi(null,t,n,!0,a,r)}else t.tag=0,ji(null,t,o,r),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"===typeof e)return Bu(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===P)return 11;if(e===L)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=Fi(null,t,o,e,r);break e;case 1:t=Bi(null,t,o,e,r);break e;case 11:t=Mi(null,t,o,e,r);break e;case 14:t=Di(null,t,o,Yo(o.type,e),n,r);break e}throw Error(i(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,Fi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 1:return n=t.type,o=t.pendingProps,Bi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 3:if(Hi(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),fa(t,n,null,r),(n=t.memoizedState.element)===o)Wa(),t=rl(e,t,r);else{if((a=(o=t.stateNode).hydrate)&&(qa=Wn(t.stateNode.containerInfo.firstChild),Da=t,a=za=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],$a.push(a);for(r=_a(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|1024,r=r.sibling}else ji(e,t,n,r),Wa();t=t.child}return t;case 5:return Aa(t),null===e&&Ba(t),n=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Fn(n,o)?l=null:null!==a&&Fn(n,a)&&(t.flags|=16),Ui(e,t),ji(e,t,l,r),t.child;case 6:return null===e&&Ba(t),null;case 13:return Yi(e,t,r);case 4:return Na(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Sa(t,null,n,r):ji(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Mi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 7:return ji(e,t,t.pendingProps,r),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(uo(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=ln(u,a)?0:0|("function"===typeof n._calculateChangedBits?n._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!fo.current){t=rl(e,t,r);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===n&&0!==(s.observedBits&a)){1===u.tag&&((s=ua(-1,r&-r)).tag=2,ca(u,s)),u.lanes|=r,null!==(s=u.alternate)&&(s.lanes|=r),ra(u.return,r),c.lanes|=r;break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}ji(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=(a=t.pendingProps).children,na(t,r),n=n(o=oa(o,a.unstable_observedBits)),t.flags|=1,ji(e,t,n,r),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),Di(e,t,o,a=Yo(o.type,a),n,r);case 15:return qi(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:Yo(n,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(n)?(e=!0,bo(t)):e=!1,na(t,r),ma(t,n,o),ba(t,n,o,r),Vi(null,t,n,!0,e,r);case 19:return tl(e,t,r);case 23:case 24:return zi(e,t,r)}throw Error(i(156,t.tag))},tc.prototype.render=function(e){Xu(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xu(null,e,null,(function(){t[Xn]=null}))},tt=function(e){13===e.tag&&(fu(e,4,cu()),ec(e,4))},rt=function(e){13===e.tag&&(fu(e,67108864,cu()),ec(e,67108864))},nt=function(e){if(13===e.tag){var t=cu(),r=su(e);fu(e,r,t),ec(e,r)}},ot=function(e,t){return t()},Ce=function(e,t,r){switch(t){case"input":if(re(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+\'][type="radio"]\'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=ro(n);if(!o)throw Error(i(90));X(n),re(n,o)}}}break;case"textarea":ce(e,r);break;case"select":null!=(t=r.value)&&ie(e,!!r.multiple,t,!1)}},Ae=mu,Ie=function(e,t,r,n,o){var a=Pl;Pl|=4;try{return Ho(98,e.bind(null,t,r,n,o))}finally{0===(Pl=a)&&(Hl(),$o())}},je=function(){0===(49&Pl)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Fo())}))}$o()}(),Lu())},Me=function(e,t){var r=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}};var ac={Events:[eo,to,ro,Ne,Le,Lu,{current:!1}]},ic={findFiberByHostInstance:Zn,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},lc={bundleType:ic.bundleType,version:ic.version,rendererPackageName:ic.rendererPackageName,rendererConfig:ic.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:ic.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof{}){var uc={};if(!uc.isDisabled&&uc.supportsFiber)try{ko=uc.inject(lc),Eo=uc}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ac,t.createPortal=oc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"===typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var r=Pl;if(0!==(48&r))return e(t);Pl|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{Pl=r,$o()}},t.hydrate=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!0,r)},t.render=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!rc(e))throw Error(i(40));return!!e._reactRootContainer&&(yu((function(){nc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xn]=null}))})),!0)},t.unstable_batchedUpdates=mu,t.unstable_createPortal=function(e,t){return oc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!rc(r))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return nc(e,t,r,!1,n)},t.version="17.0.1"},function(e,t,r){"use strict";e.exports=r(186)},function(e,t,r){"use strict";var n,o,a,i;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var u=Date,c=u.now();t.unstable_now=function(){return u.now()-c}}if("undefined"===typeof window||"function"!==typeof MessageChannel){var s=null,f=null,d=function e(){if(null!==s)try{var r=t.unstable_now();s(!0,r),s=null}catch(t){throw setTimeout(e,0),t}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},a=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!==typeof console){var g=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!==typeof g&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,y=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,E=k.port2;k.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();w=e+b;try{m(!0,e)?E.postMessage(null):(v=!1,m=null)}catch(e){throw E.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,E.postMessage(null))},o=function(e,r){y=p((function(){e(t.unstable_now())}),r)},a=function(){h(y),y=-1}}function x(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<T(o,t)))break e;e[n]=t,e[r]=o,r=n}}function S(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var a=2*(n+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>T(i,r))void 0!==u&&0>T(u,i)?(e[n]=u,e[l]=r,n=l):(e[n]=i,e[a]=r,n=a);else{if(!(void 0!==u&&0>T(u,r)))break e;e[n]=u,e[l]=r,n=l}}}return t}return null}function T(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var C=[],O=[],P=1,R=null,N=3,L=!1,A=!1,I=!1;function j(e){for(var t=S(O);null!==t;){if(null===t.callback)_(O);else{if(!(t.startTime<=e))break;_(O),t.sortIndex=t.expirationTime,x(C,t)}t=S(O)}}function M(e){if(I=!1,j(e),!A)if(null!==S(C))A=!0,n(D);else{var t=S(O);null!==t&&o(M,t.startTime-e)}}function D(e,r){A=!1,I&&(I=!1,a()),L=!0;var n=N;try{for(j(r),R=S(C);null!==R&&(!(R.expirationTime>r)||e&&!t.unstable_shouldYield());){var i=R.callback;if("function"===typeof i){R.callback=null,N=R.priorityLevel;var l=i(R.expirationTime<=r);r=t.unstable_now(),"function"===typeof l?R.callback=l:R===S(C)&&_(C),j(r)}else _(C);R=S(C)}if(null!==R)var u=!0;else{var c=S(O);null!==c&&o(M,c.startTime-r),u=!1}return u}finally{R=null,N=n,L=!1}}var q=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||L||(A=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return S(C)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var r=N;N=t;try{return e()}finally{N=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=q,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=N;N=e;try{return t()}finally{N=r}},t.unstable_scheduleCallback=function(e,r,i){var l=t.unstable_now();switch("object"===typeof i&&null!==i?i="number"===typeof(i=i.delay)&&0<i?l+i:l:i=l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:P++,callback:r,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,x(O,e),null===S(C)&&e===S(O)&&(I?a():I=!0,o(M,i-l))):(e.sortIndex=u,x(C,e),A||L||(A=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var r=N;N=t;try{return e.apply(this,arguments)}finally{N=r}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={"&lt":"<","&gt":">","&quot":\'"\',"&apos":"\'","&amp":"&","&lt;":"<","&gt;":">","&quot;":\'"\',"&apos;":"\'","&amp;":"&"},o={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},a={"<":"&lt;",">":"&gt;",\'"\':"&quot;","\'":"&apos;","&":"&amp;"},i=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"\'&]/g,(function(e){return a[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return isNaN(t)||t<-32768||t>65535?"":String.fromCharCode(t)}return n[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n),i=o[a];i?(r+="&"+i+";",n++):(r+=a<32||a>126?"&#"+a+";":e.charAt(n),n++)}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","Aelig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],o=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],a={},i={};!function(){for(var e=0,t=n.length;e<t;){var r=n[e],l=o[e];a[r]=String.fromCharCode(l),i[l]=r,e++}}();var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=a[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=i[e.charCodeAt(n)];r+=o?"&"+o+";":e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),a=i[o];r+=a?"&"+a+";":o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],o={},a={};!function(e,t){var r=n.length;for(;r--;){var o=n[r],a=o[0],i=o[1],l=i[0],u=l<32||l>126||62===l||60===l||38===l||34===l||39===l,c=void 0;if(u&&(c=t[l]=t[l]||{}),i[1]){var s=i[1];e[a]=String.fromCharCode(l)+String.fromCharCode(s),u&&(c[s]=a)}else e[a]=String.fromCharCode(l),u&&(c[""]=a)}}(o,a);var i=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=o[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=a[e.charCodeAt(n)];if(o){var i=o[e.charCodeAt(n+1)];if(i?n++:i=o[""],i){r+="&"+i+";",n++;continue}}r+=e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),i=a[o];if(i){var l=i[e.charCodeAt(n+1)];if(l?n++:l=i[""],l){r+="&"+l+";",n++;continue}}r+=o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=i},function(e,t,r){"use strict";var n=r(52),o=r(193);Object.defineProperty(t,"__esModule",{value:!0}),t.shouldHighlight=b,t.getChalk=w,t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(b(t)){var r=w(t),n=f(r);return y(n,e)}return e};var a,i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=c();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=n?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}r.default=e,t&&t.set(e,r);return r}(r(195)),l=r(196),u=(a=r(199))&&a.__esModule?a:{default:a};function c(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return c=function(){return e},e}var s=new Set(["as","async","from","get","of","set"]);function f(e){return{keyword:e.cyan,capitalized:e.yellow,jsxIdentifier:e.yellow,punctuator:e.yellow,number:e.magenta,string:e.green,regex:e.magenta,comment:e.grey,invalid:e.white.bgRed.bold}}var d,p=/\\r\\n|[\\n\\r\\u2028\\u2029]/,h=/^[()[\\]{}]$/,g=i.matchToToken,v=/^[a-z][\\w-]*$/i,m=function(e,t,r){if("name"===e.type){if((0,l.isKeyword)(e.value)||(0,l.isStrictReservedWord)(e.value,!0)||s.has(e.value))return"keyword";if(v.test(e.value)&&("<"===r[t-1]||"</"==r.substr(t-2,2)))return"jsxIdentifier";if(e.value[0]!==e.value[0].toLowerCase())return"capitalized"}return"punctuator"===e.type&&h.test(e.value)?"bracket":"invalid"!==e.type||"@"!==e.value&&"#"!==e.value?e.type:"punctuator"};function y(e,t){var r,o="",a=n(d(t));try{var i=function(){var t=r.value,n=t.type,a=t.value,i=e[n];o+=i?a.split(p).map((function(e){return i(e)})).join("\\n"):a};for(a.s();!(r=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}return o}function b(e){return u.default.supportsColor||e.forceColor}function w(e){var t=u.default;return e.forceColor&&(t=new u.default.constructor({enabled:!0,level:1})),t}d=o.mark((function e(t){var r,n;return o.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r=i.default.exec(t))){e.next=6;break}return n=g(r),e.next=4,{type:m(n,r.index,t),value:n.value};case 4:e.next=0;break;case 6:case"end":return e.stop()}}),e)}))},function(e,t,r){var n=r(192);e.exports=function(e,t){if(e){if("string"===typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}},function(e,t,r){e.exports=r(194)},function(e,t,r){var n=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"===typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var o=t&&t.prototype instanceof v?t:v,a=Object.create(o.prototype),i=new O(n||[]);return a._invoke=function(e,t,r){var n=f;return function(o,a){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw a;return R()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var l=_(i,r);if(l){if(l===g)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=s(e,t,r);if("normal"===u.type){if(n=r.done?h:d,u.arg===g)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=h,r.method="throw",r.arg=u.arg)}}}(e,r,i),a}function s(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",g={};function v(){}function m(){}function y(){}var b={};b[a]=function(){return this};var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==r&&n.call(k,a)&&(b=k);var E=y.prototype=v.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function r(o,a,i,l){var u=s(e[o],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"===typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function _(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,_(e,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a \'throw\' method")}return g}var o=s(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,g;var a=o.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(e){if(e){var r=e[a];if(r)return r.call(e);if("function"===typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:R}}function R(){return{value:t,done:!0}}return m.prototype=E.constructor=y,y.constructor=m,m.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"===typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},x(S.prototype),S.prototype[i]=function(){return this},e.AsyncIterator=S,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new S(c(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(E),u(E,l,"Generator"),E[a]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=P,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return l.type="throw",l.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;C(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:P(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=/(([\'"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\\'"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g,t.matchToToken=function(e){var t={type:"invalid",value:e[0],closed:void 0};return e[1]?(t.type="string",t.closed=!(!e[3]&&!e[4])):e[5]?t.type="comment":e[6]?(t.type="comment",t.closed=!!e[7]):e[8]?t.type="regex":e[9]?t.type="number":e[10]?t.type="name":e[11]?t.type="punctuator":e[12]&&(t.type="whitespace"),t}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"isIdentifierName",{enumerable:!0,get:function(){return n.isIdentifierName}}),Object.defineProperty(t,"isIdentifierChar",{enumerable:!0,get:function(){return n.isIdentifierChar}}),Object.defineProperty(t,"isIdentifierStart",{enumerable:!0,get:function(){return n.isIdentifierStart}}),Object.defineProperty(t,"isReservedWord",{enumerable:!0,get:function(){return o.isReservedWord}}),Object.defineProperty(t,"isStrictBindOnlyReservedWord",{enumerable:!0,get:function(){return o.isStrictBindOnlyReservedWord}}),Object.defineProperty(t,"isStrictBindReservedWord",{enumerable:!0,get:function(){return o.isStrictBindReservedWord}}),Object.defineProperty(t,"isStrictReservedWord",{enumerable:!0,get:function(){return o.isStrictReservedWord}}),Object.defineProperty(t,"isKeyword",{enumerable:!0,get:function(){return o.isKeyword}});var n=r(197),o=r(198)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifierStart=s,t.isIdentifierChar=f,t.isIdentifierName=function(e){for(var t=!0,r=0,n=Array.from(e);r<n.length;r++){var o=n[r].codePointAt(0);if(t){if(!s(o))return!1;t=!1}else if(!f(o))return!1}return!t};var n="\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࣇऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-鿼ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-ꟊꟵ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",o="‌‍\xb7̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿᫀᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",a=new RegExp("["+n+"]"),i=new RegExp("["+n+o+"]");n=o=null;var l=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938],u=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];function c(e,t){for(var r=65536,n=0,o=t.length;n<o;n+=2){if((r+=t[n])>e)return!1;if((r+=t[n+1])>=e)return!0}return!1}function s(e){return e<65?36===e:e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&a.test(String.fromCharCode(e)):c(e,l)))}function f(e){return e<48?36===e:e<58||!(e<65)&&(e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&i.test(String.fromCharCode(e)):c(e,l)||c(e,u))))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isReservedWord=u,t.isStrictReservedWord=c,t.isStrictBindOnlyReservedWord=s,t.isStrictBindReservedWord=function(e,t){return c(e,t)||s(e)},t.isKeyword=function(e){return a.has(e)};var n=["implements","interface","let","package","private","protected","public","static","yield"],o=["eval","arguments"],a=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"]),i=new Set(n),l=new Set(o);function u(e,t){return t&&"await"===e||"enum"===e}function c(e,t){return u(e,t)||i.has(e)}function s(e){return l.has(e)}},function(e,t,r){"use strict";(function(t){var n=r(52),o=r(200),a=r(201),i=r(206).stdout,l=r(207),u="win32"===t.platform&&!(Object({NODE_ENV:"production"}).TERM||"").toLowerCase().startsWith("xterm"),c=["ansi","ansi","ansi256","ansi16m"],s=new Set(["gray"]),f=Object.create(null);function d(e,t){t=t||{};var r=i?i.level:0;e.level=void 0===t.level?r:t.level,e.enabled="enabled"in t?t.enabled:e.level>0}function p(e){if(!this||!(this instanceof p)||this.template){var t={};return d(t,e),t.template=function(){var e=[].slice.call(arguments);return T.apply(null,[t.template].concat(e))},Object.setPrototypeOf(t,p.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=p,t.template}d(this,e)}u&&(a.blue.open="\x1b[94m");for(var h=function(){var e=v[g];a[e].closeRe=new RegExp(o(a[e].close),"g"),f[e]={get:function(){var t=a[e];return S.call(this,this._styles?this._styles.concat(t):[t],this._empty,e)}}},g=0,v=Object.keys(a);g<v.length;g++)h();f.visible={get:function(){return S.call(this,this._styles||[],!0,"visible")}},a.color.closeRe=new RegExp(o(a.color.close),"g");for(var m=function(){var e=b[y];if(s.has(e))return"continue";f[e]={get:function(){var t=this.level;return function(){var r=a.color[c[t]][e].apply(null,arguments),n={open:r,close:a.color.close,closeRe:a.color.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},y=0,b=Object.keys(a.color.ansi);y<b.length;y++)m();a.bgColor.closeRe=new RegExp(o(a.bgColor.close),"g");for(var w=function(){var e=E[k];if(s.has(e))return"continue";var t="bg"+e[0].toUpperCase()+e.slice(1);f[t]={get:function(){var t=this.level;return function(){var r=a.bgColor[c[t]][e].apply(null,arguments),n={open:r,close:a.bgColor.close,closeRe:a.bgColor.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},k=0,E=Object.keys(a.bgColor.ansi);k<E.length;k++)w();var x=Object.defineProperties((function(){}),f);function S(e,t,r){var n=function e(){return _.apply(e,arguments)};n._styles=e,n._empty=t;var o=this;return Object.defineProperty(n,"level",{enumerable:!0,get:function(){return o.level},set:function(e){o.level=e}}),Object.defineProperty(n,"enabled",{enumerable:!0,get:function(){return o.enabled},set:function(e){o.enabled=e}}),n.hasGrey=this.hasGrey||"gray"===r||"grey"===r,n.__proto__=x,n}function _(){var e=arguments,t=e.length,r=String(arguments[0]);if(0===t)return"";if(t>1)for(var o=1;o<t;o++)r+=" "+e[o];if(!this.enabled||this.level<=0||!r)return this._empty?"":r;var i=a.dim.open;u&&this.hasGrey&&(a.dim.open="");var l,c=n(this._styles.slice().reverse());try{for(c.s();!(l=c.n()).done;){var s=l.value;r=(r=s.open+r.replace(s.closeRe,s.open)+s.close).replace(/\\r?\\n/g,"".concat(s.close,"$&").concat(s.open))}}catch(e){c.e(e)}finally{c.f()}return a.dim.open=i,r}function T(e,t){if(!Array.isArray(t))return[].slice.call(arguments,1).join(" ");for(var r=[].slice.call(arguments,2),n=[t.raw[0]],o=1;o<t.length;o++)n.push(String(r[o-1]).replace(/[{}\\\\]/g,"\\\\$&")),n.push(String(t.raw[o]));return l(e,n.join(""))}Object.defineProperties(p.prototype,f),e.exports=p(),e.exports.supportsColor=i,e.exports.default=e.exports}).call(this,r(51))},function(e,t,r){"use strict";var n=/[|\\\\{}()[\\]^$+*?.]/g;e.exports=function(e){if("string"!==typeof e)throw new TypeError("Expected a string");return e.replace(n,"\\\\$&")}},function(e,t,r){"use strict";(function(e){var t=r(203),n=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(n+r,"m")}},o=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";5;").concat(n,"m")}},a=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";2;").concat(n[0],";").concat(n[1],";").concat(n[2],"m")}};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){var e=new Map,r={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};r.color.grey=r.color.gray;for(var i=0,l=Object.keys(r);i<l.length;i++){for(var u=l[i],c=r[u],s=0,f=Object.keys(c);s<f.length;s++){var d=f[s],p=c[d];r[d]={open:"\x1b[".concat(p[0],"m"),close:"\x1b[".concat(p[1],"m")},c[d]=r[d],e.set(p[0],p[1])}Object.defineProperty(r,u,{value:c,enumerable:!1}),Object.defineProperty(r,"codes",{value:e,enumerable:!1})}var h=function(e){return e},g=function(e,t,r){return[e,t,r]};r.color.close="\x1b[39m",r.bgColor.close="\x1b[49m",r.color.ansi={ansi:n(h,0)},r.color.ansi256={ansi256:o(h,0)},r.color.ansi16m={rgb:a(g,0)},r.bgColor.ansi={ansi:n(h,10)},r.bgColor.ansi256={ansi256:o(h,10)},r.bgColor.ansi16m={rgb:a(g,10)};for(var v=0,m=Object.keys(t);v<m.length;v++){var y=m[v];if("object"===typeof t[y]){var b=t[y];"ansi16"===y&&(y="ansi"),"ansi16"in b&&(r.color.ansi[y]=n(b.ansi16,0),r.bgColor.ansi[y]=n(b.ansi16,10)),"ansi256"in b&&(r.color.ansi256[y]=o(b.ansi256,0),r.bgColor.ansi256[y]=o(b.ansi256,10)),"rgb"in b&&(r.color.ansi16m[y]=a(b.rgb,0),r.bgColor.ansi16m[y]=a(b.rgb,10))}}return r}})}).call(this,r(202)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){var n=r(87),o=r(205),a={};Object.keys(n).forEach((function(e){a[e]={},Object.defineProperty(a[e],"channels",{value:n[e].channels}),Object.defineProperty(a[e],"labels",{value:n[e].labels});var t=o(e);Object.keys(t).forEach((function(r){var n=t[r];a[e][r]=function(e){var t=function(t){if(void 0===t||null===t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var r=e(t);if("object"===typeof r)for(var n=r.length,o=0;o<n;o++)r[o]=Math.round(r[o]);return r};return"conversion"in e&&(t.conversion=e.conversion),t}(n),a[e][r].raw=function(e){var t=function(t){return void 0===t||null===t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(n)}))})),e.exports=a},function(e,t,r){"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(e,t,r){var n=r(87);function o(e){var t=function(){for(var e={},t=Object.keys(n),r=t.length,o=0;o<r;o++)e[t[o]]={distance:-1,parent:null};return e}(),r=[e];for(t[e].distance=0;r.length;)for(var o=r.pop(),a=Object.keys(n[o]),i=a.length,l=0;l<i;l++){var u=a[l],c=t[u];-1===c.distance&&(c.distance=t[o].distance+1,c.parent=o,r.unshift(u))}return t}function a(e,t){return function(r){return t(e(r))}}function i(e,t){for(var r=[t[e].parent,e],o=n[t[e].parent][e],i=t[e].parent;t[i].parent;)r.unshift(t[i].parent),o=a(n[t[i].parent][i],o),i=t[i].parent;return o.conversion=r,o}e.exports=function(e){for(var t=o(e),r={},n=Object.keys(t),a=n.length,l=0;l<a;l++){var u=n[l];null!==t[u].parent&&(r[u]=i(u,t))}return r}},function(e,t,r){"use strict";e.exports={stdout:!1,stderr:!1}},function(e,t,r){"use strict";var n=r(52),o=/(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi,a=/(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g,i=/^([\'"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/,l=/\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi,u=new Map([["n","\\n"],["r","\\r"],["t","\\t"],["b","\\b"],["f","\\f"],["v","\\v"],["0","\\0"],["\\\\","\\\\"],["e","\x1b"],["a","\x07"]]);function c(e){return"u"===e[0]&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):u.get(e)||e}function s(e,t){var r,o,a=[],u=t.trim().split(/\\s*,\\s*/g),s=n(u);try{for(s.s();!(o=s.n()).done;){var f=o.value;if(isNaN(f)){if(!(r=f.match(i)))throw new Error("Invalid Chalk template style argument: ".concat(f," (in style \'").concat(e,"\')"));a.push(r[2].replace(l,(function(e,t,r){return t?c(t):r})))}else a.push(Number(f))}}catch(e){s.e(e)}finally{s.f()}return a}function f(e){a.lastIndex=0;for(var t,r=[];null!==(t=a.exec(e));){var n=t[1];if(t[2]){var o=s(n,t[2]);r.push([n].concat(o))}else r.push([n])}return r}function d(e,t){var r,o={},a=n(t);try{for(a.s();!(r=a.n()).done;){var i,l=r.value,u=n(l.styles);try{for(u.s();!(i=u.n()).done;){var c=i.value;o[c[0]]=l.inverse?null:c.slice(1)}}catch(e){u.e(e)}finally{u.f()}}}catch(e){a.e(e)}finally{a.f()}for(var s=e,f=0,d=Object.keys(o);f<d.length;f++){var p=d[f];if(Array.isArray(o[p])){if(!(p in s))throw new Error("Unknown Chalk style: ".concat(p));s=o[p].length>0?s[p].apply(s,o[p]):s[p]}}return s}e.exports=function(e,t){var r=[],n=[],a=[];if(t.replace(o,(function(t,o,i,l,u,s){if(o)a.push(c(o));else if(l){var p=a.join("");a=[],n.push(0===r.length?p:d(e,r)(p)),r.push({inverse:i,styles:f(l)})}else if(u){if(0===r.length)throw new Error("Found extraneous } in Chalk template literal");n.push(d(e,r)(a.join(""))),a=[],r.pop()}else a.push(s)})),n.push(a.join("")),r.length>0){var i="Chalk template literal is missing ".concat(r.length," closing bracket").concat(1===r.length?"":"s"," (`}`)");throw new Error(i)}return n.join("")}},function(e,t,r){"use strict";r.r(t),r.d(t,"ThemeContext",(function(){return me}));r(90);var n=r(0),o=r.n(n),a=r(53),i=r.n(a),l=function(e){return{position:"relative",display:"inline-flex",flexDirection:"column",height:"100%",width:"1024px",maxWidth:"100%",overflowX:"hidden",overflowY:"auto",padding:"0.5rem",boxSizing:"border-box",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"11px",whiteSpace:"pre-wrap",wordBreak:"break-word",lineHeight:1.5,color:e.color}},u=null;var c=function(e){var t=Object(n.useContext)(me),r=e.shortcutHandler;return Object(n.useEffect)((function(){var e=function(e){r&&r(e.key)};return window.addEventListener("keydown",e),u&&u.addEventListener("keydown",e),function(){window.removeEventListener("keydown",e),u&&u.removeEventListener("keydown",e)}}),[r]),o.a.createElement("div",{style:l(t),ref:function(e){if(e){var t=e.ownerDocument;u=t.defaultView}}},e.children)},s=function(e){return{fontFamily:"sans-serif",color:e.footer,marginTop:"0.5rem",flex:"0 0 auto"}};var f=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:s(t)},e.line1,o.a.createElement("br",null),e.line2)},d=function(e){return{fontSize:"2em",fontFamily:"sans-serif",color:e.headerColor,whiteSpace:"pre-wrap",margin:"0 2rem 0.75rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"}};var p=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:d(t)},e.headerText)};function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function v(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach((function(t){h(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var m={position:"relative",display:"block",padding:"0.5em",marginTop:"0.5em",marginBottom:"0.5em",overflowX:"auto",whiteSpace:"pre-wrap",borderRadius:"0.25rem"},y={fontFamily:"Consolas, Menlo, monospace"};var b=function(e){var t=e.main,r=e.codeHTML,a=Object(n.useContext)(me),i=v(v({},m),{},{backgroundColor:a.primaryPreBackground,color:a.primaryPreColor}),l=v(v({},m),{},{backgroundColor:a.secondaryPreBackground,color:a.secondaryPreColor}),u=t?i:l,c={__html:r};return o.a.createElement("pre",{style:u},o.a.createElement("code",{style:y,dangerouslySetInnerHTML:c}))},w=r(33),k=r.n(w),E=new(r(88).AllHtmlEntities),x=function(e){return{reset:[e.base05,"transparent"],black:e.base05,red:e.base08,green:e.base0B,yellow:e.base08,blue:e.base0C,magenta:e.base0C,cyan:e.base0E,gray:e.base03,lightgrey:e.base01,darkgrey:e.base03}},S={"ansi-bright-black":"black","ansi-bright-yellow":"yellow","ansi-yellow":"yellow","ansi-bright-green":"green","ansi-green":"green","ansi-bright-cyan":"cyan","ansi-cyan":"cyan","ansi-bright-red":"red","ansi-red":"red","ansi-bright-magenta":"magenta","ansi-magenta":"magenta","ansi-white":"darkgrey"};var _=function(e,t){for(var r=(new k.a).ansiToJson(E.encode(e),{use_classes:!0}),n="",o=!1,a=0;a<r.length;++a)for(var i=r[a],l=i.content,u=i.fg,c=l.split("\\n"),s=0;s<c.length;++s){o||(n+=\'<span data-ansi-line="true">\',o=!0);var f=c[s].replace("\\r",""),d=x(t)[S[u]];null!=d?n+=\'<span style="color: \'+d+\';">\'+f+"</span>":(null!=u&&console.log("Missing color mapping: ",u),n+="<span>"+f+"</span>"),s<c.length-1&&(n+="</span>",o=!1,n+="<br/>")}return o&&(n+="</span>",o=!1),n},T=/^\\.(\\/[^/\\n ]+)+\\.[^/\\n ]+$/,C=[/^.*\\((\\d+):(\\d+)\\)$/,/^Line (\\d+):.+$/];var O=function(e){for(var t=e.split("\\n"),r="",n=0,o=0,a=0;a<t.length;a++){var i=k.a.ansiToText(t[a]).trim();if(i){!r&&i.match(T)&&(r=i);for(var l=0;l<C.length;){var u=i.match(C[l]);if(u){n=parseInt(u[1],10),o=parseInt(u[2],10)+1||1;break}l++}if(r&&n)break}}return r&&n?{fileName:r,lineNumber:n,colNumber:o}:null},P={cursor:"pointer"};var R=function(e){var t=Object(n.useContext)(me),r=e.error,a=e.editorHandler,i=O(r),l=null!==i&&null!==a;return o.a.createElement(c,null,o.a.createElement(p,{headerText:"Failed to compile"}),o.a.createElement("div",{onClick:l&&i?function(){return a(i)}:null,style:l?P:null},o.a.createElement(b,{main:!0,codeHTML:_(r,t)})),o.a.createElement(f,{line1:"This error occurred during the build time and cannot be dismissed."}))};function N(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function A(e,t,r){return t&&L(e.prototype,t),r&&L(e,r),e}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e){return(D="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){return!t||"object"!==D(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return e}(e):t}function z(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=M(e);if(t){var o=M(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return q(this,r)}}var U=function(e){return{color:e.closeColor,lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0}};var F=function(e){var t=e.close,r=Object(n.useContext)(me);return o.a.createElement("span",{title:"Click or press Escape to dismiss.",onClick:t,style:U(r)},"\xd7")},B={marginBottom:"0.5rem"},V={marginRight:"1em"},H={border:"none",borderRadius:"4px",padding:"3px 6px",cursor:"pointer"},W=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopRightRadius:"0px",borderBottomRightRadius:"0px",marginRight:"1px"})},$=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopLeftRadius:"0px",borderBottomLeftRadius:"0px"})};var G=function(e){var t=Object(n.useContext)(me),r=e.currentError,a=e.totalErrors,i=e.previous,l=e.next;return o.a.createElement("div",{style:B},o.a.createElement("span",{style:V},o.a.createElement("button",{onClick:i,style:W(t)},"←"),o.a.createElement("button",{onClick:l,style:$(t)},"→")),"".concat(r," of ").concat(a," errors on the page"))};function Q(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(n=(i=l.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){o=!0,a=e}finally{try{n||null==l.return||l.return()}finally{if(o)throw a}}return r}}(e,t)||function(e,t){if(e){if("string"===typeof e)return Q(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Q(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function K(e,t){for(;null!=t&&"br"!==t.tagName.toLowerCase();)t=t.nextElementSibling;null!=t&&e.removeChild(t)}var X=r(89);var J=function(e){var t=Object(n.useContext)(me),r=e.lines,a=e.lineNum,i=e.columnNum,l=e.contextSize,u=e.main,c=[],s=1/0;r.forEach((function(e){var t=e.content,r=t.match(/^\\s*/);""!==t&&(s=r&&r[0]?Math.min(s,r[0].length):0)})),r.forEach((function(e){var t=e.content,r=e.lineNumber;isFinite(s)&&(t=t.substring(s)),c[r-1]=t}));var f=Object(X.codeFrameColumns)(c.join("\\n"),{start:{line:a,column:null==i?0:i-(isFinite(s)?s:0)}},{forceColor:!0,linesAbove:l,linesBelow:l}),d=_(f,t),p=document.createElement("code");p.innerHTML=d,function(e){for(var t=e.childNodes,r=0;r<t.length;++r){var n=t[r];if("span"===n.tagName.toLowerCase()){var o=n.innerText;null!=o&&"|^"===o.replace(/\\s/g,"")&&(n.style.position="absolute",K(e,n))}}}(p);var h=p.childNodes;e:for(var g=0;g<h.length;++g)for(var v=h[g].childNodes,m=0;m<v.length;++m){var y=v[m].innerText;if(null!=y&&-1!==y.indexOf(" "+a+" |"))break e}return o.a.createElement(b,{main:u,codeHTML:p.innerHTML})};function Z(e,t,r,n,o,a,i){var l;if(!i&&e&&"number"===typeof t){var u=/^[/|\\\\].*?[/|\\\\]((src|node_modules)[/|\\\\].*)/.exec(e);l=u&&u[1]?u[1]:e,l+=":"+t,r&&(l+=":"+r)}else n&&"number"===typeof o?(l=n+":"+o,a&&(l+=":"+a)):l="unknown";return l.replace("webpack://",".")}var ee=function(e){return{textDecoration:"none",color:e.anchorColor,cursor:"pointer"}},te=function(e){return{marginBottom:"1.5em",color:e.toggleColor,cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",background:e.toggleBackground,fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"}};var re=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!1),2),a=r[0],i=r[1],l=function(){var t=e.frame,r=t._originalFileName,n=t._originalLineNumber;return r?-1!==r.trim().indexOf(" ")?null:{fileName:r,lineNumber:n||1}:null},u=function(){var t=l();t&&e.editorHandler(t)},c=e.frame,s=e.contextSize,f=e.critical,d=e.showCode,p=c.fileName,h=c.lineNumber,g=c.columnNumber,v=c._scriptCode,m=c._originalFileName,y=c._originalLineNumber,b=c._originalColumnNumber,w=c._originalScriptCode,k=c.getFunctionName(),E=Z(m,y,b,p,h,g,a),x=null;d&&(a&&v&&0!==v.length&&null!=h?x={lines:v,lineNum:h,columnNum:g,contextSize:s,main:f}:!a&&w&&0!==w.length&&null!=y&&(x={lines:w,lineNum:y,columnNum:b,contextSize:s,main:f}));var S=null!==l()&&null!==e.editorHandler;return o.a.createElement("div",null,o.a.createElement("div",null,k),o.a.createElement("div",{style:{fontSize:"0.9em",marginBottom:"0.9em"}},o.a.createElement("span",{style:S?ee(t):null,onClick:S?u:null,onKeyDown:S?function(e){"Enter"===e.key&&u()}:null,tabIndex:S?"0":null},E)),x&&o.a.createElement("span",null,o.a.createElement("span",{onClick:S?u:null,style:S?{cursor:"pointer"}:null},o.a.createElement(J,x)),o.a.createElement("button",{style:te(t),onClick:function(){i(!a)}},"View "+(a?"source":"compiled"))))},ne={cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"},oe=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"1.5em"})},ae=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"0.6em"})};var ie=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!0),2),a=r[0],i=r[1],l=function(){i(!a)},u=e.children.length;return o.a.createElement("div",null,o.a.createElement("button",{onClick:l,style:a?oe(t):ae(t)},(a?"▶":"▼")+" ".concat(u," stack frames were ")+(a?"collapsed.":"expanded.")),o.a.createElement("div",{style:{display:a?"none":"block"}},e.children,o.a.createElement("button",{onClick:l,style:ae(t)},"▲ ".concat(u," stack frames were expanded."))))};function le(e){switch(e){case"EvalError":case"InternalError":case"RangeError":case"ReferenceError":case"SyntaxError":case"TypeError":case"URIError":return!0;default:return!1}}var ue={fontSize:"1em",flex:"0 1 auto",minHeight:"0px",overflow:"auto"},ce=function(e){j(r,e);var t=z(r);function r(){return N(this,r),t.apply(this,arguments)}return A(r,[{key:"renderFrames",value:function(){var e=this.props,t=e.stackFrames,r=e.errorName,n=e.contextSize,a=e.editorHandler,i=[],l=!1,u=[],c=0;return t.forEach((function(e,s){var f=e.fileName,d=function(e,t){return null==e||""===e||-1!==e.indexOf("/~/")||-1!==e.indexOf("/node_modules/")||-1!==e.trim().indexOf(" ")||null==t||""===t}(e._originalFileName,f),p=!le(r),h=d&&(p||l);d||(l=!0);var g=o.a.createElement(re,{key:"frame-"+s,frame:e,contextSize:n,critical:0===s,showCode:!h,editorHandler:a}),v=s===t.length-1;h&&u.push(g),h&&!v||(1===u.length?i.push(u[0]):u.length>1&&(c++,i.push(o.a.createElement(ie,{key:"bundle-"+c},u))),u=[]),h||i.push(g)})),i}},{key:"render",value:function(){return o.a.createElement("div",{style:ue},this.renderFrames())}}]),r}(n.Component),se={display:"flex",flexDirection:"column"};var fe=function(e){var t=e.errorRecord,r=e.editorHandler,n=t.error,a=t.unhandledRejection,i=t.contextSize,l=t.stackFrames,u=a?"Unhandled Rejection ("+n.name+")":n.name,c=n.message,s=c.match(/^\\w*:/)||!u?c:u+": "+c;return s=s.replace(/^Invariant Violation:\\s*/,"").replace(/^Warning:\\s*/,"").replace(" Check the render method","\\n\\nCheck the render method").replace(" Check your code at","\\n\\nCheck your code at"),o.a.createElement("div",{style:se},o.a.createElement(p,{headerText:s}),o.a.createElement(ce,{stackFrames:l,errorName:u,contextSize:i,editorHandler:r}))},de=function(e){j(r,e);var t=z(r);function r(){var e;N(this,r);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return(e=t.call.apply(t,[this].concat(o))).state={currentIndex:0},e.previous=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex>0?e.currentIndex-1:t.errorRecords.length-1}}))},e.next=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex<t.errorRecords.length-1?e.currentIndex+1:0}}))},e.shortcutHandler=function(t){"Escape"===t?e.props.close():"ArrowLeft"===t?e.previous():"ArrowRight"===t&&e.next()},e}return A(r,[{key:"render",value:function(){var e=this.props,t=e.errorRecords,r=e.close,n=t.length;return o.a.createElement(c,{shortcutHandler:this.shortcutHandler},o.a.createElement(F,{close:r}),n>1&&o.a.createElement(G,{currentError:this.state.currentIndex+1,totalErrors:n,previous:this.previous,next:this.next}),o.a.createElement(fe,{errorRecord:t[this.state.currentIndex],editorHandler:this.props.editorHandler}),o.a.createElement(f,{line1:"This screen is visible only in development. It will not appear if the app crashes in production.",line2:"Open your browser’s developer console to further inspect this error.  Click the \'X\' or hit ESC to dismiss this message."}))}}]),r}(n.PureComponent),pe={background:"white",color:"black",headerColor:"#ce1126",primaryPreBackground:"rgba(206, 17, 38, 0.05)",primaryPreColor:"inherit",secondaryPreBackground:"rgba(251, 245, 180, 0.3)",secondaryPreColor:"inherit",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#293238",navBackground:"rgba(206, 17, 38, 0.05)",navArrow:"#ce1126",base01:"#f5f5f5",base03:"#6e6e6e",base05:"#333333",base08:"#881280",base0B:"#1155cc",base0C:"#994500",base0E:"#c80000"},he={background:"#353535",color:"white",headerColor:"#e83b46",primaryPreBackground:"rgba(206, 17, 38, 0.1)",primaryPreColor:"#fccfcf",secondaryPreBackground:"rgba(251, 245, 180, 0.1)",secondaryPreColor:"#fbf5b4",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#ffffff",navBackground:"rgba(206, 17, 38, 0.2)",navArrow:"#ce1126",base01:"#282a2e",base03:"#969896",base05:"#c5c8c6",base08:"#cc6666",base0B:"#b5bd68",base0C:"#8abeb7",base0E:"#b294bb"};var ge=null,ve=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?he:pe,me=Object(n.createContext)();window.updateContent=function(e){var t,r,n,a,l,u=(r=(t=e).currentBuildError,n=t.currentRuntimeErrorRecords,a=t.dismissRuntimeErrors,l=t.editorHandler,r?o.a.createElement(me.Provider,{value:ve},o.a.createElement(R,{error:r,editorHandler:l})):n.length>0?o.a.createElement(me.Provider,{value:ve},o.a.createElement(de,{errorRecords:n,close:a,editorHandler:l})):null);return null===u?(i.a.unmountComponentAtNode(ge),!1):(i.a.render(u,ge),!0)},document.body.style.margin="0",document.body.style["max-width"]="100vw",function(e,t){for(var r in e.setAttribute("style",""),t)t.hasOwnProperty(r)&&(e.style[r]=t[r])}(ge=document.createElement("div"),{width:"100%",height:"100%","box-sizing":"border-box","text-align":"center","background-color":ve.background}),document.body.appendChild(ge),window.parent.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady()}]);', ee = null, te = !1, re = !1, ne = null, oe = null, ae = [], ie = null, le = null;
            function ue(e) {
                ne = e, ee && me();
            }
            function ce(e) {
                oe = e, me();
            }
            function se(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                ie = t, X(pe(t))(e);
            }
            function fe() {
                oe = null, me();
            }
            function de(e) {
                if (null !== le) throw new Error("Already listening");
                e.launchEditorEndpoint && console.warn("Warning: `startReportingRuntimeErrors` doesn’t accept `launchEditorEndpoint` argument anymore. Use `listenToOpenInEditor` instead with your own implementation to open errors in editor "), ie = e, le = K(pe(e), e.filename);
            }
            var pe = function(e) {
                return function(t) {
                    try {
                        "function" == typeof e.onError && e.onError.call(null);
                    } finally{
                        if (ae.some(function(e) {
                            return e.error === t.error;
                        })) return;
                        ae = ae.concat([
                            t
                        ]), me();
                    }
                };
            };
            function he() {
                ae = [], me();
            }
            function ge() {
                if (null === le) throw new Error("Not currently listening");
                ie = null;
                try {
                    le();
                } finally{
                    le = null;
                }
            }
            function me() {
                if (!te) {
                    if (re) ve();
                    else {
                        te = !0;
                        var e = window.document.createElement("iframe");
                        !function(e, t) {
                            for(var r in e.setAttribute("style", ""), t)t.hasOwnProperty(r) && (e.style[r] = t[r]);
                        }(e, J), e.onload = function() {
                            var t = e.contentDocument;
                            if (null != t && null != t.body) {
                                ee = e;
                                var r = e.contentWindow.document.createElement("script");
                                r.type = "text/javascript", r.innerHTML = Z, t.body.appendChild(r);
                            }
                        }, window.document.body.appendChild(e);
                    }
                }
            }
            function ve() {
                if (!ie) throw new Error("Expected options to be injected.");
                if (!ee) throw new Error("Iframe has not been created yet.");
                ee.contentWindow.updateContent({
                    currentBuildError: oe,
                    currentRuntimeErrorRecords: ae,
                    dismissRuntimeErrors: he,
                    editorHandler: ne
                }) || (window.document.body.removeChild(ee), ee = null, re = !1);
            }
            window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ = window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ || {}, window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady = function() {
                re = !0, te = !1, ve();
            };
        }
    ]);
});

},{"d1546958eb39fdcf":"d5jf4"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"8lqZg":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$20e5 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$20e5.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("@chakra-ui/react");
var _client = require("react-dom/client");
var _clientDefault = parcelHelpers.interopDefault(_client);
var _app = require("./App");
var _appDefault = parcelHelpers.interopDefault(_app);
(0, _clientDefault.default).createRoot(document.getElementById("root")).render(/*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _react.ChakraProvider), {
    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _appDefault.default), {}, void 0, false, {
        fileName: "src/index.js",
        lineNumber: 7,
        columnNumber: 5
    }, undefined)
}, void 0, false, {
    fileName: "src/index.js",
    lineNumber: 6,
    columnNumber: 3
}, undefined));

  $parcel$ReactRefreshHelpers$20e5.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","@chakra-ui/react":"igDme","react-dom/client":"lOjBx","./App":"2kQhy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"iTorj":[function(require,module,exports) {
"use strict";
module.exports = require("ee51401569654d91");

},{"ee51401569654d91":"48uCM"}],"48uCM":[function(require,module,exports) {
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    var React = require("58362d9d82be395f");
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) {
            checkKeyStringCoercion(maybeKey);
            key = "" + maybeKey;
        }
        if (hasValidKey(config)) {
            checkKeyStringCoercion(config.key);
            key = "" + config.key;
        }
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) return "\n\nCheck the render method of `" + name + "`.";
        }
        return "";
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== "object") return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === "string") return;
        var propTypes;
        if (typeof type === "function") propTypes = type.propTypes;
        else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = "null";
            else if (isArray(type)) typeString = "array";
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    var jsxDEV$1 = jsxWithValidation;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = jsxDEV$1;
})();

},{"58362d9d82be395f":"21dqq"}],"21dqq":[function(require,module,exports) {
"use strict";
module.exports = require("a569817e6ea559f6");

},{"a569817e6ea559f6":"6YvXz"}],"6YvXz":[function(require,module,exports) {
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var ReactVersion = "18.2.0";
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: null
    };
    var ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ""; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || "";
        return stack;
    };
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning("warn", format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
        }
    };
    var assign = Object.assign;
    var emptyObject = {};
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
        isMounted: [
            "isMounted",
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            "replaceState",
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = "" + config.key;
            }
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (element === null || element === undefined) throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = assign({}, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = "" + config.key;
            } // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = ".";
    var SUBSEPARATOR = ":";
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            "=": "=0",
            ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return "$" + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === "object" && element !== null && element.key != null) {
            checkKeyStringCoercion(element.key);
            return escape("" + element.key);
        } // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case "string":
            case "number":
                invokeCallback = true;
                break;
            case "object":
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                    // The `if` statement here prevents auto-disabling of the safe
                    // coercion ESLint rule, so we must manually disable it below.
                    // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) checkKeyStringCoercion(mappedChild.key);
                    mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === "object") {
                // eslint-disable-next-line react-internal/safe-string-coercion
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw new Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue) {
        // TODO: Second argument used to be an optional `calculateChangedBits`
        // function. Warn to reserve for future use?
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            // This might throw either because it's missing or throws. If so, we treat it
            // as still uninitialized and try again next time. Which is the same as what
            // happens if the ctor or any wrappers processing the ctor throws. This might
            // end up fixing it if the resolution was a concurrency bug.
            thenable.then(function(moduleObject) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = moduleObject;
                }
            }, function(error) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                }
            });
            if (payload._status === Uninitialized) {
                // In case, we're still uninitialized, then we're waiting for the thenable
                // to resolve. Set it as pending in the meantime.
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
            }
        }
        if (payload._status === Resolved) {
            var moduleObject = payload._result;
            if (moduleObject === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            if (!("default" in moduleObject)) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            return moduleObject.default;
        } else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, "defaultProps", {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, "propTypes", {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== "function") error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
        else if (render.length !== 0 && render.length !== 2) error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.forwardRef((props, ref) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!render.name && !render.displayName) render.displayName = name;
            }
        });
        return elementType;
    }
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.memo((props) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!type.name && !type.displayName) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (dispatcher === null) error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        // intentionally don't throw our own error because this is in a hot path.
        // Also helps ensure this is inlined.
        return dispatcher;
    }
    function useContext(Context) {
        var dispatcher = resolveDispatcher();
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
    }
    function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) return "\n\nCheck the render method of `" + name + "`.";
        }
        return "";
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return "";
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== "object") return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === "string") return;
        var propTypes;
        if (typeof type === "function") propTypes = type.propTypes;
        else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = "null";
            else if (isArray(type)) typeString = "array";
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
        try {
            scope();
        } finally{
            ReactCurrentBatchConfig.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    var didWarnAboutMessageChannel = false;
    var enqueueTaskImpl = null;
    function enqueueTask(task) {
        if (enqueueTaskImpl === null) try {
            // read require off the module object to get around the bundlers.
            // we don't want them to detect a require and bundle a Node polyfill.
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
            // version of setImmediate, bypassing fake timers if any.
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
        } catch (_err) {
            // we're in a browser
            // we can't use regular timers because they may still be faked
            // so we try MessageChannel+postMessage instead
            enqueueTaskImpl = function(callback) {
                if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(undefined);
            };
        }
        return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0;
    var didWarnNoAwaitAct = false;
    function act(callback) {
        // `act` calls can be nested, so we track the depth. This represents the
        // number of `act` scopes on the stack.
        var prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        if (ReactCurrentActQueue.current === null) // This is the outermost `act` scope. Initialize the queue. The reconciler
        // will detect the queue and use it instead of Scheduler.
        ReactCurrentActQueue.current = [];
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
        var result;
        try {
            // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
            // set to `true` while the given callback is executed, not for updates
            // triggered during an async event, because this is how the legacy
            // implementation of `act` behaved.
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
            // which flushed updates immediately after the scope function exits, even
            // if it's an async function.
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                }
            }
        } catch (error) {
            popActScope(prevActScopeDepth);
            throw error;
        } finally{
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
            // for it to resolve before exiting the current scope.
            var wasAwaited = false;
            var thenable = {
                then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue) {
                        popActScope(prevActScopeDepth);
                        if (actScopeDepth === 0) // We've exited the outermost act scope. Recursively flush the
                        // queue until there's no remaining work.
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        else resolve(returnValue);
                    }, function(error) {
                        // The callback threw an error.
                        popActScope(prevActScopeDepth);
                        reject(error);
                    });
                }
            };
            if (!didWarnNoAwaitAct && typeof Promise !== "undefined") // eslint-disable-next-line no-undef
            Promise.resolve().then(function() {}).then(function() {
                if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                }
            });
            return thenable;
        } else {
            var returnValue = result; // The callback is not an async function. Exit the current scope
            // immediately, without awaiting.
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
                // Exiting the outermost act scope. Flush the queue.
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                } // Return a thenable. If the user awaits it, we'll flush again in
                // case additional work was scheduled by a microtask.
                var _thenable = {
                    then: function(resolve, reject) {
                        // Confirm we haven't re-entered another `act` scope, in case
                        // the user does something weird like await the thenable
                        // multiple times.
                        if (ReactCurrentActQueue.current === null) {
                            // Recursively flush the queue until there's no remaining work.
                            ReactCurrentActQueue.current = [];
                            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        } else resolve(returnValue);
                    }
                };
                return _thenable;
            } else {
                // Since we're inside a nested `act` scope, the returned thenable
                // immediately resolves. The outer scope will flush the queue.
                var _thenable2 = {
                    then: function(resolve, reject) {
                        resolve(returnValue);
                    }
                };
                return _thenable2;
            }
        }
    }
    function popActScope(prevActScopeDepth) {
        if (prevActScopeDepth !== actScopeDepth - 1) error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null) try {
            flushActQueue(queue);
            enqueueTask(function() {
                if (queue.length === 0) {
                    // No additional work was scheduled. Finish.
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                } else // Keep flushing work until there's none left.
                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
        } catch (error) {
            reject(error);
        }
        else resolve(returnValue);
    }
    var isFlushing = false;
    function flushActQueue(queue) {
        if (!isFlushing) {
            // Prevent re-entrance.
            isFlushing = true;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(true);
                    while (callback !== null);
                }
                queue.length = 0;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                queue = queue.slice(i + 1);
                throw error;
            } finally{
                isFlushing = false;
            }
        }
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.startTransition = startTransition;
    exports.unstable_act = act;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useDeferredValue = useDeferredValue;
    exports.useEffect = useEffect;
    exports.useId = useId;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useInsertionEffect = useInsertionEffect;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.useSyncExternalStore = useSyncExternalStore;
    exports.useTransition = useTransition;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"igDme":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChakraBaseProvider", ()=>(0, _chunkQAITB7GGMjs.ChakraBaseProvider));
parcelHelpers.export(exports, "ChakraProvider", ()=>(0, _chunkQAITB7GGMjs.ChakraProvider));
var _chunkQAITB7GGMjs = require("./chunk-QAITB7GG.mjs");
// src/index.ts
var _accordion = require("@chakra-ui/accordion");
parcelHelpers.exportAll(_accordion, exports);
var _alert = require("@chakra-ui/alert");
parcelHelpers.exportAll(_alert, exports);
var _avatar = require("@chakra-ui/avatar");
parcelHelpers.exportAll(_avatar, exports);
var _breadcrumb = require("@chakra-ui/breadcrumb");
parcelHelpers.exportAll(_breadcrumb, exports);
var _button = require("@chakra-ui/button");
parcelHelpers.exportAll(_button, exports);
var _card = require("@chakra-ui/card");
parcelHelpers.exportAll(_card, exports);
var _checkbox = require("@chakra-ui/checkbox");
parcelHelpers.exportAll(_checkbox, exports);
var _closeButton = require("@chakra-ui/close-button");
parcelHelpers.exportAll(_closeButton, exports);
var _controlBox = require("@chakra-ui/control-box");
parcelHelpers.exportAll(_controlBox, exports);
var _counter = require("@chakra-ui/counter");
parcelHelpers.exportAll(_counter, exports);
var _cssReset = require("@chakra-ui/css-reset");
parcelHelpers.exportAll(_cssReset, exports);
var _editable = require("@chakra-ui/editable");
parcelHelpers.exportAll(_editable, exports);
var _focusLock = require("@chakra-ui/focus-lock");
parcelHelpers.exportAll(_focusLock, exports);
var _formControl = require("@chakra-ui/form-control");
parcelHelpers.exportAll(_formControl, exports);
var _hooks = require("@chakra-ui/hooks");
parcelHelpers.exportAll(_hooks, exports);
var _icon = require("@chakra-ui/icon");
parcelHelpers.exportAll(_icon, exports);
var _image = require("@chakra-ui/image");
parcelHelpers.exportAll(_image, exports);
var _input = require("@chakra-ui/input");
parcelHelpers.exportAll(_input, exports);
var _layout = require("@chakra-ui/layout");
parcelHelpers.exportAll(_layout, exports);
var _mediaQuery = require("@chakra-ui/media-query");
parcelHelpers.exportAll(_mediaQuery, exports);
var _menu = require("@chakra-ui/menu");
parcelHelpers.exportAll(_menu, exports);
var _modal = require("@chakra-ui/modal");
parcelHelpers.exportAll(_modal, exports);
var _numberInput = require("@chakra-ui/number-input");
parcelHelpers.exportAll(_numberInput, exports);
var _pinInput = require("@chakra-ui/pin-input");
parcelHelpers.exportAll(_pinInput, exports);
var _popover = require("@chakra-ui/popover");
parcelHelpers.exportAll(_popover, exports);
var _popper = require("@chakra-ui/popper");
parcelHelpers.exportAll(_popper, exports);
var _portal = require("@chakra-ui/portal");
parcelHelpers.exportAll(_portal, exports);
var _progress = require("@chakra-ui/progress");
parcelHelpers.exportAll(_progress, exports);
var _radio = require("@chakra-ui/radio");
parcelHelpers.exportAll(_radio, exports);
var _reactEnv = require("@chakra-ui/react-env");
parcelHelpers.exportAll(_reactEnv, exports);
var _select = require("@chakra-ui/select");
parcelHelpers.exportAll(_select, exports);
var _skeleton = require("@chakra-ui/skeleton");
parcelHelpers.exportAll(_skeleton, exports);
var _skipNav = require("@chakra-ui/skip-nav");
parcelHelpers.exportAll(_skipNav, exports);
var _slider = require("@chakra-ui/slider");
parcelHelpers.exportAll(_slider, exports);
var _spinner = require("@chakra-ui/spinner");
parcelHelpers.exportAll(_spinner, exports);
var _stat = require("@chakra-ui/stat");
parcelHelpers.exportAll(_stat, exports);
var _stepper = require("@chakra-ui/stepper");
parcelHelpers.exportAll(_stepper, exports);
var _switch = require("@chakra-ui/switch");
parcelHelpers.exportAll(_switch, exports);
var _system = require("@chakra-ui/system");
parcelHelpers.exportAll(_system, exports);
var _table = require("@chakra-ui/table");
parcelHelpers.exportAll(_table, exports);
var _tabs = require("@chakra-ui/tabs");
parcelHelpers.exportAll(_tabs, exports);
var _tag = require("@chakra-ui/tag");
parcelHelpers.exportAll(_tag, exports);
var _textarea = require("@chakra-ui/textarea");
parcelHelpers.exportAll(_textarea, exports);
var _theme = require("@chakra-ui/theme");
parcelHelpers.exportAll(_theme, exports);
var _themeUtils = require("@chakra-ui/theme-utils");
parcelHelpers.exportAll(_themeUtils, exports);
var _toast = require("@chakra-ui/toast");
parcelHelpers.exportAll(_toast, exports);
var _tooltip = require("@chakra-ui/tooltip");
parcelHelpers.exportAll(_tooltip, exports);
var _transition = require("@chakra-ui/transition");
parcelHelpers.exportAll(_transition, exports);
var _visuallyHidden = require("@chakra-ui/visually-hidden");
parcelHelpers.exportAll(_visuallyHidden, exports);

},{"./chunk-QAITB7GG.mjs":"iGY0g","@chakra-ui/accordion":"43mGV","@chakra-ui/alert":"jwJbG","@chakra-ui/avatar":"343iv","@chakra-ui/breadcrumb":"9kDJj","@chakra-ui/button":"8qtNy","@chakra-ui/card":"fagRm","@chakra-ui/checkbox":"irZ7S","@chakra-ui/close-button":"gSDF2","@chakra-ui/control-box":"ktVGX","@chakra-ui/counter":"m7Jg5","@chakra-ui/css-reset":"j0D6v","@chakra-ui/editable":"a5SfN","@chakra-ui/focus-lock":"cRbMA","@chakra-ui/form-control":"5Ic17","@chakra-ui/hooks":"2IUDP","@chakra-ui/icon":"jW1nH","@chakra-ui/image":"iFNr0","@chakra-ui/input":"k8EdY","@chakra-ui/layout":"bpGn5","@chakra-ui/media-query":"27uLV","@chakra-ui/menu":"bvzwT","@chakra-ui/modal":"kLy8v","@chakra-ui/number-input":"25Ppc","@chakra-ui/pin-input":"9Hbj5","@chakra-ui/popover":"9ITQx","@chakra-ui/popper":"p5cnD","@chakra-ui/portal":"d4tN5","@chakra-ui/progress":"lSA07","@chakra-ui/radio":"cb6DD","@chakra-ui/react-env":"jTqMf","@chakra-ui/select":"5QGPB","@chakra-ui/skeleton":"bgQ0S","@chakra-ui/skip-nav":"iNPQV","@chakra-ui/slider":"bplRf","@chakra-ui/spinner":"lDqj1","@chakra-ui/stat":"efQ3p","@chakra-ui/stepper":"ai0Iw","@chakra-ui/switch":"9zjXm","@chakra-ui/system":"jpRoG","@chakra-ui/table":"dDfpU","@chakra-ui/tabs":"4ACBI","@chakra-ui/tag":"2wKcV","@chakra-ui/textarea":"lTBcs","@chakra-ui/theme":"b2xd8","@chakra-ui/theme-utils":"3tJTX","@chakra-ui/toast":"kaZow","@chakra-ui/tooltip":"9HMRA","@chakra-ui/transition":"igsIe","@chakra-ui/visually-hidden":"bGqMm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iGY0g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChakraProvider", ()=>ChakraProvider);
parcelHelpers.export(exports, "ChakraBaseProvider", ()=>ChakraBaseProvider);
// src/chakra-provider.tsx
var _provider = require("@chakra-ui/provider");
var _theme = require("@chakra-ui/theme");
var _toast = require("@chakra-ui/toast");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var createChakraProvider = (providerTheme)=>{
    return function ChakraProvider2({ children, theme = providerTheme, toastOptions, ...restProps }) {
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _provider.ChakraProvider), {
            theme,
            ...restProps,
            children: [
                /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _toast.ToastOptionProvider), {
                    value: toastOptions == null ? void 0 : toastOptions.defaultOptions,
                    children
                }),
                /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _toast.ToastProvider), {
                    ...toastOptions
                })
            ]
        });
    };
};
var ChakraProvider = createChakraProvider((0, _theme.theme));
var ChakraBaseProvider = createChakraProvider((0, _theme.baseTheme));

},{"@chakra-ui/provider":"b8ixl","@chakra-ui/theme":"b2xd8","@chakra-ui/toast":"kaZow","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b8ixl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChakraProvider", ()=>(0, _chunk3DDHO3UNMjs.ChakraProvider));
var _chunk3DDHO3UNMjs = require("./chunk-3DDHO3UN.mjs");
"use client";

},{"./chunk-3DDHO3UN.mjs":"bKN8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bKN8Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChakraProvider", ()=>ChakraProvider);
// src/chakra-provider.tsx
var _cssReset = require("@chakra-ui/css-reset");
var _portal = require("@chakra-ui/portal");
var _system = require("@chakra-ui/system");
var _reactEnv = require("@chakra-ui/react-env");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var ChakraProvider = (props)=>{
    const { children, colorModeManager, portalZIndex, resetScope, resetCSS = true, theme = {}, environment, cssVarsRoot, disableEnvironment, disableGlobalStyle } = props;
    const _children = /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _reactEnv.EnvironmentProvider), {
        environment,
        disabled: disableEnvironment,
        children
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.ThemeProvider), {
        theme,
        cssVarsRoot,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.ColorModeProvider), {
            colorModeManager,
            options: theme.config,
            children: [
                resetCSS ? /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _cssReset.CSSReset), {
                    scope: resetScope
                }) : /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _cssReset.CSSPolyfill), {}),
                !disableGlobalStyle && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.GlobalStyle), {}),
                portalZIndex ? /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _portal.PortalManager), {
                    zIndex: portalZIndex,
                    children: _children
                }) : _children
            ]
        })
    });
};

},{"@chakra-ui/css-reset":"j0D6v","@chakra-ui/portal":"d4tN5","@chakra-ui/system":"jpRoG","@chakra-ui/react-env":"jTqMf","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j0D6v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CSSPolyfill", ()=>(0, _chunkB4LBJQ3XMjs.CSSPolyfill));
parcelHelpers.export(exports, "CSSReset", ()=>(0, _chunkB4LBJQ3XMjs.CSSReset));
var _chunkB4LBJQ3XMjs = require("./chunk-B4LBJQ3X.mjs");
"use client";

},{"./chunk-B4LBJQ3X.mjs":"gWiiZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gWiiZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CSSPolyfill", ()=>CSSPolyfill);
parcelHelpers.export(exports, "CSSReset", ()=>CSSReset);
parcelHelpers.export(exports, "css_reset_default", ()=>css_reset_default);
// src/css-reset.tsx
var _react = require("@emotion/react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var css = String.raw;
var vhPolyfill = css`
  :root,
  :host {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root,
    :host {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root,
    :host {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100dvh) {
    :root,
    :host {
      --chakra-vh: 100dvh;
    }
  }
`;
var CSSPolyfill = ()=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _react.Global), {
        styles: vhPolyfill
    });
var CSSReset = ({ scope = "" })=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _react.Global), {
        styles: css`
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        margin: 0;
        font-feature-settings: "kern";
      }

      ${scope} :where(*, *::before, *::after) {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
        word-wrap: break-word;
      }

      main {
        display: block;
      }

      ${scope} hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      ${scope} :where(pre, code, kbd,samp) {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      ${scope} a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      ${scope} abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      ${scope} :where(b, strong) {
        font-weight: bold;
      }

      ${scope} small {
        font-size: 80%;
      }

      ${scope} :where(sub,sup) {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      ${scope} sub {
        bottom: -0.25em;
      }

      ${scope} sup {
        top: -0.5em;
      }

      ${scope} img {
        border-style: none;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      ${scope} :where(button, input) {
        overflow: visible;
      }

      ${scope} :where(button, select) {
        text-transform: none;
      }

      ${scope} :where(
          button::-moz-focus-inner,
          [type="button"]::-moz-focus-inner,
          [type="reset"]::-moz-focus-inner,
          [type="submit"]::-moz-focus-inner
        ) {
        border-style: none;
        padding: 0;
      }

      ${scope} fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      ${scope} legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      ${scope} progress {
        vertical-align: baseline;
      }

      ${scope} textarea {
        overflow: auto;
      }

      ${scope} :where([type="checkbox"], [type="radio"]) {
        box-sizing: border-box;
        padding: 0;
      }

      ${scope} input[type="number"]::-webkit-inner-spin-button,
      ${scope} input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      ${scope} input[type="number"] {
        -moz-appearance: textfield;
      }

      ${scope} input[type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      ${scope} input[type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ${scope} ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      ${scope} details {
        display: block;
      }

      ${scope} summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      ${scope} :where(
          blockquote,
          dl,
          dd,
          h1,
          h2,
          h3,
          h4,
          h5,
          h6,
          hr,
          figure,
          p,
          pre
        ) {
        margin: 0;
      }

      ${scope} button {
        background: transparent;
        padding: 0;
      }

      ${scope} fieldset {
        margin: 0;
        padding: 0;
      }

      ${scope} :where(ol, ul) {
        margin: 0;
        padding: 0;
      }

      ${scope} textarea {
        resize: vertical;
      }

      ${scope} :where(button, [role="button"]) {
        cursor: pointer;
      }

      ${scope} button::-moz-focus-inner {
        border: 0 !important;
      }

      ${scope} table {
        border-collapse: collapse;
      }

      ${scope} :where(h1, h2, h3, h4, h5, h6) {
        font-size: inherit;
        font-weight: inherit;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      ${scope} :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
      }

      ${scope} :where(img, video) {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible]
        :focus:not([data-focus-visible-added]):not(
          [data-focus-visible-disabled]
        ) {
        outline: none;
        box-shadow: none;
      }

      ${scope} select::-ms-expand {
        display: none;
      }

      ${vhPolyfill}
    `
    });
var css_reset_default = CSSReset;

},{"@emotion/react":"9qiaY","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9qiaY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheProvider", ()=>(0, _emotionElementC39617D8BrowserEsmJs.C));
parcelHelpers.export(exports, "ThemeContext", ()=>(0, _emotionElementC39617D8BrowserEsmJs.T));
parcelHelpers.export(exports, "ThemeProvider", ()=>(0, _emotionElementC39617D8BrowserEsmJs.a));
parcelHelpers.export(exports, "__unsafe_useEmotionCache", ()=>(0, _emotionElementC39617D8BrowserEsmJs._));
parcelHelpers.export(exports, "useTheme", ()=>(0, _emotionElementC39617D8BrowserEsmJs.u));
parcelHelpers.export(exports, "withEmotionCache", ()=>(0, _emotionElementC39617D8BrowserEsmJs.w));
parcelHelpers.export(exports, "withTheme", ()=>(0, _emotionElementC39617D8BrowserEsmJs.b));
parcelHelpers.export(exports, "ClassNames", ()=>ClassNames);
parcelHelpers.export(exports, "Global", ()=>Global);
parcelHelpers.export(exports, "createElement", ()=>jsx);
parcelHelpers.export(exports, "css", ()=>css);
parcelHelpers.export(exports, "jsx", ()=>jsx);
parcelHelpers.export(exports, "keyframes", ()=>keyframes);
var _emotionElementC39617D8BrowserEsmJs = require("./emotion-element-c39617d8.browser.esm.js");
var _react = require("react");
var _utils = require("@emotion/utils");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var _serialize = require("@emotion/serialize");
var _cache = require("@emotion/cache");
var _extends = require("@babel/runtime/helpers/extends");
var _weakMemoize = require("@emotion/weak-memoize");
var _emotionReactIsolatedHnrsBrowserEsmJs = require("../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js");
var _hoistNonReactStatics = require("hoist-non-react-statics");
var global = arguments[3];
var pkg = {
    name: "@emotion/react",
    version: "11.11.1",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
        "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    exports: {
        ".": {
            module: {
                worker: "./dist/emotion-react.worker.esm.js",
                browser: "./dist/emotion-react.browser.esm.js",
                "default": "./dist/emotion-react.esm.js"
            },
            "import": "./dist/emotion-react.cjs.mjs",
            "default": "./dist/emotion-react.cjs.js"
        },
        "./jsx-runtime": {
            module: {
                worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
                browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
                "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
        },
        "./_isolated-hnrs": {
            module: {
                worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
                browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
                "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
        },
        "./jsx-dev-runtime": {
            module: {
                worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
                browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
                "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
        },
        "./package.json": "./package.json",
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": {
            types: {
                "import": "./macro.d.mts",
                "default": "./macro.d.ts"
            },
            "default": "./macro.js"
        }
    },
    types: "types/index.d.ts",
    files: [
        "src",
        "dist",
        "jsx-runtime",
        "jsx-dev-runtime",
        "_isolated-hnrs",
        "types/*.d.ts",
        "macro.*"
    ],
    sideEffects: false,
    author: "Emotion Contributors",
    license: "MIT",
    scripts: {
        "test:typescript": "dtslint types"
    },
    dependencies: {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.11.0",
        "@emotion/cache": "^11.11.0",
        "@emotion/serialize": "^1.1.2",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
        "@emotion/utils": "^1.2.1",
        "@emotion/weak-memoize": "^0.3.1",
        "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
        react: ">=16.8.0"
    },
    peerDependenciesMeta: {
        "@types/react": {
            optional: true
        }
    },
    devDependencies: {
        "@definitelytyped/dtslint": "0.0.112",
        "@emotion/css": "11.11.0",
        "@emotion/css-prettifier": "1.1.3",
        "@emotion/server": "11.11.0",
        "@emotion/styled": "11.11.0",
        "html-tag-names": "^1.1.2",
        react: "16.14.0",
        "svg-tag-names": "^1.1.1",
        typescript: "^4.5.5"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
        access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
        entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
        ],
        umdName: "emotionReact",
        exports: {
            envConditions: [
                "browser",
                "worker"
            ],
            extra: {
                "./types/css-prop": "./types/css-prop.d.ts",
                "./macro": {
                    types: {
                        "import": "./macro.d.mts",
                        "default": "./macro.d.ts"
                    },
                    "default": "./macro.js"
                }
            }
        }
    }
};
var jsx = function jsx(type, props) {
    var args = arguments;
    if (props == null || !(0, _emotionElementC39617D8BrowserEsmJs.h).call(props, "css")) // $FlowFixMe
    return _react.createElement.apply(undefined, args);
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = (0, _emotionElementC39617D8BrowserEsmJs.E);
    createElementArgArray[1] = (0, _emotionElementC39617D8BrowserEsmJs.c)(type, props);
    for(var i = 2; i < argsLength; i++)createElementArgArray[i] = args[i];
     // $FlowFixMe
    return _react.createElement.apply(null, createElementArgArray);
};
var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag
var Global = /* #__PURE__ */ (0, _emotionElementC39617D8BrowserEsmJs.w)(function(props, cache) {
    if (!warnedAboutCssPropForGlobal && // probably using the custom createElement which
    // means it will be turned into a className prop
    // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
    (props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
    }
    var styles = props.styles;
    var serialized = (0, _serialize.serializeStyles)([
        styles
    ], undefined, _react.useContext((0, _emotionElementC39617D8BrowserEsmJs.T)));
    if (!(0, _emotionElementC39617D8BrowserEsmJs.i)) {
        var _ref;
        var serializedNames = serialized.name;
        var serializedStyles = serialized.styles;
        var next = serialized.next;
        while(next !== undefined){
            serializedNames += " " + next.name;
            serializedStyles += next.styles;
            next = next.next;
        }
        var shouldCache = cache.compat === true;
        var rules = cache.insert("", {
            name: serializedNames,
            styles: serializedStyles
        }, cache.sheet, shouldCache);
        if (shouldCache) return null;
        return /*#__PURE__*/ _react.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
        }, _ref.nonce = cache.sheet.nonce, _ref));
    } // yes, i know these hooks are used conditionally
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything
    var sheetRef = _react.useRef();
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback)(function() {
        var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675
        var sheet = new cache.sheet.constructor({
            key: key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false; // $FlowFixMe
        var node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
        if (cache.sheet.tags.length) sheet.before = cache.sheet.tags[0];
        if (node !== null) {
            rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s
            node.setAttribute("data-emotion", key);
            sheet.hydrate([
                node
            ]);
        }
        sheetRef.current = [
            sheet,
            rehydrating
        ];
        return function() {
            sheet.flush();
        };
    }, [
        cache
    ]);
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback)(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
        }
        if (serialized.next !== undefined) // insert keyframes
        (0, _utils.insertStyles)(cache, serialized.next, true);
        if (sheet.tags.length) {
            // if this doesn't exist then it will be null so the style element will be appended
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
    }, [
        cache,
        serialized.name
    ]);
    return null;
});
Global.displayName = "EmotionGlobal";
function css() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return (0, _serialize.serializeStyles)(args);
}
var keyframes = function keyframes() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name; // $FlowFixMe
    return {
        name: name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
    };
};
var classnames = function classnames(args) {
    var len = args.length;
    var i = 0;
    var cls = "";
    for(; i < len; i++){
        var arg = args[i];
        if (arg == null) continue;
        var toAdd = void 0;
        switch(typeof arg){
            case "boolean":
                break;
            case "object":
                if (Array.isArray(arg)) toAdd = classnames(arg);
                else {
                    if (arg.styles !== undefined && arg.name !== undefined) console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                    toAdd = "";
                    for(var k in arg)if (arg[k] && k) {
                        toAdd && (toAdd += " ");
                        toAdd += k;
                    }
                }
                break;
            default:
                toAdd = arg;
        }
        if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
        }
    }
    return cls;
};
function merge(registered, css, className) {
    var registeredStyles = [];
    var rawClassName = (0, _utils.getRegisteredStyles)(registered, registeredStyles, className);
    if (registeredStyles.length < 2) return className;
    return rawClassName + css(registeredStyles);
}
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serializedArr = _ref.serializedArr;
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback)(function() {
        for(var i = 0; i < serializedArr.length; i++)(0, _utils.insertStyles)(cache, serializedArr[i], false);
    });
    return null;
};
var ClassNames = /* #__PURE__ */ (0, _emotionElementC39617D8BrowserEsmJs.w)(function(props, cache) {
    var hasRendered = false;
    var serializedArr = [];
    var css = function css() {
        if (hasRendered && true) throw new Error("css can only be used during render");
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        var serialized = (0, _serialize.serializeStyles)(args, cache.registered);
        serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`
        (0, _utils.registerStyles)(cache, serialized, false);
        return cache.key + "-" + serialized.name;
    };
    var cx = function cx() {
        if (hasRendered && true) throw new Error("cx can only be used during render");
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return merge(cache.registered, css, classnames(args));
    };
    var content = {
        css: css,
        cx: cx,
        theme: _react.useContext((0, _emotionElementC39617D8BrowserEsmJs.T))
    };
    var ele = props.children(content);
    hasRendered = true;
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
        cache: cache,
        serializedArr: serializedArr
    }), ele);
});
ClassNames.displayName = "EmotionClassNames";
var isBrowser = true; // #1727, #2905 for some reason Jest and Vitest evaluate modules twice if some consuming module gets mocked
var isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
if (isBrowser && !isTestEnv) {
    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
    var globalContext = typeof globalThis !== "undefined" ? globalThis // eslint-disable-line no-undef
     : isBrowser ? window : global;
    var globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
    if (globalContext[globalKey]) console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    globalContext[globalKey] = true;
}

},{"./emotion-element-c39617d8.browser.esm.js":"dsRqI","react":"21dqq","@emotion/utils":"6UI8e","@emotion/use-insertion-effect-with-fallbacks":"lPCYn","@emotion/serialize":"kS2E2","@emotion/cache":"3Umtj","@babel/runtime/helpers/extends":"vw3vn","@emotion/weak-memoize":"grJxk","../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js":"cUsDD","hoist-non-react-statics":"1GfsB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dsRqI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "C", ()=>CacheProvider);
parcelHelpers.export(exports, "E", ()=>Emotion$1);
parcelHelpers.export(exports, "T", ()=>ThemeContext);
parcelHelpers.export(exports, "_", ()=>__unsafe_useEmotionCache);
parcelHelpers.export(exports, "a", ()=>ThemeProvider);
parcelHelpers.export(exports, "b", ()=>withTheme);
parcelHelpers.export(exports, "c", ()=>createEmotionProps);
parcelHelpers.export(exports, "h", ()=>hasOwnProperty);
parcelHelpers.export(exports, "i", ()=>isBrowser);
parcelHelpers.export(exports, "u", ()=>useTheme);
parcelHelpers.export(exports, "w", ()=>withEmotionCache);
var _react = require("react");
var _cache = require("@emotion/cache");
var _cacheDefault = parcelHelpers.interopDefault(_cache);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _weakMemoize = require("@emotion/weak-memoize");
var _weakMemoizeDefault = parcelHelpers.interopDefault(_weakMemoize);
var _emotionReactIsolatedHnrsBrowserEsmJs = require("../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js");
var _emotionReactIsolatedHnrsBrowserEsmJsDefault = parcelHelpers.interopDefault(_emotionReactIsolatedHnrsBrowserEsmJs);
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var isBrowser = true;
var hasOwnProperty = {}.hasOwnProperty;
var EmotionCacheContext = /* #__PURE__ */ _react.createContext(// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== "undefined" ? /* #__PURE__ */ (0, _cacheDefault.default)({
    key: "css"
}) : null);
EmotionCacheContext.displayName = "EmotionCacheContext";
var CacheProvider = EmotionCacheContext.Provider;
var __unsafe_useEmotionCache = function useEmotionCache() {
    return (0, _react.useContext)(EmotionCacheContext);
};
var withEmotionCache = function withEmotionCache(func) {
    // $FlowFixMe
    return /*#__PURE__*/ (0, _react.forwardRef)(function(props, ref) {
        // the cache will never be null in the browser
        var cache = (0, _react.useContext)(EmotionCacheContext);
        return func(props, cache, ref);
    });
};
if (!isBrowser) withEmotionCache = function withEmotionCache(func) {
    return function(props) {
        var cache = (0, _react.useContext)(EmotionCacheContext);
        if (cache === null) {
            // yes, we're potentially creating this on every render
            // it doesn't actually matter though since it's only on the server
            // so there will only every be a single render
            // that could change in the future because of suspense and etc. but for now,
            // this works and i don't want to optimise for a future thing that we aren't sure about
            cache = (0, _cacheDefault.default)({
                key: "css"
            });
            return /*#__PURE__*/ _react.createElement(EmotionCacheContext.Provider, {
                value: cache
            }, func(props, cache));
        } else return func(props, cache);
    };
};
var ThemeContext = /* #__PURE__ */ _react.createContext({});
ThemeContext.displayName = "EmotionThemeContext";
var useTheme = function useTheme() {
    return _react.useContext(ThemeContext);
};
var getTheme = function getTheme(outerTheme, theme) {
    if (typeof theme === "function") {
        var mergedTheme = theme(outerTheme);
        if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
        return mergedTheme;
    }
    if (theme == null || typeof theme !== "object" || Array.isArray(theme)) throw new Error("[ThemeProvider] Please make your theme prop a plain object");
    return (0, _extendsDefault.default)({}, outerTheme, theme);
};
var createCacheWithTheme = /* #__PURE__ */ (0, _weakMemoizeDefault.default)(function(outerTheme) {
    return (0, _weakMemoizeDefault.default)(function(theme) {
        return getTheme(outerTheme, theme);
    });
});
var ThemeProvider = function ThemeProvider(props) {
    var theme = _react.useContext(ThemeContext);
    if (props.theme !== theme) theme = createCacheWithTheme(theme)(props.theme);
    return /*#__PURE__*/ _react.createElement(ThemeContext.Provider, {
        value: theme
    }, props.children);
};
function withTheme(Component) {
    var componentName = Component.displayName || Component.name || "Component";
    var render = function render(props, ref) {
        var theme = _react.useContext(ThemeContext);
        return /*#__PURE__*/ _react.createElement(Component, (0, _extendsDefault.default)({
            theme: theme,
            ref: ref
        }, props));
    }; // $FlowFixMe
    var WithTheme = /*#__PURE__*/ _react.forwardRef(render);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return (0, _emotionReactIsolatedHnrsBrowserEsmJsDefault.default)(WithTheme, Component);
}
var getLastPart = function getLastPart(functionName) {
    // The match may be something like 'Object.createEmotionProps' or
    // 'Loader.prototype.render'
    var parts = functionName.split(".");
    return parts[parts.length - 1];
};
var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {
    // V8
    var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
    if (match) return getLastPart(match[1]); // Safari / Firefox
    match = /^([A-Za-z0-9$.]+)@/.exec(line);
    if (match) return getLastPart(match[1]);
    return undefined;
};
var internalReactFunctionNames = /* #__PURE__ */ new Set([
    "renderWithHooks",
    "processChild",
    "finishClassComponent",
    "renderToString"
]); // These identifiers come from error stacks, so they have to be valid JS
// identifiers, thus we only need to replace what is a valid character for JS,
// but not for CSS.
var sanitizeIdentifier = function sanitizeIdentifier(identifier) {
    return identifier.replace(/\$/g, "-");
};
var getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {
    if (!stackTrace) return undefined;
    var lines = stackTrace.split("\n");
    for(var i = 0; i < lines.length; i++){
        var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just "Error"
        if (!functionName) continue; // If we reach one of these, we have gone too far and should quit
        if (internalReactFunctionNames.has(functionName)) break; // The component name is the first function in the stack that starts with an
        // uppercase letter
        if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);
    }
    return undefined;
};
var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var createEmotionProps = function createEmotionProps(type, props) {
    if (typeof props.css === "string" && // check if there is a css declaration
    props.css.indexOf(":") !== -1) throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
    var newProps = {};
    for(var key in props)if (hasOwnProperty.call(props, key)) newProps[key] = props[key];
    newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when
    // the label hasn't already been computed
    if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
        var label = getLabelFromStackTrace(new Error().stack);
        if (label) newProps[labelPropName] = label;
    }
    return newProps;
};
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    (0, _utils.registerStyles)(cache, serialized, isStringTag);
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback)(function() {
        return (0, _utils.insertStyles)(cache, serialized, isStringTag);
    });
    return null;
};
var Emotion = /* #__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
    // not passing the registered cache to serializeStyles because it would
    // make certain babel optimisations not possible
    if (typeof cssProp === "string" && cache.registered[cssProp] !== undefined) cssProp = cache.registered[cssProp];
    var WrappedComponent = props[typePropName];
    var registeredStyles = [
        cssProp
    ];
    var className = "";
    if (typeof props.className === "string") className = (0, _utils.getRegisteredStyles)(cache.registered, registeredStyles, props.className);
    else if (props.className != null) className = props.className + " ";
    var serialized = (0, _serialize.serializeStyles)(registeredStyles, undefined, _react.useContext(ThemeContext));
    if (serialized.name.indexOf("-") === -1) {
        var labelFromStack = props[labelPropName];
        if (labelFromStack) serialized = (0, _serialize.serializeStyles)([
            serialized,
            "label:" + labelFromStack + ";"
        ]);
    }
    className += cache.key + "-" + serialized.name;
    var newProps = {};
    for(var key in props)if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) newProps[key] = props[key];
    newProps.ref = ref;
    newProps.className = className;
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
        cache: cache,
        serialized: serialized,
        isStringTag: typeof WrappedComponent === "string"
    }), /*#__PURE__*/ _react.createElement(WrappedComponent, newProps));
});
Emotion.displayName = "EmotionCssPropInternal";
var Emotion$1 = Emotion;

},{"react":"21dqq","@emotion/cache":"3Umtj","@babel/runtime/helpers/esm/extends":"fTBFS","@emotion/weak-memoize":"grJxk","../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js":"cUsDD","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@emotion/use-insertion-effect-with-fallbacks":"lPCYn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Umtj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createCache);
var _sheet = require("@emotion/sheet");
var _stylis = require("stylis");
var _weakMemoize = require("@emotion/weak-memoize");
var _memoize = require("@emotion/memoize");
var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
    var previous = 0;
    var character = 0;
    while(true){
        previous = character;
        character = (0, _stylis.peek)(); // &\f
        if (previous === 38 && character === 12) points[index] = 1;
        if ((0, _stylis.token)(character)) break;
        (0, _stylis.next)();
    }
    return (0, _stylis.slice)(begin, (0, _stylis.position));
};
var toRules = function toRules(parsed, points) {
    // pretend we've started with a comma
    var index = -1;
    var character = 44;
    do switch((0, _stylis.token)(character)){
        case 0:
            // &\f
            if (character === 38 && (0, _stylis.peek)() === 12) // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
            // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
            // and when it should just concatenate the outer and inner selectors
            // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
            points[index] = 1;
            parsed[index] += identifierWithPointTracking((0, _stylis.position) - 1, points, index);
            break;
        case 2:
            parsed[index] += (0, _stylis.delimit)(character);
            break;
        case 4:
            // comma
            if (character === 44) {
                // colon
                parsed[++index] = (0, _stylis.peek)() === 58 ? "&\f" : "";
                points[index] = parsed[index].length;
                break;
            }
        // fallthrough
        default:
            parsed[index] += (0, _stylis.from)(character);
    }
    while (character = (0, _stylis.next)());
    return parsed;
};
var getRules = function getRules(value, points) {
    return (0, _stylis.dealloc)(toRules((0, _stylis.alloc)(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11
var fixedElements = /* #__PURE__ */ new WeakMap();
var compat = function compat(element) {
    if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) return;
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while(parent.type !== "rule"){
        parent = parent.parent;
        if (!parent) return;
    } // short-circuit for the simplest case
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) return;
     // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
    // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"
    if (isImplicitRule) return;
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for(var i = 0, k = 0; i < rules.length; i++)for(var j = 0; j < parentRules.length; j++, k++)element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
};
var removeLabel = function removeLabel(element) {
    if (element.type === "decl") {
        var value = element.value;
        if (value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98) {
            // this ignores label
            element["return"] = "";
            element.value = "";
        }
    }
};
var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var isIgnoringComment = function isIgnoringComment(element) {
    return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
    return function(element, index, children) {
        if (element.type !== "rule" || cache.compat) return;
        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
        if (unsafePseudoClasses) {
            var isNested = !!element.parent; // in nested rules comments become children of the "auto-inserted" rule and that's always the `element.parent`
            //
            // considering this input:
            // .a {
            //   .b /* comm */ {}
            //   color: hotpink;
            // }
            // we get output corresponding to this:
            // .a {
            //   & {
            //     /* comm */
            //     color: hotpink;
            //   }
            //   .b {}
            // }
            var commentContainer = isNested ? element.parent.children : children;
            for(var i = commentContainer.length - 1; i >= 0; i--){
                var node = commentContainer[i];
                if (node.line < element.line) break;
                 // it is quite weird but comments are *usually* put at `column: element.column - 1`
                // so we seek *from the end* for the node that is earlier than the rule's `element` and check that
                // this will also match inputs like this:
                // .a {
                //   /* comm */
                //   .b {}
                // }
                //
                // but that is fine
                //
                // it would be the easiest to change the placement of the comment to be the first child of the rule:
                // .a {
                //   .b { /* comm */ }
                // }
                // with such inputs we wouldn't have to search for the comment at all
                // TODO: consider changing this comment placement in the next major version
                if (node.column < element.column) {
                    if (isIgnoringComment(node)) return;
                    break;
                }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
                console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
        }
    };
};
var isImportRule = function isImportRule(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
    for(var i = index - 1; i >= 0; i--){
        if (!isImportRule(children[i])) return true;
    }
    return false;
}; // use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user
var nullifyElement = function nullifyElement(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
};
var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
    if (!isImportRule(element)) return;
    if (element.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element);
    }
};
/* eslint-disable no-fallthrough */ function prefix(value, length) {
    switch((0, _stylis.hash)(value, length)){
        // color-adjust
        case 5103:
            return (0, _stylis.WEBKIT) + "print-" + value + value;
        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return (0, _stylis.WEBKIT) + value + value;
        // appearance, user-select, transform, hyphens, text-size-adjust
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MOZ) + value + (0, _stylis.MS) + value + value;
        // flex, flex-direction
        case 6828:
        case 4268:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + value + value;
        // order
        case 6165:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + "flex-" + value + value;
        // align-items
        case 5187:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.replace)(value, /(\w+).+(:[^]+)/, (0, _stylis.WEBKIT) + "box-$1$2" + (0, _stylis.MS) + "flex-$1$2") + value;
        // align-self
        case 5443:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + "flex-item-" + (0, _stylis.replace)(value, /flex-|-self/, "") + value;
        // align-content
        case 4675:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + "flex-line-pack" + (0, _stylis.replace)(value, /align-content|flex-|-self/, "") + value;
        // flex-shrink
        case 5548:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, "shrink", "negative") + value;
        // flex-basis
        case 5292:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, "basis", "preferred-size") + value;
        // flex-grow
        case 6060:
            return (0, _stylis.WEBKIT) + "box-" + (0, _stylis.replace)(value, "-grow", "") + (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, "grow", "positive") + value;
        // transition
        case 4554:
            return (0, _stylis.WEBKIT) + (0, _stylis.replace)(value, /([^-])(transform)/g, "$1" + (0, _stylis.WEBKIT) + "$2") + value;
        // cursor
        case 6187:
            return (0, _stylis.replace)((0, _stylis.replace)((0, _stylis.replace)(value, /(zoom-|grab)/, (0, _stylis.WEBKIT) + "$1"), /(image-set)/, (0, _stylis.WEBKIT) + "$1"), value, "") + value;
        // background, background-image
        case 5495:
        case 3959:
            return (0, _stylis.replace)(value, /(image-set\([^]*)/, (0, _stylis.WEBKIT) + "$1" + "$`$1");
        // justify-content
        case 4968:
            return (0, _stylis.replace)((0, _stylis.replace)(value, /(.+:)(flex-)?(.*)/, (0, _stylis.WEBKIT) + "box-pack:$3" + (0, _stylis.MS) + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + (0, _stylis.WEBKIT) + value + value;
        // (margin|padding)-inline-(start|end)
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return (0, _stylis.replace)(value, /(.+)-inline(.+)/, (0, _stylis.WEBKIT) + "$1$2") + value;
        // (min|max)?(width|height|inline-size|block-size)
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            // stretch, max-content, min-content, fill-available
            if ((0, _stylis.strlen)(value) - 1 - length > 6) switch((0, _stylis.charat)(value, length + 1)){
                // (m)ax-content, (m)in-content
                case 109:
                    // -
                    if ((0, _stylis.charat)(value, length + 4) !== 45) break;
                // (f)ill-available, (f)it-content
                case 102:
                    return (0, _stylis.replace)(value, /(.+:)(.+)-([^]+)/, "$1" + (0, _stylis.WEBKIT) + "$2-$3" + "$1" + (0, _stylis.MOZ) + ((0, _stylis.charat)(value, length + 3) == 108 ? "$3" : "$2-$3")) + value;
                // (s)tretch
                case 115:
                    return ~(0, _stylis.indexof)(value, "stretch") ? prefix((0, _stylis.replace)(value, "stretch", "fill-available"), length) + value : value;
            }
            break;
        // position: sticky
        case 4949:
            // (s)ticky?
            if ((0, _stylis.charat)(value, length + 1) !== 115) break;
        // display: (flex|inline-flex)
        case 6444:
            switch((0, _stylis.charat)(value, (0, _stylis.strlen)(value) - 3 - (~(0, _stylis.indexof)(value, "!important") && 10))){
                // stic(k)y
                case 107:
                    return (0, _stylis.replace)(value, ":", ":" + (0, _stylis.WEBKIT)) + value;
                // (inline-)?fl(e)x
                case 101:
                    return (0, _stylis.replace)(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + (0, _stylis.WEBKIT) + ((0, _stylis.charat)(value, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + (0, _stylis.WEBKIT) + "$2$3" + "$1" + (0, _stylis.MS) + "$2box$3") + value;
            }
            break;
        // writing-mode
        case 5936:
            switch((0, _stylis.charat)(value, length + 11)){
                // vertical-l(r)
                case 114:
                    return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
                // vertical-r(l)
                case 108:
                    return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
                // horizontal(-)tb
                case 45:
                    return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
            }
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + value + value;
    }
    return value;
}
var prefixer = function prefixer(element, index, children, callback) {
    if (element.length > -1) {
        if (!element["return"]) switch(element.type){
            case 0, _stylis.DECLARATION:
                element["return"] = prefix(element.value, element.length);
                break;
            case 0, _stylis.KEYFRAMES:
                return (0, _stylis.serialize)([
                    (0, _stylis.copy)(element, {
                        value: (0, _stylis.replace)(element.value, "@", "@" + (0, _stylis.WEBKIT))
                    })
                ], callback);
            case 0, _stylis.RULESET:
                if (element.length) return (0, _stylis.combine)(element.props, function(value) {
                    switch((0, _stylis.match)(value, /(::plac\w+|:read-\w+)/)){
                        // :read-(only|write)
                        case ":read-only":
                        case ":read-write":
                            return (0, _stylis.serialize)([
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(read-\w+)/, ":" + (0, _stylis.MOZ) + "$1")
                                    ]
                                })
                            ], callback);
                        // :placeholder
                        case "::placeholder":
                            return (0, _stylis.serialize)([
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(plac\w+)/, ":" + (0, _stylis.WEBKIT) + "input-$1")
                                    ]
                                }),
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(plac\w+)/, ":" + (0, _stylis.MOZ) + "$1")
                                    ]
                                }),
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(plac\w+)/, (0, _stylis.MS) + "input-$1")
                                    ]
                                })
                            ], callback);
                    }
                    return "";
                });
        }
    }
};
var defaultStylisPlugins = [
    prefixer
];
var createCache = function createCache(options) {
    var key = options.key;
    if (!key) throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    if (key === "css") {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
        // note this very very intentionally targets all style elements regardless of the key to ensure
        // that creating a cache works inside of render of a React component
        Array.prototype.forEach.call(ssrStyles, function(node) {
            // we want to only move elements which have a space in the data-emotion attribute value
            // because that indicates that it is an Emotion 11 server-side rendered style elements
            // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
            // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
            // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
            // will not result in the Emotion 10 styles being destroyed
            var dataEmotionAttribute = node.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) return;
            document.head.appendChild(node);
            node.setAttribute("data-s", "");
        });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    // $FlowFixMe
    if (/[^a-z-]/.test(key)) throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    container = options.container || document.head;
    Array.prototype.forEach.call(// means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node) {
        var attrib = node.getAttribute("data-emotion").split(" "); // $FlowFixMe
        for(var i = 1; i < attrib.length; i++)inserted[attrib[i]] = true;
        nodesToHydrate.push(node);
    });
    var _insert;
    var omnipresentPlugins = [
        compat,
        removeLabel
    ];
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat () {
            return cache.compat;
        }
    }), incorrectImportAlarm);
    var currentSheet;
    var finalizingPlugins = [
        (0, _stylis.stringify),
        function(element) {
            if (!element.root) {
                if (element["return"]) currentSheet.insert(element["return"]);
                else if (element.value && element.type !== (0, _stylis.COMMENT)) // insert empty rule in non-production environments
                // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
                currentSheet.insert(element.value + "{}");
            }
        }
    ];
    var serializer = (0, _stylis.middleware)(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis(styles) {
        return (0, _stylis.serialize)((0, _stylis.compile)(styles), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        if (serialized.map !== undefined) currentSheet = {
            insert: function insert(rule) {
                sheet.insert(rule + serialized.map);
            }
        };
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) cache.inserted[serialized.name] = true;
    };
    var cache = {
        key: key,
        sheet: new (0, _sheet.StyleSheet)({
            key: key,
            container: container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted: inserted,
        registered: {},
        insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
};

},{"@emotion/sheet":"1BWeq","stylis":"bMCXt","@emotion/weak-memoize":"grJxk","@emotion/memoize":"2vzJd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1BWeq":[function(require,module,exports) {
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/ // $FlowFixMe
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StyleSheet", ()=>StyleSheet);
function sheetForTag(tag) {
    if (tag.sheet) // $FlowFixMe
    return tag.sheet;
     // this weirdness brought to you by firefox
    /* istanbul ignore next */ for(var i = 0; i < document.styleSheets.length; i++){
        if (document.styleSheets[i].ownerNode === tag) // $FlowFixMe
        return document.styleSheets[i];
    }
}
function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== undefined) tag.setAttribute("nonce", options.nonce);
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
}
var StyleSheet = /*#__PURE__*/ function() {
    // Using Node instead of HTMLElement since container may be a ShadowRoot
    function StyleSheet(options) {
        var _this = this;
        this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
                if (_this.insertionPoint) before = _this.insertionPoint.nextSibling;
                else if (_this.prepend) before = _this.container.firstChild;
                else before = _this.before;
            } else before = _this.tags[_this.tags.length - 1].nextSibling;
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === undefined ? false : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
    }
    var _proto = StyleSheet.prototype;
    _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
        // the max length is how many rules we have per style tag, it's 65000 in speedy mode
        // it's 1 in dev because we insert source maps that map a single rule to a location
        // and you can only have one source map per style tag
        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) this._insertTag(createStyleElement(this));
        var tag = this.tags[this.tags.length - 1];
        var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) // this would only cause problem in speedy mode
        // but we don't want enabling speedy to affect the observable behavior
        // so we report this error at all times
        console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
        if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
                // this is the ultrafast version, works across browsers
                // the big drawback is that the css won't be editable in devtools
                sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
                if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) console.error('There was a problem inserting the following rule: "' + rule + '"', e);
            }
        } else tag.appendChild(document.createTextNode(rule));
        this.ctr++;
    };
    _proto.flush = function flush() {
        // $FlowFixMe
        this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
        this._alreadyInsertedOrderInsensitiveRule = false;
    };
    return StyleSheet;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"bMCXt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CHARSET", ()=>f);
parcelHelpers.export(exports, "COMMENT", ()=>n);
parcelHelpers.export(exports, "COUNTER_STYLE", ()=>w);
parcelHelpers.export(exports, "DECLARATION", ()=>s);
parcelHelpers.export(exports, "DOCUMENT", ()=>v);
parcelHelpers.export(exports, "FONT_FACE", ()=>b);
parcelHelpers.export(exports, "FONT_FEATURE_VALUES", ()=>d);
parcelHelpers.export(exports, "IMPORT", ()=>i);
parcelHelpers.export(exports, "KEYFRAMES", ()=>h);
parcelHelpers.export(exports, "LAYER", ()=>$);
parcelHelpers.export(exports, "MEDIA", ()=>u);
parcelHelpers.export(exports, "MOZ", ()=>r);
parcelHelpers.export(exports, "MS", ()=>e);
parcelHelpers.export(exports, "NAMESPACE", ()=>p);
parcelHelpers.export(exports, "PAGE", ()=>t);
parcelHelpers.export(exports, "RULESET", ()=>c);
parcelHelpers.export(exports, "SUPPORTS", ()=>l);
parcelHelpers.export(exports, "VIEWPORT", ()=>o);
parcelHelpers.export(exports, "WEBKIT", ()=>a);
parcelHelpers.export(exports, "abs", ()=>g);
parcelHelpers.export(exports, "alloc", ()=>V);
parcelHelpers.export(exports, "append", ()=>q);
parcelHelpers.export(exports, "assign", ()=>m);
parcelHelpers.export(exports, "caret", ()=>R);
parcelHelpers.export(exports, "char", ()=>L);
parcelHelpers.export(exports, "character", ()=>H);
parcelHelpers.export(exports, "characters", ()=>I);
parcelHelpers.export(exports, "charat", ()=>O);
parcelHelpers.export(exports, "column", ()=>E);
parcelHelpers.export(exports, "combine", ()=>B);
parcelHelpers.export(exports, "comment", ()=>ue);
parcelHelpers.export(exports, "commenter", ()=>ae);
parcelHelpers.export(exports, "compile", ()=>ce);
parcelHelpers.export(exports, "copy", ()=>K);
parcelHelpers.export(exports, "dealloc", ()=>W);
parcelHelpers.export(exports, "declaration", ()=>ie);
parcelHelpers.export(exports, "delimit", ()=>X);
parcelHelpers.export(exports, "delimiter", ()=>re);
parcelHelpers.export(exports, "escaping", ()=>ee);
parcelHelpers.export(exports, "from", ()=>k);
parcelHelpers.export(exports, "hash", ()=>x);
parcelHelpers.export(exports, "identifier", ()=>ne);
parcelHelpers.export(exports, "indexof", ()=>C);
parcelHelpers.export(exports, "length", ()=>F);
parcelHelpers.export(exports, "line", ()=>D);
parcelHelpers.export(exports, "match", ()=>j);
parcelHelpers.export(exports, "middleware", ()=>ve);
parcelHelpers.export(exports, "namespace", ()=>be);
parcelHelpers.export(exports, "next", ()=>P);
parcelHelpers.export(exports, "node", ()=>J);
parcelHelpers.export(exports, "parse", ()=>se);
parcelHelpers.export(exports, "peek", ()=>Q);
parcelHelpers.export(exports, "position", ()=>G);
parcelHelpers.export(exports, "prefix", ()=>fe);
parcelHelpers.export(exports, "prefixer", ()=>he);
parcelHelpers.export(exports, "prev", ()=>N);
parcelHelpers.export(exports, "replace", ()=>z);
parcelHelpers.export(exports, "ruleset", ()=>te);
parcelHelpers.export(exports, "rulesheet", ()=>pe);
parcelHelpers.export(exports, "serialize", ()=>oe);
parcelHelpers.export(exports, "sizeof", ()=>S);
parcelHelpers.export(exports, "slice", ()=>T);
parcelHelpers.export(exports, "stringify", ()=>le);
parcelHelpers.export(exports, "strlen", ()=>M);
parcelHelpers.export(exports, "substr", ()=>A);
parcelHelpers.export(exports, "token", ()=>U);
parcelHelpers.export(exports, "tokenize", ()=>Y);
parcelHelpers.export(exports, "tokenizer", ()=>_);
parcelHelpers.export(exports, "trim", ()=>y);
parcelHelpers.export(exports, "whitespace", ()=>Z);
var e = "-ms-";
var r = "-moz-";
var a = "-webkit-";
var n = "comm";
var c = "rule";
var s = "decl";
var t = "@page";
var u = "@media";
var i = "@import";
var f = "@charset";
var o = "@viewport";
var l = "@supports";
var v = "@document";
var p = "@namespace";
var h = "@keyframes";
var b = "@font-face";
var w = "@counter-style";
var d = "@font-feature-values";
var $ = "@layer";
var g = Math.abs;
var k = String.fromCharCode;
var m = Object.assign;
function x(e, r) {
    return O(e, 0) ^ 45 ? (((r << 2 ^ O(e, 0)) << 2 ^ O(e, 1)) << 2 ^ O(e, 2)) << 2 ^ O(e, 3) : 0;
}
function y(e) {
    return e.trim();
}
function j(e, r) {
    return (e = r.exec(e)) ? e[0] : e;
}
function z(e, r, a) {
    return e.replace(r, a);
}
function C(e, r) {
    return e.indexOf(r);
}
function O(e, r) {
    return e.charCodeAt(r) | 0;
}
function A(e, r, a) {
    return e.slice(r, a);
}
function M(e) {
    return e.length;
}
function S(e) {
    return e.length;
}
function q(e, r) {
    return r.push(e), e;
}
function B(e, r) {
    return e.map(r).join("");
}
var D = 1;
var E = 1;
var F = 0;
var G = 0;
var H = 0;
var I = "";
function J(e, r, a, n, c, s, t) {
    return {
        value: e,
        root: r,
        parent: a,
        type: n,
        props: c,
        children: s,
        line: D,
        column: E,
        length: t,
        return: ""
    };
}
function K(e, r) {
    return m(J("", null, null, "", null, null, 0), e, {
        length: -e.length
    }, r);
}
function L() {
    return H;
}
function N() {
    H = G > 0 ? O(I, --G) : 0;
    if (E--, H === 10) E = 1, D--;
    return H;
}
function P() {
    H = G < F ? O(I, G++) : 0;
    if (E++, H === 10) E = 1, D++;
    return H;
}
function Q() {
    return O(I, G);
}
function R() {
    return G;
}
function T(e, r) {
    return A(I, e, r);
}
function U(e) {
    switch(e){
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
            return 5;
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        case 59:
        case 123:
        case 125:
            return 4;
        case 58:
            return 3;
        case 34:
        case 39:
        case 40:
        case 91:
            return 2;
        case 41:
        case 93:
            return 1;
    }
    return 0;
}
function V(e) {
    return D = E = 1, F = M(I = e), G = 0, [];
}
function W(e) {
    return I = "", e;
}
function X(e) {
    return y(T(G - 1, re(e === 91 ? e + 2 : e === 40 ? e + 1 : e)));
}
function Y(e) {
    return W(_(V(e)));
}
function Z(e) {
    while(H = Q())if (H < 33) P();
    else break;
    return U(e) > 2 || U(H) > 3 ? "" : " ";
}
function _(e) {
    while(P())switch(U(H)){
        case 0:
            q(ne(G - 1), e);
            break;
        case 2:
            q(X(H), e);
            break;
        default:
            q(k(H), e);
    }
    return e;
}
function ee(e, r) {
    while(--r && P())if (H < 48 || H > 102 || H > 57 && H < 65 || H > 70 && H < 97) break;
    return T(e, R() + (r < 6 && Q() == 32 && P() == 32));
}
function re(e) {
    while(P())switch(H){
        case e:
            return G;
        case 34:
        case 39:
            if (e !== 34 && e !== 39) re(H);
            break;
        case 40:
            if (e === 41) re(e);
            break;
        case 92:
            P();
            break;
    }
    return G;
}
function ae(e, r) {
    while(P())if (e + H === 57) break;
    else if (e + H === 84 && Q() === 47) break;
    return "/*" + T(r, G - 1) + "*" + k(e === 47 ? e : P());
}
function ne(e) {
    while(!U(Q()))P();
    return T(e, G);
}
function ce(e) {
    return W(se("", null, null, null, [
        ""
    ], e = V(e), 0, [
        0
    ], e));
}
function se(e, r, a, n, c, s, t, u, i) {
    var f = 0;
    var o = 0;
    var l = t;
    var v = 0;
    var p = 0;
    var h = 0;
    var b = 1;
    var w = 1;
    var d = 1;
    var $ = 0;
    var g = "";
    var m = c;
    var x = s;
    var y = n;
    var j = g;
    while(w)switch(h = $, $ = P()){
        case 40:
            if (h != 108 && O(j, l - 1) == 58) {
                if (C(j += z(X($), "&", "&\f"), "&\f") != -1) d = -1;
                break;
            }
        case 34:
        case 39:
        case 91:
            j += X($);
            break;
        case 9:
        case 10:
        case 13:
        case 32:
            j += Z(h);
            break;
        case 92:
            j += ee(R() - 1, 7);
            continue;
        case 47:
            switch(Q()){
                case 42:
                case 47:
                    q(ue(ae(P(), R()), r, a), i);
                    break;
                default:
                    j += "/";
            }
            break;
        case 123 * b:
            u[f++] = M(j) * d;
        case 125 * b:
        case 59:
        case 0:
            switch($){
                case 0:
                case 125:
                    w = 0;
                case 59 + o:
                    if (d == -1) j = z(j, /\f/g, "");
                    if (p > 0 && M(j) - l) q(p > 32 ? ie(j + ";", n, a, l - 1) : ie(z(j, " ", "") + ";", n, a, l - 2), i);
                    break;
                case 59:
                    j += ";";
                default:
                    q(y = te(j, r, a, f, o, c, u, g, m = [], x = [], l), s);
                    if ($ === 123) {
                        if (o === 0) se(j, r, y, y, m, s, l, u, x);
                        else switch(v === 99 && O(j, 3) === 110 ? 100 : v){
                            case 100:
                            case 108:
                            case 109:
                            case 115:
                                se(e, y, y, n && q(te(e, y, y, 0, 0, c, u, g, c, m = [], l), x), c, x, l, u, n ? m : x);
                                break;
                            default:
                                se(j, y, y, y, [
                                    ""
                                ], x, 0, u, x);
                        }
                    }
            }
            f = o = p = 0, b = d = 1, g = j = "", l = t;
            break;
        case 58:
            l = 1 + M(j), p = h;
        default:
            if (b < 1) {
                if ($ == 123) --b;
                else if ($ == 125 && b++ == 0 && N() == 125) continue;
            }
            switch(j += k($), $ * b){
                case 38:
                    d = o > 0 ? 1 : (j += "\f", -1);
                    break;
                case 44:
                    u[f++] = (M(j) - 1) * d, d = 1;
                    break;
                case 64:
                    if (Q() === 45) j += X(P());
                    v = Q(), o = l = M(g = j += ne(R())), $++;
                    break;
                case 45:
                    if (h === 45 && M(j) == 2) b = 0;
            }
    }
    return s;
}
function te(e, r, a, n, s, t, u, i, f, o, l) {
    var v = s - 1;
    var p = s === 0 ? t : [
        ""
    ];
    var h = S(p);
    for(var b = 0, w = 0, d = 0; b < n; ++b)for(var $ = 0, k = A(e, v + 1, v = g(w = u[b])), m = e; $ < h; ++$)if (m = y(w > 0 ? p[$] + " " + k : z(k, /&\f/g, p[$]))) f[d++] = m;
    return J(e, r, a, s === 0 ? c : i, f, o, l);
}
function ue(e, r, a) {
    return J(e, r, a, n, k(L()), A(e, 2, -2), 0);
}
function ie(e, r, a, n) {
    return J(e, r, a, s, A(e, 0, n), A(e, n + 1, -1), n);
}
function fe(n, c, s) {
    switch(x(n, c)){
        case 5103:
            return a + "print-" + n + n;
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return a + n + n;
        case 4789:
            return r + n + n;
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return a + n + r + n + e + n + n;
        case 5936:
            switch(O(n, c + 11)){
                case 114:
                    return a + n + e + z(n, /[svh]\w+-[tblr]{2}/, "tb") + n;
                case 108:
                    return a + n + e + z(n, /[svh]\w+-[tblr]{2}/, "tb-rl") + n;
                case 45:
                    return a + n + e + z(n, /[svh]\w+-[tblr]{2}/, "lr") + n;
            }
        case 6828:
        case 4268:
        case 2903:
            return a + n + e + n + n;
        case 6165:
            return a + n + e + "flex-" + n + n;
        case 5187:
            return a + n + z(n, /(\w+).+(:[^]+)/, a + "box-$1$2" + e + "flex-$1$2") + n;
        case 5443:
            return a + n + e + "flex-item-" + z(n, /flex-|-self/g, "") + (!j(n, /flex-|baseline/) ? e + "grid-row-" + z(n, /flex-|-self/g, "") : "") + n;
        case 4675:
            return a + n + e + "flex-line-pack" + z(n, /align-content|flex-|-self/g, "") + n;
        case 5548:
            return a + n + e + z(n, "shrink", "negative") + n;
        case 5292:
            return a + n + e + z(n, "basis", "preferred-size") + n;
        case 6060:
            return a + "box-" + z(n, "-grow", "") + a + n + e + z(n, "grow", "positive") + n;
        case 4554:
            return a + z(n, /([^-])(transform)/g, "$1" + a + "$2") + n;
        case 6187:
            return z(z(z(n, /(zoom-|grab)/, a + "$1"), /(image-set)/, a + "$1"), n, "") + n;
        case 5495:
        case 3959:
            return z(n, /(image-set\([^]*)/, a + "$1" + "$`$1");
        case 4968:
            return z(z(n, /(.+:)(flex-)?(.*)/, a + "box-pack:$3" + e + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a + n + n;
        case 4200:
            if (!j(n, /flex-|baseline/)) return e + "grid-column-align" + A(n, c) + n;
            break;
        case 2592:
        case 3360:
            return e + z(n, "template-", "") + n;
        case 4384:
        case 3616:
            if (s && s.some(function(e, r) {
                return c = r, j(e.props, /grid-\w+-end/);
            })) return ~C(n + (s = s[c].value), "span") ? n : e + z(n, "-start", "") + n + e + "grid-row-span:" + (~C(s, "span") ? j(s, /\d+/) : +j(s, /\d+/) - +j(n, /\d+/)) + ";";
            return e + z(n, "-start", "") + n;
        case 4896:
        case 4128:
            return s && s.some(function(e) {
                return j(e.props, /grid-\w+-start/);
            }) ? n : e + z(z(n, "-end", "-span"), "span ", "") + n;
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return z(n, /(.+)-inline(.+)/, a + "$1$2") + n;
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            if (M(n) - 1 - c > 6) switch(O(n, c + 1)){
                case 109:
                    if (O(n, c + 4) !== 45) break;
                case 102:
                    return z(n, /(.+:)(.+)-([^]+)/, "$1" + a + "$2-$3" + "$1" + r + (O(n, c + 3) == 108 ? "$3" : "$2-$3")) + n;
                case 115:
                    return ~C(n, "stretch") ? fe(z(n, "stretch", "fill-available"), c, s) + n : n;
            }
            break;
        case 5152:
        case 5920:
            return z(n, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(r, a, c, s, t, u, i) {
                return e + a + ":" + c + i + (s ? e + a + "-span:" + (t ? u : +u - +c) + i : "") + n;
            });
        case 4949:
            if (O(n, c + 6) === 121) return z(n, ":", ":" + a) + n;
            break;
        case 6444:
            switch(O(n, O(n, 14) === 45 ? 18 : 11)){
                case 120:
                    return z(n, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + a + (O(n, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + a + "$2$3" + "$1" + e + "$2box$3") + n;
                case 100:
                    return z(n, ":", ":" + e) + n;
            }
            break;
        case 5719:
        case 2647:
        case 2135:
        case 3927:
        case 2391:
            return z(n, "scroll-", "scroll-snap-") + n;
    }
    return n;
}
function oe(e, r) {
    var a = "";
    var n = S(e);
    for(var c = 0; c < n; c++)a += r(e[c], c, e, r) || "";
    return a;
}
function le(e, r, a, t) {
    switch(e.type){
        case $:
            if (e.children.length) break;
        case i:
        case s:
            return e.return = e.return || e.value;
        case n:
            return "";
        case h:
            return e.return = e.value + "{" + oe(e.children, t) + "}";
        case c:
            e.value = e.props.join(",");
    }
    return M(a = oe(e.children, t)) ? e.return = e.value + "{" + a + "}" : "";
}
function ve(e) {
    var r = S(e);
    return function(a, n, c, s) {
        var t = "";
        for(var u = 0; u < r; u++)t += e[u](a, n, c, s) || "";
        return t;
    };
}
function pe(e) {
    return function(r) {
        if (!r.root) {
            if (r = r.return) e(r);
        }
    };
}
function he(n, t, u, i) {
    if (n.length > -1) {
        if (!n.return) switch(n.type){
            case s:
                n.return = fe(n.value, n.length, u);
                return;
            case h:
                return oe([
                    K(n, {
                        value: z(n.value, "@", "@" + a)
                    })
                ], i);
            case c:
                if (n.length) return B(n.props, function(c) {
                    switch(j(c, /(::plac\w+|:read-\w+)/)){
                        case ":read-only":
                        case ":read-write":
                            return oe([
                                K(n, {
                                    props: [
                                        z(c, /:(read-\w+)/, ":" + r + "$1")
                                    ]
                                })
                            ], i);
                        case "::placeholder":
                            return oe([
                                K(n, {
                                    props: [
                                        z(c, /:(plac\w+)/, ":" + a + "input-$1")
                                    ]
                                }),
                                K(n, {
                                    props: [
                                        z(c, /:(plac\w+)/, ":" + r + "$1")
                                    ]
                                }),
                                K(n, {
                                    props: [
                                        z(c, /:(plac\w+)/, e + "input-$1")
                                    ]
                                })
                            ], i);
                    }
                    return "";
                });
        }
    }
}
function be(e) {
    switch(e.type){
        case c:
            e.props = e.props.map(function(r) {
                return B(Y(r), function(r, a, n) {
                    switch(O(r, 0)){
                        case 12:
                            return A(r, 1, M(r));
                        case 0:
                        case 40:
                        case 43:
                        case 62:
                        case 126:
                            return r;
                        case 58:
                            if (n[++a] === "global") n[a] = "", n[++a] = "\f" + A(n[a], a = 1, -1);
                        case 32:
                            return a === 1 ? "" : r;
                        default:
                            switch(a){
                                case 0:
                                    e = r;
                                    return S(n) > 1 ? "" : r;
                                case a = S(n) - 1:
                                case 2:
                                    return a === 2 ? r + e + e : r + e;
                                default:
                                    return r;
                            }
                    }
                });
            });
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"grJxk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>weakMemoize);
var weakMemoize = function weakMemoize(func) {
    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
    var cache = new WeakMap();
    return function(arg) {
        if (cache.has(arg)) // $FlowFixMe
        return cache.get(arg);
        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2vzJd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>memoize);
function memoize(fn) {
    var cache = Object.create(null);
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fTBFS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_extends);
function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cUsDD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>hoistNonReactStatics);
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _hoistNonReactStaticsDefault = parcelHelpers.interopDefault(_hoistNonReactStatics);
// this file isolates this package that is not tree-shakeable
// and if this module doesn't actually contain any logic of its own
// then Rollup just use 'hoist-non-react-statics' directly in other chunks
var hoistNonReactStatics = function(targetComponent, sourceComponent) {
    return (0, _hoistNonReactStaticsDefault.default)(targetComponent, sourceComponent);
};

},{"hoist-non-react-statics":"1GfsB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GfsB":[function(require,module,exports) {
"use strict";
var reactIs = require("c03b486d83967636");
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    "$$typeof": true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    "$$typeof": true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== "string") {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"c03b486d83967636":"7EuwB"}],"7EuwB":[function(require,module,exports) {
"use strict";
module.exports = require("2255125a8e8b1051");

},{"2255125a8e8b1051":"5DsXl"}],"5DsXl":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 0xead7;
    function isValidElementType(type) {
        return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"6UI8e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRegisteredStyles", ()=>getRegisteredStyles);
parcelHelpers.export(exports, "insertStyles", ()=>insertStyles);
parcelHelpers.export(exports, "registerStyles", ()=>registerStyles);
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
        if (registered[className] !== undefined) registeredStyles.push(registered[className] + ";");
        else rawClassName += className + " ";
    });
    return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;
    if (// class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache.registered[className] === undefined) cache.registered[className] = serialized.styles;
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
    registerStyles(cache, serialized, isStringTag);
    var className = cache.key + "-" + serialized.name;
    if (cache.inserted[serialized.name] === undefined) {
        var current = serialized;
        do {
            cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
            current = current.next;
        }while (current !== undefined);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kS2E2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeStyles", ()=>serializeStyles);
var _hash = require("@emotion/hash");
var _hashDefault = parcelHelpers.interopDefault(_hash);
var _unitless = require("@emotion/unitless");
var _unitlessDefault = parcelHelpers.interopDefault(_unitless);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty(property) {
    return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue(value) {
    return value != null && typeof value !== "boolean";
};
var processStyleName = /* #__PURE__ */ (0, _memoizeDefault.default)(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue(key, value) {
    switch(key){
        case "animation":
        case "animationName":
            if (typeof value === "string") return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                    name: p1,
                    styles: p2,
                    next: cursor
                };
                return p1;
            });
    }
    if ((0, _unitlessDefault.default)[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) return value + "px";
    return value;
};
var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
var contentValues = [
    "normal",
    "none",
    "initial",
    "inherit",
    "unset"
];
var oldProcessStyleValue = processStyleValue;
var msPattern = /^-ms-/;
var hyphenPattern = /-(.)/g;
var hyphenatedCache = {};
processStyleValue = function processStyleValue(key, value) {
    if (key === "content") {
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
    }
    var processed = oldProcessStyleValue(key, value);
    if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === undefined) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
            return _char.toUpperCase();
        }) + "?");
    }
    return processed;
};
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) return "";
    if (interpolation.__emotion_styles !== undefined) {
        if (interpolation.toString() === "NO_COMPONENT_SELECTOR") throw new Error(noComponentSelectorMessage);
        return interpolation;
    }
    switch(typeof interpolation){
        case "boolean":
            return "";
        case "object":
            if (interpolation.anim === 1) {
                cursor = {
                    name: interpolation.name,
                    styles: interpolation.styles,
                    next: cursor
                };
                return interpolation.name;
            }
            if (interpolation.styles !== undefined) {
                var next = interpolation.next;
                if (next !== undefined) // not the most efficient thing ever but this is a pretty rare case
                // and there will be very few iterations of this generally
                while(next !== undefined){
                    cursor = {
                        name: next.name,
                        styles: next.styles,
                        next: cursor
                    };
                    next = next.next;
                }
                var styles = interpolation.styles + ";";
                if (interpolation.map !== undefined) styles += interpolation.map;
                return styles;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
        case "function":
            if (mergedProps !== undefined) {
                var previousCursor = cursor;
                var result = interpolation(mergedProps);
                cursor = previousCursor;
                return handleInterpolation(mergedProps, registered, result);
            } else console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            break;
        case "string":
            var matched = [];
            var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
                return "${" + fakeVarName + "}";
            });
            if (matched.length) console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, [
                "`" + replaced + "`"
            ]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
            break;
    } // finalize string values (regular strings and functions interpolated into css calls)
    if (registered == null) return interpolation;
    var cached = registered[interpolation];
    return cached !== undefined ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) for(var i = 0; i < obj.length; i++)string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    else for(var _key in obj){
        var value = obj[_key];
        if (typeof value !== "object") {
            if (registered != null && registered[value] !== undefined) string += _key + "{" + registered[value] + "}";
            else if (isProcessableValue(value)) string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        } else {
            if (_key === "NO_COMPONENT_SELECTOR" && true) throw new Error(noComponentSelectorMessage);
            if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === undefined)) {
                for(var _i = 0; _i < value.length; _i++)if (isProcessableValue(value[_i])) string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            } else {
                var interpolated = handleInterpolation(mergedProps, registered, value);
                switch(_key){
                    case "animation":
                    case "animationName":
                        string += processStyleName(_key) + ":" + interpolated + ";";
                        break;
                    default:
                        if (_key === "undefined") console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                        string += _key + "{" + interpolated + "}";
                }
            }
        }
    }
    return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
// keyframes are stored on the SerializedStyles object as a linked list
var cursor;
var serializeStyles = function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== undefined) return args[0];
    var stringMode = true;
    var styles = "";
    cursor = undefined;
    var strings = args[0];
    if (strings == null || strings.raw === undefined) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
    } else {
        if (strings[0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        styles += strings[0];
    } // we start at 1 since we've already handled the first arg
    for(var i = 1; i < args.length; i++){
        styles += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
            if (strings[i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles += strings[i];
        }
    }
    var sourceMap;
    styles = styles.replace(sourceMapPattern, function(match) {
        sourceMap = match;
        return "";
    });
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5
    while((match = labelPattern.exec(styles)) !== null)identifierName += "-" + // $FlowFixMe we know it's not null
    match[1];
    var name = (0, _hashDefault.default)(styles) + identifierName;
    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
    return {
        name: name,
        styles: styles,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
            return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
    };
};

},{"@emotion/hash":"clggK","@emotion/unitless":"2Tu84","@emotion/memoize":"2vzJd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"clggK":[function(require,module,exports) {
/* eslint-disable */ // Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>murmur2);
function murmur2(str) {
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
    // const m = 0x5bd1e995;
    // const r = 24;
    // Initialize the hash
    var h = 0; // Mix 4 bytes at a time into the hash
    var k, i = 0, len = str.length;
    for(; len >= 4; ++i, len -= 4){
        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
        k = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
        k ^= /* k >>> r: */ k >>> 24;
        h = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Handle the last few bytes of the input array
    switch(len){
        case 3:
            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 0xff;
            h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Tu84":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>unitlessKeys);
var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lPCYn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useInsertionEffectAlwaysWithSyncFallback", ()=>useInsertionEffectAlwaysWithSyncFallback);
parcelHelpers.export(exports, "useInsertionEffectWithLayoutFallback", ()=>useInsertionEffectWithLayoutFallback);
var _react = require("react");
var syncFallback = function syncFallback(create) {
    return create();
};
var useInsertionEffect = _react["useInsertionEffect"] ? _react["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || _react.useLayoutEffect;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"vw3vn":[function(require,module,exports) {
function _extends() {
    module.exports = _extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _extends.apply(this, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"6AEwr":[function(require,module,exports) {
"use strict";
module.exports = require("c4c10cbba9862d5f");

},{"c4c10cbba9862d5f":"kujY4"}],"kujY4":[function(require,module,exports) {
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    var React = require("593632ccebda0d3a");
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) {
            checkKeyStringCoercion(maybeKey);
            key = "" + maybeKey;
        }
        if (hasValidKey(config)) {
            checkKeyStringCoercion(config.key);
            key = "" + config.key;
        }
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) return "\n\nCheck the render method of `" + name + "`.";
        }
        return "";
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== "object") return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === "string") return;
        var propTypes;
        if (typeof type === "function") propTypes = type.propTypes;
        else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = "null";
            else if (isArray(type)) typeString = "array";
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"593632ccebda0d3a":"21dqq"}],"d4tN5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Portal", ()=>(0, _chunk34PD6CUKMjs.Portal));
parcelHelpers.export(exports, "PortalManager", ()=>(0, _chunkHK66PB7MMjs.PortalManager));
parcelHelpers.export(exports, "usePortalManager", ()=>(0, _chunkHK66PB7MMjs.usePortalManager));
var _chunk34PD6CUKMjs = require("./chunk-34PD6CUK.mjs");
var _chunkHK66PB7MMjs = require("./chunk-HK66PB7M.mjs");
"use client";

},{"./chunk-34PD6CUK.mjs":"i0w8x","./chunk-HK66PB7M.mjs":"5wOQy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i0w8x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Portal", ()=>Portal);
var _chunkHK66PB7MMjs = require("./chunk-HK66PB7M.mjs");
// src/portal.tsx
var _reactUseSafeLayoutEffect = require("@chakra-ui/react-use-safe-layout-effect");
var _reactContext = require("@chakra-ui/react-context");
var _reactDom = require("react-dom");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [PortalContextProvider, usePortalContext] = (0, _reactContext.createContext)({
    strict: false,
    name: "PortalContext"
});
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = `.chakra-portal`;
var Container = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)("div", {
        className: "chakra-portal-zIndex",
        style: {
            position: "absolute",
            zIndex: props.zIndex,
            top: 0,
            left: 0,
            right: 0
        },
        children: props.children
    });
var DefaultPortal = (props)=>{
    const { appendToParentPortal, children } = props;
    const [tempNode, setTempNode] = (0, _react.useState)(null);
    const portal = (0, _react.useRef)(null);
    const [, forceUpdate] = (0, _react.useState)({});
    (0, _react.useEffect)(()=>forceUpdate({}), []);
    const parentPortal = usePortalContext();
    const manager = (0, _chunkHK66PB7MMjs.usePortalManager)();
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (!tempNode) return;
        const doc = tempNode.ownerDocument;
        const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;
        if (!host) return;
        portal.current = doc.createElement("div");
        portal.current.className = PORTAL_CLASSNAME;
        host.appendChild(portal.current);
        forceUpdate({});
        const portalNode = portal.current;
        return ()=>{
            if (host.contains(portalNode)) host.removeChild(portalNode);
        };
    }, [
        tempNode
    ]);
    const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(Container, {
        zIndex: manager == null ? void 0 : manager.zIndex,
        children
    }) : children;
    return portal.current ? (0, _reactDom.createPortal)(/* @__PURE__ */ (0, _jsxRuntime.jsx)(PortalContextProvider, {
        value: portal.current,
        children: _children
    }), portal.current) : /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
        ref: (el)=>{
            if (el) setTempNode(el);
        }
    });
};
var ContainerPortal = (props)=>{
    const { children, containerRef, appendToParentPortal } = props;
    const containerEl = containerRef.current;
    const host = containerEl != null ? containerEl : typeof window !== "undefined" ? document.body : void 0;
    const portal = (0, _react.useMemo)(()=>{
        const node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
        if (node) node.className = PORTAL_CLASSNAME;
        return node;
    }, [
        containerEl
    ]);
    const [, forceUpdate] = (0, _react.useState)({});
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>forceUpdate({}), []);
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (!portal || !host) return;
        host.appendChild(portal);
        return ()=>{
            host.removeChild(portal);
        };
    }, [
        portal,
        host
    ]);
    if (host && portal) return (0, _reactDom.createPortal)(/* @__PURE__ */ (0, _jsxRuntime.jsx)(PortalContextProvider, {
        value: appendToParentPortal ? portal : null,
        children
    }), portal);
    return null;
};
function Portal(props) {
    const portalProps = {
        appendToParentPortal: true,
        ...props
    };
    const { containerRef, ...rest } = portalProps;
    return containerRef ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(ContainerPortal, {
        containerRef,
        ...rest
    }) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(DefaultPortal, {
        ...rest
    });
}
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
Portal.displayName = "Portal";

},{"./chunk-HK66PB7M.mjs":"5wOQy","@chakra-ui/react-use-safe-layout-effect":"eJbER","@chakra-ui/react-context":"7RVZP","react-dom":"j6uA9","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5wOQy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePortalManager", ()=>usePortalManager);
parcelHelpers.export(exports, "PortalManager", ()=>PortalManager);
// src/portal-manager.tsx
var _reactContext = require("@chakra-ui/react-context");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [PortalManagerContextProvider, usePortalManager] = (0, _reactContext.createContext)({
    strict: false,
    name: "PortalManagerContext"
});
function PortalManager(props) {
    const { children, zIndex } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(PortalManagerContextProvider, {
        value: {
            zIndex
        },
        children
    });
}
PortalManager.displayName = "PortalManager";

},{"@chakra-ui/react-context":"7RVZP","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7RVZP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createContext", ()=>createContext);
// src/index.ts
var _react = require("react");
"use client";
function getErrorMessage(hook, provider) {
    return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
}
function createContext(options = {}) {
    const { name, strict = true, hookName = "useContext", providerName = "Provider", errorMessage, defaultValue } = options;
    const Context = (0, _react.createContext)(defaultValue);
    Context.displayName = name;
    function useContext() {
        var _a;
        const context = (0, _react.useContext)(Context);
        if (!context && strict) {
            const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));
            error.name = "ContextError";
            (_a = Error.captureStackTrace) == null || _a.call(Error, error, useContext);
            throw error;
        }
        return context;
    }
    return [
        Context.Provider,
        useContext,
        Context
    ];
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJbER":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSafeLayoutEffect", ()=>useSafeLayoutEffect);
// src/index.ts
var _react = require("react");
"use client";
var useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? (0, _react.useLayoutEffect) : (0, _react.useEffect);

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j6uA9":[function(require,module,exports) {
"use strict";
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error("^_^");
}
module.exports = require("b0f0e6b9e8349dac");

},{"b0f0e6b9e8349dac":"3iA9v"}],"3iA9v":[function(require,module,exports) {
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var React = require("6f0162e9ab224cd4");
    var Scheduler = require("8ad4ca65319d28a7");
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
    } // In DEV, calls to console.warn and console.error get replaced
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        if (!suppressWarning) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
            printWarning("warn", format, args);
        }
    }
    function error(format) {
        if (!suppressWarning) {
            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
            printWarning("error", format, args);
        }
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    // -----------------------------------------------------------------------------
    var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
    // the react-reconciler package.
    var enableNewReconciler = false; // Support legacy Primer support on internal FB www
    var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
    // React DOM Chopping Block
    //
    // Similar to main Chopping Block but only flags related to React DOM. These are
    // grouped because we will likely batch all of them into a single major release.
    // -----------------------------------------------------------------------------
    // Disable support for comment nodes as React DOM containers. Already disabled
    // in open source, but www codebase still relies on it. Need to remove.
    var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
    // and client rendering, mostly to allow JSX attributes to apply to the custom
    // element's object properties instead of only HTML attributes.
    // https://github.com/facebook/react/issues/11347
    var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
    var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
    // Debugging and DevTools
    // -----------------------------------------------------------------------------
    // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
    // for an experimental timeline tool.
    var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {};
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === "onDoubleClick") possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error("Invalid attribute name: `%s`", attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case "function":
            case "symbol":
                // eslint-disable-line
                return true;
            case "boolean":
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== "data-" && prefix !== "aria-";
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            "acceptCharset",
            "accept-charset"
        ],
        [
            "className",
            "class"
        ],
        [
            "htmlFor",
            "for"
        ],
        [
            "httpEquiv",
            "http-equiv"
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        "contentEditable",
        "draggable",
        "spellCheck",
        "value"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        "autoReverse",
        "externalResourcesRequired",
        "focusable",
        "preserveAlpha"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        "allowFullScreen",
        "async",
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        "checked",
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        "capture",
        "download" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        "cols",
        "rows",
        "size",
        "span" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        "rowSpan",
        "start"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
    }); // String SVG attributes with the xml namespace.
    [
        "xml:base",
        "xml:lang",
        "xml:space" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        "tabIndex",
        "crossOrigin"
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = "xlinkHref";
    properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    [
        "src",
        "href",
        "action",
        "formAction"
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            checkAttributeStringCoercion(expected, name);
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            // eslint-disable-next-line react-internal/safe-string-coercion
            sanitizeURL("" + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                     // eslint-disable-next-line react-internal/safe-string-coercion
                    if (value === "" + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
            else if (stringValue === "" + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        if (!isAttributeNameSafe(name)) return;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        checkAttributeStringCoercion(expected, name);
        if (value === "" + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else {
                    checkAttributeStringCoercion(value, name);
                    node.setAttribute(_attributeName, "" + value);
                }
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = "";
            else {
                checkAttributeStringCoercion(value, attributeName);
                attributeValue = "" + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_SCOPE_TYPE = Symbol.for("react.scope");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
    var REACT_CACHE_TYPE = Symbol.for("react.cache");
    var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return "";
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = "";
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node);
            return info;
        } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
    } // Keep in sync with shared/getComponentNameFromType
    function getContextName$1(type) {
        return type.displayName || "Context";
    }
    function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch(tag){
            case CacheComponent:
                return "Cache";
            case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
            case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
                return "DehydratedFragment";
            case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment:
                return "Fragment";
            case HostComponent:
                // Host component type is the display name (e.g. "div", "View")
                return type;
            case HostPortal:
                return "Portal";
            case HostRoot:
                return "Root";
            case HostText:
                return "Text";
            case LazyComponent:
                // Name comes from the type in this case; we don't have a tag.
                return getComponentNameFromType(type);
            case Mode:
                if (type === REACT_STRICT_MODE_TYPE) // Don't be less specific than shared/getComponentNameFromType
                return "StrictMode";
                return "Mode";
            case OffscreenComponent:
                return "Offscreen";
            case Profiler:
                return "Profiler";
            case ScopeComponent:
                return "Scope";
            case SuspenseComponent:
                return "Suspense";
            case SuspenseListComponent:
                return "SuspenseList";
            case TracingMarkerComponent:
                return "TracingMarker";
            // The display name for this tags come from the user-provided type:
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
                if (typeof type === "function") return type.displayName || type.name || null;
                if (typeof type === "string") return type;
                break;
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== "undefined") return getComponentNameFromFiber(owner);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return "";
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function getCurrentFiber() {
        return current;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        // The coercion safety check is performed in getToStringValue().
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case "boolean":
            case "number":
            case "string":
            case "undefined":
                return value;
            case "object":
                checkFormFieldValueStringCoercion(value);
                return value;
            default:
                // function, symbol are assigned as empty strings
                return "";
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = "";
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? "true" : "false";
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = "" + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : undefined);
        if (typeof doc === "undefined") return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps("input", props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, "checked", checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === "submit" || type === "reset") {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute("value");
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty("value")) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty("defaultValue")) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset"; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== "") node.name = "";
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== "") node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            checkAttributeStringCoercion(name, "name");
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // If a value is not provided, then the children must be simple.
        if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) React.Children.forEach(props.children, function(child) {
                if (child == null) return;
                if (typeof child === "string" || typeof child === "number") return;
                if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
            });
            else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
            }
        } // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute("value", toString(getToStringValue(props.value)));
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return "\n\nCheck the render method of `" + ownerName + "`.";
        return "";
    }
    var valuePropNames = [
        "value",
        "defaultValue"
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps("select", props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && propNameIsArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue["$" + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$1(element, props) {
        return assign({}, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps("textarea", props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (defaultValue != null) throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (isArray(children)) {
                    if (children.length > 1) throw new Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = "";
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
    var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
    var SVG_NAMESPACE = "http://www.w3.org/2000/svg"; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case "svg":
                return SVG_NAMESPACE;
            case "math":
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            "animationDelay",
            "animationDirection",
            "animationDuration",
            "animationFillMode",
            "animationIterationCount",
            "animationName",
            "animationPlayState",
            "animationTimingFunction"
        ],
        background: [
            "backgroundAttachment",
            "backgroundClip",
            "backgroundColor",
            "backgroundImage",
            "backgroundOrigin",
            "backgroundPositionX",
            "backgroundPositionY",
            "backgroundRepeat",
            "backgroundSize"
        ],
        backgroundPosition: [
            "backgroundPositionX",
            "backgroundPositionY"
        ],
        border: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth",
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth",
            "borderLeftColor",
            "borderLeftStyle",
            "borderLeftWidth",
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth",
            "borderTopColor",
            "borderTopStyle",
            "borderTopWidth"
        ],
        borderBlockEnd: [
            "borderBlockEndColor",
            "borderBlockEndStyle",
            "borderBlockEndWidth"
        ],
        borderBlockStart: [
            "borderBlockStartColor",
            "borderBlockStartStyle",
            "borderBlockStartWidth"
        ],
        borderBottom: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth"
        ],
        borderColor: [
            "borderBottomColor",
            "borderLeftColor",
            "borderRightColor",
            "borderTopColor"
        ],
        borderImage: [
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth"
        ],
        borderInlineEnd: [
            "borderInlineEndColor",
            "borderInlineEndStyle",
            "borderInlineEndWidth"
        ],
        borderInlineStart: [
            "borderInlineStartColor",
            "borderInlineStartStyle",
            "borderInlineStartWidth"
        ],
        borderLeft: [
            "borderLeftColor",
            "borderLeftStyle",
            "borderLeftWidth"
        ],
        borderRadius: [
            "borderBottomLeftRadius",
            "borderBottomRightRadius",
            "borderTopLeftRadius",
            "borderTopRightRadius"
        ],
        borderRight: [
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth"
        ],
        borderStyle: [
            "borderBottomStyle",
            "borderLeftStyle",
            "borderRightStyle",
            "borderTopStyle"
        ],
        borderTop: [
            "borderTopColor",
            "borderTopStyle",
            "borderTopWidth"
        ],
        borderWidth: [
            "borderBottomWidth",
            "borderLeftWidth",
            "borderRightWidth",
            "borderTopWidth"
        ],
        columnRule: [
            "columnRuleColor",
            "columnRuleStyle",
            "columnRuleWidth"
        ],
        columns: [
            "columnCount",
            "columnWidth"
        ],
        flex: [
            "flexBasis",
            "flexGrow",
            "flexShrink"
        ],
        flexFlow: [
            "flexDirection",
            "flexWrap"
        ],
        font: [
            "fontFamily",
            "fontFeatureSettings",
            "fontKerning",
            "fontLanguageOverride",
            "fontSize",
            "fontSizeAdjust",
            "fontStretch",
            "fontStyle",
            "fontVariant",
            "fontVariantAlternates",
            "fontVariantCaps",
            "fontVariantEastAsian",
            "fontVariantLigatures",
            "fontVariantNumeric",
            "fontVariantPosition",
            "fontWeight",
            "lineHeight"
        ],
        fontVariant: [
            "fontVariantAlternates",
            "fontVariantCaps",
            "fontVariantEastAsian",
            "fontVariantLigatures",
            "fontVariantNumeric",
            "fontVariantPosition"
        ],
        gap: [
            "columnGap",
            "rowGap"
        ],
        grid: [
            "gridAutoColumns",
            "gridAutoFlow",
            "gridAutoRows",
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
        ],
        gridArea: [
            "gridColumnEnd",
            "gridColumnStart",
            "gridRowEnd",
            "gridRowStart"
        ],
        gridColumn: [
            "gridColumnEnd",
            "gridColumnStart"
        ],
        gridColumnGap: [
            "columnGap"
        ],
        gridGap: [
            "columnGap",
            "rowGap"
        ],
        gridRow: [
            "gridRowEnd",
            "gridRowStart"
        ],
        gridRowGap: [
            "rowGap"
        ],
        gridTemplate: [
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
        ],
        listStyle: [
            "listStyleImage",
            "listStylePosition",
            "listStyleType"
        ],
        margin: [
            "marginBottom",
            "marginLeft",
            "marginRight",
            "marginTop"
        ],
        marker: [
            "markerEnd",
            "markerMid",
            "markerStart"
        ],
        mask: [
            "maskClip",
            "maskComposite",
            "maskImage",
            "maskMode",
            "maskOrigin",
            "maskPositionX",
            "maskPositionY",
            "maskRepeat",
            "maskSize"
        ],
        maskPosition: [
            "maskPositionX",
            "maskPositionY"
        ],
        outline: [
            "outlineColor",
            "outlineStyle",
            "outlineWidth"
        ],
        overflow: [
            "overflowX",
            "overflowY"
        ],
        padding: [
            "paddingBottom",
            "paddingLeft",
            "paddingRight",
            "paddingTop"
        ],
        placeContent: [
            "alignContent",
            "justifyContent"
        ],
        placeItems: [
            "alignItems",
            "justifyItems"
        ],
        placeSelf: [
            "alignSelf",
            "justifySelf"
        ],
        textDecoration: [
            "textDecorationColor",
            "textDecorationLine",
            "textDecorationStyle"
        ],
        textEmphasis: [
            "textEmphasisColor",
            "textEmphasisStyle"
        ],
        transition: [
            "transitionDelay",
            "transitionDuration",
            "transitionProperty",
            "transitionTimingFunction"
        ],
        wordWrap: [
            "overflowWrap"
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        "Webkit",
        "ms",
        "Moz",
        "O"
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) return "";
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + "px"; // Presumes implicit 'px' suffix for unitless numbers
        checkCSSPropertyStringCoercion(value, name);
        return ("" + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
    }
    var warnValidStyle = function() {};
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error("Unsupported style property %s. Did you mean %s?", name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, "ms-")));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error("`NaN` is an invalid value for the `%s` css style property.", name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error("`Infinity` is an invalid value for the `%s` css style property.", name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf("-") > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === "number") {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = "";
        var delimiter = "";
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") styleName = "cssFloat";
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {};
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = "__html";
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) throw new Error(tag + " is a void element tag and must neither have `children` nor " + "use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (props.style != null && typeof props.style !== "object") throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) return typeof props.is === "string";
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
    };
    var ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    function validateProperty(tagName, name) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
        }).join(", ");
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== "input" && type !== "textarea" && type !== "select") return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {};
    var warnedProperties$1 = {};
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            else error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
        }).join(", ");
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    // This exists to avoid circular dependency between ReactDOMEventReplaying
    // and DOMPluginEventSystem.
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
        if (currentReplayingEvent !== null) error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
        if (currentReplayingEvent === null) error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
        return event === currentReplayingEvent;
    }
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (typeof restoreImpl !== "function") throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var flushSyncImpl = function() {};
    var isInsideEventHandler = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            // TODO: Restore state in the microtask, after the discrete updates flush,
            // instead of early flushing them here.
            flushSyncImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, a, b);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    } // TODO: Replace with flushSync
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (listener && typeof listener !== "function") throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, "passive", {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebook/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (typeof document === "undefined" || document === null) throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent("Event");
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error != null && typeof error === "object") try {
                        error._suppressLogging = true;
                    } catch (inner) {}
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : "invokeguardedcallback"); // Attach our event handlers
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, "event", windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error);
            } // Remove our event listeners
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var ChildDeletion = /*                */ 16;
    var ContentReset = /*                 */ 32;
    var Callback = /*                     */ 64;
    var DidCapture = /*                   */ 128;
    var ForceClientRender = /*            */ 256;
    var Ref = /*                          */ 512;
    var Snapshot = /*                     */ 1024;
    var Passive = /*                      */ 2048;
    var Hydrating = /*                    */ 4096;
    var Visibility = /*                   */ 8192;
    var StoreConsistency = /*             */ 16384;
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)
    var HostEffectMask = /*               */ 32767; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 32768;
    var ShouldCapture = /*                */ 65536;
    var ForceUpdateForLegacySuspense = /* */ 131072;
    var Forked = /*                       */ 1048576; // Static tags describe aspects of a fiber that are not specific to a render,
    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
    // This enables us to defer more work in the unmount case,
    // since we can defer traversing the tree during layout to look for Passive effects,
    // and instead rely on the static flag as a signal that there may be cleanup work.
    var RefStatic = /*                    */ 2097152;
    var LayoutStatic = /*                 */ 4194304;
    var PassiveStatic = /*                */ 8388608; // These flags allow us to traverse to fibers that have effects on mount
    // without traversing the entire tree after every commit for
    // double invoking
    var MountLayoutDev = /*               */ 16777216;
    var MountPassiveDev = /*              */ 33554432; // Groups of flags that are used in the commit phase to skip over trees that
    // don't contain effects, by checking subtreeFlags.
    var BeforeMutationMask = // flag logic (see #20043)
    Update | Snapshot | 0;
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask
    var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
    // This allows certain concepts to persist without recalculating them,
    // e.g. whether a subtree contains passive effects or portals.
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode);
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) throw new Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) throw new Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (a.alternate !== b) throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (a.tag !== HostRoot) throw new Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) return match;
            child = child.sibling;
        }
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) return match;
            }
            child = child.sibling;
        }
        return null;
    }
    // This module only exists as an ESM wrapper around the external CommonJS
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    // this doesn't actually exist on the scheduler, but it *does*
    // on scheduler/unstable_mock, which we'll need for internal testing
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            if (enableSchedulingProfiler) // Conditionally inject these hooks only if Timeline profiler is supported by this build.
            // This gives DevTools a way to feature detect that isn't tied to version number
            // (since profiling and timeline are controlled by different feature flags).
            internals = assign({}, internals, {
                getLaneLabelMap: getLaneLabelMap,
                injectProfilingHooks: injectProfilingHooks
            });
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error("React instrumentation encountered an error: %s.", err);
        }
        if (hook.checkDCE) // This is the real DevTools.
        return true;
        else // This is likely a hook installed by Fast Refresh runtime.
        return false;
    }
    function onScheduleRoot(root, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function onCommitRoot(root, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") try {
            var didError = (root.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
                var schedulerPriority;
                switch(eventPriority){
                    case DiscreteEventPriority:
                        schedulerPriority = ImmediatePriority;
                        break;
                    case ContinuousEventPriority:
                        schedulerPriority = UserBlockingPriority;
                        break;
                    case DefaultEventPriority:
                        schedulerPriority = NormalPriority;
                        break;
                    case IdleEventPriority:
                        schedulerPriority = IdlePriority;
                        break;
                    default:
                        schedulerPriority = NormalPriority;
                        break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
            } else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function onPostCommitRoot(root) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") try {
            injectedHook.onPostCommitFiberRoot(rendererID, root);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue === "function") {
            // We're in a test because Scheduler.unstable_yieldValue only exists
            // in SchedulerMock. To reduce the noise in strict mode tests,
            // suppress warnings and disable scheduler yielding during the double render
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === "function") try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    } // Profiler API hooks
    function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
        var map = new Map();
        var lane = 1;
        for(var index = 0; index < TotalLanes; index++){
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
        }
        return map;
    }
    function markCommitStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") injectedProfilingHooks.markCommitStarted(lanes);
    }
    function markCommitStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") injectedProfilingHooks.markComponentRenderStopped();
    }
    function markComponentPassiveEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
    function markComponentPassiveEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
    function markComponentPassiveEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
    function markComponentLayoutEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
    function markComponentLayoutEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
    function markComponentLayoutEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
    function markLayoutEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
    function markLayoutEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") injectedProfilingHooks.markLayoutEffectsStopped();
    }
    function markPassiveEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
    function markPassiveEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") injectedProfilingHooks.markPassiveEffectsStopped();
    }
    function markRenderStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderYielded() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") injectedProfilingHooks.markRenderYielded();
    }
    function markRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") injectedProfilingHooks.markRenderStopped();
    }
    function markRenderScheduled(lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") injectedProfilingHooks.markRenderScheduled(lane);
    }
    function markForceUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
    function markStateUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    var NoMode = /*                         */ 0; // TODO: Remove ConcurrentMode by reading from the root tag instead
    var ConcurrentMode = /*                 */ 1;
    var ProfileMode = /*                    */ 2;
    var StrictLegacyMode = /*               */ 8;
    var StrictEffectsMode = /*              */ 16;
    // TODO: This is pretty well supported by browsers. Maybe we can drop it.
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) return 32;
        return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    // If those values are changed that package should be rebuilt and redeployed.
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var InputContinuousHydrationLane = /*    */ 2;
    var InputContinuousLane = /*             */ 4;
    var DefaultHydrationLane = /*            */ 8;
    var DefaultLane = /*                     */ 16;
    var TransitionHydrationLane = /*                */ 32;
    var TransitionLanes = /*                       */ 4194240;
    var TransitionLane1 = /*                        */ 64;
    var TransitionLane2 = /*                        */ 128;
    var TransitionLane3 = /*                        */ 256;
    var TransitionLane4 = /*                        */ 512;
    var TransitionLane5 = /*                        */ 1024;
    var TransitionLane6 = /*                        */ 2048;
    var TransitionLane7 = /*                        */ 4096;
    var TransitionLane8 = /*                        */ 8192;
    var TransitionLane9 = /*                        */ 16384;
    var TransitionLane10 = /*                       */ 32768;
    var TransitionLane11 = /*                       */ 65536;
    var TransitionLane12 = /*                       */ 131072;
    var TransitionLane13 = /*                       */ 262144;
    var TransitionLane14 = /*                       */ 524288;
    var TransitionLane15 = /*                       */ 1048576;
    var TransitionLane16 = /*                       */ 2097152;
    var RetryLanes = /*                            */ 130023424;
    var RetryLane1 = /*                             */ 4194304;
    var RetryLane2 = /*                             */ 8388608;
    var RetryLane3 = /*                             */ 16777216;
    var RetryLane4 = /*                             */ 33554432;
    var RetryLane5 = /*                             */ 67108864;
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = /*          */ 134217728;
    var NonIdleLanes = /*                          */ 268435455;
    var IdleHydrationLane = /*               */ 268435456;
    var IdleLane = /*                        */ 536870912;
    var OffscreenLane = /*                   */ 1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
    // It should be kept in sync with the Lanes values above.
    function getLabelForLane(lane) {
        if (lane & SyncLane) return "Sync";
        if (lane & InputContinuousHydrationLane) return "InputContinuousHydration";
        if (lane & InputContinuousLane) return "InputContinuous";
        if (lane & DefaultHydrationLane) return "DefaultHydration";
        if (lane & DefaultLane) return "Default";
        if (lane & TransitionHydrationLane) return "TransitionHydration";
        if (lane & TransitionLanes) return "Transition";
        if (lane & RetryLanes) return "Retry";
        if (lane & SelectiveHydrationLane) return "SelectiveHydration";
        if (lane & IdleHydrationLane) return "IdleHydration";
        if (lane & IdleLane) return "Idle";
        if (lane & OffscreenLane) return "Offscreen";
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
        switch(getHighestPriorityLane(lanes)){
            case SyncLane:
                return SyncLane;
            case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
            case InputContinuousLane:
                return InputContinuousLane;
            case DefaultHydrationLane:
                return DefaultHydrationLane;
            case DefaultLane:
                return DefaultLane;
            case TransitionHydrationLane:
                return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                return lanes & RetryLanes;
            case SelectiveHydrationLane:
                return SelectiveHydrationLane;
            case IdleHydrationLane:
                return IdleHydrationLane;
            case IdleLane:
                return IdleLane;
            case OffscreenLane:
                return OffscreenLane;
            default:
                error("Should have found matching lanes. This is a bug in React.");
                return lanes;
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) return NoLanes;
        var nextLanes = NoLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
        // even if the work is suspended.
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
        } else {
            // The only remaining work is Idle.
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(unblockedLanes);
            else if (pingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(pingedLanes);
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
        // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (// one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
            // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) // Keep working on the existing in-progress tree. Do not interrupt.
            return wipLanes;
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) // When updates are sync by default, we entangle continuous priority updates
        // and default updates, so they render in the same batch. The only reason
        // they use separate lanes is because continuous updates should interrupt
        // transitions, but default updates should not.
        nextLanes |= pendingLanes & DefaultLane;
         // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        // TODO: Reconsider this. The counter-argument is that the partial work
        // represents an intermediate state, which we don't want to show to the user.
        // And by spending extra time finishing it, we're increasing the amount of
        // time it takes to show the final state, which is what they are actually
        // waiting for.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        switch(lane){
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
                // User interactions should expire slightly more quickly.
                //
                // NOTE: This is set to the corresponding constant as in Scheduler.js.
                // When we made it larger, a product metric in www regressed, suggesting
                // there's a user interaction that's being starved by a series of
                // synchronous updates. If that theory is correct, the proper solution is
                // to fix the starvation. However, this scenario supports the idea that
                // expiration times are an important safeguard when starvation
                // does happen.
                return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return currentTime + 5000;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                // TODO: Retries should be allowed to expire if they are CPU bound for
                // too long, but when I made this change it caused a spike in browser
                // crashes. There must be some other underlying bug; not super urgent but
                // ideally should figure out why and fix it. Unfortunately we don't have
                // a repro for the crashes, only detected via production metrics.
                return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
                // Anything idle priority or lower should never expire.
                return NoTimestamp;
            default:
                error("Should have found matching lanes. This is a bug in React.");
                return NoTimestamp;
        }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    // are suspended.
    function getHighestPriorityPendingLanes(root) {
        return getHighestPriorityLanes(root.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root, lanes) {
        // This is a separate check from includesBlockingLane because a lane can
        // expire after a render has already started.
        return (lanes & root.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
        // Cycle through the lanes, assigning each new transition to the next lane.
        // In most cases, this means every transition gets its own lane, until we
        // run out of lanes and cycle back to the beginning.
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) nextTransitionLane = TransitionLane1;
        return lane;
    }
    function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) nextRetryLane = RetryLane1;
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set, subset) {
        return set & ~subset;
    }
    function intersectLanes(a, b) {
        return a & b;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
        // could unblock them. Clear the suspended lanes so that we can try rendering
        // them again.
        //
        // TODO: We really only need to unsuspend only lanes that are in the
        // `subtreeLanes` of the updated fiber, or the update lanes of the return
        // path. This would exclude suspended updates in an unrelated sibling tree,
        // since there's no way for this update to unblock it.
        //
        // We don't do this if the incoming update is idle, because we never process
        // idle updates until after all the regular updates have finished; there's no
        // way it could unblock a transition.
        if (updateLane !== IdleLane) {
            root.suspendedLanes = NoLanes;
            root.pingedLanes = NoLanes;
        }
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = NoLanes;
        root.pingedLanes = NoLanes;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        // In addition to entangling each of the given lanes with each other, we also
        // have to consider _transitive_ entanglements. For each lane that is already
        // entangled with *any* of the given lanes, that lane is now transitively
        // entangled with *all* the given lanes.
        //
        // Translated: If C is entangled with A, then entangling A with B also
        // entangles C with B.
        //
        // If this is hard to grasp, it might help to intentionally break this
        // function and look at the tests that fail in ReactTransition-test.js. Try
        // commenting out one of the conditions below.
        var rootEntangledLanes = root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = rootEntangledLanes;
        while(lanes){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            if (lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
            entanglements[index] & entangledLanes) entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    function getBumpedLaneForHydration(root, renderLanes) {
        var renderLane = getHighestPriorityLane(renderLanes);
        var lane;
        switch(renderLane){
            case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
            case DefaultLane:
                lane = DefaultHydrationLane;
                break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                lane = TransitionHydrationLane;
                break;
            case IdleLane:
                lane = IdleHydrationLane;
                break;
            default:
                // Everything else is already either a hydration lane, or shouldn't
                // be retried at a hydration lane.
                lane = NoLane;
                break;
        } // Check if the lane we chose is suspended. If so, that indicates that we
        // already attempted and failed to hydrate at that level. Also check if we're
        // already rendering that lane, which is rare but could happen.
        if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) // Give up trying to hydrate and fall back to client render.
        return NoLane;
        return lane;
    }
    function addFiberToLanesMap(root, fiber, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            updaters.add(fiber);
            lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        var memoizedUpdaters = root.memoizedUpdaters;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate === null || !memoizedUpdaters.has(alternate)) memoizedUpdaters.add(fiber);
                });
                updaters.clear();
            }
            lanes &= ~lane;
        }
    }
    function getTransitionsForLanes(root, lanes) {
        return null;
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
        return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = priority;
            return fn();
        } finally{
            currentUpdatePriority = previousPriority;
        }
    }
    function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) return DiscreteEventPriority;
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) return ContinuousEventPriority;
        if (includesNonIdleWork(lane)) return DefaultEventPriority;
        return IdleEventPriority;
    }
    // This is imported by the event replaying implementation in React DOM. It's
    // in a separate file to break a circular dependency between the renderer and
    // the reconciler.
    function isRootDehydrated(root) {
        var currentState = root.current.memoizedState;
        return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    // has this definition built-in.
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case "focusin":
            case "focusout":
                queuedFocus = null;
                break;
            case "dragenter":
            case "dragleave":
                queuedDrag = null;
                break;
            case "mouseover":
            case "mouseout":
                queuedMouse = null;
                break;
            case "pointerover":
            case "pointerout":
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case "gotpointercapture":
            case "lostpointercapture":
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case "focusin":
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case "dragenter":
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case "mouseover":
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case "pointerover":
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case "gotpointercapture":
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.priority, function() {
                            attemptHydrationAtCurrentPriority(nearestMounted);
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
        // TODO: This will read the priority if it's dispatched by the React
        // event system but not native events. Should read window.event.type, like
        // we do for updates (getCurrentEventPriority).
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
            blockedOn: null,
            target: target,
            priority: updatePriority
        };
        var i = 0;
        for(; i < queuedExplicitHydrationTargets.length; i++){
            // Stop once we hit the first target with lower priority than
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) break;
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) attemptExplicitHydrationTarget(queuedTarget);
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
            } else {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
            case DefaultEventPriority:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
        } // We need to clear only if we didn't queue because
        // queueing is accumulative.
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while(blockedOn !== null){
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) attemptSynchronousHydration(fiber);
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                if (nextBlockedOn === blockedOn) break;
                blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) nativeEvent.stopPropagation();
            return;
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
    // The return_targetInst field above is conceptually part of the return value.
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        return_targetInst = targetInst; // We're not blocked on anything.
        return null;
    }
    function getEventPriority(domEventName) {
        switch(domEventName){
            // Used by SimpleEventPlugin:
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            // eslint-disable-next-line no-fallthrough
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            // eslint-disable-next-line no-fallthrough
            case "beforeblur":
            case "afterblur":
            // eslint-disable-next-line no-fallthrough
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
                return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            // eslint-disable-next-line no-fallthrough
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
                return ContinuousEventPriority;
            case "message":
                // We might be in the Scheduler callback.
                // Eventually this mechanism will be replaced by a check
                // of the current priority on the native scheduler.
                var schedulerPriority = getCurrentPriorityLevel();
                switch(schedulerPriority){
                    case ImmediatePriority:
                        return DiscreteEventPriority;
                    case UserBlockingPriority:
                        return ContinuousEventPriority;
                    case NormalPriority:
                    case LowPriority:
                        // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                        return DefaultEventPriority;
                    case IdlePriority:
                        return IdleEventPriority;
                    default:
                        return DefaultEventPriority;
                }
            default:
                return DefaultEventPriority;
        }
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ("value" in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== "unknown") event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== "unknown") // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {},
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ("movementX" in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ("movementY" in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || "Unidentified";
        return "";
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === "keypress") return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === "keydown" || event.type === "keyup") return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === "keypress") return getEventCharCode(event);
            if (event.type === "keydown" || event.type === "keyup") return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
    var documentMode = null;
    if (canUseDOM && "documentMode" in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", [
            "compositionend",
            "keypress",
            "textInput",
            "paste"
        ]);
        registerTwoPhaseEvent("onCompositionEnd", [
            "compositionend",
            "focusout",
            "keydown",
            "keypress",
            "keyup",
            "mousedown"
        ]);
        registerTwoPhaseEvent("onCompositionStart", [
            "compositionstart",
            "focusout",
            "keydown",
            "keypress",
            "keyup",
            "mousedown"
        ]);
        registerTwoPhaseEvent("onCompositionUpdate", [
            "compositionupdate",
            "focusout",
            "keydown",
            "keypress",
            "keyup",
            "mousedown"
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case "compositionstart":
                return "onCompositionStart";
            case "compositionend":
                return "onCompositionEnd";
            case "compositionupdate":
                return "onCompositionUpdate";
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case "keyup":
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = "onCompositionStart";
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = "onCompositionEnd";
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === "onCompositionStart") isComposing = initialize(nativeEventTarget);
            else if (eventType === "onCompositionEnd") {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
            case "keypress":
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case "textInput":
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case "paste":
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case "keypress":
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") return !!supportedInputTypes[elem.type];
        if (nodeName === "textarea") return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent("onChange", [
            "change",
            "click",
            "focusin",
            "focusout",
            "input",
            "keydown",
            "keyup",
            "selectionchange"
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== "number") return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, "number", node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === "focusout") handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent("onMouseEnter", [
            "mouseout",
            "mouseover"
        ]);
        registerDirectEvent("onMouseLeave", [
            "mouseout",
            "mouseover"
        ]);
        registerDirectEvent("onPointerEnter", [
            "pointerout",
            "pointerover"
        ]);
        registerDirectEvent("onPointerLeave", [
            "pointerout",
            "pointerover"
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ("contains" in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === "function") priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ("selectionStart" in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", [
            "focusout",
            "contextmenu",
            "dragend",
            "focusin",
            "keydown",
            "keyup",
            "mousedown",
            "mouseup",
            "selectionchange"
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case "mousedown":
                mouseDown = true;
                break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case "selectionchange":
                if (skipSelectionChangeEvent) break;
            // falls through
            case "keydown":
            case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes["Webkit" + styleProp] = "webkit" + eventName;
        prefixes["Moz" + styleProp] = "moz" + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {};
    /**
 * Element to check for prefixes on.
 */ var style = {};
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement("div").style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!("TransitionEvent" in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName("animationend");
    var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
    var ANIMATION_START = getVendorPrefixedEventName("animationstart");
    var TRANSITION_END = getVendorPrefixedEventName("transitionend");
    var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
    //
    // E.g. it needs "pointerDown", not "pointerdown".
    // This is because we derive both React name ("onPointerDown")
    // and DOM name ("pointerdown") from the same list.
    //
    // Exceptions that don't match this convention are listed separately.
    //
    // prettier-ignore
    var simpleEventPluginEvents = [
        "abort",
        "auxClick",
        "cancel",
        "canPlay",
        "canPlayThrough",
        "click",
        "close",
        "contextMenu",
        "copy",
        "cut",
        "drag",
        "dragEnd",
        "dragEnter",
        "dragExit",
        "dragLeave",
        "dragOver",
        "dragStart",
        "drop",
        "durationChange",
        "emptied",
        "encrypted",
        "ended",
        "error",
        "gotPointerCapture",
        "input",
        "invalid",
        "keyDown",
        "keyPress",
        "keyUp",
        "load",
        "loadedData",
        "loadedMetadata",
        "loadStart",
        "lostPointerCapture",
        "mouseDown",
        "mouseMove",
        "mouseOut",
        "mouseOver",
        "mouseUp",
        "paste",
        "pause",
        "play",
        "playing",
        "pointerCancel",
        "pointerDown",
        "pointerMove",
        "pointerOut",
        "pointerOver",
        "pointerUp",
        "progress",
        "rateChange",
        "reset",
        "resize",
        "seeked",
        "seeking",
        "stalled",
        "submit",
        "suspend",
        "timeUpdate",
        "touchCancel",
        "touchEnd",
        "touchStart",
        "volumeChange",
        "scroll",
        "toggle",
        "touchMove",
        "waiting",
        "wheel"
    ];
    function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [
            domEventName
        ]);
    }
    function registerSimpleEvents() {
        for(var i = 0; i < simpleEventPluginEvents.length; i++){
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        } // Special cases where event names don't match.
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case "keypress":
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case "keydown":
            case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case "beforeblur":
            case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case "click":
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            /* falls through */ case "mouseout":
            case "mouseover":
            case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case "copy":
            case "cut":
            case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
        // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === "scroll";
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't foresee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        "abort",
        "canplay",
        "canplaythrough",
        "durationchange",
        "emptied",
        "encrypted",
        "ended",
        "error",
        "loadeddata",
        "loadedmetadata",
        "loadstart",
        "pause",
        "play",
        "playing",
        "progress",
        "ratechange",
        "resize",
        "seeked",
        "seeking",
        "stalled",
        "suspend",
        "timeupdate",
        "volumechange",
        "waiting"
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        "cancel",
        "close",
        "invalid",
        "load",
        "scroll",
        "toggle"
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        if (!nonDelegatedEvents.has(domEventName)) error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    } // This is only used by createEventHandle when the
    var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
                // We handle selectionchange separately because it
                // doesn't bubble and needs to be on the document.
                if (domEventName !== "selectionchange") {
                    if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement);
                    listenToNativeEvent(domEventName, true, rootContainerElement);
                }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) // The selectionchange event also needs deduplication
            // but it is attached to the document.
            {
                if (!ownerDocument[listeningMarker]) {
                    ownerDocument[listeningMarker] = true;
                    listenToNativeEvent("selectionchange", false, ownerDocument);
                }
            }
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") isPassiveListener = true;
        }
        targetContainer;
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
             // If we are processing the onBeforeBlur event, then we need to take
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
    var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
    var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
    var AUTOFOCUS = "autoFocus";
    var CHILDREN = "children";
    var STYLE = "style";
    var HTML$1 = "__html";
    var warnedUnknownTags;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error("Extra attributes from the server: %s", names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        if (shouldWarnDev) {
            if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) // In concurrent roots, we throw when there's a text mismatch and revert to
        // client rendering, up to the nearest Suspense boundary.
        throw new Error("Text content does not match server-rendered HTML.");
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {}
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== "textarea" || nextProp !== "";
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === "number") setTextContent(domElement, "" + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== "function") warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === "script") {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === "select") {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
            case "iframe":
            case "object":
            case "embed":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
            case "video":
            case "audio":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case "source":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
            case "img":
            case "image":
            case "link":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
            case "details":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
            case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
            case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case "input":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case "textarea":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
            case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === "function") // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {};
                    styleUpdates[styleName] = "";
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = "";
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== "function") warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case "input":
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
            case "select":
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
            case "iframe":
            case "object":
            case "embed":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent("load", domElement);
                break;
            case "video":
            case "audio":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case "source":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent("error", domElement);
                break;
            case "img":
            case "image":
            case "link":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
            case "details":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent("toggle", domElement);
                break;
            case "input":
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "option":
                validateProps(domElement, rawProps);
                break;
            case "select":
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "textarea":
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case "value":
                    break;
                case "checked":
                    break;
                case "selected":
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === "string") {
                    if (domElement.textContent !== nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === "number") {
                    if (domElement.textContent !== "" + nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            "" + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== "function") warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute("style");
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) // $FlowFixMe - Should be inferred as not undefined.
            warnForExtraAttributes(extraAttributeNames);
        }
        switch(tag){
            case "input":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case "textarea":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case "select":
            case "option":
                break;
            default:
                if (typeof rawProps.onClick === "function") // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === "") // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case "input":
                restoreControlledState(domElement, props);
                return;
            case "textarea":
                restoreControlledState$2(domElement, props);
                return;
            case "select":
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {};
    var updatedAncestorInfo = function() {};
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        "address",
        "applet",
        "area",
        "article",
        "aside",
        "base",
        "basefont",
        "bgsound",
        "blockquote",
        "body",
        "br",
        "button",
        "caption",
        "center",
        "col",
        "colgroup",
        "dd",
        "details",
        "dir",
        "div",
        "dl",
        "dt",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "frame",
        "frameset",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "iframe",
        "img",
        "input",
        "isindex",
        "li",
        "link",
        "listing",
        "main",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "nav",
        "noembed",
        "noframes",
        "noscript",
        "object",
        "ol",
        "p",
        "param",
        "plaintext",
        "pre",
        "script",
        "section",
        "select",
        "source",
        "style",
        "summary",
        "table",
        "tbody",
        "td",
        "template",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "title",
        "tr",
        "track",
        "ul",
        "wbr",
        "xmp"
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        "button"
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        "dd",
        "dt",
        "li",
        "option",
        "optgroup",
        "p",
        "rp",
        "rt"
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === "form") ancestorInfo.formTag = info;
        if (tag === "a") ancestorInfo.aTagInScope = info;
        if (tag === "button") ancestorInfo.buttonTagInScope = info;
        if (tag === "nobr") ancestorInfo.nobrTagInScope = info;
        if (tag === "p") ancestorInfo.pTagInButtonScope = info;
        if (tag === "li") ancestorInfo.listItemTagAutoclosing = info;
        if (tag === "dd" || tag === "dt") ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
                return tag === "option" || tag === "#text";
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case "option":
                return tag === "#text";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case "tbody":
            case "thead":
            case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case "colgroup":
                return tag === "col" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
                return tag === "frame";
            case "#document":
                return tag === "html";
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                return ancestorInfo.pTagInButtonScope;
            case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
                return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
            case "button":
                return ancestorInfo.buttonTagInScope;
            case "a":
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case "nobr":
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {};
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error("validateDOMNesting: when childText is passed, childTag should be null");
            childTag = "#text";
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = "";
        if (childTag === "#text") {
            if (/\S/.test(childText)) tagDisplayName = "Text nodes";
            else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = "<" + childTag + ">";
        if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
    var SUSPENSE_START_DATA = "$";
    var SUSPENSE_END_DATA = "/$";
    var SUSPENSE_PENDING_START_DATA = "$?";
    var SUSPENSE_FALLBACK_START_DATA = "$!";
    var STYLE$1 = "style";
    var eventsEnabled = null;
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, "");
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch(type){
            case "button":
            case "input":
            case "select":
            case "textarea":
                return !!props.autoFocus;
            case "img":
                return true;
            default:
                return false;
        }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) return DefaultEventPriority;
        return getEventPriority(currentEvent.type);
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
    var noTimeout = -1;
    var localPromise = typeof Promise === "function" ? Promise : undefined; // -------------------
    var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout; // TODO: Determine the best fallback here.
    function handleErrorInNextTick(error) {
        setTimeout(function() {
            throw error;
        });
    } // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        switch(type){
            case "button":
            case "input":
            case "select":
            case "textarea":
                if (newProps.autoFocus) domElement.focus();
                return;
            case "img":
                if (newProps.src) domElement.src = newProps.src;
                return;
        }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance; // Delete all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.
                        retryIfBlockedOn(suspenseInstance);
                        return;
                    } else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) depth++;
            }
            node = nextNode;
        }while (node); // TODO: Warn, we didn't find the end comment boundary.
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) clearSuspenseBoundary(container.parentNode, suspenseInstance);
        else if (container.nodeType === ELEMENT_NODE) clearSuspenseBoundary(container, suspenseInstance);
         // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
        instance;
        var style = instance.style;
        if (typeof style.setProperty === "function") style.setProperty("display", "none", "important");
        else style.display = "none";
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
    }
    function unhideInstance(instance, props) {
        instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = "";
        else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) container.removeChild(container.documentElement);
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a suspense node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
            digest = dataset.dgst;
            message = dataset.msg;
            stack = dataset.stck;
        }
        return {
            message: message,
            digest: digest,
            stack: stack
        };
    // const nextSibling = instance.nextSibling;
    // if (nextSibling) {
    //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
    //   value.message = dataset.msg;
    //   value.hash = dataset.hash;
    //   if (true) {
    //     value.stack = dataset.stack;
    //   }
    // }
    // return value;
    }
    function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
            if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) break;
                if (nodeData === SUSPENSE_END_DATA) return null;
            }
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentNode, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentNode, instance);
        }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function errorHydratingContainer(parentContainer) {
        // TODO: This gets logged by onRecoverableError, too, so we should be
        // able to remove it.
        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = "__reactFiber$" + randomKey;
    var internalPropsKey = "__reactProps$" + randomKey;
    var internalContainerInstanceKey = "__reactContainer$" + randomKey;
    var internalEventHandlersKey = "__reactEvents$" + randomKey;
    var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
    var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
    function detachDeletedInstance(node) {
        // TODO: This function is only called on host components. I don't think all of
        // these fields are relevant.
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        // invariant for a missing parent, which is super confusing.
        throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error("Unexpected pop.");
            return;
        }
        if (fiber !== fiberStack[index]) error("Unexpected Fiber popped.");
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {};
    var emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {};
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentNameFromFiber(workInProgress) || "Unknown";
        checkPropTypes(contextTypes, context, "context", name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (contextStackCursor.current !== emptyContextObject) throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== "function") {
            var componentName = getComponentNameFromFiber(fiber) || "Unknown";
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
        }
        var name = getComponentNameFromFiber(fiber) || "Unknown";
        checkPropTypes(childContextTypes, childContext, "child context", name);
        return assign({}, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) syncQueue = [
            callback
        ];
        else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
    }
    function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
        // Only flushes the queue if there's a legacy sync callback scheduled.
        // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
        // it might make more sense for the queue to be a list of roots instead of a
        // list of generic callbacks. Then we can have two: one for legacy roots, one
        // for concurrent roots. And this method would only flush the legacy ones.
        if (includesLegacySyncCallbacks) flushSyncCallbacks();
    }
    function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrance.
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
                var isSync = true;
                var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
                // queue is in the render or commit phases.
                setCurrentUpdatePriority(DiscreteEventPriority);
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(isSync);
                    while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error;
            } finally{
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
            }
        }
        return null;
    }
    // TODO: Use the unified fiber stack module instead of this local one?
    // Intentionally not using it yet to derisk the initial implementation, because
    // the way we push/pop these values is a bit unusual. If there's a mistake, I'd
    // rather the ids be wrong than crash the whole reconciler.
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = "";
    function isForkedChild(workInProgress) {
        warnIfNotHydrating();
        return (workInProgress.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress) {
        warnIfNotHydrating();
        return treeForkCount;
    }
    function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress, totalChildren) {
        // This is called right after we reconcile an array (or iterator) of child
        // fibers, because that's the only place where we know how many children in
        // the whole set without doing extra work later, or storing addtional
        // information on the fiber.
        //
        // That's why this function is separate from pushTreeId — it's called during
        // the render phase of the fork parent, not the child, which is where we push
        // the other context values.
        //
        // In the Fizz implementation this is much simpler because the child is
        // rendered in the same callstack as the parent.
        //
        // It might be better to just add a `forks` field to the Fiber type. It would
        // make this module simpler.
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress;
        treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
        // of the id; we use it to account for leading 0s.
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index + 1;
        var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
        // consideration the leading 1 we use to mark the end of the sequence.
        if (length > 30) {
            // We overflowed the bitwise-safe range. Fall back to slower algorithm.
            // This branch assumes the length of the base id is greater than 5; it won't
            // work for smaller ids, because you need 5 bits per character.
            //
            // We encode the id in multiple steps: first the base id, then the
            // remaining digits.
            //
            // Each 5 bit sequence corresponds to a single base 32 character. So for
            // example, if the current id is 23 bits long, we can convert 20 of those
            // bits into a string of 4 characters, with 3 bits left over.
            //
            // First calculate how many bits in the base id represent a complete
            // sequence of characters.
            var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.
            var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.
            var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
            // we made more room, this time it won't overflow.
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
        } else {
            // Normal path
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
        }
    }
    function pushMaterializedTreeId(workInProgress) {
        warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
        // in its children.
        var returnFiber = workInProgress.return;
        if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress, numberOfForks);
            pushTreeId(workInProgress, numberOfForks, slotIndex);
        }
    }
    function getBitLength(number) {
        return 32 - clz32(number);
    }
    function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress) {
        // Restore the previous values.
        // This is a bit more complicated than other context-like modules in Fiber
        // because the same Fiber may appear on the stack multiple times and for
        // different reasons. We have to keep popping until the work-in-progress is
        // no longer at the top of the stack.
        while(workInProgress === treeForkProvider){
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
        }
        while(workInProgress === treeContextProvider){
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
        }
    }
    function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) return {
            id: treeContextId,
            overflow: treeContextOverflow
        };
        else return null;
    }
    function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress;
    }
    function warnIfNotHydrating() {
        if (!getIsHydrating()) error("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
    // due to earlier mismatches or a suspended fiber.
    var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary
    var hydrationErrors = null;
    function warnIfHydrating() {
        if (isHydrating) error("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function markDidThrowWhileHydratingDEV() {
        didSuspendOrErrorDEV = true;
    }
    function didSuspendOrErrorWhileHydratingDEV() {
        return didSuspendOrErrorDEV;
    }
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) restoreSuspendedTreeContext(fiber, treeContext);
        return true;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
        }
    }
    function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                childToDelete
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(childToDelete);
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
        if (didSuspendOrErrorDEV) // Inside a boundary that already suspended. We're currently rendering the
        // siblings of a suspended node. The mismatch may be due to the missing
        // data, so it's probably a false positive.
        return;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                        break;
                }
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch(fiber.tag){
                    case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                    case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = getFirstHydratableChild(instance);
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            case SuspenseComponent:
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                    var suspenseState = {
                        dehydrated: suspenseInstance,
                        treeContext: getSuspendedTreeContext(),
                        retryLane: OffscreenLane
                    };
                    fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
                    // This simplifies the code for getHostSibling and deleting nodes,
                    // since it doesn't have to consider all Suspense boundaries and
                    // check if they're dehydrated ones or not.
                    var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                    dehydratedFragment.return = fiber;
                    fiber.child = dehydratedFragment;
                    hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
                    // it during the first pass. Instead, we'll reenter it later.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
    function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                    break;
            }
        }
        return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        } // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them. We also don't delete anything inside the root container.
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                    warnIfUnhydratedTailNodes(fiber);
                    throwOnHydrationMismatch();
                } else while(nextInstance){
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                }
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while(nextInstance){
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
        }
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
            // Successfully completed a forced client render. The errors that occurred
            // during the hydration attempt are now recovered. We will log them in
            // commit phase, once the entire tree has finished.
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
        }
    }
    function getIsHydrating() {
        return isHydrating;
    }
    function queueHydrationError(error) {
        if (hydrationErrors === null) hydrationErrors = [
            error
        ];
        else hydrationErrors.push(error);
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function(fiber, instance) {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictLegacyMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(", ");
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedupe strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {};
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        context._currentValue = currentValue;
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            if (node === propagationRoot) break;
            node = node.return;
        }
        if (node !== propagationRoot) error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChange(workInProgress, context, renderLanes) {
        propagateContextChange_eager(workInProgress, context, renderLanes);
    }
    function propagateContextChange_eager(workInProgress, context, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var lane = pickArbitraryLane(renderLanes);
                            var update = createUpdate(NoTimestamp, lane);
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            // Inlined `enqueueUpdate` to remove interleaved update check
                            var updateQueue = fiber.updateQueue;
                            if (updateQueue === null) ;
                            else {
                                var sharedQueue = updateQueue.shared;
                                var pending = sharedQueue.pending;
                                if (pending === null) // This is the first update. Create a circular list.
                                update.next = update;
                                else {
                                    update.next = pending.next;
                                    pending.next = update;
                                }
                                sharedQueue.pending = update;
                            }
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else if (fiber.tag === DehydratedFragment) {
                // If a dehydrated suspense boundary is in this subtree, we don't know
                // if it will have any context consumers in it. The best we can do is
                // mark it as having updates.
                var parentSuspense = fiber.return;
                if (parentSuspense === null) throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
                 // This is intentionally passing this fiber as the parent
                // because we want to schedule this fiber as having work
                // on its children. We'll use the childLanes on
                // this fiber to indicate that a context has changed.
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
                nextFiber = fiber.sibling;
            } else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext === context) ;
        else {
            var contextItem = {
                context: context,
                memoizedValue: value,
                next: null
            };
            if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
    }
    // render. When this render exits, either because it finishes or because it is
    // interrupted, the interleaved updates will be transferred onto the main part
    // of the queue.
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) concurrentQueues = [
            queue
        ];
        else concurrentQueues.push(queue);
    }
    function finishQueueingConcurrentUpdates() {
        // Transfer the interleaved updates onto the main queue. Each queue has a
        // `pending` field and an `interleaved` field. When they are not null, they
        // point to the last node in a circular linked list. We need to append the
        // interleaved list to the end of the pending list by joining them into a
        // single, circular list.
        if (concurrentQueues !== null) {
            for(var i = 0; i < concurrentQueues.length; i++){
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                    queue.interleaved = null;
                    var firstInterleavedUpdate = lastInterleavedUpdate.next;
                    var lastPendingUpdate = queue.pending;
                    if (lastPendingUpdate !== null) {
                        var firstPendingUpdate = lastPendingUpdate.next;
                        lastPendingUpdate.next = firstInterleavedUpdate;
                        lastInterleavedUpdate.next = firstPendingUpdate;
                    }
                    queue.pending = lastInterleavedUpdate;
                }
            }
            concurrentQueues = null;
        }
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    } // Calling this function outside this module should only be done for backwards
    // compatibility and should always be accompanied by a warning.
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
        } else return null;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return null;
        var sharedQueue = updateQueue.shared;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
            // This is an unsafe render phase update. Add directly to the update
            // queue so we can process it immediately during the current render.
            var pending = sharedQueue.pending;
            if (pending === null) // This is the first update. Create a circular list.
            update.next = update;
            else {
                update.next = pending.next;
                pending.next = update;
            }
            sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
            // this fiber. This is for backwards compatibility in the case where you
            // update a different component during render phase than the one that is
            // currently renderings (a pattern that is accompanied by a warning).
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
    }
    function entangleTransitions(root, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
            // have finished. We can remove them from the shared queue, which represents
            // a superset of the actually pending lanes. In some cases we may entangle
            // more than we need to, but that's OK. In fact it's worse if we *don't*
            // entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current = workInProgress.alternate;
        if (current !== null) {
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null); // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === "function") {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return assign({}, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current = workInProgress.alternate;
            if (current !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null && // If the update was already committed, we should not queue its
                    // callback again.
                    update.lane !== NoLane) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true);
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
            // process them during this render, but we do need to track which lanes
            // are remaining.
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                    newLanes = mergeLanes(newLanes, interleaved.lane);
                    interleaved = interleaved.next;
                }while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) // `queue.lanes` is used for entangling transitions. We can set it back to
            // zero once the queue is empty.
            queue.shared.lanes = NoLanes;
             // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (typeof callback !== "function") throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === "function") return;
        var key = callerName + "_" + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, "_processChildContext", {
        enumerable: false,
        value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                // Invoke the function an extra time to help detect side-effects.
                partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "replaceState");
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "forceUpdate");
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markForceUpdateScheduled(fiber, lane);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentNameFromType(ctor) || "Component";
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === "function") error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
        if (typeof instance.componentDidUnmount === "function") error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === "function") error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === "function") error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === "function") error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === "function") error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === "function") error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === "function") error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== "object" || isArray(_state))) error("%s.state: must be set to an object or null", name);
        if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== "object") addendum = " However, it is set to a " + typeof contextType + ".";
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = " Did you accidentally pass the Context.Provider instead?";
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = " Did you accidentally pass the Context.Consumer instead?";
                else addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
        }
        if (typeof contextType === "object" && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                instance = new ctor(props, context); // eslint-disable-line no-new
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = "componentWillMount";
            else if (typeof instance.UNSAFE_componentWillMount === "function") foundWillMountName = "UNSAFE_componentWillMount";
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = "componentWillReceiveProps";
            else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = "componentWillUpdate";
            else if (typeof instance.UNSAFE_componentWillUpdate === "function") foundWillUpdateName = "UNSAFE_componentWillUpdate";
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === "function") instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress) || "Component");
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentNameFromFiber(workInProgress) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic;
            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
            workInProgress.flags |= fiberFlags;
        }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
                workInProgress.flags |= fiberFlags;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === "function") instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                _fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags;
            }
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                _fiberFlags2 |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags2 |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags2;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
        // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === "function") instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === "function") workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === "function") workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {};
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {};
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== "object") return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (typeof child._store !== "object") throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
    };
    function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
            // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (ownerFiber.tag !== ClassComponent) throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + "bug in React. Please file an issue.");
                 // Assigning this to a const so Flow knows it won't change in the closure
                var resolvedInst = inst;
                checkPropStringCoercion(mixedRef, "ref");
                var stringRef = "" + mixedRef; // Check if previous string ref matches new string ref
                if (current !== null && current.ref !== null && typeof current.ref === "function" && current.ref._stringRef === stringRef) return current.ref;
                var ref = function(value) {
                    var refs = resolvedInst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = resolvedInst.refs = {};
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (typeof mixedRef !== "string") throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + " the following reasons:\n" + "1. You may be adding a ref to a function component\n" + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + "3. You have multiple copies of React loaded\n" + "See https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    }
    function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
                returnFiber.deletions = [
                    childToDelete
                ];
                returnFiber.flags |= ChildDeletion;
            } else deletions.push(childToDelete);
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
                // During hydration, the useId algorithm needs to know which fibers are
                // part of a list of children (arrays, iterators).
                newFiber.flags |= Forked;
                return lastPlacedIndex;
            }
            var current = newFiber.alternate;
            if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags |= Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags |= Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags |= Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
            if (current !== null) {
                if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
                    // Move based on index
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return createChild(returnFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) return updateElement(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== "object" || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
                case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                    var _numberOfForks = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
            newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) throw new Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                    var _numberOfForks3 = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    var elementType = element.type;
                    if (elementType === REACT_FRAGMENT_TYPE) {
                        if (child.tag === Fragment) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, element.props.children);
                            existing.return = returnFiber;
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                            return existing;
                        }
                    } else if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing = useFiber(child, element.props);
                        _existing.ref = coerceRef(returnFiber, child, element);
                        _existing.return = returnFiber;
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                        return _existing;
                    }
                     // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_PORTAL_TYPE:
                        return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init; // TODO: This function is supposed to be non-recursive.
                        return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
        if (current !== null && workInProgress.child !== current.child) throw new Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (c === NO_CONTEXT) throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // Regular boundaries always capture.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*   */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Insertion = /*  */ 2;
    var Layout = /*    */ 4;
    var Passive$1 = /*   */ 8;
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root.mutableSourceEagerHydrationData == null) root.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.
    var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
    // hydration). This counter is global, so client ids are not stable across
    // render attempts.
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += " ";
                    row += newHookName + "\n";
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current !== null && current.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass);
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
        // render. If this fires, it suggests that we incorrectly reset the static
        // flags in some other part of the codebase. This has happened before, for
        // example, in the SuspenseList implementation.
        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
        // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current.mode & ConcurrentMode) !== NoMode) error("Internal React error: Expected static flag was missing. Please notify the React team.");
        didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
        // localIdCounter = 0;
        if (didRenderTooFewHooks) throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function checkDidRenderIdHook() {
        // This should be called immediately after every renderWithHooks call.
        // Conceptually, it's part of the return value of renderWithHooks; it's only a
        // separate function to avoid using an array tuple.
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
        // complete phase (bubbleProperties).
        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        else workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current = currentlyRenderingFiber$1.alternate;
            if (current !== null) nextCurrentHook = current.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (nextCurrentHook === null) throw new Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null,
            stores: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === "function" ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            hasEagerState: update.hasEagerState,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.hasEagerState) // If this update is a state update (not a reducer) and was processed eagerly,
                    // we can use the eagerly computed state
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first);
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        } // Interleaved updates are stored on a separate queue. We aren't going to
        // process them during this render, but we do need to track which lanes
        // are remaining.
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
            }while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) // `queue.lanes` is used for entangling transitions. We can set it back to
        // zero once the queue is empty.
        queue.lanes = NoLanes;
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating = getIsHydrating();
        if (isHydrating) {
            if (getServerSnapshot === undefined) throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            nextSnapshot = getServerSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                }
            }
        } else {
            nextSnapshot = getSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                }
            }
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            //
            // We won't do this if we're hydrating server-rendered content, because if
            // the content is stale, it's already visible anyway. Instead we'll patch
            // it up in a passive effect.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        } // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst; // Schedule an effect to subscribe to the store.
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Schedule an effect to update the mutable instance fields. We will update
        // this whenever subscribe, getSnapshot, or value changes. Because there's no
        // clean-up function, and we track the deps correctly, we can call pushEffect
        // directly, without storing any additional state. For the same reason, we
        // don't need to set a static flag, either.
        // TODO: We can move this to the passive phase once we add a pre-commit
        // consistency check. See the next comment.
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        var nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
            }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Whenever getSnapshot or subscribe changes, we need to check in the
        // commit phase if there was an interleaved mutation. In concurrent mode
        // this can happen all the time, but even in synchronous mode, an earlier
        // effect may have mutated the store.
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
        // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
            getSnapshot: getSnapshot,
            value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [
                check
            ];
        } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) componentUpdateQueue.stores = [
                check
            ];
            else stores.push(check);
        }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        // These are updated in the passive phase
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
        // have been in an event that fired before the passive effects, or it could
        // have been in a layout effect. In that case, we would have used the old
        // snapsho and getSnapshot values to bail out. We need to check one more time.
        if (checkIfSnapshotChanged(inst)) // Force a re-render.
        forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
            // The store changed. Check if the snapshot changed since the last time we
            // read from the store.
            if (checkIfSnapshotChanged(inst)) // Force a re-render.
            forceStoreRerender(fiber);
        }; // Subscribe to the store and return a clean-up function.
        return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
        } catch (error) {
            return true;
        }
    }
    function forceStoreRerender(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var _ref2 = {
            current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        else return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty("current")) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== "function") error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== "function") error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
    }
    function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
    }
    function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
            // This is a rerender during a mount.
            hook.memoizedState = value;
            return value;
        } else {
            // This is a rerender during an update.
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
        }
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
            // This is an urgent update. If the value has changed, keep using the
            // previous value and spawn a deferred render to update it later.
            if (!objectIs(value, prevValue)) {
                // Schedule a deferred render
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
                // from the latest value. The name "baseState" doesn't really match how we
                // use it because we're reusing a state hook field instead of creating a
                // new one.
                hook.baseState = true;
            } // Reuse the previous value
            return prevValue;
        } else {
            // This is not an urgent update, so we can use the latest value regardless
            // of what it is. No need to defer it.
            // However, if we're currently inside a spawned render, then we need to mark
            // this as an update to prevent the fiber from bailing out.
            //
            // `baseState` is true when the current value is different from the rendered
            // value. The name doesn't really match how we use it because we're reusing
            // a state hook field instead of creating a new one.
            if (hook.baseState) {
                // Flip this back to false.
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
        }
    }
    function startTransition(setPending, callback, options) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
        try {
            setPending(false);
            callback();
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1]; // The `start` method never changes.
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [
            isPending,
            start
        ];
    }
    function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function mountId() {
        var hook = mountWorkInProgressHook();
        var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
        // should do this in Fiber, too? Deferring this decision for now because
        // there's no other place to store the prefix except for an internal field on
        // the public createRoot object, which the fiber tree does not currently have
        // a reference to.
        var identifierPrefix = root.identifierPrefix;
        var id;
        if (getIsHydrating()) {
            var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.
            id = ":" + identifierPrefix + "R" + treeId; // Unless this is the first id at this level, append a number at the end
            // that represents the position of this useId hook among all the useId
            // hooks for this fiber.
            var localId = localIdCounter++;
            if (localId > 0) id += "H" + localId.toString(32);
            id += ":";
        } else {
            // Use a lowercase r prefix for client-generated ids.
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id;
        return id;
    }
    function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
        if (typeof arguments[3] === "function") error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
        if (typeof arguments[3] === "function") error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.hasEagerState = true;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) {
                            // Fast path. We can bail out without scheduling React to re-render.
                            // It's still possible that we'll need to rebase this update later,
                            // if the component re-renders for a different reason and by that
                            // time the reducer has changed.
                            // TODO: Do we still need to entangle transitions in this case?
                            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                            return;
                        }
                    } catch (error) {} finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
    } // TODO: Move to ReactFiberConcurrentUpdates?
    function entangleTransitionUpdate(root, queue, lane) {
        if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
            // must have finished. We can remove them from the shared queue, which
            // represents a superset of the actually pending lanes. In some cases we
            // may entangle more than we need to, but that's OK. In fact it's worse if
            // we *don't* entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function markUpdateInDevTools(fiber, lane, action) {
        markStateUpdateScheduled(fiber, lane);
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    /**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */ var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
        return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
        nestedUpdateScheduled = true;
    }
    function resetNestedUpdateFlag() {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
    }
    function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
    }
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        root.effectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        if (root !== null) root.passiveEffectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        if (parentStateNode !== null) // Detached fibers have their state node cleared out.
                        // In this case, the return pointer is also cleared out,
                        // so we won't be able to report the time spent in this Profiler's subtree.
                        parentStateNode.passiveEffectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    function createCapturedValueAtFiber(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
        };
    }
    function createCapturedValue(value, digest, stack) {
        return {
            value: value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ""; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console["error"](error); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console["error"](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
                return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
                logCapturedError(fiber, errorInfo);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ""
            });
            if (typeof getDerivedStateFromError !== "function") // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
            }
        };
        return update;
    }
    function attachPingListener(root, wakeable, lanes) {
        // Attach a ping listener
        //
        // The data might resolve before we have a chance to commit the fallback. Or,
        // in the case of a refresh, we'll never commit a fallback. So we need to
        // attach a listener now. When it resolves ("pings"), we can decide whether to
        // try rendering the tree again.
        //
        // Only attach a listener if one does not already exist for the lanes
        // we're currently rendering (which acts like a "thread ID" here).
        //
        // We only need to do this in concurrent mode. Legacy Suspense always
        // commits fallbacks synchronously, so there are no pings.
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            if (isDevToolsPresent) // If we have pending work still, restore the original updaters
            restorePendingUpdaters(root, lanes);
            wakeable.then(ping, ping);
        }
    }
    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
        // Retry listener
        //
        // If the fallback does commit, we need to attach a different type of
        // listener. This one schedules an update on the Suspense boundary to turn
        // the fallback state off.
        //
        // Stash the wakeable on the boundary fiber so we can access it in the
        // commit phase.
        //
        // When the wakeable resolves, we'll attempt to render the boundary
        // again ("retry").
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
        } else wakeables.add(wakeable);
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        // A legacy mode Suspense quirk, only relevant to hook components.
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
            } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
            }
        }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) return node;
             // This boundary already captured during this render. Continue to the next
            // boundary.
            node = node.return;
        }while (node !== null);
        return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
        // This marks a Suspense boundary so that when we're unwinding the stack,
        // it captures the suspended "exception" and does a second (fallback) pass.
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            // Legacy Mode Suspense
            //
            // If the boundary is in legacy mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. When the Suspense boundary completes,
            // we'll do a second pass to render the fallback.
            if (suspenseBoundary === returnFiber) // Special case where we suspended while reconciling the children of
            // a Suspense boundary's inner Offscreen wrapper fiber. This happens
            // when a React.lazy component is a direct child of a
            // Suspense boundary.
            //
            // Suspense boundaries are implemented as multiple fibers, but they
            // are a single conceptual unit. The legacy mode behavior where we
            // pretend the suspended fiber committed as `null` won't work,
            // because in this case the "suspended" fiber is the inner
            // Offscreen wrapper.
            //
            // Because the contents of the boundary haven't started rendering
            // yet (i.e. nothing in the tree has partially rendered) we can
            // switch to the regular, concurrent mode behavior: mark the
            // boundary with ShouldCapture and enter the unwind phase.
            suspenseBoundary.flags |= ShouldCapture;
            else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                // But we shouldn't call any lifecycle methods or callbacks. Remove
                // all lifecycle effect tags.
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                    // completed class component. For example, we should not call
                    // componentWillUnmount if it is deleted.
                    sourceFiber.tag = IncompleteClassComponent;
                    else {
                        // When we try rendering again, we should not reuse the current fiber,
                        // since it's known to be in an inconsistent state. Use a force update to
                        // prevent a bail out.
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update, SyncLane);
                    }
                } // The source fiber did not complete. Mark it with Sync priority to
                // indicate that it still has pending work.
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. Transitions apply
        // to this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.
        suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
        // the begin phase to prevent an early bailout.
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete;
        if (isDevToolsPresent) // If we have pending work still, restore the original updaters
        restorePendingUpdaters(root, rootRenderLanes);
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
            // This is a wakeable. The component suspended.
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) markDidThrowWhileHydratingDEV();
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
                // commits fallbacks synchronously, so there are no pings.
                if (suspenseBoundary.mode & ConcurrentMode) attachPingListener(root, wakeable, rootRenderLanes);
                attachRetryListener(suspenseBoundary, root, wakeable);
                return;
            } else {
                // No boundary was found. Unless this is a sync update, this is OK.
                // We can suspend and wait for more data to arrive.
                if (!includesSyncLane(rootRenderLanes)) {
                    // This is not a sync update. Suspend. Since we're not activating a
                    // Suspense boundary, this will unwind all the way to the root without
                    // performing a second pass to render a fallback. (This is arguably how
                    // refresh transitions should work, too, since we're not going to commit
                    // the fallbacks anyway.)
                    //
                    // This case also applies to initial hydration.
                    attachPingListener(root, wakeable, rootRenderLanes);
                    renderDidSuspendDelayIfPossible();
                    return;
                } // This is a sync/discrete update. We treat this case like an error
                // because discrete renders are expected to produce a complete tree
                // synchronously to maintain consistency with external state.
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."); // If we're outside a transition, fall through to the regular error path.
                // The error will be caught by the nearest suspense boundary.
                value = uncaughtSuspenseError;
            }
        } else // This is a regular error, not a Suspense wakeable.
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
            // discarding the dehydrated content and switching to a client render.
            // Instead of surfacing the error, find the nearest Suspense boundary
            // and render it again without hydration.
            if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) // Set a flag to indicate that we should try rendering the normal
                // children again, not the fallback.
                _suspenseBoundary.flags |= ForceClientRender;
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
                // still log it so it can be fixed.
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
            }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null);
    }
    function getSuspendedCache() {
        return null;
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {};
    didWarnAboutModulePatternComponent = {};
    didWarnAboutContextTypeOnFunctionComponent = {};
    didWarnAboutGetDerivedStateOnFunctionComponent = {};
    didWarnAboutFunctionRefs = {};
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {};
    didWarnAboutTailOptions = {};
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (current === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
        var currentChild = current.child; // This is always exactly one child
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
        if (!hasScheduledUpdateOrContext) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
            }
        }
        if (current !== null) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
                // would during a normal fiber bailout.
                //
                // We don't have strong guarantees that the props object is referentially
                // equal during updates where we can't bail out anyway — like if the props
                // are shallowly equal, but there's a local state or context update in the
                // same batch.
                //
                // However, as a principle, we should aim to make the behavior consistent
                // across different ways of memoizing a component. For example, React.memo
                // has a different internal Fiber layout if you pass a normal function
                // component (SimpleMemoComponent) versus if you pass a different type
                // like forwardRef (MemoComponent). But this is an implementation detail.
                // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
                // affect whether the props object is reused during a bailout.
                workInProgress.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current, renderLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumulated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
            // Rendering a hidden tree.
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Consider how Offscreen should work with transitions in the future
                var nextState = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
                // and resume this tree later.
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes,
                    cachePool: spawnedCachePool,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState;
                workInProgress.updateQueue = null;
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // This is the second render. The surrounding visible content has already
                // committed. Now we resume rendering the hidden tree.
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            // Rendering a visible tree.
            var _subtreeRenderLanes;
            if (prevState !== null) {
                // We're going from hidden -> visible.
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    function updateFragment(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
        workInProgress.flags |= Update;
        // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        if (current === null && ref !== null || current !== null && current.ref !== ref) {
            // Schedule a Ref effect
            workInProgress.flags |= Ref;
            workInProgress.flags |= RefStatic;
        }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        // This is used by DevTools to force a boundary to error.
        switch(shouldError(workInProgress)){
            case false:
                var _instance = workInProgress.stateNode;
                var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
                // Is there a better way to do this?
                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
            case true:
                workInProgress.flags |= DidCapture;
                workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state
                var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
                enqueueCapturedUpdate(workInProgress, update);
                break;
        }
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
        } else if (current === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        else shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || "a component");
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            markComponentRenderStarted(workInProgress);
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    instance.render();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            setIsRendering(false);
            markComponentRenderStopped();
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        else if (root.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        if (current === null) throw new Error("Should have a current fiber. This is a bug in React.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        var root = workInProgress.stateNode;
        // being called "element".
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
            // This is a hydration root whose shell has not yet hydrated. We should
            // attempt to hydrate.
            // Flip isDehydrated to false to indicate that when this render
            // finishes, the root will no longer be dehydrated.
            var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
            };
            var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
            // have reducer functions so it doesn't need rebasing.
            updateQueue.baseState = overrideState;
            workInProgress.memoizedState = overrideState;
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during a previous attempt to hydrate the shell, so we
                // forced a client render.
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
            } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
            } else {
                // The outermost shell has not hydrated yet. Start hydrating.
                enterHydrationState(workInProgress);
                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;
                while(node){
                    // Mark each child as hydrating. This is a fast path to know whether this
                    // tree is part of a hydrating tree. This is used to determine if a child
                    // node has fully mounted yet, and for scheduling event replaying.
                    // Conceptually this is similar to Placement in that a new subtree is
                    // inserted into the React tree here. It just happens to not need DOM
                    // mutations because it already exists.
                    node.flags = node.flags & ~Placement | Hydrating;
                    node = node.sibling;
                }
            }
        } else {
            // Root is not dehydrated. Either this is a client-only root, or it
            // already hydrated.
            resetHydrationState();
            if (nextChildren === prevChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }
        return workInProgress.child;
    }
    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
        // Revert to client rendering.
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress.flags |= ForceClientRender;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostText(current, workInProgress) {
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);
                return child;
        }
        var hint = "";
        if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) hint = " Did you wrap a component in React.lazy() more than once?";
        // because the fact that it's a separate type of work is an
        // implementation detail.
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        var hasId;
        markComponentRenderStarted(workInProgress);
        if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                    hasId = checkDidRenderIdHook();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
            reconcileChildren(null, workInProgress, value, renderLanes);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
        }
        if (workInProgress.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += "\n\nCheck the render method of `" + ownerName + "`.";
            var warningKey = ownerName || "";
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes,
            cachePool: getSuspendedCache(),
            transitions: null
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        var cachePool = null;
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
            cachePool: cachePool,
            transitions: prevOffscreenState.transitions
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current !== null) {
            var suspenseState = current.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallback
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else // Attempting the main content
        if (current === null || current.memoizedState !== null) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconciliation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current === null) {
            // Initial mount
            // Special path for hydration
            // If we're currently hydrating, try to hydrate this boundary.
            tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var suspenseState = workInProgress.memoizedState;
            if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
        } else {
            // This is an update.
            // Special path for hydration
            var prevState = current.memoizedState;
            if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
            }
            if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
                var _primaryChildFragment2 = workInProgress.child;
                var prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);
                workInProgress.memoizedState = null;
                return _primaryChildFragment3;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
        // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
        // this wrapper function to constrain it.
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
        });
        if ((workInProgress.mode & ConcurrentMode) === NoMode) primaryChildFragment.lanes = renderLanes;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            var deletions = workInProgress.deletions;
            if (deletions === null) {
                workInProgress.deletions = [
                    currentFallbackChildFragment
                ];
                workInProgress.flags |= ChildDeletion;
            } else deletions.push(currentFallbackChildFragment);
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it.
            workInProgress.deletions = null;
        } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
            // (We don't do this in legacy mode, because in legacy mode we don't re-use
            // the current tree; see previous branch.)
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
        // Falling back to client rendering. Because this has performance
        // implications, it's considered a recoverable error, even though the user
        // likely won't observe anything wrong with the UI.
        //
        // The error is passed in as an argument to enforce that every caller provide
        // a custom message, or explicitly opt out (currently the only path that opts
        // out is legacy mode; every concurrent path provides an error).
        if (recoverableError !== null) queueHydrationError(recoverableError);
         // This will add the old fiber to the deletion list
        reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.
        var nextProps = workInProgress.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
        // mounted but this is a new fiber.
        primaryChildFragment.flags |= Placement;
        workInProgress.memoizedState = null;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var fiberMode = workInProgress.mode;
        var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
        // boundary) already mounted but this is a new fiber.
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        if ((workInProgress.mode & ConcurrentMode) !== NoMode) // We will have dropped the effect list which contains the
        // deletion. We need to reconcile to delete the current child.
        reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
        // During the first pass, we'll bail out and not drill into the children.
        // Instead, we'll leave the content in place and try to hydrate it later.
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            workInProgress.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) // This is a client-only boundary. Since we won't get any content from the server
        // for this, we need to schedule that at a higher priority based on when it would
        // have timed out. In theory we could render it in this pass but it would have the
        // wrong priority associated with it and will prevent hydration of parent path.
        // Instead, we'll leave work left on it to render it in a separate commit.
        // TODO This time should be the time at which the server rendered response that is
        // a parent to this boundary was displayed. However, since we currently don't have
        // a protocol to transfer that time, we'll just estimate it by using the current
        // time. This will mean that Suspense timeouts are slightly shifted to later than
        // they should be.
        // Schedule a normal pri update to render this content.
        workInProgress.lanes = laneToLanes(DefaultHydrationLane);
        else // We'll continue hydrating the rest at offscreen priority since we'll already
        // be showing the right content coming from the server, it is no rush.
        workInProgress.lanes = laneToLanes(OffscreenLane);
        return null;
    }
    function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
        if (!didSuspend) {
            // This is the first render pass. Attempt to hydrate.
            // We should never be hydrating at this point because it is the first pass,
            // but after we've already committed once.
            warnIfHydrating();
            if ((workInProgress.mode & ConcurrentMode) === NoMode) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // required — every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null);
            if (isSuspenseInstanceFallback(suspenseInstance)) {
                // This boundary is in a permanent fallback state. In this case, we'll never
                // get an update and we'll never be able to hydrate the final content. Let's just try the
                // client side render instead.
                var digest, message, stack;
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
                var error;
                if (message) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error(message);
                else error = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                var capturedValue = createCapturedValue(error, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
            }
            // any context has changed, we need to treat is as if the input might have changed.
            var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);
            if (didReceiveUpdate || hasContextChanged) {
                // This boundary has changed since the first render. This means that we are now unable to
                // hydrate it. We might still be able to hydrate it using a higher priority lane.
                var root = getWorkInProgressRoot();
                if (root !== null) {
                    var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);
                    if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                        // Intentionally mutating since this render will get interrupted. This
                        // is one of the very rare times where we mutate the current tree
                        // during the render phase.
                        suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render
                        var eventTime = NoTimestamp;
                        enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
                        scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
                    }
                } // If we have scheduled higher pri work above, this will probably just abort the render
                // since we now have higher priority work, but in case it doesn't, we need to prepare to
                // render something, if we time out. Even if that requires us to delete everything and
                // skip hydration.
                // Delay having to do this as long as the suspense timeout allows us.
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
                // This component is still pending more data from the server, so we can't hydrate its
                // content. We treat it as if this component suspended itself. It might seem as if
                // we could just try to render it client-side instead. However, this will perform a
                // lot of unnecessary work and is unlikely to complete since it often will suspend
                // on missing data anyway. Additionally, the server might be able to render more
                // than we can on the client yet. In that case we'd end up with more fallback states
                // on the client than if we just leave it alone. If the server times out or errors
                // these should update this boundary to the permanent Fallback state instead.
                // Mark it as having captured (i.e. suspended).
                workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.
                workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.
                var retry = retryDehydratedSuspenseBoundary.bind(null, current);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
            } else {
                // This is the first attempt.
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
            }
        } else {
            // This is the second render pass. We already attempted to hydrated, but
            // something either suspended or errored.
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during hydration. Try again without hydrating.
                workInProgress.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
            } else if (workInProgress.memoizedState !== null) {
                // Something suspended and we should still be in dehydrated mode.
                // Leave the existing child in place.
                workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
                // but the normal suspense pass doesn't.
                workInProgress.flags |= DidCapture;
                return null;
            } else {
                // Suspended but we should no longer be in dehydrated mode.
                // Therefore we now have to render the fallback.
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var _primaryChildFragment4 = workInProgress.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            }
        }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") switch(revealOrder.toLowerCase()){
                case "together":
                case "forwards":
                case "backwards":
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                case "forward":
                case "backward":
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
            }
            else error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArray(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
        if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & ConcurrentMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case "forwards":
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
                break;
            case "backwards":
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
                break;
            case "together":
                initSuspenseListRenderState(workInProgress, false, null, null, undefined);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        pushProvider(workInProgress, context, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, renderLanes);
        }
        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== "function") error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            if (current !== null) {
                // A lazy component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            }
        }
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) return null;
         // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) // eslint-disable-next-line react-internal/prod-error-codes
        throw new Error("Cannot swap the root fiber.");
         // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
            throw new Error("Expected parent to have a child.");
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
                throw new Error("Expected to find the previous sibling.");
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                current
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(current);
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function checkScheduledUpdateOrContext(current, renderLanes) {
        // Before performing an early bailout, we must check if there are pending
        // updates or context.
        var updateLanes = current.lanes;
        if (includesSomeLane(updateLanes, renderLanes)) return true;
         // No pending update, but because context is propagated lazily, we need
        return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
        // This fiber does not have any pending work. Bailout without entering
        // the begin phase. There's still some bookkeeping we that needs to be done
        // in this optimized path, mostly pushing stuff onto the stack.
        switch(workInProgress.tag){
            case HostRoot:
                pushHostRootContext(workInProgress);
                var root = workInProgress.stateNode;
                resetHydrationState();
                break;
            case HostComponent:
                pushHostContext(workInProgress);
                break;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) pushContextProvider(workInProgress);
                break;
            case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
            case ContextProvider:
                var newValue = workInProgress.memoizedProps.value;
                var context = workInProgress.type._context;
                pushProvider(workInProgress, context, newValue);
                break;
            case Profiler:
                // Profiler should only call onRender when one of its descendants actually rendered.
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) workInProgress.flags |= Update;
                // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
                break;
            case SuspenseComponent:
                var state = workInProgress.memoizedState;
                if (state !== null) {
                    if (state.dehydrated !== null) {
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
                        // been unsuspended it has committed as a resolved Suspense component.
                        // If it needs to be retried, it should have work scheduled on it.
                        workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
                        // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.
                        return null;
                    } // If this boundary is currently timed out, we need to decide
                    // whether to retry the primary children, or to skip over it and
                    // go straight to the fallback. Check the priority of the primary
                    // child fragment.
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes, primaryChildLanes)) // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                    else {
                        // The primary child fragment does not have pending work marked
                        // on it
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                        // priority. Bailout.
                        var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                        if (child !== null) // The fallback children have pending work. Skip over the
                        // primary children and work on the fallback.
                        return child.sibling;
                        else // Note: We can return `null` here because we already checked
                        // whether there were nested context consumers, via the call to
                        // `bailoutOnAlreadyFinishedWork` above.
                        return null;
                    }
                } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                break;
            case SuspenseListComponent:
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                    if (_hasChildWork) // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                     // If none of the children had any work, that means that none of
                    // them got retried so they'll still be blocked in the same way
                    // as before. We can fast bail out.
                    workInProgress.flags |= DidCapture;
                } // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                    // Reset to the "together" mode in case we've started a different
                    // update in the past but didn't complete it.
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) break;
                else // If none of the children had any work, that means that none of
                // them got retried so they'll still be blocked in the same way
                // as before. We can fast bail out.
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
        if (workInProgress._debugNeedsRemount && current !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else {
                // Neither props nor legacy context changes. Check if there's a pending
                // update or context change.
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress.flags & DidCapture) === NoFlags) {
                    // No pending updates or context. Bail out now.
                    didReceiveUpdate = false;
                    return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
                }
                if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
                else // An update was scheduled on this fiber, but there are no new props
                // nor legacy context. Set this to false. If an update queue or context
                // consumer produces a changed value, it will set this to true. Otherwise,
                // the component will assume the children have not changed and bail out.
                didReceiveUpdate = false;
            }
        } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress)) {
                // Check if this child belongs to a list of muliple children in
                // its parent.
                //
                // In a true multi-threaded implementation, we would render children on
                // parallel threads. This would represent the beginning of a new render
                // thread for this subtree.
                //
                // We only use this for id generation during hydration, which is why the
                // logic is located in this special branch.
                var slotIndex = workInProgress.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress, numberOfForks, slotIndex);
            }
        } // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, renderLanes);
            case FunctionComponent:
                var Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
            case ClassComponent:
                var _Component = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
            case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
            case HostComponent:
                return updateHostComponent(current, workInProgress, renderLanes);
            case HostText:
                return updateHostText(current, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            case Fragment:
                return updateFragment(current, workInProgress, renderLanes);
            case Mode:
                return updateMode(current, workInProgress, renderLanes);
            case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
            case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
            case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case IncompleteClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case ScopeComponent:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
        workInProgress.flags |= RefStatic;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(current, workInProgress) {};
    updateHostComponent$1 = function(current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case "hidden":
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case "collapsed":
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while(child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                    subtreeFlags |= child.subtreeFlags;
                    subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                    // When work is done, it should bubble to the parent's actualDuration. If
                    // the fiber has not been cloned though, (meaning no work was done), then
                    // this value will reflect the amount of time spent working on a previous
                    // render. In that case it should not bubble. We determine whether it was
                    // cloned by comparing the child pointer.
                    actualDuration += child.actualDuration;
                    treeBaseDuration += child.treeBaseDuration;
                    child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
            } else {
                var _child = completedWork.child;
                while(_child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                    subtreeFlags |= _child.subtreeFlags;
                    subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child.return = completedWork;
                    _child = _child.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        } else {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while(_child2 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child2.subtreeFlags & StaticMask;
                    subtreeFlags |= _child2.flags & StaticMask;
                    _treeBaseDuration += _child2.treeBaseDuration;
                    _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
                var _child3 = completedWork.child;
                while(_child3 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child3.subtreeFlags & StaticMask;
                    subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child3.return = completedWork;
                    _child3 = _child3.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
    }
    function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress);
            resetHydrationState();
            workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
        }
        var wasHydrated = popHydrationState(workInProgress);
        if (nextState !== null && nextState.dehydrated !== null) {
            // We might be inside a hydration state the first time we're picking up this
            // Suspense boundary, and also after we've reentered it for further hydration.
            if (current === null) {
                if (!wasHydrated) throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                prepareToHydrateHostSuspenseInstance(workInProgress);
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            } else {
                // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
                // state since we're now exiting out of it. popHydrationState doesn't do that for us.
                resetHydrationState();
                if ((workInProgress.flags & DidCapture) === NoFlags) // This boundary did not suspend so it's now hydrated and unsuspended.
                workInProgress.memoizedState = null;
                 // If nothing suspended, we need to schedule an effect to mark this boundary
                // as having hydrated so events know that they're free to be invoked.
                // It's also a signal to replay events and the suspense callback.
                // If something suspended, schedule an effect to attach retry listeners.
                // So we might as well always mark this.
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var _primaryChildFragment = workInProgress.child;
                        if (_primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            }
        } else {
            // Successfully completed this tree. If this was a forced client render,
            // there may have been recoverable errors during first hydration
            // attempt. If so, add them to a queue so we can log them in the
            // commit phase.
            upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path
            return true;
        }
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                bubbleProperties(workInProgress);
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostRoot:
                var fiberRoot = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (current !== null) {
                        var prevState = current.memoizedState;
                        if (!prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress.flags & ForceClientRender) !== NoFlags) {
                            // Schedule an effect to clear this container at the start of the
                            // next commit. This handles the case of React rendering into a
                            // container with previous children. It's also safe to do for
                            // updates too, because current.child would only be null if the
                            // previous render was null (so the container would already
                            // be empty).
                            workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                            // recoverable errors during first hydration attempt. If so, add
                            // them to a queue so we can log them in the commit phase.
                            upgradeHydrationErrorsToRecoverable();
                        }
                    }
                }
                updateHostContainer(current, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                    if (current.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        bubbleProperties(workInProgress);
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== "string") {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
                // to its own fiber type so that we can add other kinds of hydration
                // boundaries that aren't associated with a Suspense tree. In anticipation
                // of such a refactor, all the hydration logic is contained in
                // this branch.
                if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
                    var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);
                    if (!fallthroughToNormalSuspensePath) {
                        if (workInProgress.flags & ShouldCapture) // Special case. There were remaining unhydrated nodes. We treat
                        // this as a mismatch. Revert to client rendering.
                        return workInProgress;
                        else // Did not finish hydrating, either because this is the initial
                        // render or because something suspended.
                        return null;
                    } // Continue with the normal Suspense path.
                }
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                     // Don't bubble properties in this case.
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current !== null && current.memoizedState !== null;
                // a passive effect, which is when we process the transitions
                if (nextDidTimeout !== prevDidTimeout) // an effect to toggle the subtree's visibility. When we switch from
                // fallback -> primary, the inner Offscreen fiber schedules this effect
                // as part of its normal complete phase. But when we switch from
                // primary -> fallback, the inner Offscreen fiber does not have a complete
                // phase. So we need to schedule its effect here.
                //
                // We also use this flag to connect/disconnect the effects, but the same
                // logic applies: when re-connecting, the Offscreen fiber's complete
                // phase will handle scheduling the effect. It's only when the fallback
                // is active that we have to do anything special.
                {
                    if (nextDidTimeout) {
                        var _offscreenFiber2 = workInProgress.child;
                        _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
                        // in the concurrent tree already suspended during this render.
                        // This is a known bug.
                        if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                            // TODO: Move this back to throwException because this is too late
                            // if this is a large tree which is common for initial loads. We
                            // don't know if we should restart a render or not until we get
                            // this marker, and this is too late.
                            // If this render already had a ping or lower pri updates,
                            // and this is the first time we know we're going to suspend we
                            // should be able to immediately restart from within throwException.
                            var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                            // this boundary is ok.
                            renderDidSuspend();
                            else // Otherwise, we're going to have to hide content so we should
                            // suspend for longer if possible.
                            renderDidSuspendDelayIfPossible();
                        }
                    }
                }
                var wakeables = workInProgress.updateQueue;
                if (wakeables !== null) // Schedule an effect to attach a retry listener to the promise.
                // TODO: Move to passive phase
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(current, workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                bubbleProperties(workInProgress);
                return null;
            case ContextProvider:
                // Pop provider fiber
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) {
                    // We're running in the default, "independent" mode.
                    // We don't do anything in this mode.
                    bubbleProperties(workInProgress);
                    return null;
                }
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thenables. Instead, we'll transfer its thenables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThenables = suspended.updateQueue;
                                    if (newThenables !== null) {
                                        workInProgress.updateQueue = newThenables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect flags before doing the second pass since that's now invalid.
                                    // Reset the child fibers to their original state.
                                    workInProgress.subtreeFlags = NoFlags;
                                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThenables = _suspended.updateQueue;
                            if (_newThenables !== null) {
                                workInProgress.updateQueue = _newThenables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We're done.
                                bubbleProperties(workInProgress);
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    // Don't bubble properties in this case.
                    return next;
                }
                bubbleProperties(workInProgress);
                return null;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                var _nextState = workInProgress.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current !== null) {
                    var _prevState = current.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) workInProgress.flags |= Visibility;
                }
                if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) bubbleProperties(workInProgress);
                else // Don't bubble properties for hidden children unless we're rendering
                // at offscreen priority.
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress);
                    // Check if there was an insertion or update in the hidden subtree.
                    // If so, we need to hide those nodes in the commit phase, so
                    // schedule a visibility effect.
                    if (workInProgress.subtreeFlags & (Placement | Update)) workInProgress.flags |= Visibility;
                }
                return null;
            case CacheComponent:
                return null;
            case TracingMarkerComponent:
                return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
    }
    function unwindWork(current, workInProgress, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                var root = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                    // There was an error during render that wasn't captured by a suspense
                    // boundary. Do a second pass on the root to unmount the children.
                    workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                    return workInProgress;
                } // We unwound to the root without completing it. Exit.
                return null;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var suspenseState = workInProgress.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    if (workInProgress.alternate === null) throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    resetHydrationState();
                }
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            case CacheComponent:
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(current, interruptedWork, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(interruptedWork);
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                var root = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
    // Only used when enableSuspenseLayoutEffectSemantics is enabled.
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
    var nextEffect = null; // Used for Profiling builds to track updaters.
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error) {
        invokeGuardedCallback(null, function() {
            throw error;
        });
        clearCaughtError();
    }
    var callComponentWillUnmountWithTimer = function(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        if (current.mode & ProfileMode) try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
        } finally{
            recordLayoutEffectDuration(current);
        }
        else instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt mounting.
    function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
        try {
            commitHookEffectListMount(Layout, current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        try {
            callComponentWillUnmountWithTimer(current, instance);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
        try {
            instance.componentDidMount();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyAttachRef(current, nearestMountedAncestor) {
        try {
            commitAttachRef(current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref;
        if (ref !== null) {
            if (typeof ref === "function") {
                var retVal;
                try {
                    if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        retVal = ref(null);
                    } finally{
                        recordLayoutEffectDuration(current);
                    }
                    else retVal = ref(null);
                } catch (error) {
                    captureCommitPhaseError(current, nearestMountedAncestor, error);
                }
                if (typeof retVal === "function") error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current));
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
        try {
            destroy();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root, firstChild) {
        focusedInstanceHandle = prepareForCommit(root.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitBeforeMutationEffects_complete();
        }
    }
    function commitBeforeMutationEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch(finishedWork.tag){
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    break;
                case ClassComponent:
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                    break;
                case HostRoot:
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                    break;
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                    break;
                default:
                    throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            resetCurrentFiber();
        }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) {
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStarted(finishedWork);
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStarted(finishedWork);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                        safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStopped();
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStopped();
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect);
        }
    }
    function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStarted(finishedWork);
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStarted(finishedWork);
                    var create = effect.create;
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                    effect.destroy = create();
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStopped();
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStopped();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== "function") {
                        var hookName = void 0;
                        if ((effect.tag & Layout) !== NoFlags) hookName = "useLayoutEffect";
                        else if ((effect.tag & Insertion) !== NoFlags) hookName = "useInsertionEffect";
                        else hookName = "useEffect";
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === "function") addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + "and call it immediately:\n\n" + hookName + "(() => {\n" + "  async function fetchData() {\n" + "    // You can await here\n" + "    const response = await MyAPI.getData(someId);\n" + "    // ...\n" + "  }\n" + "  fetchData();\n" + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = " You returned: " + destroy;
                        error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect);
        }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        // Only Profilers with work in their subtree will have an Update effect scheduled.
        if ((finishedWork.flags & Update) !== NoFlags) switch(finishedWork.tag){
            case Profiler:
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
                // It does not get reset until the start of the next commit phase.
                var commitTime = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                if (isCurrentUpdateNested()) phase = "nested-update";
                if (typeof onPostCommit === "function") onPostCommit(id, phase, passiveEffectDuration, commitTime);
                 // Bubble times to the next nearest ancestor Profiler.
                // After we process that Profiler, we'll bubble further up.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
        }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    // At this point layout effects have already been destroyed (during mutation phase).
                    // This is done to prevent sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally{
                        recordLayoutEffectDuration(finishedWork);
                    }
                    else commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                break;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                        if (current === null) {
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidMount();
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidMount();
                        } else {
                            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                            var prevState = current.memoizedState; // We could update instance props and state here,
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                break;
            case HostText:
                break;
            case HostPortal:
                break;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();
                var phase = current === null ? "mount" : "update";
                if (isCurrentUpdateNested()) phase = "nested-update";
                if (typeof onRender === "function") onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
                if (typeof onCommit === "function") onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
                 // Schedule a passive effect for this Profiler to call onPostCommit hooks.
                // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
                // because the effect is also where times bubble to parent Profilers.
                enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
                // Do not reset these values until the next render so DevTools has a chance to read them first.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.effectDuration += effectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent:
                break;
            default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (!offscreenSubtreeWasHidden) {
            if (finishedWork.flags & Ref) commitAttachRef(finishedWork);
        }
    }
    function reappearLayoutEffectsOnFiber(node) {
        // Turn on layout effects in a tree that previously disappeared.
        // TODO (Offscreen) Check: flags & LayoutStatic
        switch(node.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (node.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally{
                    recordLayoutEffectDuration(node);
                }
                else safelyCallCommitHookLayoutEffectListMount(node, node.return);
                break;
            case ClassComponent:
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") safelyCallComponentDidMount(node, node.return, instance);
                safelyAttachRef(node, node.return);
                break;
            case HostComponent:
                safelyAttachRef(node, node.return);
                break;
        }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // Only hide or unhide the top-most host nodes.
        var hostSubtreeRoot = null;
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                        var instance = node.stateNode;
                        if (isHidden) hideInstance(instance);
                        else unhideInstance(node.stateNode, node.memoizedProps);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
            } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) try {
                    var _instance3 = node.stateNode;
                    if (isHidden) hideTextInstance(_instance3);
                    else unhideTextInstance(_instance3, node.memoizedProps);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                if (hostSubtreeRoot === node) hostSubtreeRoot = null;
                node = node.return;
            }
            if (hostSubtreeRoot === node) hostSubtreeRoot = null;
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                } finally{
                    recordLayoutEffectDuration(finishedWork);
                }
                else retVal = ref(instanceToUse);
                if (typeof retVal === "function") error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            } else {
                if (!ref.hasOwnProperty("current")) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                ref.current = instanceToUse;
            }
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointer to disconnect it from the tree.
        // This enables us to detect and warn against state updates on an unmounted component.
        // It also prevents events from bubbling from within disconnected components.
        //
        // Ideally, we should also clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child.
        // This child itself will be GC:ed when the parent updates the next time.
        //
        // Note that we can't clear child or sibling pointers yet.
        // They're needed for passive effects and for findDOMNode.
        // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
        //
        // Don't reset the alternate yet, either. We need that so we can detach the
        // alternate's fields in the passive phase. Clearing the return pointer is
        // sufficient for findDOMNode semantics.
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.return = null;
        fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
        } // Note: Defensively using negation instead of < in case
        // Clear cyclical Fiber fields. This level alone is designed to roughly
        // approximate the planned Fiber refactor. In that world, `setState` will be
        // bound to a special "instance" object instead of a Fiber. The Instance
        // object will not have any of these fields. It will only be connected to
        // the fiber tree via a single link at the root. So if this level alone is
        // sufficient to fix memory issues, that bodes well for our plans.
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
        // tree, which has its own pointers to children, parents, and siblings.
        // The other host nodes also point back to fibers, so we should detach that
        // one, too.
        if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) detachDeletedInstance(hostInstance);
        }
        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
        fiber._debugOwner = null;
        // Theoretically, nothing in here should be necessary, because we already
        // disconnected the fiber from the tree. So even if something leaks this
        // particular fiber, it won't leak anything else
        //
        // The purpose of this branch is to be super aggressive so we can measure
        // if there's any difference in memory impact. If there is, that could
        // indicate a React leak we don't know about.
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.
        fiber.updateQueue = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        switch(parentFiber.tag){
            case HostComponent:
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                    // Reset the text content of the parent before doing any insertions
                    resetTextContent(parent); // Clear ContentReset from the effect tag
                    parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
                // children to find all the terminal nodes.
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
            case HostRoot:
            case HostPortal:
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
            // eslint-disable-next-line-no-fallthrough
            default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    } // These are tracked on the stack as we recursively traverse a
    // deleted subtree.
    // TODO: Update these during the whole mutation phase, not just during
    // a deletion.
    var hostParent = null;
    var hostParentIsContainer = false;
    function commitDeletionEffects(root, returnFiber, deletedFiber) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        // Recursively delete all host nodes from the parent, detach refs, clean
        // up mounted layout effects, and call componentWillUnmount.
        // We only need to remove the topmost host child in each branch. But then we
        // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
        // could split this into two separate traversals functions, where the second
        // one doesn't include any removeChild logic. This is maybe the same
        // function as "disappearLayoutEffects" (or whatever that turns into after
        // the layout phase is refactored to use recursion).
        // Before starting, find the nearest host parent on the stack so we know
        // which instance/container to remove the children from.
        // TODO: Instead of searching up the fiber return path on every deletion, we
        // can track the nearest host component on the JS stack as we traverse the
        // tree during the commit phase. This would make insertions faster, too.
        var parent = returnFiber;
        findParent: while(parent !== null){
            switch(parent.tag){
                case HostComponent:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                case HostRoot:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                case HostPortal:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
            }
            parent = parent.return;
        }
        if (hostParent === null) throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
        hostParent = null;
        hostParentIsContainer = false;
        detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        // TODO: Use a static flag to skip trees that don't have unmount effects
        var child = parent.child;
        while(child !== null){
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
        }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
        // into their subtree. There are simpler cases in the inner switch
        // that don't modify the stack.
        switch(deletedFiber.tag){
            case HostComponent:
                if (!offscreenSubtreeWasHidden) safelyDetachRef(deletedFiber, nearestMountedAncestor);
                 // Intentional fallthrough to next branch
            // eslint-disable-next-line-no-fallthrough
            case HostText:
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                    // Now that all the child effects have unmounted, we can remove the
                    // node from the tree.
                    if (hostParentIsContainer) removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    else removeChild(hostParent, deletedFiber.stateNode);
                }
                return;
            case DehydratedFragment:
                if (hostParent !== null) {
                    if (hostParentIsContainer) clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    else clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
                return;
            case HostPortal:
                // When we go into a portal, it becomes the parent to remove from.
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
                return;
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    var updateQueue = deletedFiber.updateQueue;
                    if (updateQueue !== null) {
                        var lastEffect = updateQueue.lastEffect;
                        if (lastEffect !== null) {
                            var firstEffect = lastEffect.next;
                            var effect = firstEffect;
                            do {
                                var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                                if (destroy !== undefined) {
                                    if ((tag & Insertion) !== NoFlags$1) safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                    else if ((tag & Layout) !== NoFlags$1) {
                                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                                        if (deletedFiber.mode & ProfileMode) {
                                            startLayoutEffectTimer();
                                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                            recordLayoutEffectDuration(deletedFiber);
                                        } else safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                        markComponentLayoutEffectUnmountStopped();
                                    }
                                }
                                effect = effect.next;
                            }while (effect !== firstEffect);
                        }
                    }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ClassComponent:
                if (!offscreenSubtreeWasHidden) {
                    safelyDetachRef(deletedFiber, nearestMountedAncestor);
                    var instance = deletedFiber.stateNode;
                    if (typeof instance.componentWillUnmount === "function") safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ScopeComponent:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case OffscreenComponent:
                if (deletedFiber.mode & ConcurrentMode) {
                    // If this offscreen component is hidden, we already unmounted it. Before
                    // deleting the children, track that it's already unmounted so that we
                    // don't attempt to unmount the effects again.
                    // TODO: If the tree is hidden, in most cases we should be able to skip
                    // over the nested children entirely. An exception is we haven't yet found
                    // the topmost host node to delete, which we already track on the stack.
                    // But the other case is portals, which need to be detached no matter how
                    // deeply they are nested. We should use a subtree flag to track whether a
                    // subtree includes a nested portal.
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                    recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                break;
            default:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
        }
    }
    function commitSuspenseCallback(finishedWork) {
        // TODO: Move this to passive phase
        var newState = finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current = finishedWork.alternate;
            if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    retryCache.add(wakeable);
                    if (isDevToolsPresent) {
                        if (inProgressLanes !== null && inProgressRoot !== null) // If we have pending work still, associate the original updaters with it.
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                        else throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    function commitMutationEffects(root, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
        // Deletions effects can be scheduled on any fiber type. They need to happen
        // before the children effects hae fired.
        var deletions = parentFiber.deletions;
        if (deletions !== null) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            try {
                commitDeletionEffects(root, parentFiber, childToDelete);
            } catch (error) {
                captureCommitPhaseError(childToDelete, parentFiber, error);
            }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while(child !== null){
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root);
                child = child.sibling;
            }
        }
        setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
        // because the fiber tag is more specific. An exception is any flag related
        // to reconcilation, because those can be set on all fiber types.
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    try {
                        commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                        commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    } // Layout effects are destroyed during the mutation phase so that all
                    // destroy functions for all fibers are called before any create functions.
                    // This prevents sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) {
                        try {
                            startLayoutEffectTimer();
                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                        recordLayoutEffectDuration(finishedWork);
                    } else try {
                        commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                return;
            case ClassComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                return;
            case HostComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                // TODO: ContentReset gets cleared by the children during the commit
                // phase. This is a refactor hazard because it means we must read
                // flags the flags after `commitReconciliationEffects` has already run;
                // the order matters. We should refactor so that ContentReset does not
                // rely on mutating the flag during commit. Like by setting a flag
                // during the render phase instead.
                if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                        resetTextContent(instance);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                        // Commit the work prepared earlier.
                        var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                        // as the newProps. The updatePayload will contain the real change in
                        // this case.
                        var oldProps = current !== null ? current.memoizedProps : newProps;
                        var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                        var updatePayload = finishedWork.updateQueue;
                        finishedWork.updateQueue = null;
                        if (updatePayload !== null) try {
                            commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                    }
                }
                return;
            case HostText:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (finishedWork.stateNode === null) throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldText = current !== null ? current.memoizedProps : newText;
                    try {
                        commitTextUpdate(textInstance, oldText, newText);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                return;
            case HostRoot:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (current !== null) {
                        var prevRootState = current.memoizedState;
                        if (prevRootState.isDehydrated) try {
                            commitHydratedContainer(root.containerInfo);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                    }
                }
                return;
            case HostPortal:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
            case SuspenseComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                    var offscreenInstance = offscreenFiber.stateNode;
                    var newState = offscreenFiber.memoizedState;
                    var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
                    // read it during an event
                    offscreenInstance.isHidden = isHidden;
                    if (isHidden) {
                        var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                        if (!wasHidden) // TODO: Move to passive phase
                        markCommitTimeOfFallback();
                    }
                }
                if (flags & Update) {
                    try {
                        commitSuspenseCallback(finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                    attachSuspenseRetryListeners(finishedWork);
                }
                return;
            case OffscreenComponent:
                var _wasHidden = current !== null && current.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                    // Before committing the children, track on the stack whether this
                    // offscreen subtree was already hidden, so that we don't unmount the
                    // effects again.
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                    recursivelyTraverseMutationEffects(root, finishedWork);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                    var _offscreenInstance = finishedWork.stateNode;
                    var _newState = finishedWork.memoizedState;
                    var _isHidden = _newState !== null;
                    var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
                    // read it during an event
                    _offscreenInstance.isHidden = _isHidden;
                    if (_isHidden) {
                        if (!_wasHidden) {
                            if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                                nextEffect = offscreenBoundary;
                                var offscreenChild = offscreenBoundary.child;
                                while(offscreenChild !== null){
                                    nextEffect = offscreenChild;
                                    disappearLayoutEffects_begin(offscreenChild);
                                    offscreenChild = offscreenChild.sibling;
                                }
                            }
                        }
                    }
                    // TODO: This needs to run whenever there's an insertion or update
                    // inside a hidden Offscreen tree.
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
                return;
            case SuspenseListComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) attachSuspenseRetryListeners(finishedWork);
                return;
            case ScopeComponent:
                return;
            default:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
        }
    }
    function commitReconciliationEffects(finishedWork) {
        // Placement effects (insertions, reorders) can be scheduled on any fiber
        // type. They needs to happen after the children effects have fired, but
        // before the effects on this fiber have fired.
        var flags = finishedWork.flags;
        if (flags & Placement) {
            try {
                commitPlacement(finishedWork);
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            } // Clear the "placement" from effect tag so that we know that this is
            // inserted, before any life-cycles like componentDidMount gets called.
            // TODO: findDOMNode doesn't rely on this any more but isMounted does
            // and isMounted is deprecated anyway so we should be able to kill this.
            finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) finishedWork.flags &= ~Hydrating;
    }
    function commitLayoutEffects(finishedWork, root, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
        // Suspense layout effects semantics don't change for legacy roots.
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
                // Keep track of the current Offscreen stack's state.
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                    // The Offscreen tree is hidden. Skip over its layout effects.
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                } else {
                    // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
                    var current = fiber.alternate;
                    var wasHidden = current !== null && current.memoizedState !== null;
                    var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.
                    offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                    if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                        // This is the root of a reappearing boundary. Turn its layout effects
                        // back on.
                        nextEffect = fiber;
                        reappearLayoutEffects_begin(fiber);
                    }
                    var child = firstChild;
                    while(child !== null){
                        nextEffect = child;
                        commitLayoutEffects_begin(child, root, committedLanes);
                        child = child.sibling;
                    } // Restore Offscreen state and resume in our-progress traversal.
                    nextEffect = fiber;
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                    commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)
            switch(fiber.tag){
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    if (fiber.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally{
                        recordLayoutEffectDuration(fiber);
                    }
                    else commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    break;
                case ClassComponent:
                    // TODO (Offscreen) Check: flags & RefStatic
                    safelyDetachRef(fiber, fiber.return);
                    var instance = fiber.stateNode;
                    if (typeof instance.componentWillUnmount === "function") safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                    break;
                case HostComponent:
                    safelyDetachRef(fiber, fiber.return);
                    break;
                case OffscreenComponent:
                    // Check if this is a
                    var isHidden = fiber.memoizedState !== null;
                    if (isHidden) {
                        // Nested Offscreen tree is already hidden. Don't disappear
                        // its effects.
                        disappearLayoutEffects_complete(subtreeRoot);
                        continue;
                    }
                    break;
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else disappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                    // Nested Offscreen tree is still hidden. Don't re-appear its effects.
                    reappearLayoutEffects_complete(subtreeRoot);
                    continue;
                }
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else reappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic
            setCurrentFiber(fiber);
            try {
                reappearLayoutEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
        }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                    commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    try {
                        commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                    } finally{
                        recordPassiveEffectDuration(finishedWork);
                    }
                } else commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
        }
    }
    function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                    for(var i = 0; i < deletions.length; i++){
                        var fiberToDelete = deletions[i];
                        nextEffect = fiberToDelete;
                        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                    }
                    // A fiber was deleted from this parent fiber, but it's still part of
                    // the previous (alternate) parent fiber's list of children. Because
                    // children are a linked list, an earlier sibling that's still alive
                    // will be connected to the deleted fiber via its `alternate`:
                    //
                    //   live fiber
                    //   --alternate--> previous live fiber
                    //   --sibling--> deleted fiber
                    //
                    // We can't disconnect `alternate` on nodes that haven't been deleted
                    // yet, but we can disconnect the `sibling` and `child` pointers.
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                        var detachedChild = previousFiber.child;
                        if (detachedChild !== null) {
                            previousFiber.child = null;
                            do {
                                var detachedSibling = detachedChild.sibling;
                                detachedChild.sibling = null;
                                detachedChild = detachedSibling;
                            }while (detachedChild !== null);
                        }
                    }
                    nextEffect = fiber;
                }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffects_complete();
        }
    }
    function commitPassiveUnmountEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                    recordPassiveEffectDuration(finishedWork);
                } else commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                break;
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while(nextEffect !== null){
            var fiber = nextEffect; // Deletion effects fire in parent -> child order
            // TODO: Check if fiber has a PassiveStatic flag
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
            // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)
            if (child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            // Recursively traverse the entire deleted tree and clean up fiber fields.
            // This is more aggressive than ideal, and the long term goal is to only
            // have to detach the deleted tree at the root.
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
            }
            if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
            }
            nextEffect = returnFiber;
        }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (current.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                    recordPassiveEffectDuration(current);
                } else commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                break;
        }
    } // TODO: Reuse reappearLayoutEffects traversal here?
    function invokeLayoutEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                try {
                    instance.componentDidMount();
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokePassiveEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                break;
        }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
        }
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor("selector.role");
        TEST_NAME_TYPE = symbolFor("selector.test_id");
        TEXT_TYPE = symbolFor("selector.text");
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
        // Legacy mode. We preserve the behavior of React 17's act. It assumes an
        // act environment whenever `jest` is defined, but you can still turn off
        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
        // to false.
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest
        var jestIsDefined = typeof jest !== "undefined";
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
    }
    function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) // TODO: Include link to relevant documentation page.
        error("The current testing environment is not configured to support act(...)");
        return isReactActEnvironmentGlobal;
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var RenderContext = /*                */ 2;
    var CommitContext = /*                */ 4;
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).
    var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.
    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
    // We will log them once the tree commits.
    var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    var workInProgressTransitions = null;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var isFlushingPassiveEffects = false;
    var didScheduleUpdateDuringPassiveEffects = false;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    var isRunningInsertionEffect = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) // This is a render phase update. These are not officially supported. The
        // old behavior is to give this the same "thread" (lanes) as
        // whatever is currently rendering. So if you call `setState` on a component
        // that happens later in the same render, it will flush. Ideally, we want to
        // remove the special case and treat them as if they came from an
        // interleaved event. Regardless, this pattern is not officially supported.
        // This behavior is only a fallback. The flag only exists until we can roll
        // out the setState warning, since existing code might accidentally rely on
        // the current behavior.
        return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) transition._updatedFibers = new Set();
                transition._updatedFibers.add(fiber);
            } // The algorithm for assigning an update to a lane should be stable for all
            // updates at the same priority within the same event. To do this, the
            // inputs to the algorithm must be the same.
            //
            // The trick we use is to cache the first of each of these inputs within an
            // event. Then reset the cached values once we can be sure the event is
            // over. Our heuristic for that is whenever we enter a concurrent work loop.
            if (currentEventTransitionLane === NoLane) // All transitions within the same event are assigned the same lane.
            currentEventTransitionLane = claimNextTransitionLane();
            return currentEventTransitionLane;
        } // Updates originating inside certain React methods, like flushSync, have
        // their priority set by tracking it with a context variable.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) return updateLane;
         // This update originated outside React. Ask the host environment for an
        // appropriate priority, based on the type of event.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var eventLane = getCurrentEventPriority();
        return eventLane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
        checkForNestedUpdates();
        if (isRunningInsertionEffect) error("useInsertionEffect must not schedule updates.");
        if (isFlushingPassiveEffects) didScheduleUpdateDuringPassiveEffects = true;
        markRootUpdated(root, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) // This update was dispatched during the render phase. This is a mistake
        // if the update originates from user space (with the exception of local
        // hook updates, which are handled differently and don't reach this
        // function), but there are some internal React features that use this as
        // an implementation detail, like selective hydration.
        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
        else {
            if (isDevToolsPresent) addFiberToLanesMap(root, fiber, lane);
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root === workInProgressRoot) {
                // Received an update to a tree that's in the middle of rendering. Mark
                // that there was an interleaved update work on this root. Unless the
                // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
                // phase update. In that case, we don't treat render phase updates as if
                // they were interleaved, for backwards compat reasons.
                if ((executionContext & RenderContext) === NoContext) workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
                // definitely won't finish. Since we have a new update, let's mark it as
                // suspended now, right before marking the incoming update. This has the
                // effect of interrupting the current render and switching to the update.
                // TODO: Make sure this doesn't override pings that happen while we've
                // already started rendering.
                markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
            ensureRootIsScheduled(root, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
                // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
        // This is a special fork of scheduleUpdateOnFiber that is only used to
        // schedule the initial hydration of a root that has just been created. Most
        // of the stuff in scheduleUpdateOnFiber can be skipped.
        //
        // The main reason for this separate path, though, is to distinguish the
        // initial children from subsequent updates. In fully client-rendered roots
        // (createRoot instead of hydrateRoot), all top-level renders are modeled as
        // updates, but hydration roots are special because the initial render must
        // match what was rendered on the server.
        var current = root.current;
        current.lanes = lane;
        markRootUpdated(root, lane, eventTime);
        ensureRootIsScheduled(root, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
        // Check if this is a render phase update. Only called by class components,
        // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
        return(// decided not to enable it.
        (executionContext & RenderContext) !== NoContext);
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) cancelCallback$1(existingCallbackNode);
            root.callbackNode = null;
            root.callbackPriority = NoLane;
            return;
        } // We use the highest priority lane to represent the priority of the callback.
        var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
        // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            // If we're going to re-use an existing task, it needs to exist.
            // Assume that discrete update microtasks are non-cancellable and null.
            // TODO: Temporary until we confirm this warning is not fired.
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            return;
        }
        if (existingCallbackNode != null) // Cancel the existing callback. We'll schedule a new one below.
        cancelCallback$1(existingCallbackNode);
         // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
            // Special case: Sync React callbacks are scheduled on a special
            // internal queue
            if (root.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
            } else scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            // Flush the queue in a microtask.
            if (ReactCurrentActQueue$1.current !== null) // Inside `act`, use our internal `act` queue so that these get flushed
            // at the end of the current scope even when using the sync version
            // of `act`.
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            else scheduleMicrotask(function() {
                // In Safari, appending an iframe forces microtasks to run.
                // https://github.com/facebook/react/issues/22459
                // We don't support running callbacks in the middle of render
                // or commit so we need to check against that.
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) // Note that this would still prematurely flush the callbacks
                // if this happens outside render or commit phase (e.g. in an event).
                flushSyncCallbacks();
            });
            newCallbackNode = null;
        } else {
            var schedulerPriorityLevel;
            switch(lanesToEventPriority(nextLanes)){
                case DiscreteEventPriority:
                    schedulerPriorityLevel = ImmediatePriority;
                    break;
                case ContinuousEventPriority:
                    schedulerPriorityLevel = UserBlockingPriority;
                    break;
                case DefaultEventPriority:
                    schedulerPriorityLevel = NormalPriority;
                    break;
                case IdleEventPriority:
                    schedulerPriorityLevel = IdlePriority;
                    break;
                default:
                    schedulerPriorityLevel = NormalPriority;
                    break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }
        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root, didTimeout) {
        resetNestedUpdateFlag();
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next lanes to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
         // We disable time-slicing in some cases: if the work has been CPU-bound
        // for too long ("expired" work, to prevent starvation), or we're in
        // sync-updates-by-default mode.
        // TODO: We only check `didTimeout` defensively, to account for a Scheduler
        // bug we're still investigating. Once the bug in Scheduler is fixed,
        // we can remove this, since we track expiration ourselves.
        var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);
        if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
                // If something threw an error, try rendering one more time. We'll
                // render synchronously to block concurrent data mutations, and we'll
                // includes all pending updates are included. If it still fails after
                // the second attempt, we'll give up and commit the resulting tree.
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                if (errorRetryLanes !== NoLanes) {
                    lanes = errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                }
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) // The render unwound without completing the tree. This happens in special
            // cases where need to exit the current render without producing a
            // consistent tree or committing.
            //
            // This should only happen during a concurrent render, not a discrete or
            // synchronous update. We should have already checked for this when we
            // unwound the stack.
            markRootSuspended$1(root, lanes);
            else {
                // The render completed.
                // Check if this render may have yielded to a concurrent event, and if so,
                // confirm that any newly rendered stores are consistent.
                // TODO: It's possible that even a concurrent render may never have yielded
                // to the main thread, if it was fast enough, or if it expired. We could
                // skip the consistency check in that case, too.
                var renderWasConcurrent = !includesBlockingLane(root, lanes);
                var finishedWork = root.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                    // A store was mutated in an interleaved event. Render again,
                    // synchronously, to block further mutations.
                    exitStatus = renderRootSync(root, lanes); // We need to check again if something threw
                    if (exitStatus === RootErrored) {
                        var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                        if (_errorRetryLanes !== NoLanes) {
                            lanes = _errorRetryLanes;
                            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
                        // concurrent events.
                        }
                    }
                    if (exitStatus === RootFatalErrored) {
                        var _fatalError = workInProgressRootFatalError;
                        prepareFreshStack(root, NoLanes);
                        markRootSuspended$1(root, lanes);
                        ensureRootIsScheduled(root, now());
                        throw _fatalError;
                    }
                } // We now have a consistent tree. The next step is either to commit it,
                // or, if something suspended, wait to commit it after a timeout.
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
            }
        }
        ensureRootIsScheduled(root, now());
        if (root.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
        return null;
    }
    function recoverFromConcurrentError(root, errorRetryLanes) {
        // If an error occurred during hydration, discard server response and fall
        // back to client side render.
        // Before rendering again, save the errors from the previous attempt.
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root)) {
            // The shell failed to hydrate. Set a flag to force a client rendering
            // during the next attempt. To do this, we call prepareFreshStack now
            // to create the root work-in-progress fiber. This is a bit weird in terms
            // of factoring, because it relies on renderRootSync not calling
            // prepareFreshStack again in the call below, which happens because the
            // root and lanes haven't changed.
            //
            // TODO: I think what we should do is set ForceClientRender inside
            // throwException, like we do for nested Suspense boundaries. The reason
            // it's here instead is so we can switch to the synchronous work loop, too.
            // Something to consider for a future refactor.
            var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            errorHydratingContainer(root.containerInfo);
        }
        var exitStatus = renderRootSync(root, errorRetryLanes);
        if (exitStatus !== RootErrored) {
            // Successfully finished rendering on retry
            // The errors from the failed first attempt have been recovered. Add
            // them to the collection of recoverable errors. We'll log them in the
            // commit phase.
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
            // from the first attempt, to preserve the causal sequence.
            if (errorsFromSecondAttempt !== null) queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
    }
    function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) workInProgressRootRecoverableErrors = errors;
        else workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
        switch(exitStatus){
            case RootInProgress:
            case RootFatalErrored:
                throw new Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspended:
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            default:
                throw new Error("Unknown root exit status.");
        }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
        // Search the rendered tree for external store reads, and check whether the
        // stores were mutated in a concurrent event. Intentionally using an iterative
        // loop instead of recursion so we can exit early.
        var node = finishedWork;
        while(true){
            if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                    var checks = updateQueue.stores;
                    if (checks !== null) for(var i = 0; i < checks.length; i++){
                        var check = checks[i];
                        var getSnapshot = check.getSnapshot;
                        var renderedValue = check.value;
                        try {
                            if (!objectIs(getSnapshot(), renderedValue)) // Found an inconsistent store.
                            return false;
                        } catch (error) {
                            // If `getSnapshot` throws, return `false`. This will schedule
                            // a re-render, and the error will be rethrown during render.
                            return false;
                        }
                    }
                }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
            }
            if (node === finishedWork) return true;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return true;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow doesn't know this is unreachable, but eslint does
        // eslint-disable-next-line no-unreachable
        return true;
    }
    function markRootSuspended$1(root, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
        syncNestedUpdateFlag();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Should not already be working.");
        flushPassiveEffects();
        var lanes = getNextLanes(root, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
            // There's no remaining sync work left.
            ensureRootIsScheduled(root, now());
            return null;
        }
        var exitStatus = renderRootSync(root, lanes);
        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
            if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
            }
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) throw new Error("Root did not complete. This is a bug in React.");
         // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root, now());
        return null;
    }
    function flushRoot(root, lanes) {
        if (lanes !== NoLanes) {
            markRootEntangled(root, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
            }
        }
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
            // most batchedUpdates-like method.
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) resetRenderTimer();
        }
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync(fn) {
        // In legacy mode, we flush pending passive effects at the beginning of the
        // next event, not at the end of the previous one.
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) return fn();
            else return undefined;
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) flushSyncCallbacks();
        }
    }
    function isAlreadyRendering() {
        // Used by the renderer to print a warning if certain APIs are called from
        // the wrong context.
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                var current = interruptedWork.alternate;
                unwindInterruptedWork(current, interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root;
        var rootWorkInProgress = createWorkInProgress(root.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        ReactStrictModeWarnings.discardPendingWarnings();
        return rootWorkInProgress;
    }
    function handleError(root, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                if (enableSchedulingProfiler) {
                    markComponentRenderStopped();
                    if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                        var wakeable = thrownValue;
                        markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                    } else markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
                throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true);
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError(error) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) workInProgressRootExitStatus = RootErrored;
        if (workInProgressRootConcurrentErrors === null) workInProgressRootConcurrentErrors = [
            error
        ];
        else workInProgressRootConcurrentErrors.push(error);
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) // This is a sync render, so we should have finished the whole tree.
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
            markRenderYielded();
            return RootInProgress;
        } else {
            markRenderStopped();
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its subtree flags.
                    returnFiber.flags |= Incomplete;
                    returnFiber.subtreeFlags = NoFlags;
                    returnFiber.deletions = null;
                } else {
                    // We've unwound all the way to the root.
                    workInProgressRootExitStatus = RootDidNotComplete;
                    workInProgress = null;
                    return;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null); // We've reached the root.
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootCompleted;
    }
    function commitRoot(root, recoverableErrors, transitions) {
        // TODO: This no longer makes any sense. We already wrap the mutation and
        // layout phases. Should be able to remove.
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally{
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
    }
    function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Should not already be working.");
        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;
        markCommitStarted(lanes);
        if (finishedWork === null) {
            markCommitStopped();
            return null;
        } else if (lanes === NoLanes) error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        if (finishedWork === root.current) throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root.callbackNode = null;
        root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes);
        if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // If there are pending passive effects, schedule a callback to process them.
        // Do this as early as possible, so it is queued before anything else that
        // might get scheduled in the commit phase. (See #16714.)
        // TODO: Delete all other places that schedule the passive effect callback
        // They're redundant.
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                // to store it in pendingPassiveTransitions until they get processed
                // We need to pass this through as an argument to commitRoot
                // because workInProgressTransitions might have changed between
                // the previous render and commit if we throttle the commit
                // with setTimeout
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                    flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
                    // *after* passive effects fire to avoid freeing a cache pool that may
                    // be referenced by a node in the tree (HostRoot, Cache boundary etc)
                    return null;
                });
            }
        } // Check if there are any effects in the whole tree.
        // TODO: This is left over from the effect list implementation, where we had
        // to check for the existence of `firstEffect` to satisfy Flow. I think the
        // only other reason this optimization exists is because it affects profiling.
        // Reconsider whether this is necessary.
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext; // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            commitMutationEffects(root, finishedWork, lanes);
            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            markLayoutEffectsStarted(lanes);
            commitLayoutEffects(finishedWork, root, lanes);
            markLayoutEffectsStopped();
            // opportunity to paint.
            requestPaint();
            executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
        } else {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
        } // Read this again, since an effect might have updated it
        remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
        // TODO: This is part of the `componentDidCatch` implementation. Its purpose
        // is to detect whether something might have called setState inside
        // `componentDidCatch`. The mechanism is known to be flawed because `setState`
        // inside `componentDidCatch` is itself flawed — that's why we recommend
        // `getDerivedStateFromError` instead. However, it could be improved by
        // checking if remainingLanes includes Sync work, instead of whether there's
        // any work remaining at all (which would also include stuff like Suspense
        // retries or transitions). It's been like this for a while, though, so fixing
        // it probably isn't that urgent.
        if (remainingLanes === NoLanes) // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) commitDoubleInvokeEffectsInDEV(root.current, false);
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        if (isDevToolsPresent) root.memoizedUpdaters.clear();
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root, now());
        if (recoverableErrors !== null) {
            // There were errors during this render, but recovered from them without
            // needing to surface it to the UI. We log them here.
            var onRecoverableError = root.onRecoverableError;
            for(var i = 0; i < recoverableErrors.length; i++){
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                    componentStack: componentStack,
                    digest: digest
                });
            }
        }
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
        } // If the passive effects are the result of a discrete render, flush them
        // synchronously at the end of the current task so that the result is
        // immediately observable. Otherwise, we assume that they are not
        // order-dependent and do not need to be observed by external systems, so we
        // can wait until after paint.
        // TODO: We can optimize this by not scheduling the callback earlier. Since we
        // currently schedule the callback in multiple places, will wait until those
        // are consolidated.
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) flushPassiveEffects();
         // Read this again, since a passive effect might have updated it
        remainingLanes = root.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
            markNestedUpdateScheduled();
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
            }
        } else nestedUpdateCount = 0;
         // If layout work was scheduled, flush it now.
        flushSyncCallbacks();
        markCommitStopped();
        return null;
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
        // probably just combine the two functions. I believe they were only separate
        // in the first place because we used to wrap it with
        // `Scheduler.runWithPriority`, which accepts a function. But now we track the
        // priority within React itself, so we can mutate the variable directly.
        if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
            } finally{
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
            }
        }
        return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
         // Cache and clear the transitions flag
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
        // Figure out why and fix it. It's not causing any known issues (probably
        // because it's only used for profiling), but it's a refactor hazard.
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
        markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root.current);
        commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for(var i = 0; i < profilerEffects.length; i++){
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root, _fiber);
        }
        markPassiveEffectsStopped();
        commitDoubleInvokeEffectsInDEV(root.current, true);
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        if (didScheduleUpdateDuringPassiveEffects) {
            if (root === rootWithPassiveNestedUpdates) nestedPassiveUpdateCount++;
            else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root;
            }
        } else nestedPassiveUpdateCount = 0;
        isFlushingPassiveEffects = false;
        didScheduleUpdateDuringPassiveEffects = false;
        onPostCommitRoot(root);
        var stateNode = root.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        reportUncaughtErrorInDEV(error$1);
        setIsRunningInsertionEffect(false);
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
        }
        var fiber = null;
        fiber = nearestMountedAncestor;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    var root = enqueueUpdate(fiber, update, SyncLane);
                    var eventTime = requestEventTime();
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
        // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
        // will fire for errors that are thrown by destroy functions inside deleted
        // trees. What it should instead do is propagate the error to the parent of
        // the deleted tree. In the meantime, do not add this warning to the
        // allowlist; this is only for our internal use.
        error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root);
        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new lanes.
        if (retryLane === NoLane) // TODO: Assign this to `suspenseState.retryLane`? to avoid
        // unnecessary entanglement?
        retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) retryLane = suspenseState.retryLane;
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        switch(boundaryFiber.tag){
            case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) retryLane = suspenseState.retryLane;
                break;
            case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
            default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
        // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
        // Maybe not a big deal since this is DEV only behavior.
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        resetCurrentFiber();
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        var current = firstChild;
        var subtreeRoot = null;
        while(current !== null){
            var primarySubtreeFlag = current.subtreeFlags & fiberFlags;
            if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) current = current.child;
            else {
                if ((current.flags & fiberFlags) !== NoFlags) invokeEffectFn(current);
                if (current.sibling !== null) current = current.sibling;
                else current = subtreeRoot = current.return;
            }
        }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & ConcurrentMode)) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") // Don't replay promises.
            // Don't replay errors if we are hydrating and have already suspended or handled an error
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
                originalError._suppressLogging = true;
            } // We always throw the original error in case the second render pass is not idempotent.
            // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown"; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    }
    function restorePendingUpdaters(root, lanes) {
        if (isDevToolsPresent) {
            var memoizedUpdaters = root.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root, schedulingFiber, lanes);
            }); // This function intentionally does not clear memoized updaters.
        // Those may still be relevant to the current commit
        // and a future one (e.g. Suspense).
        }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
        // If we're currently inside an `act` scope, bypass Scheduler and push to
        // the `act` queue instead.
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
        } else return scheduleCallback(priorityLevel, callback);
    }
    function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) return;
         // In production, always call Scheduler. This function will be stripped out.
        return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) // Not in an act environment. No need to warn.
            return;
        } else {
            // Legacy mode has additional cases where we suppress a warning.
            if (!isLegacyActEnvironment()) // Not in an act environment. No need to warn.
            return;
            if (executionContext !== NoContext) // Legacy mode doesn't warn if the update is batched, i.e.
            // batchedUpdates or flushSync.
            return;
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) // For backwards compatibility with pre-hooks code, legacy mode only
            // warns for updates that originate from a hook.
            return;
        }
        if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
    }
    function setIsRunningInsertionEffect(isRunning) {
        isRunningInsertionEffect = isRunning;
    }
    /* eslint-disable react-internal/prod-error-codes */ var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === "function") {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === "function") needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === "function") needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== "function") return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root, element) {
        if (root.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error("Expected resolveFamily to be set during hot reload.");
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
        }
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error("Expected to reach root first.");
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            // DEV-only fields
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress.flags = NoFlags; // The effects are no longer valid.
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
        } // Reset all effects except static ones.
        // Static effects are not specific to a render.
        workInProgress.flags = current.flags & StaticMask;
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
            case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
        }
        return workInProgress;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect flags but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.
        var current = workInProgress.alternate;
        if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
            }
        } else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === "string") fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) // Strict effects should never run on legacy roots
                mode |= StrictEffectsMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_CACHE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_TRACING_MARKER_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_DEBUG_TRACING_MODE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === "object" && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                }
                var info = "";
                if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) info += "\n\nCheck the render method of `" + ownerName + "`.";
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== "string") error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
            isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        this.mutableSourceEagerHydrationData = null;
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
        this.memoizedUpdaters = new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for(var _i = 0; _i < TotalLanes; _i++)pendingUpdatersLaneMap.push(new Set());
        switch(tag){
            case ConcurrentRoot:
                this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
                break;
            case LegacyRoot:
                this._debugRootType = hydrate ? "hydrate()" : "render()";
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // host config, but because they are passed in at runtime, we have to thread
    // them through the root constructor. Perhaps we should put them all into a
    // single type, like a DynamicHostConfig that is defined by the renderer.
    identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: null,
            // not enabled yet
            transitions: null,
            pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
        initializeUpdateQueue(uninitializedFiber);
        return root;
    }
    var ReactVersion = "18.2.0";
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        checkKeyStringCoercion(key);
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {};
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === "function") throw new Error("Unable to find node on an unmounted component.");
            else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = true;
        var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor
        root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
        // a regular update because the initial render must match was was rendered
        // on the server.
        // NOTE: This update intentionally doesn't have a payload. We're only using
        // the update to schedule work on the root fiber (and, for legacy roots, to
        // enqueue the callback if one is provided).
        var current = root.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current, update, lane);
        scheduleInitialHydrationOnRoot(root, lane, eventTime);
        return root;
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== "function") error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        var root = enqueueUpdate(current$1, update, lane);
        if (root !== null) {
            scheduleUpdateOnFiber(root, current$1, lane, eventTime);
            entangleTransitions(root, current$1, lane);
        }
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function attemptSynchronousHydration$1(fiber) {
        switch(fiber.tag){
            case HostRoot:
                var root = fiber.stateNode;
                if (isRootDehydrated(root)) {
                    // Flush the first scheduled "update".
                    var lanes = getHighestPriorityPendingLanes(root);
                    flushRoot(root, lanes);
                }
                break;
            case SuspenseComponent:
                flushSync(function() {
                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                    if (root !== null) {
                        var eventTime = requestEventTime();
                        scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
                    }
                }); // If we're still blocked after this, we need to increase
                // the priority of any promises resolving within this
                // boundary so that they next attempt also has higher pri.
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thenables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var lane = SelectiveHydrationLane;
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var lane = requestUpdateLane(fiber);
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
        return null;
    };
    function shouldError(fiber) {
        return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index) {
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === path.length) {
            if (isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === oldPath.length) {
            var newKey = newPath[index]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while(currentHook !== null && id > 0){
            currentHook = currentHook.next;
            id--;
        }
        return currentHook;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setErrorHandler: setErrorHandler,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
        });
    }
    /* global reportError */ var defaultOnRecoverableError = typeof reportError === "function" ? // emulating an uncaught JavaScript error.
    reportError : function(error) {
        // In older browsers and test environments, fallback to console.error.
        // eslint-disable-next-line react-internal/no-production-logging
        console["error"](error);
    };
    function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root = this._internalRoot;
        if (root === null) throw new Error("Cannot update an unmounted root.");
        if (typeof arguments[1] === "function") error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        else if (isValidContainer(arguments[1])) error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        else if (typeof arguments[1] !== "undefined") error("You passed a second argument to root.render(...) but it only accepts one argument.");
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        if (typeof arguments[0] === "function") error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root = this._internalRoot;
        if (root !== null) {
            this._internalRoot = null;
            var container = root.containerInfo;
            if (isAlreadyRendering()) error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            flushSync(function() {
                updateContainer(null, root, null, null);
            });
            unmarkContainerAsRoot(container);
        }
    };
    function createRoot(container, options) {
        if (!isValidContainer(container)) throw new Error("createRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options !== null && options !== undefined) {
            if (options.hydrate) warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            else if (typeof options === "object" && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
            if (options.transitionCallbacks !== undefined) transitionCallbacks = options.transitionCallbacks;
        }
        var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root);
    }
    function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
        if (target) queueExplicitHydrationTarget(target);
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options) {
        if (!isValidContainer(container)) throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        if (initialChildren === undefined) error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        // the hydration callbacks.
        var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option
        var mutableSources = options != null && options.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options !== null && options !== undefined) {
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
        }
        var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.
        listenToAllSupportedEvents(container);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root, mutableSource);
        }
        return new ReactDOMHydrationRoot(root);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    } // TODO: Remove this function which also includes comment nodes.
    // We only use it in places that are currently more relaxed.
    function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
    }
    function warnIfReactDOMContainerInDEV(container) {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            else error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
        }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function noopOnRecoverableError() {
    // legacy API.
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
            if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            }
            var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = root;
            markContainerAsRoot(root.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root;
        } else {
            // First clear any existing content.
            var rootSibling;
            while(rootSibling = container.lastChild)container.removeChild(rootSibling);
            if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(_root);
                    _originalCallback.call(instance);
                };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.
            flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
        }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== "function") error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, "render");
        var maybeRoot = container._reactRootContainer;
        var root;
        if (!maybeRoot) // Initial mount
        root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
            root = maybeRoot;
            if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, root, parentComponent, callback);
        }
        return getPublicRootInstance(root);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
    }
    function hydrate(element, container, callback) {
        error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(containerNode)) throw new Error("Target container is not a DOM element.");
        if (parentComponent == null || !has(parentComponent)) throw new Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
    Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
    Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw new Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
        usingClientEntryPoint: false,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            batchedUpdates$1
        ]
    };
    function createRoot$1(container, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return createRoot(container, options);
    }
    function hydrateRoot$1(container, initialChildren, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return hydrateRoot(container, initialChildren, options);
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync$1(fn) {
        if (isAlreadyRendering()) error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.createRoot = createRoot$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync$1;
    exports.hydrate = hydrate;
    exports.hydrateRoot = hydrateRoot$1;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{"6f0162e9ab224cd4":"21dqq","8ad4ca65319d28a7":"juvHo"}],"juvHo":[function(require,module,exports) {
"use strict";
module.exports = require("ef03b89c8fe2794e");

},{"ef03b89c8fe2794e":"RqdIf"}],"RqdIf":[function(require,module,exports) {
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var frameYieldMs = 5;
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        return heap.length === 0 ? null : heap[0];
    }
    function pop(heap) {
        if (heap.length === 0) return null;
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
        }
        return first;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(index > 0){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while(index < halfLength){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {}
    /* eslint-disable no-var */ var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.
    var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
    var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
    var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null; // IE and Node.js + jsdom
    var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) break;
            var callback = currentTask.callback;
            if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {}
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var isMessageLoopRunning = false;
    var scheduledHostCallback = null;
    var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
    // thread, like user events. By default, it yields multiple times per frame.
    // It does not attempt to align with frame boundaries, since most tasks don't
    // need to be frame aligned; for those that do, use requestAnimationFrame.
    var frameInterval = frameYieldMs;
    var startTime = -1;
    function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) // The main thread has only been blocked for a really short amount of time;
        // smaller than a single frame. Don't yield yet.
        return false;
         // The main thread has been blocked for a non-negligible amount of time. We
        return true;
    }
    function requestPaint() {}
    function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
            // Using console['error'] to evade Babel and ESLint
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
        }
        if (fps > 0) frameInterval = Math.floor(1000 / fps);
        else // reset the framerate
        frameInterval = frameYieldMs;
    }
    var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
            // has been blocked.
            startTime = currentTime;
            var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
            // error can be observed.
            //
            // Intentionally not using a try-catch, since that makes some debugging
            // techniques harder. Instead, if `scheduledHostCallback` errors, then
            // `hasMoreWork` will remain true, and we'll continue the work loop.
            var hasMoreWork = true;
            try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally{
                if (hasMoreWork) // If there's more work, schedule the next message event at the end
                // of the preceding one.
                schedulePerformWorkUntilDeadline();
                else {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                }
            }
        } else isMessageLoopRunning = false;
         // Yielding to the browser will give it a chance to paint, so we can
    };
    var schedulePerformWorkUntilDeadline;
    if (typeof localSetImmediate === "function") // Node.js and old IE.
    // There's a few reasons for why we prefer setImmediate.
    //
    // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
    // (Even though this is a DOM fork of the Scheduler, you could get here
    // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
    // https://github.com/facebook/react/issues/20756
    //
    // But also, it runs earlier which is the semantic we want.
    // If other browsers ever implement it, it's better to use it.
    // Although both of these would be inferior to native scheduling.
    schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
    };
    else if (typeof MessageChannel !== "undefined") {
        // DOM and Worker environments.
        // We prefer MessageChannel because of the 4ms setTimeout clamping.
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
        };
    } else // We should only fallback here in non-browser environments.
    schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
    };
    function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
        }
    }
    function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
        }, ms);
    }
    function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_forceFrameRate = forceFrameRate;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"jpRoG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CSSVars", ()=>(0, _chunkMFVQSVQBMjs.CSSVars));
parcelHelpers.export(exports, "GlobalStyle", ()=>(0, _chunkMFVQSVQBMjs.GlobalStyle));
parcelHelpers.export(exports, "StylesProvider", ()=>(0, _chunkMFVQSVQBMjs.StylesProvider));
parcelHelpers.export(exports, "ThemeProvider", ()=>(0, _chunkMFVQSVQBMjs.ThemeProvider));
parcelHelpers.export(exports, "chakra", ()=>(0, _chunkZHQNHOQSMjs.chakra));
parcelHelpers.export(exports, "createStylesContext", ()=>(0, _chunkMFVQSVQBMjs.createStylesContext));
parcelHelpers.export(exports, "forwardRef", ()=>(0, _chunkZJJGQIVYMjs.forwardRef));
parcelHelpers.export(exports, "getToken", ()=>(0, _chunk7FWEOSAEMjs.getToken));
parcelHelpers.export(exports, "keyframes", ()=>(0, _react.keyframes));
parcelHelpers.export(exports, "shouldForwardProp", ()=>(0, _chunkFDQH4LQIMjs.shouldForwardProp));
parcelHelpers.export(exports, "styled", ()=>(0, _chunk5PL47M24Mjs.styled));
parcelHelpers.export(exports, "toCSSObject", ()=>(0, _chunk5PL47M24Mjs.toCSSObject));
parcelHelpers.export(exports, "useChakra", ()=>(0, _chunk7FWEOSAEMjs.useChakra));
parcelHelpers.export(exports, "useComponentStyles__unstable", ()=>(0, _chunkDMO4EI7PMjs.useComponentStyles__unstable));
parcelHelpers.export(exports, "useMultiStyleConfig", ()=>(0, _chunkDMO4EI7PMjs.useMultiStyleConfig));
parcelHelpers.export(exports, "useStyleConfig", ()=>(0, _chunkDMO4EI7PMjs.useStyleConfig));
parcelHelpers.export(exports, "useStyles", ()=>(0, _chunkMFVQSVQBMjs.useStyles));
parcelHelpers.export(exports, "useTheme", ()=>(0, _chunkUIGT7YZFMjs.useTheme));
parcelHelpers.export(exports, "useToken", ()=>(0, _chunk7FWEOSAEMjs.useToken));
var _chunkDMO4EI7PMjs = require("./chunk-DMO4EI7P.mjs");
var _chunkZHQNHOQSMjs = require("./chunk-ZHQNHOQS.mjs");
var _chunkZJJGQIVYMjs = require("./chunk-ZJJGQIVY.mjs");
var _chunk7FWEOSAEMjs = require("./chunk-7FWEOSAE.mjs");
var _chunkUIGT7YZFMjs = require("./chunk-UIGT7YZF.mjs");
var _chunkMFVQSVQBMjs = require("./chunk-MFVQSVQB.mjs");
var _chunk5PL47M24Mjs = require("./chunk-5PL47M24.mjs");
var _chunkFDQH4LQIMjs = require("./chunk-FDQH4LQI.mjs");
var _chunkI77ZCDZJMjs = require("./chunk-I77ZCDZJ.mjs");
// src/index.ts
var _colorMode = require("@chakra-ui/color-mode");
parcelHelpers.exportAll(_colorMode, exports);
var _styledSystem = require("@chakra-ui/styled-system");
parcelHelpers.exportAll(_styledSystem, exports);
var _react = require("@emotion/react");

},{"./chunk-DMO4EI7P.mjs":"aYOjF","./chunk-ZHQNHOQS.mjs":"cnoBn","./chunk-ZJJGQIVY.mjs":"hGgge","./chunk-7FWEOSAE.mjs":"86gpR","./chunk-UIGT7YZF.mjs":"i6b2T","./chunk-MFVQSVQB.mjs":"9iNXF","./chunk-5PL47M24.mjs":"dMXqF","./chunk-FDQH4LQI.mjs":"cSMeG","./chunk-I77ZCDZJ.mjs":"l6kAN","@chakra-ui/color-mode":"l1BNc","@chakra-ui/styled-system":"l3oON","@emotion/react":"9qiaY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aYOjF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useStyleConfig", ()=>useStyleConfig);
parcelHelpers.export(exports, "useMultiStyleConfig", ()=>useMultiStyleConfig);
parcelHelpers.export(exports, "useComponentStyles__unstable", ()=>useComponentStyles__unstable);
var _chunk7FWEOSAEMjs = require("./chunk-7FWEOSAE.mjs");
// src/use-style-config.ts
var _styledSystem = require("@chakra-ui/styled-system");
var _themeUtils = require("@chakra-ui/theme-utils");
var _utils = require("@chakra-ui/utils");
var _react = require("react");
var _reactFastCompare = require("react-fast-compare");
var _reactFastCompareDefault = parcelHelpers.interopDefault(_reactFastCompare);
"use client";
function useStyleConfigImpl(themeKey, props = {}) {
    var _a;
    const { styleConfig: styleConfigProp, ...rest } = props;
    const { theme, colorMode } = (0, _chunk7FWEOSAEMjs.useChakra)();
    const themeStyleConfig = themeKey ? (0, _utils.memoizedGet)(theme, `components.${themeKey}`) : void 0;
    const styleConfig = styleConfigProp || themeStyleConfig;
    const mergedProps = (0, _utils.mergeWith)({
        theme,
        colorMode
    }, (_a = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a : {}, (0, _utils.filterUndefined)((0, _utils.omit)(rest, [
        "children"
    ])));
    const stylesRef = (0, _react.useRef)({});
    if (styleConfig) {
        const getStyles = (0, _styledSystem.resolveStyleConfig)(styleConfig);
        const styles = getStyles(mergedProps);
        const isStyleEqual = (0, _reactFastCompareDefault.default)(stylesRef.current, styles);
        if (!isStyleEqual) stylesRef.current = styles;
    }
    return stylesRef.current;
}
function useStyleConfig(themeKey, props = {}) {
    return useStyleConfigImpl(themeKey, props);
}
function useMultiStyleConfig(themeKey, props = {}) {
    return useStyleConfigImpl(themeKey, props);
}
function useComponentStyles__unstable(themeKey, props) {
    var _a;
    const { baseConfig, ...restProps } = props;
    const { theme } = (0, _chunk7FWEOSAEMjs.useChakra)();
    const overrides = (_a = theme.components) == null ? void 0 : _a[themeKey];
    const styleConfig = overrides ? (0, _themeUtils.mergeThemeOverride)(overrides, baseConfig) : baseConfig;
    return useStyleConfigImpl(null, {
        ...restProps,
        styleConfig
    });
}

},{"./chunk-7FWEOSAE.mjs":"86gpR","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-utils":"3tJTX","@chakra-ui/utils":"cOMMM","react":"21dqq","react-fast-compare":"isHbY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"86gpR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useChakra", ()=>useChakra);
parcelHelpers.export(exports, "useToken", ()=>useToken);
parcelHelpers.export(exports, "getToken", ()=>getToken);
var _chunkUIGT7YZFMjs = require("./chunk-UIGT7YZF.mjs");
// src/hooks.ts
var _colorMode = require("@chakra-ui/color-mode");
"use client";
function useChakra() {
    const colorModeResult = (0, _colorMode.useColorMode)();
    const theme = (0, _chunkUIGT7YZFMjs.useTheme)();
    return {
        ...colorModeResult,
        theme
    };
}
function getBreakpointValue(theme, value, fallback) {
    var _a, _b;
    if (value == null) return value;
    const getValue = (val)=>{
        var _a2, _b2;
        return (_b2 = (_a2 = theme.__breakpoints) == null ? void 0 : _a2.asArray) == null ? void 0 : _b2[val];
    };
    return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;
}
function getTokenValue(theme, value, fallback) {
    var _a, _b;
    if (value == null) return value;
    const getValue = (val)=>{
        var _a2, _b2;
        return (_b2 = (_a2 = theme.__cssMap) == null ? void 0 : _a2[val]) == null ? void 0 : _b2.value;
    };
    return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;
}
function useToken(scale, token, fallback) {
    const theme = (0, _chunkUIGT7YZFMjs.useTheme)();
    return getToken(scale, token, fallback)(theme);
}
function getToken(scale, token, fallback) {
    const _token = Array.isArray(token) ? token : [
        token
    ];
    const _fallback = Array.isArray(fallback) ? fallback : [
        fallback
    ];
    return (theme)=>{
        const fallbackArr = _fallback.filter(Boolean);
        const result = _token.map((token2, index)=>{
            var _a, _b;
            if (scale === "breakpoints") return getBreakpointValue(theme, token2, (_a = fallbackArr[index]) != null ? _a : token2);
            const path = `${scale}.${token2}`;
            return getTokenValue(theme, path, (_b = fallbackArr[index]) != null ? _b : token2);
        });
        return Array.isArray(token) ? result : result[0];
    };
}

},{"./chunk-UIGT7YZF.mjs":"i6b2T","@chakra-ui/color-mode":"l1BNc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6b2T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useTheme", ()=>useTheme);
// src/use-theme.ts
var _react = require("@emotion/react");
var _react1 = require("react");
"use client";
function useTheme() {
    const theme = (0, _react1.useContext)((0, _react.ThemeContext));
    if (!theme) throw Error("useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`");
    return theme;
}

},{"@emotion/react":"9qiaY","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l1BNc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorModeContext", ()=>(0, _chunkUQDW7KKVMjs.ColorModeContext));
parcelHelpers.export(exports, "ColorModeProvider", ()=>(0, _chunkAMBGAKG2Mjs.ColorModeProvider));
parcelHelpers.export(exports, "ColorModeScript", ()=>(0, _chunkWP4V2BSLMjs.ColorModeScript));
parcelHelpers.export(exports, "DarkMode", ()=>(0, _chunkAMBGAKG2Mjs.DarkMode));
parcelHelpers.export(exports, "LightMode", ()=>(0, _chunkAMBGAKG2Mjs.LightMode));
parcelHelpers.export(exports, "cookieStorageManager", ()=>(0, _chunk44OWBZ77Mjs.cookieStorageManager));
parcelHelpers.export(exports, "cookieStorageManagerSSR", ()=>(0, _chunk44OWBZ77Mjs.cookieStorageManagerSSR));
parcelHelpers.export(exports, "createCookieStorageManager", ()=>(0, _chunk44OWBZ77Mjs.createCookieStorageManager));
parcelHelpers.export(exports, "createLocalStorageManager", ()=>(0, _chunk44OWBZ77Mjs.createLocalStorageManager));
parcelHelpers.export(exports, "getScriptSrc", ()=>(0, _chunkWP4V2BSLMjs.getScriptSrc));
parcelHelpers.export(exports, "localStorageManager", ()=>(0, _chunk44OWBZ77Mjs.localStorageManager));
parcelHelpers.export(exports, "useColorMode", ()=>(0, _chunkUQDW7KKVMjs.useColorMode));
parcelHelpers.export(exports, "useColorModeValue", ()=>(0, _chunkUQDW7KKVMjs.useColorModeValue));
var _chunkAMBGAKG2Mjs = require("./chunk-AMBGAKG2.mjs");
var _chunkUQDW7KKVMjs = require("./chunk-UQDW7KKV.mjs");
var _chunkWP4V2BSLMjs = require("./chunk-WP4V2BSL.mjs");
var _chunkX7ZBZ4KWMjs = require("./chunk-X7ZBZ4KW.mjs");
var _chunk44OWBZ77Mjs = require("./chunk-44OWBZ77.mjs");
"use client";

},{"./chunk-AMBGAKG2.mjs":"a7oO9","./chunk-UQDW7KKV.mjs":"ffPto","./chunk-WP4V2BSL.mjs":"lAZyg","./chunk-X7ZBZ4KW.mjs":"lDuyM","./chunk-44OWBZ77.mjs":"6BOHr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a7oO9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorModeProvider", ()=>ColorModeProvider);
parcelHelpers.export(exports, "DarkMode", ()=>DarkMode);
parcelHelpers.export(exports, "LightMode", ()=>LightMode);
var _chunkUQDW7KKVMjs = require("./chunk-UQDW7KKV.mjs");
var _chunkX7ZBZ4KWMjs = require("./chunk-X7ZBZ4KW.mjs");
var _chunk44OWBZ77Mjs = require("./chunk-44OWBZ77.mjs");
// src/color-mode-provider.tsx
var _reactUseSafeLayoutEffect = require("@chakra-ui/react-use-safe-layout-effect");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var noop = ()=>{};
function getTheme(manager, fallback) {
    return manager.type === "cookie" && manager.ssr ? manager.get(fallback) : fallback;
}
function ColorModeProvider(props) {
    const { value, children, options: { useSystemColorMode, initialColorMode, disableTransitionOnChange } = {}, colorModeManager = (0, _chunk44OWBZ77Mjs.localStorageManager) } = props;
    const defaultColorMode = initialColorMode === "dark" ? "dark" : "light";
    const [colorMode, rawSetColorMode] = (0, _react.useState)(()=>getTheme(colorModeManager, defaultColorMode));
    const [resolvedColorMode, setResolvedColorMode] = (0, _react.useState)(()=>getTheme(colorModeManager));
    const { getSystemTheme, setClassName, setDataset, addListener } = (0, _react.useMemo)(()=>(0, _chunkX7ZBZ4KWMjs.getColorModeUtils)({
            preventTransition: disableTransitionOnChange
        }), [
        disableTransitionOnChange
    ]);
    const resolvedValue = initialColorMode === "system" && !colorMode ? resolvedColorMode : colorMode;
    const setColorMode = (0, _react.useCallback)((value2)=>{
        const resolved = value2 === "system" ? getSystemTheme() : value2;
        rawSetColorMode(resolved);
        setClassName(resolved === "dark");
        setDataset(resolved);
        colorModeManager.set(resolved);
    }, [
        colorModeManager,
        getSystemTheme,
        setClassName,
        setDataset
    ]);
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (initialColorMode === "system") setResolvedColorMode(getSystemTheme());
    }, []);
    (0, _react.useEffect)(()=>{
        const managerValue = colorModeManager.get();
        if (managerValue) {
            setColorMode(managerValue);
            return;
        }
        if (initialColorMode === "system") {
            setColorMode("system");
            return;
        }
        setColorMode(defaultColorMode);
    }, [
        colorModeManager,
        defaultColorMode,
        initialColorMode,
        setColorMode
    ]);
    const toggleColorMode = (0, _react.useCallback)(()=>{
        setColorMode(resolvedValue === "dark" ? "light" : "dark");
    }, [
        resolvedValue,
        setColorMode
    ]);
    (0, _react.useEffect)(()=>{
        if (!useSystemColorMode) return;
        return addListener(setColorMode);
    }, [
        useSystemColorMode,
        addListener,
        setColorMode
    ]);
    const context = (0, _react.useMemo)(()=>({
            colorMode: value != null ? value : resolvedValue,
            toggleColorMode: value ? noop : toggleColorMode,
            setColorMode: value ? noop : setColorMode,
            forced: value !== void 0
        }), [
        resolvedValue,
        toggleColorMode,
        setColorMode,
        value
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkUQDW7KKVMjs.ColorModeContext).Provider, {
        value: context,
        children
    });
}
ColorModeProvider.displayName = "ColorModeProvider";
function DarkMode(props) {
    const context = (0, _react.useMemo)(()=>({
            colorMode: "dark",
            toggleColorMode: noop,
            setColorMode: noop,
            forced: true
        }), []);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkUQDW7KKVMjs.ColorModeContext).Provider, {
        value: context,
        ...props
    });
}
DarkMode.displayName = "DarkMode";
function LightMode(props) {
    const context = (0, _react.useMemo)(()=>({
            colorMode: "light",
            toggleColorMode: noop,
            setColorMode: noop,
            forced: true
        }), []);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkUQDW7KKVMjs.ColorModeContext).Provider, {
        value: context,
        ...props
    });
}
LightMode.displayName = "LightMode";

},{"./chunk-UQDW7KKV.mjs":"ffPto","./chunk-X7ZBZ4KW.mjs":"lDuyM","./chunk-44OWBZ77.mjs":"6BOHr","@chakra-ui/react-use-safe-layout-effect":"eJbER","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ffPto":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorModeContext", ()=>ColorModeContext);
parcelHelpers.export(exports, "useColorMode", ()=>useColorMode);
parcelHelpers.export(exports, "useColorModeValue", ()=>useColorModeValue);
// src/color-mode-context.ts
var _react = require("react");
"use client";
var ColorModeContext = (0, _react.createContext)({});
ColorModeContext.displayName = "ColorModeContext";
function useColorMode() {
    const context = (0, _react.useContext)(ColorModeContext);
    if (context === void 0) throw new Error("useColorMode must be used within a ColorModeProvider");
    return context;
}
function useColorModeValue(light, dark) {
    const { colorMode } = useColorMode();
    return colorMode === "dark" ? dark : light;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lDuyM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getColorModeUtils", ()=>getColorModeUtils);
"use client";
// src/color-mode.utils.ts
var classNames = {
    light: "chakra-ui-light",
    dark: "chakra-ui-dark"
};
function getColorModeUtils(options = {}) {
    const { preventTransition = true } = options;
    const utils = {
        setDataset: (value)=>{
            const cleanup = preventTransition ? utils.preventTransition() : void 0;
            document.documentElement.dataset.theme = value;
            document.documentElement.style.colorScheme = value;
            cleanup == null || cleanup();
        },
        setClassName (dark) {
            document.body.classList.add(dark ? classNames.dark : classNames.light);
            document.body.classList.remove(dark ? classNames.light : classNames.dark);
        },
        query () {
            return window.matchMedia("(prefers-color-scheme: dark)");
        },
        getSystemTheme (fallback) {
            var _a;
            const dark = (_a = utils.query().matches) != null ? _a : fallback === "dark";
            return dark ? "dark" : "light";
        },
        addListener (fn) {
            const mql = utils.query();
            const listener = (e)=>{
                fn(e.matches ? "dark" : "light");
            };
            if (typeof mql.addListener === "function") mql.addListener(listener);
            else mql.addEventListener("change", listener);
            return ()=>{
                if (typeof mql.removeListener === "function") mql.removeListener(listener);
                else mql.removeEventListener("change", listener);
            };
        },
        preventTransition () {
            const css = document.createElement("style");
            css.appendChild(document.createTextNode(`*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`));
            document.head.appendChild(css);
            return ()=>{
                (()=>window.getComputedStyle(document.body))();
                requestAnimationFrame(()=>{
                    requestAnimationFrame(()=>{
                        document.head.removeChild(css);
                    });
                });
            };
        }
    };
    return utils;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6BOHr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "STORAGE_KEY", ()=>STORAGE_KEY);
parcelHelpers.export(exports, "createLocalStorageManager", ()=>createLocalStorageManager);
parcelHelpers.export(exports, "localStorageManager", ()=>localStorageManager);
parcelHelpers.export(exports, "createCookieStorageManager", ()=>createCookieStorageManager);
parcelHelpers.export(exports, "cookieStorageManager", ()=>cookieStorageManager);
parcelHelpers.export(exports, "cookieStorageManagerSSR", ()=>cookieStorageManagerSSR);
"use client";
// src/storage-manager.ts
var STORAGE_KEY = "chakra-ui-color-mode";
function createLocalStorageManager(key) {
    return {
        ssr: false,
        type: "localStorage",
        get (init) {
            if (!(globalThis == null ? void 0 : globalThis.document)) return init;
            let value;
            try {
                value = localStorage.getItem(key) || init;
            } catch (e) {}
            return value || init;
        },
        set (value) {
            try {
                localStorage.setItem(key, value);
            } catch (e) {}
        }
    };
}
var localStorageManager = createLocalStorageManager(STORAGE_KEY);
function parseCookie(cookie, key) {
    const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`));
    return match == null ? void 0 : match[2];
}
function createCookieStorageManager(key, cookie) {
    return {
        ssr: !!cookie,
        type: "cookie",
        get (init) {
            if (cookie) return parseCookie(cookie, key);
            if (!(globalThis == null ? void 0 : globalThis.document)) return init;
            return parseCookie(document.cookie, key) || init;
        },
        set (value) {
            document.cookie = `${key}=${value}; max-age=31536000; path=/`;
        }
    };
}
var cookieStorageManager = createCookieStorageManager(STORAGE_KEY);
var cookieStorageManagerSSR = (cookie)=>createCookieStorageManager(STORAGE_KEY, cookie);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lAZyg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getScriptSrc", ()=>getScriptSrc);
parcelHelpers.export(exports, "ColorModeScript", ()=>ColorModeScript);
// src/color-mode-script.tsx
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var VALID_VALUES = /* @__PURE__ */ new Set([
    "dark",
    "light",
    "system"
]);
function normalize(initialColorMode) {
    let value = initialColorMode;
    if (!VALID_VALUES.has(value)) value = "light";
    return value;
}
function getScriptSrc(props = {}) {
    const { initialColorMode = "light", type = "localStorage", storageKey: key = "chakra-ui-color-mode" } = props;
    const init = normalize(initialColorMode);
    const isCookie = type === "cookie";
    const cookieScript = `(function(){try{var a=function(o){var l="(prefers-color-scheme: dark)",v=window.matchMedia(l).matches?"dark":"light",e=o==="system"?v:o,d=document.documentElement,m=document.body,i="chakra-ui-light",n="chakra-ui-dark",s=e==="dark";return m.classList.add(s?n:i),m.classList.remove(s?i:n),d.style.colorScheme=e,d.dataset.theme=e,e},u=a,h="${init}",r="${key}",t=document.cookie.match(new RegExp("(^| )".concat(r,"=([^;]+)"))),c=t?t[2]:null;c?a(c):document.cookie="".concat(r,"=").concat(a(h),"; max-age=31536000; path=/")}catch(a){}})();
  `;
    const localStorageScript = `(function(){try{var a=function(c){var v="(prefers-color-scheme: dark)",h=window.matchMedia(v).matches?"dark":"light",r=c==="system"?h:c,o=document.documentElement,s=document.body,l="chakra-ui-light",d="chakra-ui-dark",i=r==="dark";return s.classList.add(i?d:l),s.classList.remove(i?l:d),o.style.colorScheme=r,o.dataset.theme=r,r},n=a,m="${init}",e="${key}",t=localStorage.getItem(e);t?a(t):localStorage.setItem(e,a(m))}catch(a){}})();
  `;
    const fn = isCookie ? cookieScript : localStorageScript;
    return `!${fn}`.trim();
}
function ColorModeScript(props = {}) {
    const { nonce } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)("script", {
        id: "chakra-script",
        nonce,
        dangerouslySetInnerHTML: {
            __html: getScriptSrc(props)
        }
    });
}

},{"react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l3oON":[function(require,module,exports) {
// src/utils/create-transform.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addPrefix", ()=>addPrefix);
parcelHelpers.export(exports, "background", ()=>background);
parcelHelpers.export(exports, "border", ()=>border);
parcelHelpers.export(exports, "calc", ()=>calc);
parcelHelpers.export(exports, "color", ()=>color);
parcelHelpers.export(exports, "createMultiStyleConfigHelpers", ()=>createMultiStyleConfigHelpers);
parcelHelpers.export(exports, "css", ()=>css);
parcelHelpers.export(exports, "cssVar", ()=>cssVar);
parcelHelpers.export(exports, "defineCssVars", ()=>defineCssVars);
parcelHelpers.export(exports, "defineStyle", ()=>defineStyle);
parcelHelpers.export(exports, "defineStyleConfig", ()=>defineStyleConfig);
parcelHelpers.export(exports, "effect", ()=>effect);
parcelHelpers.export(exports, "filter", ()=>filter);
parcelHelpers.export(exports, "flattenTokens", ()=>flattenTokens);
parcelHelpers.export(exports, "flexbox", ()=>flexbox);
parcelHelpers.export(exports, "getCSSVar", ()=>getCSSVar);
parcelHelpers.export(exports, "getCss", ()=>getCss);
parcelHelpers.export(exports, "grid", ()=>grid);
parcelHelpers.export(exports, "interactivity", ()=>interactivity);
parcelHelpers.export(exports, "isStyleProp", ()=>isStyleProp);
parcelHelpers.export(exports, "layout", ()=>layout);
parcelHelpers.export(exports, "layoutPropNames", ()=>layoutPropNames);
parcelHelpers.export(exports, "list", ()=>list);
parcelHelpers.export(exports, "omitThemingProps", ()=>omitThemingProps);
parcelHelpers.export(exports, "others", ()=>others);
parcelHelpers.export(exports, "position", ()=>position);
parcelHelpers.export(exports, "propNames", ()=>propNames);
parcelHelpers.export(exports, "pseudoPropNames", ()=>pseudoPropNames);
parcelHelpers.export(exports, "pseudoSelectors", ()=>pseudoSelectors);
parcelHelpers.export(exports, "resolveStyleConfig", ()=>resolveStyleConfig);
parcelHelpers.export(exports, "ring", ()=>ring);
parcelHelpers.export(exports, "scroll", ()=>scroll);
parcelHelpers.export(exports, "space", ()=>space);
parcelHelpers.export(exports, "systemProps", ()=>systemProps);
parcelHelpers.export(exports, "textDecoration", ()=>textDecoration);
parcelHelpers.export(exports, "toCSSVar", ()=>toCSSVar);
parcelHelpers.export(exports, "toVarDefinition", ()=>toVarDefinition);
parcelHelpers.export(exports, "toVarReference", ()=>toVarReference);
parcelHelpers.export(exports, "tokenToCSSVar", ()=>tokenToCSSVar);
parcelHelpers.export(exports, "transform", ()=>transform);
parcelHelpers.export(exports, "transition", ()=>transition);
parcelHelpers.export(exports, "typography", ()=>typography);
var _sharedUtils = require("@chakra-ui/shared-utils");
// src/create-theme-vars/create-theme-vars.ts
var _lodashMergewith = require("lodash.mergewith");
var _lodashMergewithDefault = parcelHelpers.interopDefault(_lodashMergewith);
var isImportant = (value)=>/!(important)?$/.test(value);
var withoutImportant = (value)=>typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
var tokenToCSSVar = (scale, value)=>(theme)=>{
        const valueStr = String(value);
        const important = isImportant(valueStr);
        const valueWithoutImportant = withoutImportant(valueStr);
        const key = scale ? `${scale}.${valueWithoutImportant}` : valueWithoutImportant;
        let transformed = (0, _sharedUtils.isObject)(theme.__cssMap) && key in theme.__cssMap ? theme.__cssMap[key].varRef : value;
        transformed = withoutImportant(transformed);
        return important ? `${transformed} !important` : transformed;
    };
function createTransform(options) {
    const { scale, transform: transform2, compose } = options;
    const fn = (value, theme)=>{
        var _a;
        const _value = tokenToCSSVar(scale, value)(theme);
        let result = (_a = transform2 == null ? void 0 : transform2(_value, theme)) != null ? _a : _value;
        if (compose) result = compose(result, theme);
        return result;
    };
    return fn;
}
// src/utils/pipe.ts
var pipe = (...fns)=>(v)=>fns.reduce((a, b)=>b(a), v);
// src/utils/prop-config.ts
function toConfig(scale, transform2) {
    return (property)=>{
        const result = {
            property,
            scale
        };
        result.transform = createTransform({
            scale,
            transform: transform2
        });
        return result;
    };
}
var getRtl = ({ rtl, ltr })=>(theme)=>theme.direction === "rtl" ? rtl : ltr;
function logical(options) {
    const { property, scale, transform: transform2 } = options;
    return {
        scale,
        property: getRtl(property),
        transform: scale ? createTransform({
            scale,
            compose: transform2
        }) : transform2
    };
}
// src/utils/templates.ts
var transformTemplate = [
    "rotate(var(--chakra-rotate, 0))",
    "scaleX(var(--chakra-scale-x, 1))",
    "scaleY(var(--chakra-scale-y, 1))",
    "skewX(var(--chakra-skew-x, 0))",
    "skewY(var(--chakra-skew-y, 0))"
];
function getTransformTemplate() {
    return [
        "translateX(var(--chakra-translate-x, 0))",
        "translateY(var(--chakra-translate-y, 0))",
        ...transformTemplate
    ].join(" ");
}
function getTransformGpuTemplate() {
    return [
        "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
        ...transformTemplate
    ].join(" ");
}
var filterTemplate = {
    "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
    filter: [
        "var(--chakra-blur)",
        "var(--chakra-brightness)",
        "var(--chakra-contrast)",
        "var(--chakra-grayscale)",
        "var(--chakra-hue-rotate)",
        "var(--chakra-invert)",
        "var(--chakra-saturate)",
        "var(--chakra-sepia)",
        "var(--chakra-drop-shadow)"
    ].join(" ")
};
var backdropFilterTemplate = {
    backdropFilter: [
        "var(--chakra-backdrop-blur)",
        "var(--chakra-backdrop-brightness)",
        "var(--chakra-backdrop-contrast)",
        "var(--chakra-backdrop-grayscale)",
        "var(--chakra-backdrop-hue-rotate)",
        "var(--chakra-backdrop-invert)",
        "var(--chakra-backdrop-opacity)",
        "var(--chakra-backdrop-saturate)",
        "var(--chakra-backdrop-sepia)"
    ].join(" "),
    "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
};
function getRingTemplate(value) {
    return {
        "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
        "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
        "--chakra-ring-width": value,
        boxShadow: [
            `var(--chakra-ring-offset-shadow)`,
            `var(--chakra-ring-shadow)`,
            `var(--chakra-shadow, 0 0 #0000)`
        ].join(", ")
    };
}
var flexDirectionTemplate = {
    "row-reverse": {
        space: "--chakra-space-x-reverse",
        divide: "--chakra-divide-x-reverse"
    },
    "column-reverse": {
        space: "--chakra-space-y-reverse",
        divide: "--chakra-divide-y-reverse"
    }
};
// src/utils/parse-gradient.ts
var directionMap = {
    "to-t": "to top",
    "to-tr": "to top right",
    "to-r": "to right",
    "to-br": "to bottom right",
    "to-b": "to bottom",
    "to-bl": "to bottom left",
    "to-l": "to left",
    "to-tl": "to top left"
};
var valueSet = new Set(Object.values(directionMap));
var globalSet = /* @__PURE__ */ new Set([
    "none",
    "-moz-initial",
    "inherit",
    "initial",
    "revert",
    "unset"
]);
var trimSpace = (str)=>str.trim();
function parseGradient(value, theme) {
    if (value == null || globalSet.has(value)) return value;
    const prevent = isCSSFunction(value) || globalSet.has(value);
    if (!prevent) return `url('${value}')`;
    const regex = /(^[a-z-A-Z]+)\((.*)\)/g;
    const results = regex.exec(value);
    const type = results == null ? void 0 : results[1];
    const values = results == null ? void 0 : results[2];
    if (!type || !values) return value;
    const _type = type.includes("-gradient") ? type : `${type}-gradient`;
    const [maybeDirection, ...stops] = values.split(",").map(trimSpace).filter(Boolean);
    if ((stops == null ? void 0 : stops.length) === 0) return value;
    const direction = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
    stops.unshift(direction);
    const _values = stops.map((stop)=>{
        if (valueSet.has(stop)) return stop;
        const firstStop = stop.indexOf(" ");
        const [_color, _stop] = firstStop !== -1 ? [
            stop.substr(0, firstStop),
            stop.substr(firstStop + 1)
        ] : [
            stop
        ];
        const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
        const key = `colors.${_color}`;
        const color2 = key in theme.__cssMap ? theme.__cssMap[key].varRef : _color;
        return _stopOrFunc ? [
            color2,
            ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [
                _stopOrFunc
            ]
        ].join(" ") : color2;
    });
    return `${_type}(${_values.join(", ")})`;
}
var isCSSFunction = (value)=>{
    return typeof value === "string" && value.includes("(") && value.includes(")");
};
var gradientTransform = (value, theme)=>parseGradient(value, theme != null ? theme : {});
// src/utils/transform-functions.ts
function isCssVar(value) {
    return /^var\(--.+\)$/.test(value);
}
var analyzeCSSValue = (value)=>{
    const num = parseFloat(value.toString());
    const unit = value.toString().replace(String(num), "");
    return {
        unitless: !unit,
        value: num,
        unit
    };
};
var wrap = (str)=>(value)=>`${str}(${value})`;
var transformFunctions = {
    filter (value) {
        return value !== "auto" ? value : filterTemplate;
    },
    backdropFilter (value) {
        return value !== "auto" ? value : backdropFilterTemplate;
    },
    ring (value) {
        return getRingTemplate(transformFunctions.px(value));
    },
    bgClip (value) {
        return value === "text" ? {
            color: "transparent",
            backgroundClip: "text"
        } : {
            backgroundClip: value
        };
    },
    transform (value) {
        if (value === "auto") return getTransformTemplate();
        if (value === "auto-gpu") return getTransformGpuTemplate();
        return value;
    },
    vh (value) {
        return value === "$100vh" ? "var(--chakra-vh)" : value;
    },
    px (value) {
        if (value == null) return value;
        const { unitless } = analyzeCSSValue(value);
        return unitless || typeof value === "number" ? `${value}px` : value;
    },
    fraction (value) {
        return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
    },
    float (value, theme) {
        const map = {
            left: "right",
            right: "left"
        };
        return theme.direction === "rtl" ? map[value] : value;
    },
    degree (value) {
        if (isCssVar(value) || value == null) return value;
        const unitless = typeof value === "string" && !value.endsWith("deg");
        return typeof value === "number" || unitless ? `${value}deg` : value;
    },
    gradient: gradientTransform,
    blur: wrap("blur"),
    opacity: wrap("opacity"),
    brightness: wrap("brightness"),
    contrast: wrap("contrast"),
    dropShadow: wrap("drop-shadow"),
    grayscale: wrap("grayscale"),
    hueRotate: wrap("hue-rotate"),
    invert: wrap("invert"),
    saturate: wrap("saturate"),
    sepia: wrap("sepia"),
    bgImage (value) {
        if (value == null) return value;
        const prevent = isCSSFunction(value) || globalSet.has(value);
        return !prevent ? `url(${value})` : value;
    },
    outline (value) {
        const isNoneOrZero = String(value) === "0" || String(value) === "none";
        return value !== null && isNoneOrZero ? {
            outline: "2px solid transparent",
            outlineOffset: "2px"
        } : {
            outline: value
        };
    },
    flexDirection (value) {
        var _a;
        const { space: space2, divide: divide2 } = (_a = flexDirectionTemplate[value]) != null ? _a : {};
        const result = {
            flexDirection: value
        };
        if (space2) result[space2] = 1;
        if (divide2) result[divide2] = 1;
        return result;
    }
};
// src/utils/index.ts
var t = {
    borderWidths: toConfig("borderWidths"),
    borderStyles: toConfig("borderStyles"),
    colors: toConfig("colors"),
    borders: toConfig("borders"),
    gradients: toConfig("gradients", transformFunctions.gradient),
    radii: toConfig("radii", transformFunctions.px),
    space: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
    spaceT: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
    degreeT (property) {
        return {
            property,
            transform: transformFunctions.degree
        };
    },
    prop (property, scale, transform2) {
        return {
            property,
            scale,
            ...scale && {
                transform: createTransform({
                    scale,
                    transform: transform2
                })
            }
        };
    },
    propT (property, transform2) {
        return {
            property,
            transform: transform2
        };
    },
    sizes: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.px)),
    sizesT: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.fraction)),
    shadows: toConfig("shadows"),
    logical,
    blur: toConfig("blur", transformFunctions.blur)
};
// src/config/background.ts
var background = {
    background: t.colors("background"),
    backgroundColor: t.colors("backgroundColor"),
    backgroundImage: t.gradients("backgroundImage"),
    backgroundSize: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundAttachment: true,
    backgroundClip: {
        transform: transformFunctions.bgClip
    },
    bgSize: t.prop("backgroundSize"),
    bgPosition: t.prop("backgroundPosition"),
    bg: t.colors("background"),
    bgColor: t.colors("backgroundColor"),
    bgPos: t.prop("backgroundPosition"),
    bgRepeat: t.prop("backgroundRepeat"),
    bgAttachment: t.prop("backgroundAttachment"),
    bgGradient: t.gradients("backgroundImage"),
    bgClip: {
        transform: transformFunctions.bgClip
    }
};
Object.assign(background, {
    bgImage: background.backgroundImage,
    bgImg: background.backgroundImage
});
// src/config/border.ts
var border = {
    border: t.borders("border"),
    borderWidth: t.borderWidths("borderWidth"),
    borderStyle: t.borderStyles("borderStyle"),
    borderColor: t.colors("borderColor"),
    borderRadius: t.radii("borderRadius"),
    borderTop: t.borders("borderTop"),
    borderBlockStart: t.borders("borderBlockStart"),
    borderTopLeftRadius: t.radii("borderTopLeftRadius"),
    borderStartStartRadius: t.logical({
        scale: "radii",
        property: {
            ltr: "borderTopLeftRadius",
            rtl: "borderTopRightRadius"
        }
    }),
    borderEndStartRadius: t.logical({
        scale: "radii",
        property: {
            ltr: "borderBottomLeftRadius",
            rtl: "borderBottomRightRadius"
        }
    }),
    borderTopRightRadius: t.radii("borderTopRightRadius"),
    borderStartEndRadius: t.logical({
        scale: "radii",
        property: {
            ltr: "borderTopRightRadius",
            rtl: "borderTopLeftRadius"
        }
    }),
    borderEndEndRadius: t.logical({
        scale: "radii",
        property: {
            ltr: "borderBottomRightRadius",
            rtl: "borderBottomLeftRadius"
        }
    }),
    borderRight: t.borders("borderRight"),
    borderInlineEnd: t.borders("borderInlineEnd"),
    borderBottom: t.borders("borderBottom"),
    borderBlockEnd: t.borders("borderBlockEnd"),
    borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
    borderBottomRightRadius: t.radii("borderBottomRightRadius"),
    borderLeft: t.borders("borderLeft"),
    borderInlineStart: {
        property: "borderInlineStart",
        scale: "borders"
    },
    borderInlineStartRadius: t.logical({
        scale: "radii",
        property: {
            ltr: [
                "borderTopLeftRadius",
                "borderBottomLeftRadius"
            ],
            rtl: [
                "borderTopRightRadius",
                "borderBottomRightRadius"
            ]
        }
    }),
    borderInlineEndRadius: t.logical({
        scale: "radii",
        property: {
            ltr: [
                "borderTopRightRadius",
                "borderBottomRightRadius"
            ],
            rtl: [
                "borderTopLeftRadius",
                "borderBottomLeftRadius"
            ]
        }
    }),
    borderX: t.borders([
        "borderLeft",
        "borderRight"
    ]),
    borderInline: t.borders("borderInline"),
    borderY: t.borders([
        "borderTop",
        "borderBottom"
    ]),
    borderBlock: t.borders("borderBlock"),
    borderTopWidth: t.borderWidths("borderTopWidth"),
    borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
    borderTopColor: t.colors("borderTopColor"),
    borderBlockStartColor: t.colors("borderBlockStartColor"),
    borderTopStyle: t.borderStyles("borderTopStyle"),
    borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
    borderBottomWidth: t.borderWidths("borderBottomWidth"),
    borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
    borderBottomColor: t.colors("borderBottomColor"),
    borderBlockEndColor: t.colors("borderBlockEndColor"),
    borderBottomStyle: t.borderStyles("borderBottomStyle"),
    borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
    borderLeftWidth: t.borderWidths("borderLeftWidth"),
    borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
    borderLeftColor: t.colors("borderLeftColor"),
    borderInlineStartColor: t.colors("borderInlineStartColor"),
    borderLeftStyle: t.borderStyles("borderLeftStyle"),
    borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
    borderRightWidth: t.borderWidths("borderRightWidth"),
    borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
    borderRightColor: t.colors("borderRightColor"),
    borderInlineEndColor: t.colors("borderInlineEndColor"),
    borderRightStyle: t.borderStyles("borderRightStyle"),
    borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
    borderTopRadius: t.radii([
        "borderTopLeftRadius",
        "borderTopRightRadius"
    ]),
    borderBottomRadius: t.radii([
        "borderBottomLeftRadius",
        "borderBottomRightRadius"
    ]),
    borderLeftRadius: t.radii([
        "borderTopLeftRadius",
        "borderBottomLeftRadius"
    ]),
    borderRightRadius: t.radii([
        "borderTopRightRadius",
        "borderBottomRightRadius"
    ])
};
Object.assign(border, {
    rounded: border.borderRadius,
    roundedTop: border.borderTopRadius,
    roundedTopLeft: border.borderTopLeftRadius,
    roundedTopRight: border.borderTopRightRadius,
    roundedTopStart: border.borderStartStartRadius,
    roundedTopEnd: border.borderStartEndRadius,
    roundedBottom: border.borderBottomRadius,
    roundedBottomLeft: border.borderBottomLeftRadius,
    roundedBottomRight: border.borderBottomRightRadius,
    roundedBottomStart: border.borderEndStartRadius,
    roundedBottomEnd: border.borderEndEndRadius,
    roundedLeft: border.borderLeftRadius,
    roundedRight: border.borderRightRadius,
    roundedStart: border.borderInlineStartRadius,
    roundedEnd: border.borderInlineEndRadius,
    borderStart: border.borderInlineStart,
    borderEnd: border.borderInlineEnd,
    borderTopStartRadius: border.borderStartStartRadius,
    borderTopEndRadius: border.borderStartEndRadius,
    borderBottomStartRadius: border.borderEndStartRadius,
    borderBottomEndRadius: border.borderEndEndRadius,
    borderStartRadius: border.borderInlineStartRadius,
    borderEndRadius: border.borderInlineEndRadius,
    borderStartWidth: border.borderInlineStartWidth,
    borderEndWidth: border.borderInlineEndWidth,
    borderStartColor: border.borderInlineStartColor,
    borderEndColor: border.borderInlineEndColor,
    borderStartStyle: border.borderInlineStartStyle,
    borderEndStyle: border.borderInlineEndStyle
});
// src/config/color.ts
var color = {
    color: t.colors("color"),
    textColor: t.colors("color"),
    fill: t.colors("fill"),
    stroke: t.colors("stroke")
};
// src/config/effect.ts
var effect = {
    boxShadow: t.shadows("boxShadow"),
    mixBlendMode: true,
    blendMode: t.prop("mixBlendMode"),
    backgroundBlendMode: true,
    bgBlendMode: t.prop("backgroundBlendMode"),
    opacity: true
};
Object.assign(effect, {
    shadow: effect.boxShadow
});
// src/config/filter.ts
var filter = {
    filter: {
        transform: transformFunctions.filter
    },
    blur: t.blur("--chakra-blur"),
    brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
    contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
    hueRotate: t.degreeT("--chakra-hue-rotate"),
    invert: t.propT("--chakra-invert", transformFunctions.invert),
    saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
    dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
    backdropFilter: {
        transform: transformFunctions.backdropFilter
    },
    backdropBlur: t.blur("--chakra-backdrop-blur"),
    backdropBrightness: t.propT("--chakra-backdrop-brightness", transformFunctions.brightness),
    backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
    backdropHueRotate: t.degreeT("--chakra-backdrop-hue-rotate"),
    backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
    backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
};
// src/config/flexbox.ts
var flexbox = {
    alignItems: true,
    alignContent: true,
    justifyItems: true,
    justifyContent: true,
    flexWrap: true,
    flexDirection: {
        transform: transformFunctions.flexDirection
    },
    flex: true,
    flexFlow: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: t.sizes("flexBasis"),
    justifySelf: true,
    alignSelf: true,
    order: true,
    placeItems: true,
    placeContent: true,
    placeSelf: true,
    gap: t.space("gap"),
    rowGap: t.space("rowGap"),
    columnGap: t.space("columnGap")
};
Object.assign(flexbox, {
    flexDir: flexbox.flexDirection
});
// src/config/grid.ts
var grid = {
    gridGap: t.space("gridGap"),
    gridColumnGap: t.space("gridColumnGap"),
    gridRowGap: t.space("gridRowGap"),
    gridColumn: true,
    gridRow: true,
    gridAutoFlow: true,
    gridAutoColumns: true,
    gridColumnStart: true,
    gridColumnEnd: true,
    gridRowStart: true,
    gridRowEnd: true,
    gridAutoRows: true,
    gridTemplate: true,
    gridTemplateColumns: true,
    gridTemplateRows: true,
    gridTemplateAreas: true,
    gridArea: true
};
// src/config/interactivity.ts
var interactivity = {
    appearance: true,
    cursor: true,
    resize: true,
    userSelect: true,
    pointerEvents: true,
    outline: {
        transform: transformFunctions.outline
    },
    outlineOffset: true,
    outlineColor: t.colors("outlineColor")
};
// src/config/layout.ts
var layout = {
    width: t.sizesT("width"),
    inlineSize: t.sizesT("inlineSize"),
    height: t.sizes("height"),
    blockSize: t.sizes("blockSize"),
    boxSize: t.sizes([
        "width",
        "height"
    ]),
    minWidth: t.sizes("minWidth"),
    minInlineSize: t.sizes("minInlineSize"),
    minHeight: t.sizes("minHeight"),
    minBlockSize: t.sizes("minBlockSize"),
    maxWidth: t.sizes("maxWidth"),
    maxInlineSize: t.sizes("maxInlineSize"),
    maxHeight: t.sizes("maxHeight"),
    maxBlockSize: t.sizes("maxBlockSize"),
    overflow: true,
    overflowX: true,
    overflowY: true,
    overscrollBehavior: true,
    overscrollBehaviorX: true,
    overscrollBehaviorY: true,
    display: true,
    aspectRatio: true,
    hideFrom: {
        scale: "breakpoints",
        transform: (value, theme)=>{
            var _a, _b, _c;
            const breakpoint = (_c = (_b = (_a = theme.__breakpoints) == null ? void 0 : _a.get(value)) == null ? void 0 : _b.minW) != null ? _c : value;
            const mq = `@media screen and (min-width: ${breakpoint})`;
            return {
                [mq]: {
                    display: "none"
                }
            };
        }
    },
    hideBelow: {
        scale: "breakpoints",
        transform: (value, theme)=>{
            var _a, _b, _c;
            const breakpoint = (_c = (_b = (_a = theme.__breakpoints) == null ? void 0 : _a.get(value)) == null ? void 0 : _b._minW) != null ? _c : value;
            const mq = `@media screen and (max-width: ${breakpoint})`;
            return {
                [mq]: {
                    display: "none"
                }
            };
        }
    },
    verticalAlign: true,
    boxSizing: true,
    boxDecorationBreak: true,
    float: t.propT("float", transformFunctions.float),
    objectFit: true,
    objectPosition: true,
    visibility: true,
    isolation: true
};
Object.assign(layout, {
    w: layout.width,
    h: layout.height,
    minW: layout.minWidth,
    maxW: layout.maxWidth,
    minH: layout.minHeight,
    maxH: layout.maxHeight,
    overscroll: layout.overscrollBehavior,
    overscrollX: layout.overscrollBehaviorX,
    overscrollY: layout.overscrollBehaviorY
});
// src/config/list.ts
var list = {
    listStyleType: true,
    listStylePosition: true,
    listStylePos: t.prop("listStylePosition"),
    listStyleImage: true,
    listStyleImg: t.prop("listStyleImage")
};
// src/get.ts
function get(obj, path, fallback, index) {
    const key = typeof path === "string" ? path.split(".") : [
        path
    ];
    for(index = 0; index < key.length; index += 1){
        if (!obj) break;
        obj = obj[key[index]];
    }
    return obj === void 0 ? fallback : obj;
}
var memoize = (fn)=>{
    const cache = /* @__PURE__ */ new WeakMap();
    const memoizedFn = (obj, path, fallback, index)=>{
        if (typeof obj === "undefined") return fn(obj, path, fallback);
        if (!cache.has(obj)) cache.set(obj, /* @__PURE__ */ new Map());
        const map = cache.get(obj);
        if (map.has(path)) return map.get(path);
        const value = fn(obj, path, fallback, index);
        map.set(path, value);
        return value;
    };
    return memoizedFn;
};
var memoizedGet = memoize(get);
// src/config/others.ts
var srOnly = {
    border: "0px",
    clip: "rect(0, 0, 0, 0)",
    width: "1px",
    height: "1px",
    margin: "-1px",
    padding: "0px",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
};
var srFocusable = {
    position: "static",
    width: "auto",
    height: "auto",
    clip: "auto",
    padding: "0",
    margin: "0",
    overflow: "visible",
    whiteSpace: "normal"
};
var getWithPriority = (theme, key, styles)=>{
    const result = {};
    const obj = memoizedGet(theme, key, {});
    for(const prop in obj){
        const isInStyles = prop in styles && styles[prop] != null;
        if (!isInStyles) result[prop] = obj[prop];
    }
    return result;
};
var others = {
    srOnly: {
        transform (value) {
            if (value === true) return srOnly;
            if (value === "focusable") return srFocusable;
            return {};
        }
    },
    layerStyle: {
        processResult: true,
        transform: (value, theme, styles)=>getWithPriority(theme, `layerStyles.${value}`, styles)
    },
    textStyle: {
        processResult: true,
        transform: (value, theme, styles)=>getWithPriority(theme, `textStyles.${value}`, styles)
    },
    apply: {
        processResult: true,
        transform: (value, theme, styles)=>getWithPriority(theme, value, styles)
    }
};
// src/config/position.ts
var position = {
    position: true,
    pos: t.prop("position"),
    zIndex: t.prop("zIndex", "zIndices"),
    inset: t.spaceT("inset"),
    insetX: t.spaceT([
        "left",
        "right"
    ]),
    insetInline: t.spaceT("insetInline"),
    insetY: t.spaceT([
        "top",
        "bottom"
    ]),
    insetBlock: t.spaceT("insetBlock"),
    top: t.spaceT("top"),
    insetBlockStart: t.spaceT("insetBlockStart"),
    bottom: t.spaceT("bottom"),
    insetBlockEnd: t.spaceT("insetBlockEnd"),
    left: t.spaceT("left"),
    insetInlineStart: t.logical({
        scale: "space",
        property: {
            ltr: "left",
            rtl: "right"
        }
    }),
    right: t.spaceT("right"),
    insetInlineEnd: t.logical({
        scale: "space",
        property: {
            ltr: "right",
            rtl: "left"
        }
    })
};
Object.assign(position, {
    insetStart: position.insetInlineStart,
    insetEnd: position.insetInlineEnd
});
// src/config/ring.ts
var ring = {
    ring: {
        transform: transformFunctions.ring
    },
    ringColor: t.colors("--chakra-ring-color"),
    ringOffset: t.prop("--chakra-ring-offset-width"),
    ringOffsetColor: t.colors("--chakra-ring-offset-color"),
    ringInset: t.prop("--chakra-ring-inset")
};
// src/config/space.ts
var space = {
    margin: t.spaceT("margin"),
    marginTop: t.spaceT("marginTop"),
    marginBlockStart: t.spaceT("marginBlockStart"),
    marginRight: t.spaceT("marginRight"),
    marginInlineEnd: t.spaceT("marginInlineEnd"),
    marginBottom: t.spaceT("marginBottom"),
    marginBlockEnd: t.spaceT("marginBlockEnd"),
    marginLeft: t.spaceT("marginLeft"),
    marginInlineStart: t.spaceT("marginInlineStart"),
    marginX: t.spaceT([
        "marginInlineStart",
        "marginInlineEnd"
    ]),
    marginInline: t.spaceT("marginInline"),
    marginY: t.spaceT([
        "marginTop",
        "marginBottom"
    ]),
    marginBlock: t.spaceT("marginBlock"),
    padding: t.space("padding"),
    paddingTop: t.space("paddingTop"),
    paddingBlockStart: t.space("paddingBlockStart"),
    paddingRight: t.space("paddingRight"),
    paddingBottom: t.space("paddingBottom"),
    paddingBlockEnd: t.space("paddingBlockEnd"),
    paddingLeft: t.space("paddingLeft"),
    paddingInlineStart: t.space("paddingInlineStart"),
    paddingInlineEnd: t.space("paddingInlineEnd"),
    paddingX: t.space([
        "paddingInlineStart",
        "paddingInlineEnd"
    ]),
    paddingInline: t.space("paddingInline"),
    paddingY: t.space([
        "paddingTop",
        "paddingBottom"
    ]),
    paddingBlock: t.space("paddingBlock")
};
Object.assign(space, {
    m: space.margin,
    mt: space.marginTop,
    mr: space.marginRight,
    me: space.marginInlineEnd,
    marginEnd: space.marginInlineEnd,
    mb: space.marginBottom,
    ml: space.marginLeft,
    ms: space.marginInlineStart,
    marginStart: space.marginInlineStart,
    mx: space.marginX,
    my: space.marginY,
    p: space.padding,
    pt: space.paddingTop,
    py: space.paddingY,
    px: space.paddingX,
    pb: space.paddingBottom,
    pl: space.paddingLeft,
    ps: space.paddingInlineStart,
    paddingStart: space.paddingInlineStart,
    pr: space.paddingRight,
    pe: space.paddingInlineEnd,
    paddingEnd: space.paddingInlineEnd
});
// src/config/text-decoration.ts
var textDecoration = {
    textDecorationColor: t.colors("textDecorationColor"),
    textDecoration: true,
    textDecor: {
        property: "textDecoration"
    },
    textDecorationLine: true,
    textDecorationStyle: true,
    textDecorationThickness: true,
    textUnderlineOffset: true,
    textShadow: t.shadows("textShadow")
};
// src/config/transform.ts
var transform = {
    clipPath: true,
    transform: t.propT("transform", transformFunctions.transform),
    transformOrigin: true,
    translateX: t.spaceT("--chakra-translate-x"),
    translateY: t.spaceT("--chakra-translate-y"),
    skewX: t.degreeT("--chakra-skew-x"),
    skewY: t.degreeT("--chakra-skew-y"),
    scaleX: t.prop("--chakra-scale-x"),
    scaleY: t.prop("--chakra-scale-y"),
    scale: t.prop([
        "--chakra-scale-x",
        "--chakra-scale-y"
    ]),
    rotate: t.degreeT("--chakra-rotate")
};
// src/config/transition.ts
var transition = {
    transition: true,
    transitionDelay: true,
    animation: true,
    willChange: true,
    transitionDuration: t.prop("transitionDuration", "transition.duration"),
    transitionProperty: t.prop("transitionProperty", "transition.property"),
    transitionTimingFunction: t.prop("transitionTimingFunction", "transition.easing")
};
// src/config/typography.ts
var typography = {
    fontFamily: t.prop("fontFamily", "fonts"),
    fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
    fontWeight: t.prop("fontWeight", "fontWeights"),
    lineHeight: t.prop("lineHeight", "lineHeights"),
    letterSpacing: t.prop("letterSpacing", "letterSpacings"),
    textAlign: true,
    fontStyle: true,
    textIndent: true,
    wordBreak: true,
    overflowWrap: true,
    textOverflow: true,
    textTransform: true,
    whiteSpace: true,
    isTruncated: {
        transform (value) {
            if (value === true) return {
                overflow: "hidden",
                textOverflow: "ellipsis",
                whiteSpace: "nowrap"
            };
        }
    },
    noOfLines: {
        static: {
            overflow: "hidden",
            textOverflow: "ellipsis",
            display: "-webkit-box",
            WebkitBoxOrient: "vertical",
            WebkitLineClamp: "var(--chakra-line-clamp)"
        },
        property: "--chakra-line-clamp"
    }
};
// src/config/scroll.ts
var scroll = {
    scrollBehavior: true,
    scrollSnapAlign: true,
    scrollSnapStop: true,
    scrollSnapType: true,
    scrollMargin: t.spaceT("scrollMargin"),
    scrollMarginTop: t.spaceT("scrollMarginTop"),
    scrollMarginBottom: t.spaceT("scrollMarginBottom"),
    scrollMarginLeft: t.spaceT("scrollMarginLeft"),
    scrollMarginRight: t.spaceT("scrollMarginRight"),
    scrollMarginX: t.spaceT([
        "scrollMarginLeft",
        "scrollMarginRight"
    ]),
    scrollMarginY: t.spaceT([
        "scrollMarginTop",
        "scrollMarginBottom"
    ]),
    scrollPadding: t.spaceT("scrollPadding"),
    scrollPaddingTop: t.spaceT("scrollPaddingTop"),
    scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
    scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
    scrollPaddingRight: t.spaceT("scrollPaddingRight"),
    scrollPaddingX: t.spaceT([
        "scrollPaddingLeft",
        "scrollPaddingRight"
    ]),
    scrollPaddingY: t.spaceT([
        "scrollPaddingTop",
        "scrollPaddingBottom"
    ])
};
function resolveReference(operand) {
    if ((0, _sharedUtils.isObject)(operand) && operand.reference) return operand.reference;
    return String(operand);
}
var toExpression = (operator, ...operands)=>operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
var add = (...operands)=>`calc(${toExpression("+", ...operands)})`;
var subtract = (...operands)=>`calc(${toExpression("-", ...operands)})`;
var multiply = (...operands)=>`calc(${toExpression("*", ...operands)})`;
var divide = (...operands)=>`calc(${toExpression("/", ...operands)})`;
var negate = (x)=>{
    const value = resolveReference(x);
    if (value != null && !Number.isNaN(parseFloat(value))) return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
    return multiply(value, -1);
};
var calc = Object.assign((x)=>({
        add: (...operands)=>calc(add(x, ...operands)),
        subtract: (...operands)=>calc(subtract(x, ...operands)),
        multiply: (...operands)=>calc(multiply(x, ...operands)),
        divide: (...operands)=>calc(divide(x, ...operands)),
        negate: ()=>calc(negate(x)),
        toString: ()=>x.toString()
    }), {
    add,
    subtract,
    multiply,
    divide,
    negate
});
// src/create-theme-vars/css-var.ts
function replaceWhiteSpace(value, replaceValue = "-") {
    return value.replace(/\s+/g, replaceValue);
}
function escape(value) {
    const valueStr = replaceWhiteSpace(value.toString());
    return escapeSymbol(escapeDot(valueStr));
}
function escapeDot(value) {
    if (value.includes("\\.")) return value;
    const isDecimal = !Number.isInteger(parseFloat(value.toString()));
    return isDecimal ? value.replace(".", `\\.`) : value;
}
function escapeSymbol(value) {
    return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
}
function addPrefix(value, prefix = "") {
    return [
        prefix,
        value
    ].filter(Boolean).join("-");
}
function toVarReference(name, fallback) {
    return `var(${name}${fallback ? `, ${fallback}` : ""})`;
}
function toVarDefinition(value, prefix = "") {
    return escape(`--${addPrefix(value, prefix)}`);
}
function cssVar(name, fallback, cssVarPrefix) {
    const cssVariable = toVarDefinition(name, cssVarPrefix);
    return {
        variable: cssVariable,
        reference: toVarReference(cssVariable, fallback)
    };
}
function defineCssVars(scope, keys2) {
    const vars = {};
    for (const key of keys2){
        if (Array.isArray(key)) {
            const [name, fallback] = key;
            vars[name] = cssVar(`${scope}-${name}`, fallback);
            continue;
        }
        vars[key] = cssVar(`${scope}-${key}`);
    }
    return vars;
}
function getLastItem(array) {
    const length = array == null ? 0 : array.length;
    return length ? array[length - 1] : void 0;
}
function analyzeCSSValue2(value) {
    const num = parseFloat(value.toString());
    const unit = value.toString().replace(String(num), "");
    return {
        unitless: !unit,
        value: num,
        unit
    };
}
function px(value) {
    if (value == null) return value;
    const { unitless } = analyzeCSSValue2(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
}
var sortByBreakpointValue = (a, b)=>parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;
var sortBps = (breakpoints)=>Object.fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));
function normalize(breakpoints) {
    const sorted = sortBps(breakpoints);
    return Object.assign(Object.values(sorted), sorted);
}
function keys(breakpoints) {
    const value = Object.keys(sortBps(breakpoints));
    return new Set(value);
}
function subtract2(value) {
    var _a;
    if (!value) return value;
    value = (_a = px(value)) != null ? _a : value;
    const OFFSET = -0.02;
    return typeof value === "number" ? `${value + OFFSET}` : value.replace(/(\d+\.?\d*)/u, (m)=>`${parseFloat(m) + OFFSET}`);
}
function toMediaQueryString(min, max) {
    const query = [
        "@media screen"
    ];
    if (min) query.push("and", `(min-width: ${px(min)})`);
    if (max) query.push("and", `(max-width: ${px(max)})`);
    return query.join(" ");
}
function analyzeBreakpoints(breakpoints) {
    var _a;
    if (!breakpoints) return null;
    breakpoints.base = (_a = breakpoints.base) != null ? _a : "0px";
    const normalized = normalize(breakpoints);
    const queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry)=>{
        var _a2;
        let [, maxW] = (_a2 = entry[index + 1]) != null ? _a2 : [];
        maxW = parseFloat(maxW) > 0 ? subtract2(maxW) : void 0;
        return {
            _minW: subtract2(minW),
            breakpoint,
            minW,
            maxW,
            maxWQuery: toMediaQueryString(null, maxW),
            minWQuery: toMediaQueryString(minW),
            minMaxQuery: toMediaQueryString(minW, maxW)
        };
    });
    const _keys = keys(breakpoints);
    const _keysArr = Array.from(_keys.values());
    return {
        keys: _keys,
        normalized,
        isResponsive (test) {
            const keys2 = Object.keys(test);
            return keys2.length > 0 && keys2.every((key)=>_keys.has(key));
        },
        asObject: sortBps(breakpoints),
        asArray: normalize(breakpoints),
        details: queries,
        get (key) {
            return queries.find((q)=>q.breakpoint === key);
        },
        media: [
            null,
            ...normalized.map((minW)=>toMediaQueryString(minW)).slice(1)
        ],
        toArrayValue (test) {
            if (!(0, _sharedUtils.isObject)(test)) throw new Error("toArrayValue: value must be an object");
            const result = _keysArr.map((bp)=>{
                var _a2;
                return (_a2 = test[bp]) != null ? _a2 : null;
            });
            while(getLastItem(result) === null)result.pop();
            return result;
        },
        toObjectValue (test) {
            if (!Array.isArray(test)) throw new Error("toObjectValue: value must be an array");
            return test.reduce((acc, value, index)=>{
                const key = _keysArr[index];
                if (key != null && value != null) acc[key] = value;
                return acc;
            }, {});
        }
    };
}
// src/pseudos.ts
var state = {
    hover: (str, post)=>`${str}:hover ${post}, ${str}[data-hover] ${post}`,
    focus: (str, post)=>`${str}:focus ${post}, ${str}[data-focus] ${post}`,
    focusVisible: (str, post)=>`${str}:focus-visible ${post}`,
    focusWithin: (str, post)=>`${str}:focus-within ${post}`,
    active: (str, post)=>`${str}:active ${post}, ${str}[data-active] ${post}`,
    disabled: (str, post)=>`${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
    invalid: (str, post)=>`${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
    checked: (str, post)=>`${str}:checked ${post}, ${str}[data-checked] ${post}`,
    indeterminate: (str, post)=>`${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
    readOnly: (str, post)=>`${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
    expanded: (str, post)=>`${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
    placeholderShown: (str, post)=>`${str}:placeholder-shown ${post}`
};
var toGroup = (fn)=>merge((v)=>fn(v, "&"), "[role=group]", "[data-group]", ".group");
var toPeer = (fn)=>merge((v)=>fn(v, "~ &"), "[data-peer]", ".peer");
var merge = (fn, ...selectors)=>selectors.map(fn).join(", ");
var pseudoSelectors = {
    _hover: "&:hover, &[data-hover]",
    _active: "&:active, &[data-active]",
    _focus: "&:focus, &[data-focus]",
    _highlighted: "&[data-highlighted]",
    _focusWithin: "&:focus-within",
    _focusVisible: "&:focus-visible, &[data-focus-visible]",
    _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
    _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
    _before: "&::before",
    _after: "&::after",
    _empty: "&:empty",
    _expanded: "&[aria-expanded=true], &[data-expanded]",
    _checked: "&[aria-checked=true], &[data-checked]",
    _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
    _pressed: "&[aria-pressed=true], &[data-pressed]",
    _invalid: "&[aria-invalid=true], &[data-invalid]",
    _valid: "&[data-valid], &[data-state=valid]",
    _loading: "&[data-loading], &[aria-busy=true]",
    _selected: "&[aria-selected=true], &[data-selected]",
    _hidden: "&[hidden], &[data-hidden]",
    _autofill: "&:-webkit-autofill",
    _even: "&:nth-of-type(even)",
    _odd: "&:nth-of-type(odd)",
    _first: "&:first-of-type",
    _firstLetter: "&::first-letter",
    _last: "&:last-of-type",
    _notFirst: "&:not(:first-of-type)",
    _notLast: "&:not(:last-of-type)",
    _visited: "&:visited",
    _activeLink: "&[aria-current=page]",
    _activeStep: "&[aria-current=step]",
    _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
    _groupHover: toGroup(state.hover),
    _peerHover: toPeer(state.hover),
    _groupFocus: toGroup(state.focus),
    _peerFocus: toPeer(state.focus),
    _groupFocusVisible: toGroup(state.focusVisible),
    _peerFocusVisible: toPeer(state.focusVisible),
    _groupActive: toGroup(state.active),
    _peerActive: toPeer(state.active),
    _groupDisabled: toGroup(state.disabled),
    _peerDisabled: toPeer(state.disabled),
    _groupInvalid: toGroup(state.invalid),
    _peerInvalid: toPeer(state.invalid),
    _groupChecked: toGroup(state.checked),
    _peerChecked: toPeer(state.checked),
    _groupFocusWithin: toGroup(state.focusWithin),
    _peerFocusWithin: toPeer(state.focusWithin),
    _peerPlaceholderShown: toPeer(state.placeholderShown),
    _placeholder: "&::placeholder",
    _placeholderShown: "&:placeholder-shown",
    _fullScreen: "&:fullscreen",
    _selection: "&::selection",
    _rtl: "[dir=rtl] &, &[dir=rtl]",
    _ltr: "[dir=ltr] &, &[dir=ltr]",
    _mediaDark: "@media (prefers-color-scheme: dark)",
    _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
    _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
    _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]",
    _horizontal: "&[data-orientation=horizontal]",
    _vertical: "&[data-orientation=vertical]"
};
var pseudoPropNames = Object.keys(pseudoSelectors);
function tokenToCssVar(token, prefix) {
    return cssVar(String(token).replace(/\./g, "-"), void 0, prefix);
}
function createThemeVars(flatTokens, options) {
    let cssVars = {};
    const cssMap = {};
    for (const [token, tokenValue] of Object.entries(flatTokens)){
        const { isSemantic, value } = tokenValue;
        const { variable, reference } = tokenToCssVar(token, options == null ? void 0 : options.cssVarPrefix);
        if (!isSemantic) {
            if (token.startsWith("space")) {
                const keys2 = token.split(".");
                const [firstKey, ...referenceKeys] = keys2;
                const negativeLookupKey = `${firstKey}.-${referenceKeys.join(".")}`;
                const negativeValue = calc.negate(value);
                const negatedReference = calc.negate(reference);
                cssMap[negativeLookupKey] = {
                    value: negativeValue,
                    var: variable,
                    varRef: negatedReference
                };
            }
            cssVars[variable] = value;
            cssMap[token] = {
                value,
                var: variable,
                varRef: reference
            };
            continue;
        }
        const lookupToken = (maybeToken)=>{
            const scale = String(token).split(".")[0];
            const withScale = [
                scale,
                maybeToken
            ].join(".");
            const resolvedTokenValue = flatTokens[withScale];
            if (!resolvedTokenValue) return maybeToken;
            const { reference: reference2 } = tokenToCssVar(withScale, options == null ? void 0 : options.cssVarPrefix);
            return reference2;
        };
        const normalizedValue = (0, _sharedUtils.isObject)(value) ? value : {
            default: value
        };
        cssVars = (0, _lodashMergewithDefault.default)(cssVars, Object.entries(normalizedValue).reduce((acc, [conditionAlias, conditionValue])=>{
            var _a, _b;
            if (!conditionValue) return acc;
            const tokenReference = lookupToken(`${conditionValue}`);
            if (conditionAlias === "default") {
                acc[variable] = tokenReference;
                return acc;
            }
            const conditionSelector = (_b = (_a = pseudoSelectors) == null ? void 0 : _a[conditionAlias]) != null ? _b : conditionAlias;
            acc[conditionSelector] = {
                [variable]: tokenReference
            };
            return acc;
        }, {}));
        cssMap[token] = {
            value: reference,
            var: variable,
            varRef: reference
        };
    }
    return {
        cssVars,
        cssMap
    };
}
// ../../utilities/object-utils/src/omit.ts
function omit(object, keysToOmit = []) {
    const clone = Object.assign({}, object);
    for (const key of keysToOmit)if (key in clone) delete clone[key];
    return clone;
}
// ../../utilities/object-utils/src/pick.ts
function pick(object, keysToPick) {
    const result = {};
    for (const key of keysToPick)if (key in object) result[key] = object[key];
    return result;
}
// ../../utilities/object-utils/src/walk-object.ts
function isObject5(value) {
    return typeof value === "object" && value != null && !Array.isArray(value);
}
function walkObject(target, predicate, options = {}) {
    const { stop, getKey } = options;
    function inner(value, path = []) {
        var _a;
        if (isObject5(value) || Array.isArray(value)) {
            const result = {};
            for (const [prop, child] of Object.entries(value)){
                const key = (_a = getKey == null ? void 0 : getKey(prop)) != null ? _a : prop;
                const childPath = [
                    ...path,
                    key
                ];
                if (stop == null ? void 0 : stop(value, childPath)) return predicate(value, path);
                result[key] = inner(child, childPath);
            }
            return result;
        }
        return predicate(value, path);
    }
    return inner(target);
}
// src/create-theme-vars/theme-tokens.ts
var tokens = [
    "colors",
    "borders",
    "borderWidths",
    "borderStyles",
    "fonts",
    "fontSizes",
    "fontWeights",
    "gradients",
    "letterSpacings",
    "lineHeights",
    "radii",
    "space",
    "shadows",
    "sizes",
    "zIndices",
    "transition",
    "blur",
    "breakpoints"
];
function extractTokens(theme) {
    const _tokens = tokens;
    return pick(theme, _tokens);
}
function extractSemanticTokens(theme) {
    return theme.semanticTokens;
}
function omitVars(rawTheme) {
    const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme;
    return cleanTheme;
}
// src/create-theme-vars/flatten-tokens.ts
var isSemanticCondition = (key)=>pseudoPropNames.includes(key) || "default" === key;
function flattenTokens({ tokens: tokens2, semanticTokens }) {
    const result = {};
    walkObject(tokens2, (value, path)=>{
        if (value == null) return;
        result[path.join(".")] = {
            isSemantic: false,
            value
        };
    });
    walkObject(semanticTokens, (value, path)=>{
        if (value == null) return;
        result[path.join(".")] = {
            isSemantic: true,
            value
        };
    }, {
        stop: (value)=>Object.keys(value).every(isSemanticCondition)
    });
    return result;
}
// src/create-theme-vars/to-css-var.ts
function toCSSVar(rawTheme) {
    var _a;
    const theme = omitVars(rawTheme);
    const tokens2 = extractTokens(theme);
    const semanticTokens = extractSemanticTokens(theme);
    const flatTokens = flattenTokens({
        tokens: tokens2,
        semanticTokens
    });
    const cssVarPrefix = (_a = theme.config) == null ? void 0 : _a.cssVarPrefix;
    const { cssMap, cssVars } = createThemeVars(flatTokens, {
        cssVarPrefix
    });
    const defaultCssVars = {
        "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
        "--chakra-ring-offset-width": "0px",
        "--chakra-ring-offset-color": "#fff",
        "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
        "--chakra-ring-offset-shadow": "0 0 #0000",
        "--chakra-ring-shadow": "0 0 #0000",
        "--chakra-space-x-reverse": "0",
        "--chakra-space-y-reverse": "0"
    };
    Object.assign(theme, {
        __cssVars: {
            ...defaultCssVars,
            ...cssVars
        },
        __cssMap: cssMap,
        __breakpoints: analyzeBreakpoints(theme.breakpoints)
    });
    return theme;
}
var systemProps = (0, _lodashMergewithDefault.default)({}, background, border, color, flexbox, layout, filter, ring, interactivity, grid, others, position, effect, space, scroll, typography, textDecoration, transform, list, transition);
var layoutSystem = Object.assign({}, space, layout, flexbox, grid, position);
var layoutPropNames = Object.keys(layoutSystem);
var propNames = [
    ...Object.keys(systemProps),
    ...pseudoPropNames
];
var styleProps = {
    ...systemProps,
    ...pseudoSelectors
};
var isStyleProp = (prop)=>prop in styleProps;
var expandResponsive = (styles)=>(theme)=>{
        if (!theme.__breakpoints) return styles;
        const { isResponsive, toArrayValue, media: medias } = theme.__breakpoints;
        const computedStyles = {};
        for(const key in styles){
            let value = (0, _sharedUtils.runIfFn)(styles[key], theme);
            if (value == null) continue;
            value = (0, _sharedUtils.isObject)(value) && isResponsive(value) ? toArrayValue(value) : value;
            if (!Array.isArray(value)) {
                computedStyles[key] = value;
                continue;
            }
            const queries = value.slice(0, medias.length).length;
            for(let index = 0; index < queries; index += 1){
                const media = medias == null ? void 0 : medias[index];
                if (!media) {
                    computedStyles[key] = value[index];
                    continue;
                }
                computedStyles[media] = computedStyles[media] || {};
                if (value[index] == null) continue;
                computedStyles[media][key] = value[index];
            }
        }
        return computedStyles;
    };
// src/utils/split-by-comma.ts
function splitByComma(value) {
    const chunks = [];
    let chunk = "";
    let inParens = false;
    for(let i = 0; i < value.length; i++){
        const char = value[i];
        if (char === "(") {
            inParens = true;
            chunk += char;
        } else if (char === ")") {
            inParens = false;
            chunk += char;
        } else if (char === "," && !inParens) {
            chunks.push(chunk);
            chunk = "";
        } else chunk += char;
    }
    chunk = chunk.trim();
    if (chunk) chunks.push(chunk);
    return chunks;
}
// src/css.ts
function isCssVar2(value) {
    return /^var\(--.+\)$/.test(value);
}
var isCSSVariableTokenValue = (key, value)=>key.startsWith("--") && typeof value === "string" && !isCssVar2(value);
var resolveTokenValue = (theme, value)=>{
    var _a, _b;
    if (value == null) return value;
    const getVar = (val)=>{
        var _a2, _b2;
        return (_b2 = (_a2 = theme.__cssMap) == null ? void 0 : _a2[val]) == null ? void 0 : _b2.varRef;
    };
    const getValue = (val)=>{
        var _a2;
        return (_a2 = getVar(val)) != null ? _a2 : val;
    };
    const [tokenValue, fallbackValue] = splitByComma(value);
    value = (_b = (_a = getVar(tokenValue)) != null ? _a : getValue(fallbackValue)) != null ? _b : getValue(value);
    return value;
};
function getCss(options) {
    const { configs = {}, pseudos = {}, theme } = options;
    const css2 = (stylesOrFn, nested = false)=>{
        var _a, _b, _c;
        const _styles = (0, _sharedUtils.runIfFn)(stylesOrFn, theme);
        const styles = expandResponsive(_styles)(theme);
        let computedStyles = {};
        for(let key in styles){
            const valueOrFn = styles[key];
            let value = (0, _sharedUtils.runIfFn)(valueOrFn, theme);
            if (key in pseudos) key = pseudos[key];
            if (isCSSVariableTokenValue(key, value)) value = resolveTokenValue(theme, value);
            let config = configs[key];
            if (config === true) config = {
                property: key
            };
            if ((0, _sharedUtils.isObject)(value)) {
                computedStyles[key] = (_a = computedStyles[key]) != null ? _a : {};
                computedStyles[key] = (0, _lodashMergewithDefault.default)({}, computedStyles[key], css2(value, true));
                continue;
            }
            let rawValue = (_c = (_b = config == null ? void 0 : config.transform) == null ? void 0 : _b.call(config, value, theme, _styles)) != null ? _c : value;
            rawValue = (config == null ? void 0 : config.processResult) ? css2(rawValue, true) : rawValue;
            const configProperty = (0, _sharedUtils.runIfFn)(config == null ? void 0 : config.property, theme);
            if (!nested && (config == null ? void 0 : config.static)) {
                const staticStyles = (0, _sharedUtils.runIfFn)(config.static, theme);
                computedStyles = (0, _lodashMergewithDefault.default)({}, computedStyles, staticStyles);
            }
            if (configProperty && Array.isArray(configProperty)) {
                for (const property of configProperty)computedStyles[property] = rawValue;
                continue;
            }
            if (configProperty) {
                if (configProperty === "&" && (0, _sharedUtils.isObject)(rawValue)) computedStyles = (0, _lodashMergewithDefault.default)({}, computedStyles, rawValue);
                else computedStyles[configProperty] = rawValue;
                continue;
            }
            if ((0, _sharedUtils.isObject)(rawValue)) {
                computedStyles = (0, _lodashMergewithDefault.default)({}, computedStyles, rawValue);
                continue;
            }
            computedStyles[key] = rawValue;
        }
        return computedStyles;
    };
    return css2;
}
var css = (styles)=>(theme)=>{
        const cssFn = getCss({
            theme,
            pseudos: pseudoSelectors,
            configs: systemProps
        });
        return cssFn(styles);
    };
// src/define-styles.ts
function defineStyle(styles) {
    return styles;
}
function defineStyleConfig(config) {
    return config;
}
function createMultiStyleConfigHelpers(parts) {
    return {
        definePartsStyle (config) {
            return config;
        },
        defineMultiStyleConfig (config) {
            return {
                parts,
                ...config
            };
        }
    };
}
function normalize2(value, toArray) {
    if (Array.isArray(value)) return value;
    if ((0, _sharedUtils.isObject)(value)) return toArray(value);
    if (value != null) return [
        value
    ];
}
function getNextIndex(values, i) {
    for(let j = i + 1; j < values.length; j++){
        if (values[j] != null) return j;
    }
    return -1;
}
function createResolver(theme) {
    const breakpointUtil = theme.__breakpoints;
    return function resolver(config, prop, value, props) {
        var _a, _b;
        if (!breakpointUtil) return;
        const result = {};
        const normalized = normalize2(value, breakpointUtil.toArrayValue);
        if (!normalized) return result;
        const len = normalized.length;
        const isSingle = len === 1;
        const isMultipart = !!config.parts;
        for(let i = 0; i < len; i++){
            const key = breakpointUtil.details[i];
            const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];
            const query = toMediaQueryString(key.minW, nextKey == null ? void 0 : nextKey._minW);
            const styles = (0, _sharedUtils.runIfFn)((_a = config[prop]) == null ? void 0 : _a[normalized[i]], props);
            if (!styles) continue;
            if (isMultipart) {
                (_b = config.parts) == null || _b.forEach((part)=>{
                    (0, _lodashMergewithDefault.default)(result, {
                        [part]: isSingle ? styles[part] : {
                            [query]: styles[part]
                        }
                    });
                });
                continue;
            }
            if (!isMultipart) {
                if (isSingle) (0, _lodashMergewithDefault.default)(result, styles);
                else result[query] = styles;
                continue;
            }
            result[query] = styles;
        }
        return result;
    };
}
function resolveStyleConfig(config) {
    return (props)=>{
        var _a;
        const { variant, size, theme } = props;
        const recipe = createResolver(theme);
        return (0, _lodashMergewithDefault.default)({}, (0, _sharedUtils.runIfFn)((_a = config.baseStyle) != null ? _a : {}, props), recipe(config, "sizes", size, props), recipe(config, "variants", variant, props));
    };
}
// src/get-css-var.ts
function getCSSVar(theme, scale, value) {
    var _a, _b, _c;
    return (_c = (_b = (_a = theme.__cssMap) == null ? void 0 : _a[`${scale}.${value}`]) == null ? void 0 : _b.varRef) != null ? _c : value;
}
// src/theming-props.ts
function omitThemingProps(props) {
    return omit(props, [
        "styleConfig",
        "size",
        "variant",
        "colorScheme"
    ]);
}

},{"@chakra-ui/shared-utils":"h33Zu","lodash.mergewith":"XBPGM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h33Zu":[function(require,module,exports) {
// src/index.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ariaAttr", ()=>ariaAttr);
parcelHelpers.export(exports, "callAll", ()=>callAll);
parcelHelpers.export(exports, "callAllHandlers", ()=>callAllHandlers);
parcelHelpers.export(exports, "cx", ()=>cx);
parcelHelpers.export(exports, "dataAttr", ()=>dataAttr);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "runIfFn", ()=>runIfFn);
parcelHelpers.export(exports, "warn", ()=>warn);
var cx = (...classNames)=>classNames.filter(Boolean).join(" ");
function isDev() {
    return true;
}
function isObject(value) {
    const type = typeof value;
    return value != null && (type === "object" || type === "function") && !Array.isArray(value);
}
var warn = (options)=>{
    const { condition, message } = options;
    if (condition && isDev()) console.warn(message);
};
function runIfFn(valueOrFn, ...args) {
    return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
var isFunction = (value)=>typeof value === "function";
var dataAttr = (condition)=>condition ? "" : void 0;
var ariaAttr = (condition)=>condition ? true : void 0;
function callAllHandlers(...fns) {
    return function func(event) {
        fns.some((fn)=>{
            fn == null || fn(event);
            return event == null ? void 0 : event.defaultPrevented;
        });
    };
}
function callAll(...fns) {
    return function mergedFn(arg) {
        fns.forEach((fn)=>{
            fn == null || fn(arg);
        });
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"XBPGM":[function(require,module,exports) {
/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as the size to enable large array optimizations. */ var global = arguments[3];
var LARGE_ARRAY_SIZE = 200;
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
/** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
/** Detect free variable `self`. */ var freeSelf = typeof self == "object" && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function("return this")();
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {}
}();
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */ function apply(func, thisArg, args) {
    switch(args.length){
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
}
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
/** Used for built-in method references. */ var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to detect overreaching core-js shims. */ var coreJsData = root["__core-js_shared__"];
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
}();
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
/** Used to detect if a method is native. */ var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, Symbol = root.Symbol, Uint8Array = root.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
var defineProperty = function() {
    try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
    } catch (e) {}
}();
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeMax = Math.max, nativeNow = Date.now;
/* Built-in method references that are verified to be native. */ var Map = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */ var baseCreate = function() {
    function object() {}
    return function(proto) {
        if (!isObject(proto)) return {};
        if (objectCreate) return objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
}
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype["delete"] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype["delete"] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        "hash": new Hash,
        "map": new (Map || ListCache),
        "string": new Hash
    };
}
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
}
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype["delete"] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
}
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype["delete"] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex(key, length)))) result.push(key);
    return result;
}
/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) return length;
    }
    return -1;
}
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty) defineProperty(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
    });
    else object[key] = value;
}
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */ var baseFor = createBaseFor();
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeysIn(object) {
    if (!isObject(object)) return nativeKeysIn(object);
    var isProto = isPrototype(object), result = [];
    for(var key in object)if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) return;
    baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
            if (newValue === undefined) newValue = srcValue;
            assignMergeValue(object, key, newValue);
        }
    }, keysIn);
}
/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) newValue = objValue;
            else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
            else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
            } else newValue = [];
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) newValue = toPlainObject(objValue);
            else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
        } else isCommon = false;
    }
    if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
    }
    assignMergeValue(object, key, newValue);
}
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */ function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
}
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
    });
};
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */ function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */ function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
}
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */ function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */ function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while(++index < length)array[index] = source[index];
    return array;
}
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */ function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while(++index < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) baseAssignValue(object, key, newValue);
        else assignValue(object, key, newValue);
    }
    return object;
}
/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */ function createAssigner(assigner) {
    return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
        }
        object = Object(object);
        while(++index < length){
            var source = sources[index];
            if (source) assigner(object, source, index, customizer);
        }
        return object;
    });
}
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while(length--){
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) break;
        }
        return object;
    };
}
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */ function isIterateeCall(value, index, object) {
    if (!isObject(object)) return false;
    var type = typeof index;
    if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) return eq(object[index], value);
    return false;
}
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
}
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */ function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while(++index < length)array[index] = args[start + index];
        index = -1;
        var otherArgs = Array(start + 1);
        while(++index < start)otherArgs[index] = args[index];
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
    };
}
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function safeGet(object, key) {
    if (key === "constructor" && typeof object[key] === "function") return;
    if (key == "__proto__") return;
    return object[key];
}
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var setToString = shortOut(baseSetToString);
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */ function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
            if (++count >= HOT_COUNT) return arguments[0];
        } else count = 0;
        return func.apply(undefined, arguments);
    };
}
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {}
        try {
            return func + "";
        } catch (e) {}
    }
    return "";
}
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */ function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == "object";
}
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
    var proto = getPrototype(value);
    if (proto === null) return true;
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */ function toPlainObject(value) {
    return copyObject(value, keysIn(value));
}
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
});
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */ function constant(value) {
    return function() {
        return value;
    };
}
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */ function identity(value) {
    return value;
}
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = mergeWith;

},{}],"3tJTX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extendBaseTheme", ()=>(0, _chunkLIR5QAZYMjs.extendBaseTheme));
parcelHelpers.export(exports, "extendTheme", ()=>(0, _chunkLIR5QAZYMjs.extendTheme));
parcelHelpers.export(exports, "mergeThemeOverride", ()=>(0, _chunkLIR5QAZYMjs.mergeThemeOverride));
parcelHelpers.export(exports, "withDefaultColorScheme", ()=>(0, _chunk7FV6Z5GWMjs.withDefaultColorScheme));
parcelHelpers.export(exports, "withDefaultProps", ()=>(0, _chunkPE3QADR6Mjs.withDefaultProps));
parcelHelpers.export(exports, "withDefaultSize", ()=>(0, _chunk5IM46G4HMjs.withDefaultSize));
parcelHelpers.export(exports, "withDefaultVariant", ()=>(0, _chunk5UFXUR4JMjs.withDefaultVariant));
var _chunkSUJGGKVTMjs = require("./chunk-SUJGGKVT.mjs");
var _chunkPE3QADR6Mjs = require("./chunk-PE3QADR6.mjs");
var _chunk7FV6Z5GWMjs = require("./chunk-7FV6Z5GW.mjs");
var _chunk5IM46G4HMjs = require("./chunk-5IM46G4H.mjs");
var _chunk5UFXUR4JMjs = require("./chunk-5UFXUR4J.mjs");
var _chunkLIR5QAZYMjs = require("./chunk-LIR5QAZY.mjs");

},{"./chunk-SUJGGKVT.mjs":"gFz33","./chunk-PE3QADR6.mjs":"aucGI","./chunk-7FV6Z5GW.mjs":"bTQhe","./chunk-5IM46G4H.mjs":"jpv8Y","./chunk-5UFXUR4J.mjs":"lmt5Z","./chunk-LIR5QAZY.mjs":"jSln8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gFz33":[function(require,module,exports) {

},{}],"aucGI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "withDefaultProps", ()=>withDefaultProps);
var _chunk7FV6Z5GWMjs = require("./chunk-7FV6Z5GW.mjs");
var _chunk5IM46G4HMjs = require("./chunk-5IM46G4H.mjs");
var _chunk5UFXUR4JMjs = require("./chunk-5UFXUR4J.mjs");
var _chunkLIR5QAZYMjs = require("./chunk-LIR5QAZY.mjs");
// src/theme-extensions/with-default-props.ts
function pipe(...fns) {
    return (v)=>fns.reduce((a, b)=>b(a), v);
}
function withDefaultProps({ defaultProps: { colorScheme, variant, size }, components }) {
    const identity = (t)=>t;
    const fns = [
        colorScheme ? (0, _chunk7FV6Z5GWMjs.withDefaultColorScheme)({
            colorScheme,
            components
        }) : identity,
        size ? (0, _chunk5IM46G4HMjs.withDefaultSize)({
            size,
            components
        }) : identity,
        variant ? (0, _chunk5UFXUR4JMjs.withDefaultVariant)({
            variant,
            components
        }) : identity
    ];
    return (theme)=>(0, _chunkLIR5QAZYMjs.mergeThemeOverride)(pipe(...fns)(theme));
}

},{"./chunk-7FV6Z5GW.mjs":"bTQhe","./chunk-5IM46G4H.mjs":"jpv8Y","./chunk-5UFXUR4J.mjs":"lmt5Z","./chunk-LIR5QAZY.mjs":"jSln8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bTQhe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "withDefaultColorScheme", ()=>withDefaultColorScheme);
var _chunkLIR5QAZYMjs = require("./chunk-LIR5QAZY.mjs");
// src/theme-extensions/with-default-color-scheme.ts
var _sharedUtils = require("@chakra-ui/shared-utils");
function withDefaultColorScheme({ colorScheme, components }) {
    return (theme)=>{
        let names = Object.keys(theme.components || {});
        if (Array.isArray(components)) names = components;
        else if ((0, _sharedUtils.isObject)(components)) names = Object.keys(components);
        return (0, _chunkLIR5QAZYMjs.mergeThemeOverride)(theme, {
            components: Object.fromEntries(names.map((componentName)=>{
                const withColorScheme = {
                    defaultProps: {
                        colorScheme
                    }
                };
                return [
                    componentName,
                    withColorScheme
                ];
            }))
        });
    };
}

},{"./chunk-LIR5QAZY.mjs":"jSln8","@chakra-ui/shared-utils":"h33Zu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jSln8":[function(require,module,exports) {
// src/extend-theme.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extendTheme", ()=>extendTheme);
parcelHelpers.export(exports, "extendBaseTheme", ()=>extendBaseTheme);
parcelHelpers.export(exports, "mergeThemeOverride", ()=>mergeThemeOverride);
var _theme = require("@chakra-ui/theme");
var _lodashMergewith = require("lodash.mergewith");
var _lodashMergewithDefault = parcelHelpers.interopDefault(_lodashMergewith);
function isFunction(value) {
    return typeof value === "function";
}
function pipe(...fns) {
    return (v)=>fns.reduce((a, b)=>b(a), v);
}
var createExtendTheme = (theme2)=>{
    return function extendTheme2(...extensions) {
        let overrides = [
            ...extensions
        ];
        let activeTheme = extensions[extensions.length - 1];
        if ((0, _theme.isChakraTheme)(activeTheme) && // this ensures backward compatibility
        // previously only `extendTheme(override, activeTheme?)` was allowed
        overrides.length > 1) overrides = overrides.slice(0, overrides.length - 1);
        else activeTheme = theme2;
        return pipe(...overrides.map((extension)=>(prevTheme)=>isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)))(activeTheme);
    };
};
var extendTheme = createExtendTheme((0, _theme.theme));
var extendBaseTheme = createExtendTheme((0, _theme.baseTheme));
function mergeThemeOverride(...overrides) {
    return (0, _lodashMergewithDefault.default)({}, ...overrides, mergeThemeCustomizer);
}
function mergeThemeCustomizer(source, override, key, object) {
    if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) return (...args)=>{
        const sourceValue = isFunction(source) ? source(...args) : source;
        const overrideValue = isFunction(override) ? override(...args) : override;
        return (0, _lodashMergewithDefault.default)({}, sourceValue, overrideValue, mergeThemeCustomizer);
    };
    return void 0;
}

},{"@chakra-ui/theme":"b2xd8","lodash.mergewith":"XBPGM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b2xd8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "baseTheme", ()=>baseTheme);
parcelHelpers.export(exports, "isChakraTheme", ()=>(0, _chunkP56GPN75Mjs.isChakraTheme));
parcelHelpers.export(exports, "requiredChakraThemeKeys", ()=>(0, _chunkP56GPN75Mjs.requiredChakraThemeKeys));
parcelHelpers.export(exports, "theme", ()=>theme);
var _chunkP56GPN75Mjs = require("./chunk-P56GPN75.mjs");
var _chunk3WO5B3NBMjs = require("./chunk-3WO5B3NB.mjs");
var _chunkSIH73G3HMjs = require("./chunk-SIH73G3H.mjs");
var _chunk45VJLTILMjs = require("./chunk-45VJLTIL.mjs");
var _chunkB75T2J64Mjs = require("./chunk-B75T2J64.mjs");
var _chunkTXLFBUTFMjs = require("./chunk-TXLFBUTF.mjs");
var _chunkE47HH2QSMjs = require("./chunk-E47HH2QS.mjs");
var _chunkVIVTPWHPMjs = require("./chunk-VIVTPWHP.mjs");
var _chunkIZUFFCXSMjs = require("./chunk-IZUFFCXS.mjs");
var _chunkHQ6WXDYVMjs = require("./chunk-HQ6WXDYV.mjs");
var _chunkV74GDSYYMjs = require("./chunk-V74GDSYY.mjs");
var _chunkQ5NOVGYNMjs = require("./chunk-Q5NOVGYN.mjs");
var _chunkSG67NFYSMjs = require("./chunk-SG67NFYS.mjs");
var _chunkQWN3S45WMjs = require("./chunk-QWN3S45W.mjs");
var _chunkGYISOX2EMjs = require("./chunk-GYISOX2E.mjs");
var _chunk7RVLYCMRMjs = require("./chunk-7RVLYCMR.mjs");
var _chunkKJ26FGJDMjs = require("./chunk-KJ26FGJD.mjs");
var _chunkR7ZISUMVMjs = require("./chunk-R7ZISUMV.mjs");
var _chunk37MNRBP2Mjs = require("./chunk-37MNRBP2.mjs");
var _chunkVZUATZ4EMjs = require("./chunk-VZUATZ4E.mjs");
var _chunkNNA4E64AMjs = require("./chunk-NNA4E64A.mjs");
var _chunkX6XFE4TFMjs = require("./chunk-X6XFE4TF.mjs");
var _chunkZREGO6USMjs = require("./chunk-ZREGO6US.mjs");
var _chunk5FA7Y3RPMjs = require("./chunk-5FA7Y3RP.mjs");
var _chunkL3YAB6CVMjs = require("./chunk-L3YAB6CV.mjs");
var _chunk2KWJXISXMjs = require("./chunk-2KWJXISX.mjs");
var _chunkAFCBUAM5Mjs = require("./chunk-AFCBUAM5.mjs");
var _chunkV5KSHSOQMjs = require("./chunk-V5KSHSOQ.mjs");
var _chunkMGNM2WZQMjs = require("./chunk-MGNM2WZQ.mjs");
var _chunkN2GP2AF7Mjs = require("./chunk-N2GP2AF7.mjs");
var _chunkJN6QBAR6Mjs = require("./chunk-JN6QBAR6.mjs");
var _chunk57T4IAPWMjs = require("./chunk-57T4IAPW.mjs");
var _chunk6XA2KDUDMjs = require("./chunk-6XA2KDUD.mjs");
var _chunkOEFJDLVSMjs = require("./chunk-OEFJDLVS.mjs");
var _chunkU3INMHUOMjs = require("./chunk-U3INMHUO.mjs");
var _chunkVWP3ZVQTMjs = require("./chunk-VWP3ZVQT.mjs");
var _chunkD6DZ26HAMjs = require("./chunk-D6DZ26HA.mjs");
var _chunkO6GGGS4YMjs = require("./chunk-O6GGGS4Y.mjs");
var _chunkSRBDDT7FMjs = require("./chunk-SRBDDT7F.mjs");
var _chunkVHM7WLW6Mjs = require("./chunk-VHM7WLW6.mjs");
var _chunkWXARPSDQMjs = require("./chunk-WXARPSDQ.mjs");
var _chunkICL3HPTTMjs = require("./chunk-ICL3HPTT.mjs");
var _chunkFU5DDBRCMjs = require("./chunk-FU5DDBRC.mjs");
var _chunkMBVM6PEKMjs = require("./chunk-MBVM6PEK.mjs");
var _chunkF7CKIHPMMjs = require("./chunk-F7CKIHPM.mjs");
var _chunkXHYVH6UOMjs = require("./chunk-XHYVH6UO.mjs");
var _chunkOB7MMEC3Mjs = require("./chunk-OB7MMEC3.mjs");
var _chunkK3RH7Y2LMjs = require("./chunk-K3RH7Y2L.mjs");
var _chunkTECE6HDRMjs = require("./chunk-TECE6HDR.mjs");
var _chunk5S44M2O4Mjs = require("./chunk-5S44M2O4.mjs");
var _chunk5GOSZLB7Mjs = require("./chunk-5GOSZLB7.mjs");
var _chunk3F7U33P5Mjs = require("./chunk-3F7U33P5.mjs");
var _chunk6HLEZRJIMjs = require("./chunk-6HLEZRJI.mjs");
var _chunkJ7AGDWFOMjs = require("./chunk-J7AGDWFO.mjs");
var _chunkU7IANBI4Mjs = require("./chunk-U7IANBI4.mjs");
var _chunkQ5ZQE4MDMjs = require("./chunk-Q5ZQE4MD.mjs");
var _chunkNJCYBKFHMjs = require("./chunk-NJCYBKFH.mjs");
var _chunkV7WMN6TQMjs = require("./chunk-V7WMN6TQ.mjs");
var _chunkUV3F75RFMjs = require("./chunk-UV3F75RF.mjs");
var _chunkZQMLTFF3Mjs = require("./chunk-ZQMLTFF3.mjs");
// src/index.ts
var direction = "ltr";
var config = {
    useSystemColorMode: false,
    initialColorMode: "light",
    cssVarPrefix: "chakra"
};
var theme = {
    semanticTokens: (0, _chunk5GOSZLB7Mjs.semanticTokens),
    direction,
    ...(0, _chunk3WO5B3NBMjs.foundations),
    components: (0, _chunkV74GDSYYMjs.components),
    styles: (0, _chunk3F7U33P5Mjs.styles),
    config
};
var baseTheme = {
    semanticTokens: (0, _chunk5GOSZLB7Mjs.semanticTokens),
    direction,
    components: {},
    ...(0, _chunk3WO5B3NBMjs.foundations),
    styles: (0, _chunk3F7U33P5Mjs.styles),
    config
};

},{"./chunk-P56GPN75.mjs":"8MKPJ","./chunk-3WO5B3NB.mjs":"7nmBt","./chunk-SIH73G3H.mjs":"c5uln","./chunk-45VJLTIL.mjs":"aAijm","./chunk-B75T2J64.mjs":"csay6","./chunk-TXLFBUTF.mjs":"g7wEK","./chunk-E47HH2QS.mjs":"krFPg","./chunk-VIVTPWHP.mjs":"f76QQ","./chunk-IZUFFCXS.mjs":"efGcy","./chunk-HQ6WXDYV.mjs":"ivzsE","./chunk-V74GDSYY.mjs":"7W600","./chunk-Q5NOVGYN.mjs":"kEQ0K","./chunk-SG67NFYS.mjs":"8u1Sb","./chunk-QWN3S45W.mjs":"a0gZ0","./chunk-GYISOX2E.mjs":"eOK9H","./chunk-7RVLYCMR.mjs":"fCnyZ","./chunk-KJ26FGJD.mjs":"b7hMM","./chunk-R7ZISUMV.mjs":"2PPvS","./chunk-37MNRBP2.mjs":"eMeyu","./chunk-VZUATZ4E.mjs":"aNNeW","./chunk-NNA4E64A.mjs":"bGYGx","./chunk-X6XFE4TF.mjs":"cNsJT","./chunk-ZREGO6US.mjs":"7rijk","./chunk-5FA7Y3RP.mjs":"9h83M","./chunk-L3YAB6CV.mjs":"buZoi","./chunk-2KWJXISX.mjs":"9YP6H","./chunk-AFCBUAM5.mjs":"hfj6j","./chunk-V5KSHSOQ.mjs":"6HEqI","./chunk-MGNM2WZQ.mjs":"252Zq","./chunk-N2GP2AF7.mjs":"7Q3uc","./chunk-JN6QBAR6.mjs":"7JQhZ","./chunk-57T4IAPW.mjs":"gzybw","./chunk-6XA2KDUD.mjs":"acMwL","./chunk-OEFJDLVS.mjs":"9uQIo","./chunk-U3INMHUO.mjs":"atrHy","./chunk-VWP3ZVQT.mjs":"j6MxT","./chunk-D6DZ26HA.mjs":"KZOaA","./chunk-O6GGGS4Y.mjs":"lw0B7","./chunk-SRBDDT7F.mjs":"7i6Da","./chunk-VHM7WLW6.mjs":"8BN4K","./chunk-WXARPSDQ.mjs":"jQXyB","./chunk-ICL3HPTT.mjs":"6RdGo","./chunk-FU5DDBRC.mjs":"l8fB4","./chunk-MBVM6PEK.mjs":"eYrbA","./chunk-F7CKIHPM.mjs":"3sdge","./chunk-XHYVH6UO.mjs":"5eeG4","./chunk-OB7MMEC3.mjs":"fLGBc","./chunk-K3RH7Y2L.mjs":"U0d6b","./chunk-TECE6HDR.mjs":"2yV3H","./chunk-5S44M2O4.mjs":"36hvT","./chunk-5GOSZLB7.mjs":"gKSof","./chunk-3F7U33P5.mjs":"hWdFk","./chunk-6HLEZRJI.mjs":"57T8d","./chunk-J7AGDWFO.mjs":"is2N4","./chunk-U7IANBI4.mjs":"bIZ4j","./chunk-Q5ZQE4MD.mjs":"4x0Wg","./chunk-NJCYBKFH.mjs":"laKb1","./chunk-V7WMN6TQ.mjs":"6RF3Q","./chunk-UV3F75RF.mjs":"7PBMW","./chunk-ZQMLTFF3.mjs":"41w8N","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8MKPJ":[function(require,module,exports) {
// src/utils/is-chakra-theme.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "requiredChakraThemeKeys", ()=>requiredChakraThemeKeys);
parcelHelpers.export(exports, "isChakraTheme", ()=>isChakraTheme);
var _sharedUtils = require("@chakra-ui/shared-utils");
var requiredChakraThemeKeys = [
    "borders",
    "breakpoints",
    "colors",
    "components",
    "config",
    "direction",
    "fonts",
    "fontSizes",
    "fontWeights",
    "letterSpacings",
    "lineHeights",
    "radii",
    "shadows",
    "sizes",
    "space",
    "styles",
    "transition",
    "zIndices"
];
function isChakraTheme(unit) {
    if (!(0, _sharedUtils.isObject)(unit)) return false;
    return requiredChakraThemeKeys.every((propertyName)=>Object.prototype.hasOwnProperty.call(unit, propertyName));
}

},{"@chakra-ui/shared-utils":"h33Zu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7nmBt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "foundations", ()=>foundations);
var _chunkSIH73G3HMjs = require("./chunk-SIH73G3H.mjs");
var _chunk45VJLTILMjs = require("./chunk-45VJLTIL.mjs");
var _chunkB75T2J64Mjs = require("./chunk-B75T2J64.mjs");
var _chunkTXLFBUTFMjs = require("./chunk-TXLFBUTF.mjs");
var _chunkE47HH2QSMjs = require("./chunk-E47HH2QS.mjs");
var _chunkVIVTPWHPMjs = require("./chunk-VIVTPWHP.mjs");
var _chunkIZUFFCXSMjs = require("./chunk-IZUFFCXS.mjs");
var _chunkHQ6WXDYVMjs = require("./chunk-HQ6WXDYV.mjs");
var _chunk6XA2KDUDMjs = require("./chunk-6XA2KDUD.mjs");
var _chunkNJCYBKFHMjs = require("./chunk-NJCYBKFH.mjs");
var _chunkV7WMN6TQMjs = require("./chunk-V7WMN6TQ.mjs");
// src/foundations/index.ts
var foundations = {
    breakpoints: (0, _chunkTXLFBUTFMjs.breakpoints_default),
    zIndices: (0, _chunk45VJLTILMjs.z_index_default),
    radii: (0, _chunkVIVTPWHPMjs.radius_default),
    blur: (0, _chunkHQ6WXDYVMjs.blur_default),
    colors: (0, _chunkE47HH2QSMjs.colors_default),
    ...(0, _chunk6XA2KDUDMjs.typography_default),
    sizes: (0, _chunkNJCYBKFHMjs.sizes_default),
    shadows: (0, _chunkIZUFFCXSMjs.shadows_default),
    space: (0, _chunkV7WMN6TQMjs.spacing),
    borders: (0, _chunkB75T2J64Mjs.borders_default),
    transition: (0, _chunkSIH73G3HMjs.transition_default)
};

},{"./chunk-SIH73G3H.mjs":"c5uln","./chunk-45VJLTIL.mjs":"aAijm","./chunk-B75T2J64.mjs":"csay6","./chunk-TXLFBUTF.mjs":"g7wEK","./chunk-E47HH2QS.mjs":"krFPg","./chunk-VIVTPWHP.mjs":"f76QQ","./chunk-IZUFFCXS.mjs":"efGcy","./chunk-HQ6WXDYV.mjs":"ivzsE","./chunk-6XA2KDUD.mjs":"acMwL","./chunk-NJCYBKFH.mjs":"laKb1","./chunk-V7WMN6TQ.mjs":"6RF3Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c5uln":[function(require,module,exports) {
// src/foundations/transition.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transition_default", ()=>transition_default);
var transitionProperty = {
    common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
    colors: "background-color, border-color, color, fill, stroke",
    dimensions: "width, height",
    position: "left, right, top, bottom",
    background: "background-color, background-image, background-position"
};
var transitionTimingFunction = {
    "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
    "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
    "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration = {
    "ultra-fast": "50ms",
    faster: "100ms",
    fast: "150ms",
    normal: "200ms",
    slow: "300ms",
    slower: "400ms",
    "ultra-slow": "500ms"
};
var transition = {
    property: transitionProperty,
    easing: transitionTimingFunction,
    duration: transitionDuration
};
var transition_default = transition;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aAijm":[function(require,module,exports) {
// src/foundations/z-index.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "z_index_default", ()=>z_index_default);
var zIndices = {
    hide: -1,
    auto: "auto",
    base: 0,
    docked: 10,
    dropdown: 1e3,
    sticky: 1100,
    banner: 1200,
    overlay: 1300,
    modal: 1400,
    popover: 1500,
    skipLink: 1600,
    toast: 1700,
    tooltip: 1800
};
var z_index_default = zIndices;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"csay6":[function(require,module,exports) {
// src/foundations/borders.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "borders_default", ()=>borders_default);
var borders = {
    none: 0,
    "1px": "1px solid",
    "2px": "2px solid",
    "4px": "4px solid",
    "8px": "8px solid"
};
var borders_default = borders;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g7wEK":[function(require,module,exports) {
// src/foundations/breakpoints.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "breakpoints_default", ()=>breakpoints_default);
var breakpoints = {
    base: "0em",
    sm: "30em",
    md: "48em",
    lg: "62em",
    xl: "80em",
    "2xl": "96em"
};
var breakpoints_default = breakpoints;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"krFPg":[function(require,module,exports) {
// src/foundations/colors.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "colors_default", ()=>colors_default);
var colors = {
    transparent: "transparent",
    current: "currentColor",
    black: "#000000",
    white: "#FFFFFF",
    whiteAlpha: {
        50: "rgba(255, 255, 255, 0.04)",
        100: "rgba(255, 255, 255, 0.06)",
        200: "rgba(255, 255, 255, 0.08)",
        300: "rgba(255, 255, 255, 0.16)",
        400: "rgba(255, 255, 255, 0.24)",
        500: "rgba(255, 255, 255, 0.36)",
        600: "rgba(255, 255, 255, 0.48)",
        700: "rgba(255, 255, 255, 0.64)",
        800: "rgba(255, 255, 255, 0.80)",
        900: "rgba(255, 255, 255, 0.92)"
    },
    blackAlpha: {
        50: "rgba(0, 0, 0, 0.04)",
        100: "rgba(0, 0, 0, 0.06)",
        200: "rgba(0, 0, 0, 0.08)",
        300: "rgba(0, 0, 0, 0.16)",
        400: "rgba(0, 0, 0, 0.24)",
        500: "rgba(0, 0, 0, 0.36)",
        600: "rgba(0, 0, 0, 0.48)",
        700: "rgba(0, 0, 0, 0.64)",
        800: "rgba(0, 0, 0, 0.80)",
        900: "rgba(0, 0, 0, 0.92)"
    },
    gray: {
        50: "#F7FAFC",
        100: "#EDF2F7",
        200: "#E2E8F0",
        300: "#CBD5E0",
        400: "#A0AEC0",
        500: "#718096",
        600: "#4A5568",
        700: "#2D3748",
        800: "#1A202C",
        900: "#171923"
    },
    red: {
        50: "#FFF5F5",
        100: "#FED7D7",
        200: "#FEB2B2",
        300: "#FC8181",
        400: "#F56565",
        500: "#E53E3E",
        600: "#C53030",
        700: "#9B2C2C",
        800: "#822727",
        900: "#63171B"
    },
    orange: {
        50: "#FFFAF0",
        100: "#FEEBC8",
        200: "#FBD38D",
        300: "#F6AD55",
        400: "#ED8936",
        500: "#DD6B20",
        600: "#C05621",
        700: "#9C4221",
        800: "#7B341E",
        900: "#652B19"
    },
    yellow: {
        50: "#FFFFF0",
        100: "#FEFCBF",
        200: "#FAF089",
        300: "#F6E05E",
        400: "#ECC94B",
        500: "#D69E2E",
        600: "#B7791F",
        700: "#975A16",
        800: "#744210",
        900: "#5F370E"
    },
    green: {
        50: "#F0FFF4",
        100: "#C6F6D5",
        200: "#9AE6B4",
        300: "#68D391",
        400: "#48BB78",
        500: "#38A169",
        600: "#2F855A",
        700: "#276749",
        800: "#22543D",
        900: "#1C4532"
    },
    teal: {
        50: "#E6FFFA",
        100: "#B2F5EA",
        200: "#81E6D9",
        300: "#4FD1C5",
        400: "#38B2AC",
        500: "#319795",
        600: "#2C7A7B",
        700: "#285E61",
        800: "#234E52",
        900: "#1D4044"
    },
    blue: {
        50: "#ebf8ff",
        100: "#bee3f8",
        200: "#90cdf4",
        300: "#63b3ed",
        400: "#4299e1",
        500: "#3182ce",
        600: "#2b6cb0",
        700: "#2c5282",
        800: "#2a4365",
        900: "#1A365D"
    },
    cyan: {
        50: "#EDFDFD",
        100: "#C4F1F9",
        200: "#9DECF9",
        300: "#76E4F7",
        400: "#0BC5EA",
        500: "#00B5D8",
        600: "#00A3C4",
        700: "#0987A0",
        800: "#086F83",
        900: "#065666"
    },
    purple: {
        50: "#FAF5FF",
        100: "#E9D8FD",
        200: "#D6BCFA",
        300: "#B794F4",
        400: "#9F7AEA",
        500: "#805AD5",
        600: "#6B46C1",
        700: "#553C9A",
        800: "#44337A",
        900: "#322659"
    },
    pink: {
        50: "#FFF5F7",
        100: "#FED7E2",
        200: "#FBB6CE",
        300: "#F687B3",
        400: "#ED64A6",
        500: "#D53F8C",
        600: "#B83280",
        700: "#97266D",
        800: "#702459",
        900: "#521B41"
    },
    linkedin: {
        50: "#E8F4F9",
        100: "#CFEDFB",
        200: "#9BDAF3",
        300: "#68C7EC",
        400: "#34B3E4",
        500: "#00A0DC",
        600: "#008CC9",
        700: "#0077B5",
        800: "#005E93",
        900: "#004471"
    },
    facebook: {
        50: "#E8F4F9",
        100: "#D9DEE9",
        200: "#B7C2DA",
        300: "#6482C0",
        400: "#4267B2",
        500: "#385898",
        600: "#314E89",
        700: "#29487D",
        800: "#223B67",
        900: "#1E355B"
    },
    messenger: {
        50: "#D0E6FF",
        100: "#B9DAFF",
        200: "#A2CDFF",
        300: "#7AB8FF",
        400: "#2E90FF",
        500: "#0078FF",
        600: "#0063D1",
        700: "#0052AC",
        800: "#003C7E",
        900: "#002C5C"
    },
    whatsapp: {
        50: "#dffeec",
        100: "#b9f5d0",
        200: "#90edb3",
        300: "#65e495",
        400: "#3cdd78",
        500: "#22c35e",
        600: "#179848",
        700: "#0c6c33",
        800: "#01421c",
        900: "#001803"
    },
    twitter: {
        50: "#E5F4FD",
        100: "#C8E9FB",
        200: "#A8DCFA",
        300: "#83CDF7",
        400: "#57BBF5",
        500: "#1DA1F2",
        600: "#1A94DA",
        700: "#1681BF",
        800: "#136B9E",
        900: "#0D4D71"
    },
    telegram: {
        50: "#E3F2F9",
        100: "#C5E4F3",
        200: "#A2D4EC",
        300: "#7AC1E4",
        400: "#47A9DA",
        500: "#0088CC",
        600: "#007AB8",
        700: "#006BA1",
        800: "#005885",
        900: "#003F5E"
    }
};
var colors_default = colors;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f76QQ":[function(require,module,exports) {
// src/foundations/radius.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "radius_default", ()=>radius_default);
var radii = {
    none: "0",
    sm: "0.125rem",
    base: "0.25rem",
    md: "0.375rem",
    lg: "0.5rem",
    xl: "0.75rem",
    "2xl": "1rem",
    "3xl": "1.5rem",
    full: "9999px"
};
var radius_default = radii;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"efGcy":[function(require,module,exports) {
// src/foundations/shadows.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shadows_default", ()=>shadows_default);
var shadows = {
    xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
    sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
    base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
    md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
    lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
    xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
    "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
    outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
    inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
    none: "none",
    "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var shadows_default = shadows;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ivzsE":[function(require,module,exports) {
// src/foundations/blur.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "blur_default", ()=>blur_default);
var blur = {
    none: 0,
    sm: "4px",
    base: "8px",
    md: "12px",
    lg: "16px",
    xl: "24px",
    "2xl": "40px",
    "3xl": "64px"
};
var blur_default = blur;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"acMwL":[function(require,module,exports) {
// src/foundations/typography.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typography_default", ()=>typography_default);
var typography = {
    letterSpacings: {
        tighter: "-0.05em",
        tight: "-0.025em",
        normal: "0",
        wide: "0.025em",
        wider: "0.05em",
        widest: "0.1em"
    },
    lineHeights: {
        normal: "normal",
        none: 1,
        shorter: 1.25,
        short: 1.375,
        base: 1.5,
        tall: 1.625,
        taller: "2",
        "3": ".75rem",
        "4": "1rem",
        "5": "1.25rem",
        "6": "1.5rem",
        "7": "1.75rem",
        "8": "2rem",
        "9": "2.25rem",
        "10": "2.5rem"
    },
    fontWeights: {
        hairline: 100,
        thin: 200,
        light: 300,
        normal: 400,
        medium: 500,
        semibold: 600,
        bold: 700,
        extrabold: 800,
        black: 900
    },
    fonts: {
        heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
        body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
        mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
    },
    fontSizes: {
        "3xs": "0.45rem",
        "2xs": "0.625rem",
        xs: "0.75rem",
        sm: "0.875rem",
        md: "1rem",
        lg: "1.125rem",
        xl: "1.25rem",
        "2xl": "1.5rem",
        "3xl": "1.875rem",
        "4xl": "2.25rem",
        "5xl": "3rem",
        "6xl": "3.75rem",
        "7xl": "4.5rem",
        "8xl": "6rem",
        "9xl": "8rem"
    }
};
var typography_default = typography;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"laKb1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sizes_default", ()=>sizes_default);
var _chunkV7WMN6TQMjs = require("./chunk-V7WMN6TQ.mjs");
// src/foundations/sizes.ts
var largeSizes = {
    max: "max-content",
    min: "min-content",
    full: "100%",
    "3xs": "14rem",
    "2xs": "16rem",
    xs: "20rem",
    sm: "24rem",
    md: "28rem",
    lg: "32rem",
    xl: "36rem",
    "2xl": "42rem",
    "3xl": "48rem",
    "4xl": "56rem",
    "5xl": "64rem",
    "6xl": "72rem",
    "7xl": "80rem",
    "8xl": "90rem",
    prose: "60ch"
};
var container = {
    sm: "640px",
    md: "768px",
    lg: "1024px",
    xl: "1280px"
};
var sizes = {
    ...(0, _chunkV7WMN6TQMjs.spacing),
    ...largeSizes,
    container
};
var sizes_default = sizes;

},{"./chunk-V7WMN6TQ.mjs":"6RF3Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6RF3Q":[function(require,module,exports) {
// src/foundations/spacing.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spacing", ()=>spacing);
var spacing = {
    px: "1px",
    0.5: "0.125rem",
    1: "0.25rem",
    1.5: "0.375rem",
    2: "0.5rem",
    2.5: "0.625rem",
    3: "0.75rem",
    3.5: "0.875rem",
    4: "1rem",
    5: "1.25rem",
    6: "1.5rem",
    7: "1.75rem",
    8: "2rem",
    9: "2.25rem",
    10: "2.5rem",
    12: "3rem",
    14: "3.5rem",
    16: "4rem",
    20: "5rem",
    24: "6rem",
    28: "7rem",
    32: "8rem",
    36: "9rem",
    40: "10rem",
    44: "11rem",
    48: "12rem",
    52: "13rem",
    56: "14rem",
    60: "15rem",
    64: "16rem",
    72: "18rem",
    80: "20rem",
    96: "24rem"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7W600":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "components", ()=>components);
var _chunkQ5NOVGYNMjs = require("./chunk-Q5NOVGYN.mjs");
var _chunkSG67NFYSMjs = require("./chunk-SG67NFYS.mjs");
var _chunkQWN3S45WMjs = require("./chunk-QWN3S45W.mjs");
var _chunkGYISOX2EMjs = require("./chunk-GYISOX2E.mjs");
var _chunk7RVLYCMRMjs = require("./chunk-7RVLYCMR.mjs");
var _chunkKJ26FGJDMjs = require("./chunk-KJ26FGJD.mjs");
var _chunkR7ZISUMVMjs = require("./chunk-R7ZISUMV.mjs");
var _chunk37MNRBP2Mjs = require("./chunk-37MNRBP2.mjs");
var _chunkVZUATZ4EMjs = require("./chunk-VZUATZ4E.mjs");
var _chunkNNA4E64AMjs = require("./chunk-NNA4E64A.mjs");
var _chunkX6XFE4TFMjs = require("./chunk-X6XFE4TF.mjs");
var _chunkZREGO6USMjs = require("./chunk-ZREGO6US.mjs");
var _chunk5FA7Y3RPMjs = require("./chunk-5FA7Y3RP.mjs");
var _chunkL3YAB6CVMjs = require("./chunk-L3YAB6CV.mjs");
var _chunk2KWJXISXMjs = require("./chunk-2KWJXISX.mjs");
var _chunkAFCBUAM5Mjs = require("./chunk-AFCBUAM5.mjs");
var _chunkV5KSHSOQMjs = require("./chunk-V5KSHSOQ.mjs");
var _chunkMGNM2WZQMjs = require("./chunk-MGNM2WZQ.mjs");
var _chunkN2GP2AF7Mjs = require("./chunk-N2GP2AF7.mjs");
var _chunkJN6QBAR6Mjs = require("./chunk-JN6QBAR6.mjs");
var _chunk57T4IAPWMjs = require("./chunk-57T4IAPW.mjs");
var _chunkOEFJDLVSMjs = require("./chunk-OEFJDLVS.mjs");
var _chunkU3INMHUOMjs = require("./chunk-U3INMHUO.mjs");
var _chunkVWP3ZVQTMjs = require("./chunk-VWP3ZVQT.mjs");
var _chunkD6DZ26HAMjs = require("./chunk-D6DZ26HA.mjs");
var _chunkO6GGGS4YMjs = require("./chunk-O6GGGS4Y.mjs");
var _chunkSRBDDT7FMjs = require("./chunk-SRBDDT7F.mjs");
var _chunkVHM7WLW6Mjs = require("./chunk-VHM7WLW6.mjs");
var _chunkWXARPSDQMjs = require("./chunk-WXARPSDQ.mjs");
var _chunkICL3HPTTMjs = require("./chunk-ICL3HPTT.mjs");
var _chunkFU5DDBRCMjs = require("./chunk-FU5DDBRC.mjs");
var _chunkMBVM6PEKMjs = require("./chunk-MBVM6PEK.mjs");
var _chunkF7CKIHPMMjs = require("./chunk-F7CKIHPM.mjs");
var _chunkXHYVH6UOMjs = require("./chunk-XHYVH6UO.mjs");
var _chunkOB7MMEC3Mjs = require("./chunk-OB7MMEC3.mjs");
var _chunkK3RH7Y2LMjs = require("./chunk-K3RH7Y2L.mjs");
var _chunkTECE6HDRMjs = require("./chunk-TECE6HDR.mjs");
var _chunk5S44M2O4Mjs = require("./chunk-5S44M2O4.mjs");
var _chunkJ7AGDWFOMjs = require("./chunk-J7AGDWFO.mjs");
var _chunkU7IANBI4Mjs = require("./chunk-U7IANBI4.mjs");
var _chunkQ5ZQE4MDMjs = require("./chunk-Q5ZQE4MD.mjs");
var _chunkZQMLTFF3Mjs = require("./chunk-ZQMLTFF3.mjs");
// src/components/index.ts
var components = {
    Accordion: (0, _chunkJ7AGDWFOMjs.accordionTheme),
    Alert: (0, _chunkU7IANBI4Mjs.alertTheme),
    Avatar: (0, _chunkQ5ZQE4MDMjs.avatarTheme),
    Badge: (0, _chunkZQMLTFF3Mjs.badgeTheme),
    Breadcrumb: (0, _chunkFU5DDBRCMjs.breadcrumbTheme),
    Button: (0, _chunkMBVM6PEKMjs.buttonTheme),
    Checkbox: (0, _chunkXHYVH6UOMjs.checkboxTheme),
    CloseButton: (0, _chunkOB7MMEC3Mjs.closeButtonTheme),
    Code: (0, _chunkK3RH7Y2LMjs.codeTheme),
    Container: (0, _chunkTECE6HDRMjs.containerTheme),
    Divider: (0, _chunk5S44M2O4Mjs.dividerTheme),
    Drawer: (0, _chunkVWP3ZVQTMjs.drawerTheme),
    Editable: (0, _chunkD6DZ26HAMjs.editableTheme),
    Form: (0, _chunkO6GGGS4YMjs.formTheme),
    FormError: (0, _chunkSRBDDT7FMjs.formErrorTheme),
    FormLabel: (0, _chunkVHM7WLW6Mjs.formLabelTheme),
    Heading: (0, _chunkWXARPSDQMjs.headingTheme),
    Input: (0, _chunkICL3HPTTMjs.inputTheme),
    Kbd: (0, _chunkAFCBUAM5Mjs.kbdTheme),
    Link: (0, _chunkV5KSHSOQMjs.linkTheme),
    List: (0, _chunkMGNM2WZQMjs.listTheme),
    Menu: (0, _chunkN2GP2AF7Mjs.menuTheme),
    Modal: (0, _chunkJN6QBAR6Mjs.modalTheme),
    NumberInput: (0, _chunk57T4IAPWMjs.numberInputTheme),
    PinInput: (0, _chunkOEFJDLVSMjs.pinInputTheme),
    Popover: (0, _chunkU3INMHUOMjs.popoverTheme),
    Progress: (0, _chunk37MNRBP2Mjs.progressTheme),
    Radio: (0, _chunkVZUATZ4EMjs.radioTheme),
    Select: (0, _chunkNNA4E64AMjs.selectTheme),
    Skeleton: (0, _chunkX6XFE4TFMjs.skeletonTheme),
    SkipLink: (0, _chunkZREGO6USMjs.skipLinkTheme),
    Slider: (0, _chunk5FA7Y3RPMjs.sliderTheme),
    Spinner: (0, _chunkL3YAB6CVMjs.spinnerTheme),
    Stat: (0, _chunk2KWJXISXMjs.statTheme),
    Switch: (0, _chunkSG67NFYSMjs.switchTheme),
    Table: (0, _chunkQWN3S45WMjs.tableTheme),
    Tabs: (0, _chunkGYISOX2EMjs.tabsTheme),
    Tag: (0, _chunk7RVLYCMRMjs.tagTheme),
    Textarea: (0, _chunkKJ26FGJDMjs.textareaTheme),
    Tooltip: (0, _chunkR7ZISUMVMjs.tooltipTheme),
    Card: (0, _chunkF7CKIHPMMjs.cardTheme),
    Stepper: (0, _chunkQ5NOVGYNMjs.stepperTheme)
};

},{"./chunk-Q5NOVGYN.mjs":"kEQ0K","./chunk-SG67NFYS.mjs":"8u1Sb","./chunk-QWN3S45W.mjs":"a0gZ0","./chunk-GYISOX2E.mjs":"eOK9H","./chunk-7RVLYCMR.mjs":"fCnyZ","./chunk-KJ26FGJD.mjs":"b7hMM","./chunk-R7ZISUMV.mjs":"2PPvS","./chunk-37MNRBP2.mjs":"eMeyu","./chunk-VZUATZ4E.mjs":"aNNeW","./chunk-NNA4E64A.mjs":"bGYGx","./chunk-X6XFE4TF.mjs":"cNsJT","./chunk-ZREGO6US.mjs":"7rijk","./chunk-5FA7Y3RP.mjs":"9h83M","./chunk-L3YAB6CV.mjs":"buZoi","./chunk-2KWJXISX.mjs":"9YP6H","./chunk-AFCBUAM5.mjs":"hfj6j","./chunk-V5KSHSOQ.mjs":"6HEqI","./chunk-MGNM2WZQ.mjs":"252Zq","./chunk-N2GP2AF7.mjs":"7Q3uc","./chunk-JN6QBAR6.mjs":"7JQhZ","./chunk-57T4IAPW.mjs":"gzybw","./chunk-OEFJDLVS.mjs":"9uQIo","./chunk-U3INMHUO.mjs":"atrHy","./chunk-VWP3ZVQT.mjs":"j6MxT","./chunk-D6DZ26HA.mjs":"KZOaA","./chunk-O6GGGS4Y.mjs":"lw0B7","./chunk-SRBDDT7F.mjs":"7i6Da","./chunk-VHM7WLW6.mjs":"8BN4K","./chunk-WXARPSDQ.mjs":"jQXyB","./chunk-ICL3HPTT.mjs":"6RdGo","./chunk-FU5DDBRC.mjs":"l8fB4","./chunk-MBVM6PEK.mjs":"eYrbA","./chunk-F7CKIHPM.mjs":"3sdge","./chunk-XHYVH6UO.mjs":"5eeG4","./chunk-OB7MMEC3.mjs":"fLGBc","./chunk-K3RH7Y2L.mjs":"U0d6b","./chunk-TECE6HDR.mjs":"2yV3H","./chunk-5S44M2O4.mjs":"36hvT","./chunk-J7AGDWFO.mjs":"is2N4","./chunk-U7IANBI4.mjs":"bIZ4j","./chunk-Q5ZQE4MD.mjs":"4x0Wg","./chunk-ZQMLTFF3.mjs":"41w8N","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kEQ0K":[function(require,module,exports) {
// src/components/stepper.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stepperTheme", ()=>stepperTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)([
    "stepper",
    "step",
    "title",
    "description",
    "indicator",
    "separator",
    "icon",
    "number"
]);
var $size = (0, _styledSystem.cssVar)("stepper-indicator-size");
var $iconSize = (0, _styledSystem.cssVar)("stepper-icon-size");
var $titleFontSize = (0, _styledSystem.cssVar)("stepper-title-font-size");
var $descFontSize = (0, _styledSystem.cssVar)("stepper-description-font-size");
var $accentColor = (0, _styledSystem.cssVar)("stepper-accent-color");
var baseStyle = definePartsStyle(({ colorScheme: c })=>({
        stepper: {
            display: "flex",
            justifyContent: "space-between",
            gap: "4",
            "&[data-orientation=vertical]": {
                flexDirection: "column",
                alignItems: "flex-start"
            },
            "&[data-orientation=horizontal]": {
                flexDirection: "row",
                alignItems: "center"
            },
            [$accentColor.variable]: `colors.${c}.500`,
            _dark: {
                [$accentColor.variable]: `colors.${c}.200`
            }
        },
        title: {
            fontSize: $titleFontSize.reference,
            fontWeight: "medium"
        },
        description: {
            fontSize: $descFontSize.reference,
            color: "chakra-subtle-text"
        },
        number: {
            fontSize: $titleFontSize.reference
        },
        step: {
            flexShrink: 0,
            position: "relative",
            display: "flex",
            gap: "2",
            "&[data-orientation=horizontal]": {
                alignItems: "center"
            },
            flex: "1",
            "&:last-of-type:not([data-stretch])": {
                flex: "initial"
            }
        },
        icon: {
            flexShrink: 0,
            width: $iconSize.reference,
            height: $iconSize.reference
        },
        indicator: {
            flexShrink: 0,
            borderRadius: "full",
            width: $size.reference,
            height: $size.reference,
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            "&[data-status=active]": {
                borderWidth: "2px",
                borderColor: $accentColor.reference
            },
            "&[data-status=complete]": {
                bg: $accentColor.reference,
                color: "chakra-inverse-text"
            },
            "&[data-status=incomplete]": {
                borderWidth: "2px"
            }
        },
        separator: {
            bg: "chakra-border-color",
            flex: "1",
            "&[data-status=complete]": {
                bg: $accentColor.reference
            },
            "&[data-orientation=horizontal]": {
                width: "100%",
                height: "2px",
                marginStart: "2"
            },
            "&[data-orientation=vertical]": {
                width: "2px",
                position: "absolute",
                height: "100%",
                maxHeight: `calc(100% - ${$size.reference} - 8px)`,
                top: `calc(${$size.reference} + 4px)`,
                insetStart: `calc(${$size.reference} / 2 - 1px)`
            }
        }
    }));
var stepperTheme = defineMultiStyleConfig({
    baseStyle,
    sizes: {
        xs: definePartsStyle({
            stepper: {
                [$size.variable]: "sizes.4",
                [$iconSize.variable]: "sizes.3",
                [$titleFontSize.variable]: "fontSizes.xs",
                [$descFontSize.variable]: "fontSizes.xs"
            }
        }),
        sm: definePartsStyle({
            stepper: {
                [$size.variable]: "sizes.6",
                [$iconSize.variable]: "sizes.4",
                [$titleFontSize.variable]: "fontSizes.sm",
                [$descFontSize.variable]: "fontSizes.xs"
            }
        }),
        md: definePartsStyle({
            stepper: {
                [$size.variable]: "sizes.8",
                [$iconSize.variable]: "sizes.5",
                [$titleFontSize.variable]: "fontSizes.md",
                [$descFontSize.variable]: "fontSizes.sm"
            }
        }),
        lg: definePartsStyle({
            stepper: {
                [$size.variable]: "sizes.10",
                [$iconSize.variable]: "sizes.6",
                [$titleFontSize.variable]: "fontSizes.lg",
                [$descFontSize.variable]: "fontSizes.md"
            }
        })
    },
    defaultProps: {
        size: "md",
        colorScheme: "blue"
    }
});

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8u1Sb":[function(require,module,exports) {
// src/components/switch.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "switchTheme", ()=>switchTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.switchAnatomy).keys);
var $width = (0, _themeTools.cssVar)("switch-track-width");
var $height = (0, _themeTools.cssVar)("switch-track-height");
var $diff = (0, _themeTools.cssVar)("switch-track-diff");
var diffValue = (0, _themeTools.calc).subtract($width, $height);
var $translateX = (0, _themeTools.cssVar)("switch-thumb-x");
var $bg = (0, _themeTools.cssVar)("switch-bg");
var baseStyleTrack = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c } = props;
    return {
        borderRadius: "full",
        p: "0.5",
        width: [
            $width.reference
        ],
        height: [
            $height.reference
        ],
        transitionProperty: "common",
        transitionDuration: "fast",
        [$bg.variable]: "colors.gray.300",
        _dark: {
            [$bg.variable]: "colors.whiteAlpha.400"
        },
        _focusVisible: {
            boxShadow: "outline"
        },
        _disabled: {
            opacity: 0.4,
            cursor: "not-allowed"
        },
        _checked: {
            [$bg.variable]: `colors.${c}.500`,
            _dark: {
                [$bg.variable]: `colors.${c}.200`
            }
        },
        bg: $bg.reference
    };
});
var baseStyleThumb = (0, _styledSystem.defineStyle)({
    bg: "white",
    transitionProperty: "transform",
    transitionDuration: "normal",
    borderRadius: "inherit",
    width: [
        $height.reference
    ],
    height: [
        $height.reference
    ],
    _checked: {
        transform: `translateX(${$translateX.reference})`
    }
});
var baseStyle = definePartsStyle((props)=>({
        container: {
            [$diff.variable]: diffValue,
            [$translateX.variable]: $diff.reference,
            _rtl: {
                [$translateX.variable]: (0, _themeTools.calc)($diff).negate().toString()
            }
        },
        track: baseStyleTrack(props),
        thumb: baseStyleThumb
    }));
var sizes = {
    sm: definePartsStyle({
        container: {
            [$width.variable]: "1.375rem",
            [$height.variable]: "sizes.3"
        }
    }),
    md: definePartsStyle({
        container: {
            [$width.variable]: "1.875rem",
            [$height.variable]: "sizes.4"
        }
    }),
    lg: definePartsStyle({
        container: {
            [$width.variable]: "2.875rem",
            [$height.variable]: "sizes.6"
        }
    })
};
var switchTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    defaultProps: {
        size: "md",
        colorScheme: "blue"
    }
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jzkqp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "accordionAnatomy", ()=>(0, _chunkGSYRQO2UMjs.accordionAnatomy));
parcelHelpers.export(exports, "alertAnatomy", ()=>(0, _chunkGSYRQO2UMjs.alertAnatomy));
parcelHelpers.export(exports, "anatomy", ()=>(0, _chunkOA3DH5LSMjs.anatomy));
parcelHelpers.export(exports, "avatarAnatomy", ()=>(0, _chunkGSYRQO2UMjs.avatarAnatomy));
parcelHelpers.export(exports, "breadcrumbAnatomy", ()=>(0, _chunkGSYRQO2UMjs.breadcrumbAnatomy));
parcelHelpers.export(exports, "buttonAnatomy", ()=>(0, _chunkGSYRQO2UMjs.buttonAnatomy));
parcelHelpers.export(exports, "cardAnatomy", ()=>(0, _chunkGSYRQO2UMjs.cardAnatomy));
parcelHelpers.export(exports, "checkboxAnatomy", ()=>(0, _chunkGSYRQO2UMjs.checkboxAnatomy));
parcelHelpers.export(exports, "circularProgressAnatomy", ()=>(0, _chunkGSYRQO2UMjs.circularProgressAnatomy));
parcelHelpers.export(exports, "drawerAnatomy", ()=>(0, _chunkGSYRQO2UMjs.drawerAnatomy));
parcelHelpers.export(exports, "editableAnatomy", ()=>(0, _chunkGSYRQO2UMjs.editableAnatomy));
parcelHelpers.export(exports, "formAnatomy", ()=>(0, _chunkGSYRQO2UMjs.formAnatomy));
parcelHelpers.export(exports, "formErrorAnatomy", ()=>(0, _chunkGSYRQO2UMjs.formErrorAnatomy));
parcelHelpers.export(exports, "inputAnatomy", ()=>(0, _chunkGSYRQO2UMjs.inputAnatomy));
parcelHelpers.export(exports, "listAnatomy", ()=>(0, _chunkGSYRQO2UMjs.listAnatomy));
parcelHelpers.export(exports, "menuAnatomy", ()=>(0, _chunkGSYRQO2UMjs.menuAnatomy));
parcelHelpers.export(exports, "modalAnatomy", ()=>(0, _chunkGSYRQO2UMjs.modalAnatomy));
parcelHelpers.export(exports, "numberInputAnatomy", ()=>(0, _chunkGSYRQO2UMjs.numberInputAnatomy));
parcelHelpers.export(exports, "pinInputAnatomy", ()=>(0, _chunkGSYRQO2UMjs.pinInputAnatomy));
parcelHelpers.export(exports, "popoverAnatomy", ()=>(0, _chunkGSYRQO2UMjs.popoverAnatomy));
parcelHelpers.export(exports, "progressAnatomy", ()=>(0, _chunkGSYRQO2UMjs.progressAnatomy));
parcelHelpers.export(exports, "radioAnatomy", ()=>(0, _chunkGSYRQO2UMjs.radioAnatomy));
parcelHelpers.export(exports, "selectAnatomy", ()=>(0, _chunkGSYRQO2UMjs.selectAnatomy));
parcelHelpers.export(exports, "sliderAnatomy", ()=>(0, _chunkGSYRQO2UMjs.sliderAnatomy));
parcelHelpers.export(exports, "statAnatomy", ()=>(0, _chunkGSYRQO2UMjs.statAnatomy));
parcelHelpers.export(exports, "switchAnatomy", ()=>(0, _chunkGSYRQO2UMjs.switchAnatomy));
parcelHelpers.export(exports, "tableAnatomy", ()=>(0, _chunkGSYRQO2UMjs.tableAnatomy));
parcelHelpers.export(exports, "tabsAnatomy", ()=>(0, _chunkGSYRQO2UMjs.tabsAnatomy));
parcelHelpers.export(exports, "tagAnatomy", ()=>(0, _chunkGSYRQO2UMjs.tagAnatomy));
var _chunkGSYRQO2UMjs = require("./chunk-GSYRQO2U.mjs");
var _chunkOA3DH5LSMjs = require("./chunk-OA3DH5LS.mjs");

},{"./chunk-GSYRQO2U.mjs":"aa0xa","./chunk-OA3DH5LS.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aa0xa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "accordionAnatomy", ()=>accordionAnatomy);
parcelHelpers.export(exports, "alertAnatomy", ()=>alertAnatomy);
parcelHelpers.export(exports, "avatarAnatomy", ()=>avatarAnatomy);
parcelHelpers.export(exports, "breadcrumbAnatomy", ()=>breadcrumbAnatomy);
parcelHelpers.export(exports, "buttonAnatomy", ()=>buttonAnatomy);
parcelHelpers.export(exports, "checkboxAnatomy", ()=>checkboxAnatomy);
parcelHelpers.export(exports, "circularProgressAnatomy", ()=>circularProgressAnatomy);
parcelHelpers.export(exports, "drawerAnatomy", ()=>drawerAnatomy);
parcelHelpers.export(exports, "editableAnatomy", ()=>editableAnatomy);
parcelHelpers.export(exports, "formAnatomy", ()=>formAnatomy);
parcelHelpers.export(exports, "formErrorAnatomy", ()=>formErrorAnatomy);
parcelHelpers.export(exports, "inputAnatomy", ()=>inputAnatomy);
parcelHelpers.export(exports, "listAnatomy", ()=>listAnatomy);
parcelHelpers.export(exports, "menuAnatomy", ()=>menuAnatomy);
parcelHelpers.export(exports, "modalAnatomy", ()=>modalAnatomy);
parcelHelpers.export(exports, "numberInputAnatomy", ()=>numberInputAnatomy);
parcelHelpers.export(exports, "pinInputAnatomy", ()=>pinInputAnatomy);
parcelHelpers.export(exports, "popoverAnatomy", ()=>popoverAnatomy);
parcelHelpers.export(exports, "progressAnatomy", ()=>progressAnatomy);
parcelHelpers.export(exports, "radioAnatomy", ()=>radioAnatomy);
parcelHelpers.export(exports, "selectAnatomy", ()=>selectAnatomy);
parcelHelpers.export(exports, "sliderAnatomy", ()=>sliderAnatomy);
parcelHelpers.export(exports, "statAnatomy", ()=>statAnatomy);
parcelHelpers.export(exports, "switchAnatomy", ()=>switchAnatomy);
parcelHelpers.export(exports, "tableAnatomy", ()=>tableAnatomy);
parcelHelpers.export(exports, "tabsAnatomy", ()=>tabsAnatomy);
parcelHelpers.export(exports, "tagAnatomy", ()=>tagAnatomy);
parcelHelpers.export(exports, "cardAnatomy", ()=>cardAnatomy);
var _chunkOA3DH5LSMjs = require("./chunk-OA3DH5LS.mjs");
// src/components.ts
var accordionAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("accordion").parts("root", "container", "button", "panel").extend("icon");
var alertAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("alert").parts("title", "description", "container").extend("icon", "spinner");
var avatarAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
var breadcrumbAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("breadcrumb").parts("link", "item", "container").extend("separator");
var buttonAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("button").parts();
var checkboxAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("checkbox").parts("control", "icon", "container").extend("label");
var circularProgressAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("progress").parts("track", "filledTrack").extend("label");
var drawerAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var editableAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("editable").parts("preview", "input", "textarea");
var formAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("form").parts("container", "requiredIndicator", "helperText");
var formErrorAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("formError").parts("text", "icon");
var inputAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("input").parts("addon", "field", "element", "group");
var listAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("list").parts("container", "item", "icon");
var menuAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("menu").parts("button", "list", "item").extend("groupTitle", "icon", "command", "divider");
var modalAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var numberInputAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("numberinput").parts("root", "field", "stepperGroup", "stepper");
var pinInputAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("pininput").parts("field");
var popoverAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
var progressAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("progress").parts("label", "filledTrack", "track");
var radioAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("radio").parts("container", "control", "label");
var selectAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("select").parts("field", "icon");
var sliderAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("slider").parts("container", "track", "thumb", "filledTrack", "mark");
var statAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("stat").parts("container", "label", "helpText", "number", "icon");
var switchAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("switch").parts("container", "track", "thumb");
var tableAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("table").parts("table", "thead", "tbody", "tr", "th", "td", "tfoot", "caption");
var tabsAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("tabs").parts("root", "tab", "tablist", "tabpanel", "tabpanels", "indicator");
var tagAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("tag").parts("container", "label", "closeButton");
var cardAnatomy = (0, _chunkOA3DH5LSMjs.anatomy)("card").parts("container", "header", "body", "footer");

},{"./chunk-OA3DH5LS.mjs":"5oycz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5oycz":[function(require,module,exports) {
// src/anatomy.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "anatomy", ()=>anatomy);
function anatomy(name, map = {}) {
    let called = false;
    function assert() {
        if (!called) {
            called = true;
            return;
        }
        throw new Error("[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?");
    }
    function parts(...values) {
        assert();
        for (const part of values)map[part] = toPart(part);
        return anatomy(name, map);
    }
    function extend(...parts2) {
        for (const part of parts2){
            if (part in map) continue;
            map[part] = toPart(part);
        }
        return anatomy(name, map);
    }
    function selectors() {
        const value = Object.fromEntries(Object.entries(map).map(([key, part])=>[
                key,
                part.selector
            ]));
        return value;
    }
    function classnames() {
        const value = Object.fromEntries(Object.entries(map).map(([key, part])=>[
                key,
                part.className
            ]));
        return value;
    }
    function toPart(part) {
        const el = [
            "container",
            "root"
        ].includes(part != null ? part : "") ? [
            name
        ] : [
            name,
            part
        ];
        const attr = el.filter(Boolean).join("__");
        const className = `chakra-${attr}`;
        const partObj = {
            className,
            selector: `.${className}`,
            toString: ()=>part
        };
        return partObj;
    }
    const __type = {};
    return {
        parts,
        toPart,
        extend,
        selectors,
        classnames,
        get keys () {
            return Object.keys(map);
        },
        __type
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lTwFR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addPrefix", ()=>(0, _chunkWSAJBJJ4Mjs.addPrefix));
parcelHelpers.export(exports, "anatomy", ()=>(0, _anatomy.anatomy));
parcelHelpers.export(exports, "blacken", ()=>(0, _chunk6IC2I3BYMjs.blacken));
parcelHelpers.export(exports, "calc", ()=>(0, _chunkXMZHFSTSMjs.calc));
parcelHelpers.export(exports, "complementary", ()=>(0, _chunk6IC2I3BYMjs.complementary));
parcelHelpers.export(exports, "contrast", ()=>(0, _chunk6IC2I3BYMjs.contrast));
parcelHelpers.export(exports, "createBreakpoints", ()=>(0, _chunkN4TQSR52Mjs.createBreakpoints));
parcelHelpers.export(exports, "cssVar", ()=>(0, _chunkWSAJBJJ4Mjs.cssVar));
parcelHelpers.export(exports, "darken", ()=>(0, _chunk6IC2I3BYMjs.darken));
parcelHelpers.export(exports, "generateStripe", ()=>(0, _chunk6IC2I3BYMjs.generateStripe));
parcelHelpers.export(exports, "getColor", ()=>(0, _chunk6IC2I3BYMjs.getColor));
parcelHelpers.export(exports, "getColorVar", ()=>(0, _chunk6IC2I3BYMjs.getColorVar));
parcelHelpers.export(exports, "isAccessible", ()=>(0, _chunk6IC2I3BYMjs.isAccessible));
parcelHelpers.export(exports, "isDark", ()=>(0, _chunk6IC2I3BYMjs.isDark));
parcelHelpers.export(exports, "isDecimal", ()=>(0, _chunkWSAJBJJ4Mjs.isDecimal));
parcelHelpers.export(exports, "isLight", ()=>(0, _chunk6IC2I3BYMjs.isLight));
parcelHelpers.export(exports, "isReadable", ()=>(0, _chunk6IC2I3BYMjs.isReadable));
parcelHelpers.export(exports, "lighten", ()=>(0, _chunk6IC2I3BYMjs.lighten));
parcelHelpers.export(exports, "mode", ()=>(0, _chunkFNB7ZWWXMjs.mode));
parcelHelpers.export(exports, "orient", ()=>(0, _chunkFNB7ZWWXMjs.orient));
parcelHelpers.export(exports, "randomColor", ()=>(0, _chunk6IC2I3BYMjs.randomColor));
parcelHelpers.export(exports, "readability", ()=>(0, _chunk6IC2I3BYMjs.readability));
parcelHelpers.export(exports, "toVar", ()=>(0, _chunkWSAJBJJ4Mjs.toVar));
parcelHelpers.export(exports, "toVarRef", ()=>(0, _chunkWSAJBJJ4Mjs.toVarRef));
parcelHelpers.export(exports, "tone", ()=>(0, _chunk6IC2I3BYMjs.tone));
parcelHelpers.export(exports, "transparentize", ()=>(0, _chunk6IC2I3BYMjs.transparentize));
parcelHelpers.export(exports, "whiten", ()=>(0, _chunk6IC2I3BYMjs.whiten));
var _chunk6IC2I3BYMjs = require("./chunk-6IC2I3BY.mjs");
var _chunkFNB7ZWWXMjs = require("./chunk-FNB7ZWWX.mjs");
var _chunkN4TQSR52Mjs = require("./chunk-N4TQSR52.mjs");
var _chunkXMZHFSTSMjs = require("./chunk-XMZHFSTS.mjs");
var _chunkWSAJBJJ4Mjs = require("./chunk-WSAJBJJ4.mjs");
// src/index.ts
var _anatomy = require("@chakra-ui/anatomy");

},{"./chunk-6IC2I3BY.mjs":"jtJN6","./chunk-FNB7ZWWX.mjs":"fiPdS","./chunk-N4TQSR52.mjs":false,"./chunk-XMZHFSTS.mjs":"fX00d","./chunk-WSAJBJJ4.mjs":"cgRbn","@chakra-ui/anatomy":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jtJN6":[function(require,module,exports) {
// src/color.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getColor", ()=>getColor);
parcelHelpers.export(exports, "getColorVar", ()=>getColorVar);
parcelHelpers.export(exports, "tone", ()=>tone);
parcelHelpers.export(exports, "isDark", ()=>isDark);
parcelHelpers.export(exports, "isLight", ()=>isLight);
parcelHelpers.export(exports, "transparentize", ()=>transparentize);
parcelHelpers.export(exports, "whiten", ()=>whiten);
parcelHelpers.export(exports, "blacken", ()=>blacken);
parcelHelpers.export(exports, "darken", ()=>darken);
parcelHelpers.export(exports, "lighten", ()=>lighten);
parcelHelpers.export(exports, "contrast", ()=>contrast);
parcelHelpers.export(exports, "isAccessible", ()=>isAccessible);
parcelHelpers.export(exports, "isReadable", ()=>isReadable);
parcelHelpers.export(exports, "readability", ()=>readability);
parcelHelpers.export(exports, "complementary", ()=>complementary);
parcelHelpers.export(exports, "generateStripe", ()=>generateStripe);
parcelHelpers.export(exports, "randomColor", ()=>randomColor);
var _styledSystem = require("@chakra-ui/styled-system");
var _color2K = require("color2k");
// ../../../node_modules/.pnpm/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js
function dlv_es_default(t, e, l, n, r) {
    for(e = e.split ? e.split(".") : e, n = 0; n < e.length; n++)t = t ? t[e[n]] : r;
    return t === r ? l : t;
}
// src/color.ts
var isEmptyObject = (obj)=>Object.keys(obj).length === 0;
var getColor = (theme, color, fallback)=>{
    const hex = dlv_es_default(theme, `colors.${color}`, color);
    try {
        (0, _color2K.toHex)(hex);
        return hex;
    } catch  {
        return fallback != null ? fallback : "#000000";
    }
};
var getColorVar = (theme, color, fallback)=>{
    var _a;
    return (_a = (0, _styledSystem.getCSSVar)(theme, "colors", color)) != null ? _a : fallback;
};
var getBrightness = (color)=>{
    const [r, g, b] = (0, _color2K.parseToRgba)(color);
    return (r * 299 + g * 587 + b * 114) / 1e3;
};
var tone = (color)=>(theme)=>{
        const hex = getColor(theme, color);
        const brightness = getBrightness(hex);
        const isDark2 = brightness < 128;
        return isDark2 ? "dark" : "light";
    };
var isDark = (color)=>(theme)=>tone(color)(theme) === "dark";
var isLight = (color)=>(theme)=>tone(color)(theme) === "light";
var transparentize = (color, opacity)=>(theme)=>{
        const raw = getColor(theme, color);
        return (0, _color2K.transparentize)(raw, 1 - opacity);
    };
var whiten = (color, amount)=>(theme)=>{
        const raw = getColor(theme, color);
        return (0, _color2K.toHex)((0, _color2K.mix)(raw, "#fff", amount));
    };
var blacken = (color, amount)=>(theme)=>{
        const raw = getColor(theme, color);
        return (0, _color2K.toHex)((0, _color2K.mix)(raw, "#000", amount / 100));
    };
var darken = (color, amount)=>(theme)=>{
        const raw = getColor(theme, color);
        return (0, _color2K.toHex)((0, _color2K.darken)(raw, amount / 100));
    };
var lighten = (color, amount)=>(theme)=>{
        const raw = getColor(theme, color);
        (0, _color2K.toHex)((0, _color2K.lighten)(raw, amount / 100));
    };
var contrast = (fg, bg)=>(theme)=>(0, _color2K.getContrast)(getColor(theme, bg), getColor(theme, fg));
var isAccessible = (textColor, bgColor, options)=>(theme)=>isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);
function isReadable(color1, color2, wcag2 = {
    level: "AA",
    size: "small"
}) {
    var _a, _b;
    const readabilityLevel = readability(color1, color2);
    switch(((_a = wcag2.level) != null ? _a : "AA") + ((_b = wcag2.size) != null ? _b : "small")){
        case "AAsmall":
        case "AAAlarge":
            return readabilityLevel >= 4.5;
        case "AAlarge":
            return readabilityLevel >= 3;
        case "AAAsmall":
            return readabilityLevel >= 7;
        default:
            return false;
    }
}
function readability(color1, color2) {
    return (Math.max((0, _color2K.getLuminance)(color1), (0, _color2K.getLuminance)(color2)) + 0.05) / (Math.min((0, _color2K.getLuminance)(color1), (0, _color2K.getLuminance)(color2)) + 0.05);
}
var complementary = (color)=>(theme)=>{
        const raw = getColor(theme, color);
        const hsl = (0, _color2K.parseToHsla)(raw);
        const complementHsl = Object.assign(hsl, [
            (hsl[0] + 180) % 360
        ]);
        return (0, _color2K.toHex)((0, _color2K.hsla)(...complementHsl));
    };
function generateStripe(size = "1rem", color = "rgba(255, 255, 255, 0.15)") {
    return {
        backgroundImage: `linear-gradient(
    45deg,
    ${color} 25%,
    transparent 25%,
    transparent 50%,
    ${color} 50%,
    ${color} 75%,
    transparent 75%,
    transparent
  )`,
        backgroundSize: `${size} ${size}`
    };
}
var randomHex = ()=>`#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
function randomColor(opts) {
    const fallback = randomHex();
    if (!opts || isEmptyObject(opts)) return fallback;
    if (opts.string && opts.colors) return randomColorFromList(opts.string, opts.colors);
    if (opts.string && !opts.colors) return randomColorFromString(opts.string);
    if (opts.colors && !opts.string) return randomFromList(opts.colors);
    return fallback;
}
function randomColorFromString(str) {
    let hash = 0;
    if (str.length === 0) return hash.toString();
    for(let i = 0; i < str.length; i += 1){
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
        hash = hash & hash;
    }
    let color = "#";
    for(let j = 0; j < 3; j += 1){
        const value = hash >> j * 8 & 255;
        color += `00${value.toString(16)}`.substr(-2);
    }
    return color;
}
function randomColorFromList(str, list) {
    let index = 0;
    if (str.length === 0) return list[0];
    for(let i = 0; i < str.length; i += 1){
        index = str.charCodeAt(i) + ((index << 5) - index);
        index = index & index;
    }
    index = (index % list.length + list.length) % list.length;
    return list[index];
}
function randomFromList(list) {
    return list[Math.floor(Math.random() * list.length)];
}

},{"@chakra-ui/styled-system":"l3oON","color2k":"8Zcgr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Zcgr":[function(require,module,exports) {
/**
 * A simple guard function:
 *
 * ```js
 * Math.min(Math.max(low, value), high)
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorError", ()=>ColorError$1);
parcelHelpers.export(exports, "adjustHue", ()=>adjustHue);
parcelHelpers.export(exports, "darken", ()=>darken);
parcelHelpers.export(exports, "desaturate", ()=>desaturate);
parcelHelpers.export(exports, "getContrast", ()=>getContrast);
parcelHelpers.export(exports, "getLuminance", ()=>getLuminance);
parcelHelpers.export(exports, "getScale", ()=>getScale);
parcelHelpers.export(exports, "guard", ()=>guard);
parcelHelpers.export(exports, "hasBadContrast", ()=>hasBadContrast);
parcelHelpers.export(exports, "hsla", ()=>hsla);
parcelHelpers.export(exports, "lighten", ()=>lighten);
parcelHelpers.export(exports, "mix", ()=>mix);
parcelHelpers.export(exports, "opacify", ()=>opacify);
parcelHelpers.export(exports, "parseToHsla", ()=>parseToHsla);
parcelHelpers.export(exports, "parseToRgba", ()=>parseToRgba);
parcelHelpers.export(exports, "readableColor", ()=>readableColor);
parcelHelpers.export(exports, "readableColorIsBlack", ()=>readableColorIsBlack);
parcelHelpers.export(exports, "rgba", ()=>rgba);
parcelHelpers.export(exports, "saturate", ()=>saturate);
parcelHelpers.export(exports, "toHex", ()=>toHex);
parcelHelpers.export(exports, "toHsla", ()=>toHsla);
parcelHelpers.export(exports, "toRgba", ()=>toRgba);
parcelHelpers.export(exports, "transparentize", ()=>transparentize);
function guard(low, high, value) {
    return Math.min(Math.max(low, value), high);
}
class ColorError extends Error {
    constructor(color){
        super(`Failed to parse color: "${color}"`);
    }
}
var ColorError$1 = ColorError;
/**
 * Parses a color into red, gree, blue, alpha parts
 *
 * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color
 */ function parseToRgba(color) {
    if (typeof color !== "string") throw new ColorError$1(color);
    if (color.trim().toLowerCase() === "transparent") return [
        0,
        0,
        0,
        0
    ];
    let normalizedColor = color.trim();
    normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;
    const reducedHexMatch = reducedHexRegex.exec(normalizedColor);
    if (reducedHexMatch) {
        const arr = Array.from(reducedHexMatch).slice(1);
        return [
            ...arr.slice(0, 3).map((x)=>parseInt(r(x, 2), 16)),
            parseInt(r(arr[3] || "f", 2), 16) / 255
        ];
    }
    const hexMatch = hexRegex.exec(normalizedColor);
    if (hexMatch) {
        const arr = Array.from(hexMatch).slice(1);
        return [
            ...arr.slice(0, 3).map((x)=>parseInt(x, 16)),
            parseInt(arr[3] || "ff", 16) / 255
        ];
    }
    const rgbaMatch = rgbaRegex.exec(normalizedColor);
    if (rgbaMatch) {
        const arr = Array.from(rgbaMatch).slice(1);
        return [
            ...arr.slice(0, 3).map((x)=>parseInt(x, 10)),
            parseFloat(arr[3] || "1")
        ];
    }
    const hslaMatch = hslaRegex.exec(normalizedColor);
    if (hslaMatch) {
        const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);
        if (guard(0, 100, s) !== s) throw new ColorError$1(color);
        if (guard(0, 100, l) !== l) throw new ColorError$1(color);
        return [
            ...hslToRgb(h, s, l),
            Number.isNaN(a) ? 1 : a
        ];
    }
    throw new ColorError$1(color);
}
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while(i)hash = hash * 33 ^ str.charCodeAt(--i);
    /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
   * integers. Since we want the results to be always positive, convert the
   * signed int to an unsigned by doing an unsigned bitshift. */ return (hash >>> 0) % 2341;
}
const colorToInt = (x)=>parseInt(x.replace(/_/g, ""), 36);
const compressedColorMap = "1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm".split(" ").reduce((acc, next)=>{
    const key = colorToInt(next.substring(0, 3));
    const hex = colorToInt(next.substring(3)).toString(16);
    // NOTE: padStart could be used here but it breaks Node 6 compat
    // https://github.com/ricokahler/color2k/issues/351
    let prefix = "";
    for(let i = 0; i < 6 - hex.length; i++)prefix += "0";
    acc[key] = `${prefix}${hex}`;
    return acc;
}, {});
/**
 * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.
 */ function nameToHex(color) {
    const normalizedColorName = color.toLowerCase().trim();
    const result = compressedColorMap[hash(normalizedColorName)];
    if (!result) throw new ColorError$1(color);
    return `#${result}`;
}
const r = (str, amount)=>Array.from(Array(amount)).map(()=>str).join("");
const reducedHexRegex = new RegExp(`^#${r("([a-f0-9])", 3)}([a-f0-9])?$`, "i");
const hexRegex = new RegExp(`^#${r("([a-f0-9]{2})", 3)}([a-f0-9]{2})?$`, "i");
const rgbaRegex = new RegExp(`^rgba?\\(\\s*(\\d+)\\s*${r(",\\s*(\\d+)\\s*", 2)}(?:,\\s*([\\d.]+))?\\s*\\)$`, "i");
const hslaRegex = /^hsla?\(\s*([\d.]+)\s*,\s*([\d.]+)%\s*,\s*([\d.]+)%(?:\s*,\s*([\d.]+))?\s*\)$/i;
const namedColorRegex = /^[a-z]+$/i;
const roundColor = (color)=>{
    return Math.round(color * 255);
};
const hslToRgb = (hue, saturation, lightness)=>{
    let l = lightness / 100;
    if (saturation === 0) // achromatic
    return [
        l,
        l,
        l
    ].map(roundColor);
    // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV
    const huePrime = (hue % 360 + 360) % 360 / 60;
    const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);
    const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
    let red = 0;
    let green = 0;
    let blue = 0;
    if (huePrime >= 0 && huePrime < 1) {
        red = chroma;
        green = secondComponent;
    } else if (huePrime >= 1 && huePrime < 2) {
        red = secondComponent;
        green = chroma;
    } else if (huePrime >= 2 && huePrime < 3) {
        green = chroma;
        blue = secondComponent;
    } else if (huePrime >= 3 && huePrime < 4) {
        green = secondComponent;
        blue = chroma;
    } else if (huePrime >= 4 && huePrime < 5) {
        red = secondComponent;
        blue = chroma;
    } else if (huePrime >= 5 && huePrime < 6) {
        red = chroma;
        blue = secondComponent;
    }
    const lightnessModification = l - chroma / 2;
    const finalRed = red + lightnessModification;
    const finalGreen = green + lightnessModification;
    const finalBlue = blue + lightnessModification;
    return [
        finalRed,
        finalGreen,
        finalBlue
    ].map(roundColor);
};
// taken from:
/**
 * Parses a color in hue, saturation, lightness, and the alpha channel.
 *
 * Hue is a number between 0 and 360, saturation, lightness, and alpha are
 * decimal percentages between 0 and 1
 */ function parseToHsla(color) {
    const [red, green, blue, alpha] = parseToRgba(color).map((value, index)=>// 3rd index is alpha channel which is already normalized
        index === 3 ? value : value / 255);
    const max = Math.max(red, green, blue);
    const min = Math.min(red, green, blue);
    const lightness = (max + min) / 2;
    // achromatic
    if (max === min) return [
        0,
        0,
        lightness,
        alpha
    ];
    const delta = max - min;
    const saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);
    const hue = 60 * (red === max ? (green - blue) / delta + (green < blue ? 6 : 0) : green === max ? (blue - red) / delta + 2 : (red - green) / delta + 4);
    return [
        hue,
        saturation,
        lightness,
        alpha
    ];
}
/**
 * Takes in hsla parts and constructs an hsla string
 *
 * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue
 * @param saturation Percentage of saturation, given as a decimal between 0 and 1
 * @param lightness Percentage of lightness, given as a decimal between 0 and 1
 * @param alpha Percentage of opacity, given as a decimal between 0 and 1
 */ function hsla(hue, saturation, lightness, alpha) {
    return `hsla(${(hue % 360).toFixed()}, ${guard(0, 100, saturation * 100).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;
}
/**
 * Adjusts the current hue of the color by the given degrees. Wraps around when
 * over 360.
 *
 * @param color input color
 * @param degrees degrees to adjust the input color, accepts degree integers
 * (0 - 360) and wraps around on overflow
 */ function adjustHue(color, degrees) {
    const [h, s, l, a] = parseToHsla(color);
    return hsla(h + degrees, s, l, a);
}
/**
 * Darkens using lightness. This is equivalent to subtracting the lightness
 * from the L in HSL.
 *
 * @param amount The amount to darken, given as a decimal between 0 and 1
 */ function darken(color, amount) {
    const [hue, saturation, lightness, alpha] = parseToHsla(color);
    return hsla(hue, saturation, lightness - amount, alpha);
}
/**
 * Desaturates the input color by the given amount via subtracting from the `s`
 * in `hsla`.
 *
 * @param amount The amount to desaturate, given as a decimal between 0 and 1
 */ function desaturate(color, amount) {
    const [h, s, l, a] = parseToHsla(color);
    return hsla(h, s - amount, l, a);
}
// taken from:
// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js
/**
 * Returns a number (float) representing the luminance of a color.
 */ function getLuminance(color) {
    if (color === "transparent") return 0;
    function f(x) {
        const channel = x / 255;
        return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);
    }
    const [r, g, b] = parseToRgba(color);
    return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);
}
// taken from:
/**
 * Returns the contrast ratio between two colors based on
 * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).
 */ function getContrast(color1, color2) {
    const luminance1 = getLuminance(color1);
    const luminance2 = getLuminance(color2);
    return luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05);
}
/**
 * Takes in rgba parts and returns an rgba string
 *
 * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive
 * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive
 * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive
 * @param alpha Percentage of opacity, given as a decimal between 0 and 1
 */ function rgba(red, green, blue, alpha) {
    return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;
}
/**
 * Mixes two colors together. Taken from sass's implementation.
 */ function mix(color1, color2, weight) {
    const normalize = (n, index)=>// 3rd index is alpha channel which is already normalized
        index === 3 ? n : n / 255;
    const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);
    const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);
    // The formula is copied from the original Sass implementation:
    // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method
    const alphaDelta = a2 - a1;
    const normalizedWeight = weight * 2 - 1;
    const combinedWeight = normalizedWeight * alphaDelta === -1 ? normalizedWeight : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);
    const weight2 = (combinedWeight + 1) / 2;
    const weight1 = 1 - weight2;
    const r = (r1 * weight1 + r2 * weight2) * 255;
    const g = (g1 * weight1 + g2 * weight2) * 255;
    const b = (b1 * weight1 + b2 * weight2) * 255;
    const a = a2 * weight + a1 * (1 - weight);
    return rgba(r, g, b, a);
}
/**
 * Given a series colors, this function will return a `scale(x)` function that
 * accepts a percentage as a decimal between 0 and 1 and returns the color at
 * that percentage in the scale.
 *
 * ```js
 * const scale = getScale('red', 'yellow', 'green');
 * console.log(scale(0)); // rgba(255, 0, 0, 1)
 * console.log(scale(0.5)); // rgba(255, 255, 0, 1)
 * console.log(scale(1)); // rgba(0, 128, 0, 1)
 * ```
 *
 * If you'd like to limit the domain and range like chroma-js, we recommend
 * wrapping scale again.
 *
 * ```js
 * const _scale = getScale('red', 'yellow', 'green');
 * const scale = x => _scale(x / 100);
 *
 * console.log(scale(0)); // rgba(255, 0, 0, 1)
 * console.log(scale(50)); // rgba(255, 255, 0, 1)
 * console.log(scale(100)); // rgba(0, 128, 0, 1)
 * ```
 */ function getScale(...colors) {
    return (n)=>{
        const lastIndex = colors.length - 1;
        const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));
        const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));
        const color1 = colors[lowIndex];
        const color2 = colors[highIndex];
        const unit = 1 / lastIndex;
        const weight = (n - unit * lowIndex) / unit;
        return mix(color1, color2, weight);
    };
}
const guidelines = {
    decorative: 1.5,
    readable: 3,
    aa: 4.5,
    aaa: 7
};
/**
 * Returns whether or not a color has bad contrast against a background
 * according to a given standard.
 */ function hasBadContrast(color, standard = "aa", background = "#fff") {
    return getContrast(color, background) < guidelines[standard];
}
/**
 * Lightens a color by a given amount. This is equivalent to
 * `darken(color, -amount)`
 *
 * @param amount The amount to darken, given as a decimal between 0 and 1
 */ function lighten(color, amount) {
    return darken(color, -amount);
}
/**
 * Takes in a color and makes it more transparent by convert to `rgba` and
 * decreasing the amount in the alpha channel.
 *
 * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1
 */ function transparentize(color, amount) {
    const [r, g, b, a] = parseToRgba(color);
    return rgba(r, g, b, a - amount);
}
/**
 * Takes a color and un-transparentizes it. Equivalent to
 * `transparentize(color, -amount)`
 *
 * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1
 */ function opacify(color, amount) {
    return transparentize(color, -amount);
}
/**
 * An alternative function to `readableColor`. Returns whether or not the 
 * readable color (i.e. the color to be place on top the input color) should be
 * black.
 */ function readableColorIsBlack(color) {
    return getLuminance(color) > 0.179;
}
/**
 * Returns black or white for best contrast depending on the luminosity of the
 * given color.
 */ function readableColor(color) {
    return readableColorIsBlack(color) ? "#000" : "#fff";
}
/**
 * Saturates a color by converting it to `hsl` and increasing the saturation
 * amount. Equivalent to `desaturate(color, -amount)`
 * 
 * @param color Input color
 * @param amount The amount to darken, given as a decimal between 0 and 1
 */ function saturate(color, amount) {
    return desaturate(color, -amount);
}
/**
 * Takes in any color and returns it as a hex code.
 */ function toHex(color) {
    const [r, g, b, a] = parseToRgba(color);
    let hex = (x)=>{
        const h = guard(0, 255, x).toString(16);
        // NOTE: padStart could be used here but it breaks Node 6 compat
        // https://github.com/ricokahler/color2k/issues/351
        return h.length === 1 ? `0${h}` : h;
    };
    return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ""}`;
}
/**
 * Takes in any color and returns it as an rgba string.
 */ function toRgba(color) {
    return rgba(...parseToRgba(color));
}
/**
 * Takes in any color and returns it as an hsla string.
 */ function toHsla(color) {
    return hsla(...parseToHsla(color));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fiPdS":[function(require,module,exports) {
// src/component.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mode", ()=>mode);
parcelHelpers.export(exports, "orient", ()=>orient);
function mode(light, dark) {
    return (props)=>props.colorMode === "dark" ? dark : light;
}
function orient(options) {
    const { orientation, vertical, horizontal } = options;
    if (!orientation) return {};
    return orientation === "vertical" ? vertical : horizontal;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fX00d":[function(require,module,exports) {
// src/css-calc.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calc", ()=>calc);
var _sharedUtils = require("@chakra-ui/shared-utils");
function toRef(operand) {
    if ((0, _sharedUtils.isObject)(operand) && operand.reference) return operand.reference;
    return String(operand);
}
var toExpr = (operator, ...operands)=>operands.map(toRef).join(` ${operator} `).replace(/calc/g, "");
var add = (...operands)=>`calc(${toExpr("+", ...operands)})`;
var subtract = (...operands)=>`calc(${toExpr("-", ...operands)})`;
var multiply = (...operands)=>`calc(${toExpr("*", ...operands)})`;
var divide = (...operands)=>`calc(${toExpr("/", ...operands)})`;
var negate = (x)=>{
    const value = toRef(x);
    if (value != null && !Number.isNaN(parseFloat(value))) return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
    return multiply(value, -1);
};
var calc = Object.assign((x)=>({
        add: (...operands)=>calc(add(x, ...operands)),
        subtract: (...operands)=>calc(subtract(x, ...operands)),
        multiply: (...operands)=>calc(multiply(x, ...operands)),
        divide: (...operands)=>calc(divide(x, ...operands)),
        negate: ()=>calc(negate(x)),
        toString: ()=>x.toString()
    }), {
    add,
    subtract,
    multiply,
    divide,
    negate
});

},{"@chakra-ui/shared-utils":"h33Zu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cgRbn":[function(require,module,exports) {
// src/css-var.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isDecimal", ()=>isDecimal);
parcelHelpers.export(exports, "addPrefix", ()=>addPrefix);
parcelHelpers.export(exports, "toVarRef", ()=>toVarRef);
parcelHelpers.export(exports, "toVar", ()=>toVar);
parcelHelpers.export(exports, "cssVar", ()=>cssVar);
function isDecimal(value) {
    return !Number.isInteger(parseFloat(value.toString()));
}
function replaceWhiteSpace(value, replaceValue = "-") {
    return value.replace(/\s+/g, replaceValue);
}
function escape(value) {
    const valueStr = replaceWhiteSpace(value.toString());
    if (valueStr.includes("\\.")) return value;
    return isDecimal(value) ? valueStr.replace(".", `\\.`) : value;
}
function addPrefix(value, prefix = "") {
    return [
        prefix,
        escape(value)
    ].filter(Boolean).join("-");
}
function toVarRef(name, fallback) {
    return `var(${escape(name)}${fallback ? `, ${fallback}` : ""})`;
}
function toVar(value, prefix = "") {
    return `--${addPrefix(value, prefix)}`;
}
function cssVar(name, options) {
    const cssVariable = toVar(name, options == null ? void 0 : options.prefix);
    return {
        variable: cssVariable,
        reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))
    };
}
function getFallback(fallback) {
    if (typeof fallback === "string") return fallback;
    return fallback == null ? void 0 : fallback.reference;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0gZ0":[function(require,module,exports) {
// src/components/table.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tableTheme", ()=>tableTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.tableAnatomy).keys);
var baseStyle = definePartsStyle({
    table: {
        fontVariantNumeric: "lining-nums tabular-nums",
        borderCollapse: "collapse",
        width: "full"
    },
    th: {
        fontFamily: "heading",
        fontWeight: "bold",
        textTransform: "uppercase",
        letterSpacing: "wider",
        textAlign: "start"
    },
    td: {
        textAlign: "start"
    },
    caption: {
        mt: 4,
        fontFamily: "heading",
        textAlign: "center",
        fontWeight: "medium"
    }
});
var numericStyles = (0, _styledSystem.defineStyle)({
    "&[data-is-numeric=true]": {
        textAlign: "end"
    }
});
var variantSimple = definePartsStyle((props)=>{
    const { colorScheme: c } = props;
    return {
        th: {
            color: (0, _themeTools.mode)("gray.600", "gray.400")(props),
            borderBottom: "1px",
            borderColor: (0, _themeTools.mode)(`${c}.100`, `${c}.700`)(props),
            ...numericStyles
        },
        td: {
            borderBottom: "1px",
            borderColor: (0, _themeTools.mode)(`${c}.100`, `${c}.700`)(props),
            ...numericStyles
        },
        caption: {
            color: (0, _themeTools.mode)("gray.600", "gray.100")(props)
        },
        tfoot: {
            tr: {
                "&:last-of-type": {
                    th: {
                        borderBottomWidth: 0
                    }
                }
            }
        }
    };
});
var variantStripe = definePartsStyle((props)=>{
    const { colorScheme: c } = props;
    return {
        th: {
            color: (0, _themeTools.mode)("gray.600", "gray.400")(props),
            borderBottom: "1px",
            borderColor: (0, _themeTools.mode)(`${c}.100`, `${c}.700`)(props),
            ...numericStyles
        },
        td: {
            borderBottom: "1px",
            borderColor: (0, _themeTools.mode)(`${c}.100`, `${c}.700`)(props),
            ...numericStyles
        },
        caption: {
            color: (0, _themeTools.mode)("gray.600", "gray.100")(props)
        },
        tbody: {
            tr: {
                "&:nth-of-type(odd)": {
                    "th, td": {
                        borderBottomWidth: "1px",
                        borderColor: (0, _themeTools.mode)(`${c}.100`, `${c}.700`)(props)
                    },
                    td: {
                        background: (0, _themeTools.mode)(`${c}.100`, `${c}.700`)(props)
                    }
                }
            }
        },
        tfoot: {
            tr: {
                "&:last-of-type": {
                    th: {
                        borderBottomWidth: 0
                    }
                }
            }
        }
    };
});
var variants = {
    simple: variantSimple,
    striped: variantStripe,
    unstyled: (0, _styledSystem.defineStyle)({})
};
var sizes = {
    sm: definePartsStyle({
        th: {
            px: "4",
            py: "1",
            lineHeight: "4",
            fontSize: "xs"
        },
        td: {
            px: "4",
            py: "2",
            fontSize: "sm",
            lineHeight: "4"
        },
        caption: {
            px: "4",
            py: "2",
            fontSize: "xs"
        }
    }),
    md: definePartsStyle({
        th: {
            px: "6",
            py: "3",
            lineHeight: "4",
            fontSize: "xs"
        },
        td: {
            px: "6",
            py: "4",
            lineHeight: "5"
        },
        caption: {
            px: "6",
            py: "2",
            fontSize: "sm"
        }
    }),
    lg: definePartsStyle({
        th: {
            px: "8",
            py: "4",
            lineHeight: "5",
            fontSize: "sm"
        },
        td: {
            px: "8",
            py: "5",
            lineHeight: "6"
        },
        caption: {
            px: "6",
            py: "2",
            fontSize: "md"
        }
    })
};
var tableTheme = defineMultiStyleConfig({
    baseStyle,
    variants,
    sizes,
    defaultProps: {
        variant: "simple",
        size: "md",
        colorScheme: "gray"
    }
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eOK9H":[function(require,module,exports) {
// src/components/tabs.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tabsTheme", ()=>tabsTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var $fg = (0, _styledSystem.cssVar)("tabs-color");
var $bg = (0, _styledSystem.cssVar)("tabs-bg");
var $border = (0, _styledSystem.cssVar)("tabs-border-color");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.tabsAnatomy).keys);
var baseStyleRoot = (0, _styledSystem.defineStyle)((props)=>{
    const { orientation } = props;
    return {
        display: orientation === "vertical" ? "flex" : "block"
    };
});
var baseStyleTab = (0, _styledSystem.defineStyle)((props)=>{
    const { isFitted } = props;
    return {
        flex: isFitted ? 1 : void 0,
        transitionProperty: "common",
        transitionDuration: "normal",
        _focusVisible: {
            zIndex: 1,
            boxShadow: "outline"
        },
        _disabled: {
            cursor: "not-allowed",
            opacity: 0.4
        }
    };
});
var baseStyleTablist = (0, _styledSystem.defineStyle)((props)=>{
    const { align = "start", orientation } = props;
    const alignments = {
        end: "flex-end",
        center: "center",
        start: "flex-start"
    };
    return {
        justifyContent: alignments[align],
        flexDirection: orientation === "vertical" ? "column" : "row"
    };
});
var baseStyleTabpanel = (0, _styledSystem.defineStyle)({
    p: 4
});
var baseStyle = definePartsStyle((props)=>({
        root: baseStyleRoot(props),
        tab: baseStyleTab(props),
        tablist: baseStyleTablist(props),
        tabpanel: baseStyleTabpanel
    }));
var sizes = {
    sm: definePartsStyle({
        tab: {
            py: 1,
            px: 4,
            fontSize: "sm"
        }
    }),
    md: definePartsStyle({
        tab: {
            fontSize: "md",
            py: 2,
            px: 4
        }
    }),
    lg: definePartsStyle({
        tab: {
            fontSize: "lg",
            py: 3,
            px: 4
        }
    })
};
var variantLine = definePartsStyle((props)=>{
    const { colorScheme: c, orientation } = props;
    const isVertical = orientation === "vertical";
    const borderProp = isVertical ? "borderStart" : "borderBottom";
    const marginProp = isVertical ? "marginStart" : "marginBottom";
    return {
        tablist: {
            [borderProp]: "2px solid",
            borderColor: "inherit"
        },
        tab: {
            [borderProp]: "2px solid",
            borderColor: "transparent",
            [marginProp]: "-2px",
            _selected: {
                [$fg.variable]: `colors.${c}.600`,
                _dark: {
                    [$fg.variable]: `colors.${c}.300`
                },
                borderColor: "currentColor"
            },
            _active: {
                [$bg.variable]: "colors.gray.200",
                _dark: {
                    [$bg.variable]: "colors.whiteAlpha.300"
                }
            },
            _disabled: {
                _active: {
                    bg: "none"
                }
            },
            color: $fg.reference,
            bg: $bg.reference
        }
    };
});
var variantEnclosed = definePartsStyle((props)=>{
    const { colorScheme: c } = props;
    return {
        tab: {
            borderTopRadius: "md",
            border: "1px solid",
            borderColor: "transparent",
            mb: "-1px",
            [$border.variable]: "transparent",
            _selected: {
                [$fg.variable]: `colors.${c}.600`,
                [$border.variable]: `colors.white`,
                _dark: {
                    [$fg.variable]: `colors.${c}.300`,
                    [$border.variable]: `colors.gray.800`
                },
                borderColor: "inherit",
                borderBottomColor: $border.reference
            },
            color: $fg.reference
        },
        tablist: {
            mb: "-1px",
            borderBottom: "1px solid",
            borderColor: "inherit"
        }
    };
});
var variantEnclosedColored = definePartsStyle((props)=>{
    const { colorScheme: c } = props;
    return {
        tab: {
            border: "1px solid",
            borderColor: "inherit",
            [$bg.variable]: "colors.gray.50",
            _dark: {
                [$bg.variable]: "colors.whiteAlpha.50"
            },
            mb: "-1px",
            _notLast: {
                marginEnd: "-1px"
            },
            _selected: {
                [$bg.variable]: "colors.white",
                [$fg.variable]: `colors.${c}.600`,
                _dark: {
                    [$bg.variable]: "colors.gray.800",
                    [$fg.variable]: `colors.${c}.300`
                },
                borderColor: "inherit",
                borderTopColor: "currentColor",
                borderBottomColor: "transparent"
            },
            color: $fg.reference,
            bg: $bg.reference
        },
        tablist: {
            mb: "-1px",
            borderBottom: "1px solid",
            borderColor: "inherit"
        }
    };
});
var variantSoftRounded = definePartsStyle((props)=>{
    const { colorScheme: c, theme } = props;
    return {
        tab: {
            borderRadius: "full",
            fontWeight: "semibold",
            color: "gray.600",
            _selected: {
                color: (0, _themeTools.getColor)(theme, `${c}.700`),
                bg: (0, _themeTools.getColor)(theme, `${c}.100`)
            }
        }
    };
});
var variantSolidRounded = definePartsStyle((props)=>{
    const { colorScheme: c } = props;
    return {
        tab: {
            borderRadius: "full",
            fontWeight: "semibold",
            [$fg.variable]: "colors.gray.600",
            _dark: {
                [$fg.variable]: "inherit"
            },
            _selected: {
                [$fg.variable]: "colors.white",
                [$bg.variable]: `colors.${c}.600`,
                _dark: {
                    [$fg.variable]: "colors.gray.800",
                    [$bg.variable]: `colors.${c}.300`
                }
            },
            color: $fg.reference,
            bg: $bg.reference
        }
    };
});
var variantUnstyled = definePartsStyle({});
var variants = {
    line: variantLine,
    enclosed: variantEnclosed,
    "enclosed-colored": variantEnclosedColored,
    "soft-rounded": variantSoftRounded,
    "solid-rounded": variantSolidRounded,
    unstyled: variantUnstyled
};
var tabsTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    variants,
    defaultProps: {
        size: "md",
        variant: "line",
        colorScheme: "blue"
    }
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCnyZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tagTheme", ()=>tagTheme);
var _chunkZQMLTFF3Mjs = require("./chunk-ZQMLTFF3.mjs");
// src/components/tag.ts
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.tagAnatomy).keys);
var $bg = (0, _styledSystem.cssVar)("tag-bg");
var $color = (0, _styledSystem.cssVar)("tag-color");
var $shadow = (0, _styledSystem.cssVar)("tag-shadow");
var $minH = (0, _styledSystem.cssVar)("tag-min-height");
var $minW = (0, _styledSystem.cssVar)("tag-min-width");
var $fontSize = (0, _styledSystem.cssVar)("tag-font-size");
var $paddingX = (0, _styledSystem.cssVar)("tag-padding-inline");
var baseStyleContainer = (0, _styledSystem.defineStyle)({
    fontWeight: "medium",
    lineHeight: 1.2,
    outline: 0,
    [$color.variable]: (0, _chunkZQMLTFF3Mjs.vars).color.reference,
    [$bg.variable]: (0, _chunkZQMLTFF3Mjs.vars).bg.reference,
    [$shadow.variable]: (0, _chunkZQMLTFF3Mjs.vars).shadow.reference,
    color: $color.reference,
    bg: $bg.reference,
    boxShadow: $shadow.reference,
    borderRadius: "md",
    minH: $minH.reference,
    minW: $minW.reference,
    fontSize: $fontSize.reference,
    px: $paddingX.reference,
    _focusVisible: {
        [$shadow.variable]: "shadows.outline"
    }
});
var baseStyleLabel = (0, _styledSystem.defineStyle)({
    lineHeight: 1.2,
    overflow: "visible"
});
var baseStyleCloseButton = (0, _styledSystem.defineStyle)({
    fontSize: "lg",
    w: "5",
    h: "5",
    transitionProperty: "common",
    transitionDuration: "normal",
    borderRadius: "full",
    marginStart: "1.5",
    marginEnd: "-1",
    opacity: 0.5,
    _disabled: {
        opacity: 0.4
    },
    _focusVisible: {
        boxShadow: "outline",
        bg: "rgba(0, 0, 0, 0.14)"
    },
    _hover: {
        opacity: 0.8
    },
    _active: {
        opacity: 1
    }
});
var baseStyle = definePartsStyle({
    container: baseStyleContainer,
    label: baseStyleLabel,
    closeButton: baseStyleCloseButton
});
var sizes = {
    sm: definePartsStyle({
        container: {
            [$minH.variable]: "sizes.5",
            [$minW.variable]: "sizes.5",
            [$fontSize.variable]: "fontSizes.xs",
            [$paddingX.variable]: "space.2"
        },
        closeButton: {
            marginEnd: "-2px",
            marginStart: "0.35rem"
        }
    }),
    md: definePartsStyle({
        container: {
            [$minH.variable]: "sizes.6",
            [$minW.variable]: "sizes.6",
            [$fontSize.variable]: "fontSizes.sm",
            [$paddingX.variable]: "space.2"
        }
    }),
    lg: definePartsStyle({
        container: {
            [$minH.variable]: "sizes.8",
            [$minW.variable]: "sizes.8",
            [$fontSize.variable]: "fontSizes.md",
            [$paddingX.variable]: "space.3"
        }
    })
};
var variants = {
    subtle: definePartsStyle((props)=>{
        var _a;
        return {
            container: (_a = (0, _chunkZQMLTFF3Mjs.badgeTheme).variants) == null ? void 0 : _a.subtle(props)
        };
    }),
    solid: definePartsStyle((props)=>{
        var _a;
        return {
            container: (_a = (0, _chunkZQMLTFF3Mjs.badgeTheme).variants) == null ? void 0 : _a.solid(props)
        };
    }),
    outline: definePartsStyle((props)=>{
        var _a;
        return {
            container: (_a = (0, _chunkZQMLTFF3Mjs.badgeTheme).variants) == null ? void 0 : _a.outline(props)
        };
    })
};
var tagTheme = defineMultiStyleConfig({
    variants,
    baseStyle,
    sizes,
    defaultProps: {
        size: "md",
        variant: "subtle",
        colorScheme: "gray"
    }
});

},{"./chunk-ZQMLTFF3.mjs":"41w8N","@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"41w8N":[function(require,module,exports) {
// src/components/badge.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "vars", ()=>vars);
parcelHelpers.export(exports, "badgeTheme", ()=>badgeTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var vars = (0, _styledSystem.defineCssVars)("badge", [
    "bg",
    "color",
    "shadow"
]);
var baseStyle = (0, _styledSystem.defineStyle)({
    px: 1,
    textTransform: "uppercase",
    fontSize: "xs",
    borderRadius: "sm",
    fontWeight: "bold",
    bg: vars.bg.reference,
    color: vars.color.reference,
    boxShadow: vars.shadow.reference
});
var variantSolid = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c, theme } = props;
    const dark = (0, _themeTools.transparentize)(`${c}.500`, 0.6)(theme);
    return {
        [vars.bg.variable]: `colors.${c}.500`,
        [vars.color.variable]: `colors.white`,
        _dark: {
            [vars.bg.variable]: dark,
            [vars.color.variable]: `colors.whiteAlpha.800`
        }
    };
});
var variantSubtle = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c, theme } = props;
    const darkBg = (0, _themeTools.transparentize)(`${c}.200`, 0.16)(theme);
    return {
        [vars.bg.variable]: `colors.${c}.100`,
        [vars.color.variable]: `colors.${c}.800`,
        _dark: {
            [vars.bg.variable]: darkBg,
            [vars.color.variable]: `colors.${c}.200`
        }
    };
});
var variantOutline = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c, theme } = props;
    const darkColor = (0, _themeTools.transparentize)(`${c}.200`, 0.8)(theme);
    return {
        [vars.color.variable]: `colors.${c}.500`,
        _dark: {
            [vars.color.variable]: darkColor
        },
        [vars.shadow.variable]: `inset 0 0 0px 1px ${vars.color.reference}`
    };
});
var variants = {
    solid: variantSolid,
    subtle: variantSubtle,
    outline: variantOutline
};
var badgeTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle,
    variants,
    defaultProps: {
        variant: "subtle",
        colorScheme: "gray"
    }
});

},{"@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b7hMM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "textareaTheme", ()=>textareaTheme);
var _chunkICL3HPTTMjs = require("./chunk-ICL3HPTT.mjs");
// src/components/textarea.ts
var _styledSystem = require("@chakra-ui/styled-system");
var _a;
var baseStyle = (0, _styledSystem.defineStyle)({
    ...(_a = (0, _chunkICL3HPTTMjs.inputTheme).baseStyle) == null ? void 0 : _a.field,
    paddingY: "2",
    minHeight: "20",
    lineHeight: "short",
    verticalAlign: "top"
});
var _a2, _b;
var variants = {
    outline: (0, _styledSystem.defineStyle)((props)=>{
        var _a4, _b3;
        return (_b3 = (_a4 = (0, _chunkICL3HPTTMjs.inputTheme).variants) == null ? void 0 : _a4.outline(props).field) != null ? _b3 : {};
    }),
    flushed: (0, _styledSystem.defineStyle)((props)=>{
        var _a4, _b3;
        return (_b3 = (_a4 = (0, _chunkICL3HPTTMjs.inputTheme).variants) == null ? void 0 : _a4.flushed(props).field) != null ? _b3 : {};
    }),
    filled: (0, _styledSystem.defineStyle)((props)=>{
        var _a4, _b3;
        return (_b3 = (_a4 = (0, _chunkICL3HPTTMjs.inputTheme).variants) == null ? void 0 : _a4.filled(props).field) != null ? _b3 : {};
    }),
    unstyled: (_b = (_a2 = (0, _chunkICL3HPTTMjs.inputTheme).variants) == null ? void 0 : _a2.unstyled.field) != null ? _b : {}
};
var _a3, _b2, _c, _d, _e, _f, _g, _h;
var sizes = {
    xs: (_b2 = (_a3 = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _a3.xs.field) != null ? _b2 : {},
    sm: (_d = (_c = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _c.sm.field) != null ? _d : {},
    md: (_f = (_e = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _e.md.field) != null ? _f : {},
    lg: (_h = (_g = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _g.lg.field) != null ? _h : {}
};
var textareaTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle,
    sizes,
    variants,
    defaultProps: {
        size: "md",
        variant: "outline"
    }
});

},{"./chunk-ICL3HPTT.mjs":"6RdGo","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6RdGo":[function(require,module,exports) {
// src/components/input.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inputTheme", ()=>inputTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.inputAnatomy).keys);
var $height = (0, _styledSystem.cssVar)("input-height");
var $fontSize = (0, _styledSystem.cssVar)("input-font-size");
var $padding = (0, _styledSystem.cssVar)("input-padding");
var $borderRadius = (0, _styledSystem.cssVar)("input-border-radius");
var baseStyle = definePartsStyle({
    addon: {
        height: $height.reference,
        fontSize: $fontSize.reference,
        px: $padding.reference,
        borderRadius: $borderRadius.reference
    },
    field: {
        width: "100%",
        height: $height.reference,
        fontSize: $fontSize.reference,
        px: $padding.reference,
        borderRadius: $borderRadius.reference,
        minWidth: 0,
        outline: 0,
        position: "relative",
        appearance: "none",
        transitionProperty: "common",
        transitionDuration: "normal",
        _disabled: {
            opacity: 0.4,
            cursor: "not-allowed"
        }
    }
});
var size = {
    lg: (0, _styledSystem.defineStyle)({
        [$fontSize.variable]: "fontSizes.lg",
        [$padding.variable]: "space.4",
        [$borderRadius.variable]: "radii.md",
        [$height.variable]: "sizes.12"
    }),
    md: (0, _styledSystem.defineStyle)({
        [$fontSize.variable]: "fontSizes.md",
        [$padding.variable]: "space.4",
        [$borderRadius.variable]: "radii.md",
        [$height.variable]: "sizes.10"
    }),
    sm: (0, _styledSystem.defineStyle)({
        [$fontSize.variable]: "fontSizes.sm",
        [$padding.variable]: "space.3",
        [$borderRadius.variable]: "radii.sm",
        [$height.variable]: "sizes.8"
    }),
    xs: (0, _styledSystem.defineStyle)({
        [$fontSize.variable]: "fontSizes.xs",
        [$padding.variable]: "space.2",
        [$borderRadius.variable]: "radii.sm",
        [$height.variable]: "sizes.6"
    })
};
var sizes = {
    lg: definePartsStyle({
        field: size.lg,
        group: size.lg
    }),
    md: definePartsStyle({
        field: size.md,
        group: size.md
    }),
    sm: definePartsStyle({
        field: size.sm,
        group: size.sm
    }),
    xs: definePartsStyle({
        field: size.xs,
        group: size.xs
    })
};
function getDefaults(props) {
    const { focusBorderColor: fc, errorBorderColor: ec } = props;
    return {
        focusBorderColor: fc || (0, _themeTools.mode)("blue.500", "blue.300")(props),
        errorBorderColor: ec || (0, _themeTools.mode)("red.500", "red.300")(props)
    };
}
var variantOutline = definePartsStyle((props)=>{
    const { theme } = props;
    const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
    return {
        field: {
            border: "1px solid",
            borderColor: "inherit",
            bg: "inherit",
            _hover: {
                borderColor: (0, _themeTools.mode)("gray.300", "whiteAlpha.400")(props)
            },
            _readOnly: {
                boxShadow: "none !important",
                userSelect: "all"
            },
            _invalid: {
                borderColor: (0, _themeTools.getColor)(theme, ec),
                boxShadow: `0 0 0 1px ${(0, _themeTools.getColor)(theme, ec)}`
            },
            _focusVisible: {
                zIndex: 1,
                borderColor: (0, _themeTools.getColor)(theme, fc),
                boxShadow: `0 0 0 1px ${(0, _themeTools.getColor)(theme, fc)}`
            }
        },
        addon: {
            border: "1px solid",
            borderColor: (0, _themeTools.mode)("inherit", "whiteAlpha.50")(props),
            bg: (0, _themeTools.mode)("gray.100", "whiteAlpha.300")(props)
        }
    };
});
var variantFilled = definePartsStyle((props)=>{
    const { theme } = props;
    const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
    return {
        field: {
            border: "2px solid",
            borderColor: "transparent",
            bg: (0, _themeTools.mode)("gray.100", "whiteAlpha.50")(props),
            _hover: {
                bg: (0, _themeTools.mode)("gray.200", "whiteAlpha.100")(props)
            },
            _readOnly: {
                boxShadow: "none !important",
                userSelect: "all"
            },
            _invalid: {
                borderColor: (0, _themeTools.getColor)(theme, ec)
            },
            _focusVisible: {
                bg: "transparent",
                borderColor: (0, _themeTools.getColor)(theme, fc)
            }
        },
        addon: {
            border: "2px solid",
            borderColor: "transparent",
            bg: (0, _themeTools.mode)("gray.100", "whiteAlpha.50")(props)
        }
    };
});
var variantFlushed = definePartsStyle((props)=>{
    const { theme } = props;
    const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
    return {
        field: {
            borderBottom: "1px solid",
            borderColor: "inherit",
            borderRadius: "0",
            px: "0",
            bg: "transparent",
            _readOnly: {
                boxShadow: "none !important",
                userSelect: "all"
            },
            _invalid: {
                borderColor: (0, _themeTools.getColor)(theme, ec),
                boxShadow: `0px 1px 0px 0px ${(0, _themeTools.getColor)(theme, ec)}`
            },
            _focusVisible: {
                borderColor: (0, _themeTools.getColor)(theme, fc),
                boxShadow: `0px 1px 0px 0px ${(0, _themeTools.getColor)(theme, fc)}`
            }
        },
        addon: {
            borderBottom: "2px solid",
            borderColor: "inherit",
            borderRadius: "0",
            px: "0",
            bg: "transparent"
        }
    };
});
var variantUnstyled = definePartsStyle({
    field: {
        bg: "transparent",
        px: "0",
        height: "auto"
    },
    addon: {
        bg: "transparent",
        px: "0",
        height: "auto"
    }
});
var variants = {
    outline: variantOutline,
    filled: variantFilled,
    flushed: variantFlushed,
    unstyled: variantUnstyled
};
var inputTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    variants,
    defaultProps: {
        size: "md",
        variant: "outline"
    }
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2PPvS":[function(require,module,exports) {
// src/components/tooltip.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tooltipTheme", ()=>tooltipTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var $bg = (0, _themeTools.cssVar)("tooltip-bg");
var $fg = (0, _themeTools.cssVar)("tooltip-fg");
var $arrowBg = (0, _themeTools.cssVar)("popper-arrow-bg");
var baseStyle = (0, _styledSystem.defineStyle)({
    bg: $bg.reference,
    color: $fg.reference,
    [$bg.variable]: "colors.gray.700",
    [$fg.variable]: "colors.whiteAlpha.900",
    _dark: {
        [$bg.variable]: "colors.gray.300",
        [$fg.variable]: "colors.gray.900"
    },
    [$arrowBg.variable]: $bg.reference,
    px: "2",
    py: "0.5",
    borderRadius: "sm",
    fontWeight: "medium",
    fontSize: "sm",
    boxShadow: "md",
    maxW: "xs",
    zIndex: "tooltip"
});
var tooltipTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle
});

},{"@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eMeyu":[function(require,module,exports) {
// src/components/progress.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "progressTheme", ()=>progressTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.progressAnatomy).keys);
var filledStyle = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c, theme: t, isIndeterminate, hasStripe } = props;
    const stripeStyle = (0, _themeTools.mode)((0, _themeTools.generateStripe)(), (0, _themeTools.generateStripe)("1rem", "rgba(0,0,0,0.1)"))(props);
    const bgColor = (0, _themeTools.mode)(`${c}.500`, `${c}.200`)(props);
    const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${(0, _themeTools.getColor)(t, bgColor)} 50%,
    transparent 100%
  )`;
    const addStripe = !isIndeterminate && hasStripe;
    return {
        ...addStripe && stripeStyle,
        ...isIndeterminate ? {
            bgImage: gradient
        } : {
            bgColor
        }
    };
});
var baseStyleLabel = (0, _styledSystem.defineStyle)({
    lineHeight: "1",
    fontSize: "0.25em",
    fontWeight: "bold",
    color: "white"
});
var baseStyleTrack = (0, _styledSystem.defineStyle)((props)=>{
    return {
        bg: (0, _themeTools.mode)("gray.100", "whiteAlpha.300")(props)
    };
});
var baseStyleFilledTrack = (0, _styledSystem.defineStyle)((props)=>{
    return {
        transitionProperty: "common",
        transitionDuration: "slow",
        ...filledStyle(props)
    };
});
var baseStyle = definePartsStyle((props)=>({
        label: baseStyleLabel,
        filledTrack: baseStyleFilledTrack(props),
        track: baseStyleTrack(props)
    }));
var sizes = {
    xs: definePartsStyle({
        track: {
            h: "1"
        }
    }),
    sm: definePartsStyle({
        track: {
            h: "2"
        }
    }),
    md: definePartsStyle({
        track: {
            h: "3"
        }
    }),
    lg: definePartsStyle({
        track: {
            h: "4"
        }
    })
};
var progressTheme = defineMultiStyleConfig({
    sizes,
    baseStyle,
    defaultProps: {
        size: "md",
        colorScheme: "blue"
    }
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aNNeW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "radioTheme", ()=>radioTheme);
var _chunkXHYVH6UOMjs = require("./chunk-XHYVH6UO.mjs");
var _chunkUV3F75RFMjs = require("./chunk-UV3F75RF.mjs");
// src/components/radio.ts
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.radioAnatomy).keys);
var baseStyleControl = (0, _styledSystem.defineStyle)((props)=>{
    var _a;
    const controlStyle = (_a = (0, _chunkUV3F75RFMjs.runIfFn)((0, _chunkXHYVH6UOMjs.checkboxTheme).baseStyle, props)) == null ? void 0 : _a.control;
    return {
        ...controlStyle,
        borderRadius: "full",
        _checked: {
            ...controlStyle == null ? void 0 : controlStyle["_checked"],
            _before: {
                content: `""`,
                display: "inline-block",
                pos: "relative",
                w: "50%",
                h: "50%",
                borderRadius: "50%",
                bg: "currentColor"
            }
        }
    };
});
var baseStyle = definePartsStyle((props)=>{
    var _a, _b, _c, _d;
    return {
        label: (_b = (_a = (0, _chunkXHYVH6UOMjs.checkboxTheme)).baseStyle) == null ? void 0 : _b.call(_a, props).label,
        container: (_d = (_c = (0, _chunkXHYVH6UOMjs.checkboxTheme)).baseStyle) == null ? void 0 : _d.call(_c, props).container,
        control: baseStyleControl(props)
    };
});
var sizes = {
    md: definePartsStyle({
        control: {
            w: "4",
            h: "4"
        },
        label: {
            fontSize: "md"
        }
    }),
    lg: definePartsStyle({
        control: {
            w: "5",
            h: "5"
        },
        label: {
            fontSize: "lg"
        }
    }),
    sm: definePartsStyle({
        control: {
            width: "3",
            height: "3"
        },
        label: {
            fontSize: "sm"
        }
    })
};
var radioTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    defaultProps: {
        size: "md",
        colorScheme: "blue"
    }
});

},{"./chunk-XHYVH6UO.mjs":"5eeG4","./chunk-UV3F75RF.mjs":"7PBMW","@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5eeG4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkboxTheme", ()=>checkboxTheme);
var _chunkUV3F75RFMjs = require("./chunk-UV3F75RF.mjs");
// src/components/checkbox.ts
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.checkboxAnatomy).keys);
var $size = (0, _styledSystem.cssVar)("checkbox-size");
var baseStyleControl = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c } = props;
    return {
        w: $size.reference,
        h: $size.reference,
        transitionProperty: "box-shadow",
        transitionDuration: "normal",
        border: "2px solid",
        borderRadius: "sm",
        borderColor: "inherit",
        color: "white",
        _checked: {
            bg: (0, _themeTools.mode)(`${c}.500`, `${c}.200`)(props),
            borderColor: (0, _themeTools.mode)(`${c}.500`, `${c}.200`)(props),
            color: (0, _themeTools.mode)("white", "gray.900")(props),
            _hover: {
                bg: (0, _themeTools.mode)(`${c}.600`, `${c}.300`)(props),
                borderColor: (0, _themeTools.mode)(`${c}.600`, `${c}.300`)(props)
            },
            _disabled: {
                borderColor: (0, _themeTools.mode)("gray.200", "transparent")(props),
                bg: (0, _themeTools.mode)("gray.200", "whiteAlpha.300")(props),
                color: (0, _themeTools.mode)("gray.500", "whiteAlpha.500")(props)
            }
        },
        _indeterminate: {
            bg: (0, _themeTools.mode)(`${c}.500`, `${c}.200`)(props),
            borderColor: (0, _themeTools.mode)(`${c}.500`, `${c}.200`)(props),
            color: (0, _themeTools.mode)("white", "gray.900")(props)
        },
        _disabled: {
            bg: (0, _themeTools.mode)("gray.100", "whiteAlpha.100")(props),
            borderColor: (0, _themeTools.mode)("gray.100", "transparent")(props)
        },
        _focusVisible: {
            boxShadow: "outline"
        },
        _invalid: {
            borderColor: (0, _themeTools.mode)("red.500", "red.300")(props)
        }
    };
});
var baseStyleContainer = (0, _styledSystem.defineStyle)({
    _disabled: {
        cursor: "not-allowed"
    }
});
var baseStyleLabel = (0, _styledSystem.defineStyle)({
    userSelect: "none",
    _disabled: {
        opacity: 0.4
    }
});
var baseStyleIcon = (0, _styledSystem.defineStyle)({
    transitionProperty: "transform",
    transitionDuration: "normal"
});
var baseStyle = definePartsStyle((props)=>({
        icon: baseStyleIcon,
        container: baseStyleContainer,
        control: (0, _chunkUV3F75RFMjs.runIfFn)(baseStyleControl, props),
        label: baseStyleLabel
    }));
var sizes = {
    sm: definePartsStyle({
        control: {
            [$size.variable]: "sizes.3"
        },
        label: {
            fontSize: "sm"
        },
        icon: {
            fontSize: "3xs"
        }
    }),
    md: definePartsStyle({
        control: {
            [$size.variable]: "sizes.4"
        },
        label: {
            fontSize: "md"
        },
        icon: {
            fontSize: "2xs"
        }
    }),
    lg: definePartsStyle({
        control: {
            [$size.variable]: "sizes.5"
        },
        label: {
            fontSize: "lg"
        },
        icon: {
            fontSize: "2xs"
        }
    })
};
var checkboxTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    defaultProps: {
        size: "md",
        colorScheme: "blue"
    }
});

},{"./chunk-UV3F75RF.mjs":"7PBMW","@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7PBMW":[function(require,module,exports) {
// src/utils/run-if-fn.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runIfFn", ()=>runIfFn);
var isFunction = (value)=>typeof value === "function";
function runIfFn(valueOrFn, ...args) {
    return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGYGx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "selectTheme", ()=>selectTheme);
var _chunkICL3HPTTMjs = require("./chunk-ICL3HPTT.mjs");
// src/components/select.ts
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.selectAnatomy).keys);
var $bg = (0, _styledSystem.cssVar)("select-bg");
var _a;
var baseStyleField = (0, _styledSystem.defineStyle)({
    ...(_a = (0, _chunkICL3HPTTMjs.inputTheme).baseStyle) == null ? void 0 : _a.field,
    appearance: "none",
    paddingBottom: "1px",
    lineHeight: "normal",
    bg: $bg.reference,
    [$bg.variable]: "colors.white",
    _dark: {
        [$bg.variable]: "colors.gray.700"
    },
    "> option, > optgroup": {
        bg: $bg.reference
    }
});
var baseStyleIcon = (0, _styledSystem.defineStyle)({
    width: "6",
    height: "100%",
    insetEnd: "2",
    position: "relative",
    color: "currentColor",
    fontSize: "xl",
    _disabled: {
        opacity: 0.5
    }
});
var baseStyle = definePartsStyle({
    field: baseStyleField,
    icon: baseStyleIcon
});
var iconSpacing = (0, _styledSystem.defineStyle)({
    paddingInlineEnd: "8"
});
var _a2, _b, _c, _d, _e, _f, _g, _h;
var sizes = {
    lg: {
        ...(_a2 = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _a2.lg,
        field: {
            ...(_b = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _b.lg.field,
            ...iconSpacing
        }
    },
    md: {
        ...(_c = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _c.md,
        field: {
            ...(_d = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _d.md.field,
            ...iconSpacing
        }
    },
    sm: {
        ...(_e = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _e.sm,
        field: {
            ...(_f = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _f.sm.field,
            ...iconSpacing
        }
    },
    xs: {
        ...(_g = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _g.xs,
        field: {
            ...(_h = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _h.xs.field,
            ...iconSpacing
        },
        icon: {
            insetEnd: "1"
        }
    }
};
var selectTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    variants: (0, _chunkICL3HPTTMjs.inputTheme).variants,
    defaultProps: (0, _chunkICL3HPTTMjs.inputTheme).defaultProps
});

},{"./chunk-ICL3HPTT.mjs":"6RdGo","@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNsJT":[function(require,module,exports) {
// src/components/skeleton.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "skeletonTheme", ()=>skeletonTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var $startColor = (0, _styledSystem.cssVar)("skeleton-start-color");
var $endColor = (0, _styledSystem.cssVar)("skeleton-end-color");
var baseStyle = (0, _styledSystem.defineStyle)({
    [$startColor.variable]: "colors.gray.100",
    [$endColor.variable]: "colors.gray.400",
    _dark: {
        [$startColor.variable]: "colors.gray.800",
        [$endColor.variable]: "colors.gray.600"
    },
    background: $startColor.reference,
    borderColor: $endColor.reference,
    opacity: 0.7,
    borderRadius: "sm"
});
var skeletonTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle
});

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7rijk":[function(require,module,exports) {
// src/components/skip-link.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "skipLinkTheme", ()=>skipLinkTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var $bg = (0, _styledSystem.cssVar)("skip-link-bg");
var baseStyle = (0, _styledSystem.defineStyle)({
    borderRadius: "md",
    fontWeight: "semibold",
    _focusVisible: {
        boxShadow: "outline",
        padding: "4",
        position: "fixed",
        top: "6",
        insetStart: "6",
        [$bg.variable]: "colors.white",
        _dark: {
            [$bg.variable]: "colors.gray.700"
        },
        bg: $bg.reference
    }
});
var skipLinkTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle
});

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9h83M":[function(require,module,exports) {
// src/components/slider.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sliderTheme", ()=>sliderTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.sliderAnatomy).keys);
var $thumbSize = (0, _styledSystem.cssVar)("slider-thumb-size");
var $trackSize = (0, _styledSystem.cssVar)("slider-track-size");
var $bg = (0, _styledSystem.cssVar)("slider-bg");
var baseStyleContainer = (0, _styledSystem.defineStyle)((props)=>{
    const { orientation } = props;
    return {
        display: "inline-block",
        position: "relative",
        cursor: "pointer",
        _disabled: {
            opacity: 0.6,
            cursor: "default",
            pointerEvents: "none"
        },
        ...(0, _themeTools.orient)({
            orientation,
            vertical: {
                h: "100%"
            },
            horizontal: {
                w: "100%"
            }
        })
    };
});
var baseStyleTrack = (0, _styledSystem.defineStyle)((props)=>{
    const orientationStyles = (0, _themeTools.orient)({
        orientation: props.orientation,
        horizontal: {
            h: $trackSize.reference
        },
        vertical: {
            w: $trackSize.reference
        }
    });
    return {
        ...orientationStyles,
        overflow: "hidden",
        borderRadius: "sm",
        [$bg.variable]: "colors.gray.200",
        _dark: {
            [$bg.variable]: "colors.whiteAlpha.200"
        },
        _disabled: {
            [$bg.variable]: "colors.gray.300",
            _dark: {
                [$bg.variable]: "colors.whiteAlpha.300"
            }
        },
        bg: $bg.reference
    };
});
var baseStyleThumb = (0, _styledSystem.defineStyle)((props)=>{
    const { orientation } = props;
    const orientationStyle = (0, _themeTools.orient)({
        orientation,
        vertical: {
            left: "50%",
            transform: `translateX(-50%)`,
            _active: {
                transform: `translateX(-50%) scale(1.15)`
            }
        },
        horizontal: {
            top: "50%",
            transform: `translateY(-50%)`,
            _active: {
                transform: `translateY(-50%) scale(1.15)`
            }
        }
    });
    return {
        ...orientationStyle,
        w: $thumbSize.reference,
        h: $thumbSize.reference,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: "absolute",
        outline: 0,
        zIndex: 1,
        borderRadius: "full",
        bg: "white",
        boxShadow: "base",
        border: "1px solid",
        borderColor: "transparent",
        transitionProperty: "transform",
        transitionDuration: "normal",
        _focusVisible: {
            boxShadow: "outline"
        },
        _disabled: {
            bg: "gray.300"
        }
    };
});
var baseStyleFilledTrack = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c } = props;
    return {
        width: "inherit",
        height: "inherit",
        [$bg.variable]: `colors.${c}.500`,
        _dark: {
            [$bg.variable]: `colors.${c}.200`
        },
        bg: $bg.reference
    };
});
var baseStyle = definePartsStyle((props)=>({
        container: baseStyleContainer(props),
        track: baseStyleTrack(props),
        thumb: baseStyleThumb(props),
        filledTrack: baseStyleFilledTrack(props)
    }));
var sizeLg = definePartsStyle({
    container: {
        [$thumbSize.variable]: `sizes.4`,
        [$trackSize.variable]: `sizes.1`
    }
});
var sizeMd = definePartsStyle({
    container: {
        [$thumbSize.variable]: `sizes.3.5`,
        [$trackSize.variable]: `sizes.1`
    }
});
var sizeSm = definePartsStyle({
    container: {
        [$thumbSize.variable]: `sizes.2.5`,
        [$trackSize.variable]: `sizes.0.5`
    }
});
var sizes = {
    lg: sizeLg,
    md: sizeMd,
    sm: sizeSm
};
var sliderTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    defaultProps: {
        size: "md",
        colorScheme: "blue"
    }
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"buZoi":[function(require,module,exports) {
// src/components/spinner.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spinnerTheme", ()=>spinnerTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var $size = (0, _themeTools.cssVar)("spinner-size");
var baseStyle = (0, _styledSystem.defineStyle)({
    width: [
        $size.reference
    ],
    height: [
        $size.reference
    ]
});
var sizes = {
    xs: (0, _styledSystem.defineStyle)({
        [$size.variable]: "sizes.3"
    }),
    sm: (0, _styledSystem.defineStyle)({
        [$size.variable]: "sizes.4"
    }),
    md: (0, _styledSystem.defineStyle)({
        [$size.variable]: "sizes.6"
    }),
    lg: (0, _styledSystem.defineStyle)({
        [$size.variable]: "sizes.8"
    }),
    xl: (0, _styledSystem.defineStyle)({
        [$size.variable]: "sizes.12"
    })
};
var spinnerTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle,
    sizes,
    defaultProps: {
        size: "md"
    }
});

},{"@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9YP6H":[function(require,module,exports) {
// src/components/stat.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "statTheme", ()=>statTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.statAnatomy).keys);
var baseStyleLabel = (0, _styledSystem.defineStyle)({
    fontWeight: "medium"
});
var baseStyleHelpText = (0, _styledSystem.defineStyle)({
    opacity: 0.8,
    marginBottom: "2"
});
var baseStyleNumber = (0, _styledSystem.defineStyle)({
    verticalAlign: "baseline",
    fontWeight: "semibold"
});
var baseStyleIcon = (0, _styledSystem.defineStyle)({
    marginEnd: 1,
    w: "3.5",
    h: "3.5",
    verticalAlign: "middle"
});
var baseStyle = definePartsStyle({
    container: {},
    label: baseStyleLabel,
    helpText: baseStyleHelpText,
    number: baseStyleNumber,
    icon: baseStyleIcon
});
var sizes = {
    md: definePartsStyle({
        label: {
            fontSize: "sm"
        },
        helpText: {
            fontSize: "sm"
        },
        number: {
            fontSize: "2xl"
        }
    })
};
var statTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    defaultProps: {
        size: "md"
    }
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hfj6j":[function(require,module,exports) {
// src/components/kbd.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "kbdTheme", ()=>kbdTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var $bg = (0, _styledSystem.cssVar)("kbd-bg");
var baseStyle = (0, _styledSystem.defineStyle)({
    [$bg.variable]: "colors.gray.100",
    _dark: {
        [$bg.variable]: "colors.whiteAlpha.100"
    },
    bg: $bg.reference,
    borderRadius: "md",
    borderWidth: "1px",
    borderBottomWidth: "3px",
    fontSize: "0.8em",
    fontWeight: "bold",
    lineHeight: "normal",
    px: "0.4em",
    whiteSpace: "nowrap"
});
var kbdTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle
});

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HEqI":[function(require,module,exports) {
// src/components/link.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linkTheme", ()=>linkTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var baseStyle = (0, _styledSystem.defineStyle)({
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
        textDecoration: "underline"
    },
    _focusVisible: {
        boxShadow: "outline"
    }
});
var linkTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle
});

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"252Zq":[function(require,module,exports) {
// src/components/list.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "listTheme", ()=>listTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.listAnatomy).keys);
var baseStyleIcon = (0, _styledSystem.defineStyle)({
    marginEnd: "2",
    display: "inline",
    verticalAlign: "text-bottom"
});
var baseStyle = definePartsStyle({
    icon: baseStyleIcon
});
var listTheme = defineMultiStyleConfig({
    baseStyle
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Q3uc":[function(require,module,exports) {
// src/components/menu.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "menuTheme", ()=>menuTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.menuAnatomy).keys);
var $bg = (0, _styledSystem.cssVar)("menu-bg");
var $shadow = (0, _styledSystem.cssVar)("menu-shadow");
var baseStyleList = (0, _styledSystem.defineStyle)({
    [$bg.variable]: "#fff",
    [$shadow.variable]: "shadows.sm",
    _dark: {
        [$bg.variable]: "colors.gray.700",
        [$shadow.variable]: "shadows.dark-lg"
    },
    color: "inherit",
    minW: "3xs",
    py: "2",
    zIndex: 1,
    borderRadius: "md",
    borderWidth: "1px",
    bg: $bg.reference,
    boxShadow: $shadow.reference
});
var baseStyleItem = (0, _styledSystem.defineStyle)({
    py: "1.5",
    px: "3",
    transitionProperty: "background",
    transitionDuration: "ultra-fast",
    transitionTimingFunction: "ease-in",
    _focus: {
        [$bg.variable]: "colors.gray.100",
        _dark: {
            [$bg.variable]: "colors.whiteAlpha.100"
        }
    },
    _active: {
        [$bg.variable]: "colors.gray.200",
        _dark: {
            [$bg.variable]: "colors.whiteAlpha.200"
        }
    },
    _expanded: {
        [$bg.variable]: "colors.gray.100",
        _dark: {
            [$bg.variable]: "colors.whiteAlpha.100"
        }
    },
    _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
    },
    bg: $bg.reference
});
var baseStyleGroupTitle = (0, _styledSystem.defineStyle)({
    mx: 4,
    my: 2,
    fontWeight: "semibold",
    fontSize: "sm"
});
var baseStyleIcon = (0, _styledSystem.defineStyle)({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0
});
var baseStyleCommand = (0, _styledSystem.defineStyle)({
    opacity: 0.6
});
var baseStyleDivider = (0, _styledSystem.defineStyle)({
    border: 0,
    borderBottom: "1px solid",
    borderColor: "inherit",
    my: "2",
    opacity: 0.6
});
var baseStyleButton = (0, _styledSystem.defineStyle)({
    transitionProperty: "common",
    transitionDuration: "normal"
});
var baseStyle = definePartsStyle({
    button: baseStyleButton,
    list: baseStyleList,
    item: baseStyleItem,
    groupTitle: baseStyleGroupTitle,
    icon: baseStyleIcon,
    command: baseStyleCommand,
    divider: baseStyleDivider
});
var menuTheme = defineMultiStyleConfig({
    baseStyle
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7JQhZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modalTheme", ()=>modalTheme);
var _chunkUV3F75RFMjs = require("./chunk-UV3F75RF.mjs");
// src/components/modal.ts
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.modalAnatomy).keys);
var $bg = (0, _styledSystem.cssVar)("modal-bg");
var $shadow = (0, _styledSystem.cssVar)("modal-shadow");
var baseStyleOverlay = (0, _styledSystem.defineStyle)({
    bg: "blackAlpha.600",
    zIndex: "modal"
});
var baseStyleDialogContainer = (0, _styledSystem.defineStyle)((props)=>{
    const { isCentered, scrollBehavior } = props;
    return {
        display: "flex",
        zIndex: "modal",
        justifyContent: "center",
        alignItems: isCentered ? "center" : "flex-start",
        overflow: scrollBehavior === "inside" ? "hidden" : "auto",
        overscrollBehaviorY: "none"
    };
});
var baseStyleDialog = (0, _styledSystem.defineStyle)((props)=>{
    const { isCentered, scrollBehavior } = props;
    return {
        borderRadius: "md",
        color: "inherit",
        my: isCentered ? "auto" : "16",
        mx: isCentered ? "auto" : void 0,
        zIndex: "modal",
        maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
        [$bg.variable]: "colors.white",
        [$shadow.variable]: "shadows.lg",
        _dark: {
            [$bg.variable]: "colors.gray.700",
            [$shadow.variable]: "shadows.dark-lg"
        },
        bg: $bg.reference,
        boxShadow: $shadow.reference
    };
});
var baseStyleHeader = (0, _styledSystem.defineStyle)({
    px: "6",
    py: "4",
    fontSize: "xl",
    fontWeight: "semibold"
});
var baseStyleCloseButton = (0, _styledSystem.defineStyle)({
    position: "absolute",
    top: "2",
    insetEnd: "3"
});
var baseStyleBody = (0, _styledSystem.defineStyle)((props)=>{
    const { scrollBehavior } = props;
    return {
        px: "6",
        py: "2",
        flex: "1",
        overflow: scrollBehavior === "inside" ? "auto" : void 0
    };
});
var baseStyleFooter = (0, _styledSystem.defineStyle)({
    px: "6",
    py: "4"
});
var baseStyle = definePartsStyle((props)=>({
        overlay: baseStyleOverlay,
        dialogContainer: (0, _chunkUV3F75RFMjs.runIfFn)(baseStyleDialogContainer, props),
        dialog: (0, _chunkUV3F75RFMjs.runIfFn)(baseStyleDialog, props),
        header: baseStyleHeader,
        closeButton: baseStyleCloseButton,
        body: (0, _chunkUV3F75RFMjs.runIfFn)(baseStyleBody, props),
        footer: baseStyleFooter
    }));
function getSize(value) {
    if (value === "full") return definePartsStyle({
        dialog: {
            maxW: "100vw",
            minH: "$100vh",
            my: "0",
            borderRadius: "0"
        }
    });
    return definePartsStyle({
        dialog: {
            maxW: value
        }
    });
}
var sizes = {
    xs: getSize("xs"),
    sm: getSize("sm"),
    md: getSize("md"),
    lg: getSize("lg"),
    xl: getSize("xl"),
    "2xl": getSize("2xl"),
    "3xl": getSize("3xl"),
    "4xl": getSize("4xl"),
    "5xl": getSize("5xl"),
    "6xl": getSize("6xl"),
    full: getSize("full")
};
var modalTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    defaultProps: {
        size: "md"
    }
});

},{"./chunk-UV3F75RF.mjs":"7PBMW","@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gzybw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numberInputTheme", ()=>numberInputTheme);
var _chunk6XA2KDUDMjs = require("./chunk-6XA2KDUD.mjs");
var _chunkICL3HPTTMjs = require("./chunk-ICL3HPTT.mjs");
var _chunkUV3F75RFMjs = require("./chunk-UV3F75RF.mjs");
// src/components/number-input.ts
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.numberInputAnatomy).keys);
var $stepperWidth = (0, _themeTools.cssVar)("number-input-stepper-width");
var $inputPadding = (0, _themeTools.cssVar)("number-input-input-padding");
var inputPaddingValue = (0, _themeTools.calc)($stepperWidth).add("0.5rem").toString();
var $bg = (0, _themeTools.cssVar)("number-input-bg");
var $fg = (0, _themeTools.cssVar)("number-input-color");
var $border = (0, _themeTools.cssVar)("number-input-border-color");
var baseStyleRoot = (0, _styledSystem.defineStyle)({
    [$stepperWidth.variable]: "sizes.6",
    [$inputPadding.variable]: inputPaddingValue
});
var baseStyleField = (0, _styledSystem.defineStyle)((props)=>{
    var _a, _b;
    return (_b = (_a = (0, _chunkUV3F75RFMjs.runIfFn)((0, _chunkICL3HPTTMjs.inputTheme).baseStyle, props)) == null ? void 0 : _a.field) != null ? _b : {};
});
var baseStyleStepperGroup = (0, _styledSystem.defineStyle)({
    width: $stepperWidth.reference
});
var baseStyleStepper = (0, _styledSystem.defineStyle)({
    borderStart: "1px solid",
    borderStartColor: $border.reference,
    color: $fg.reference,
    bg: $bg.reference,
    [$fg.variable]: "colors.chakra-body-text",
    [$border.variable]: "colors.chakra-border-color",
    _dark: {
        [$fg.variable]: "colors.whiteAlpha.800",
        [$border.variable]: "colors.whiteAlpha.300"
    },
    _active: {
        [$bg.variable]: "colors.gray.200",
        _dark: {
            [$bg.variable]: "colors.whiteAlpha.300"
        }
    },
    _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
    }
});
var baseStyle = definePartsStyle((props)=>{
    var _a;
    return {
        root: baseStyleRoot,
        field: (_a = (0, _chunkUV3F75RFMjs.runIfFn)(baseStyleField, props)) != null ? _a : {},
        stepperGroup: baseStyleStepperGroup,
        stepper: baseStyleStepper
    };
});
function getSize(size) {
    var _a, _b, _c;
    const sizeStyle = (_a = (0, _chunkICL3HPTTMjs.inputTheme).sizes) == null ? void 0 : _a[size];
    const radius = {
        lg: "md",
        md: "md",
        sm: "sm",
        xs: "sm"
    };
    const _fontSize = (_c = (_b = sizeStyle.field) == null ? void 0 : _b.fontSize) != null ? _c : "md";
    const fontSize = (0, _chunk6XA2KDUDMjs.typography_default).fontSizes[_fontSize];
    return definePartsStyle({
        field: {
            ...sizeStyle.field,
            paddingInlineEnd: $inputPadding.reference,
            verticalAlign: "top"
        },
        stepper: {
            fontSize: (0, _themeTools.calc)(fontSize).multiply(0.75).toString(),
            _first: {
                borderTopEndRadius: radius[size]
            },
            _last: {
                borderBottomEndRadius: radius[size],
                mt: "-1px",
                borderTopWidth: 1
            }
        }
    });
}
var sizes = {
    xs: getSize("xs"),
    sm: getSize("sm"),
    md: getSize("md"),
    lg: getSize("lg")
};
var numberInputTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    variants: (0, _chunkICL3HPTTMjs.inputTheme).variants,
    defaultProps: (0, _chunkICL3HPTTMjs.inputTheme).defaultProps
});

},{"./chunk-6XA2KDUD.mjs":"acMwL","./chunk-ICL3HPTT.mjs":"6RdGo","./chunk-UV3F75RF.mjs":"7PBMW","@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9uQIo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pinInputTheme", ()=>pinInputTheme);
var _chunkICL3HPTTMjs = require("./chunk-ICL3HPTT.mjs");
var _chunkUV3F75RFMjs = require("./chunk-UV3F75RF.mjs");
// src/components/pin-input.ts
var _styledSystem = require("@chakra-ui/styled-system");
var _a;
var baseStyle = (0, _styledSystem.defineStyle)({
    ...(_a = (0, _chunkICL3HPTTMjs.inputTheme).baseStyle) == null ? void 0 : _a.field,
    textAlign: "center"
});
var sizes = {
    lg: (0, _styledSystem.defineStyle)({
        fontSize: "lg",
        w: 12,
        h: 12,
        borderRadius: "md"
    }),
    md: (0, _styledSystem.defineStyle)({
        fontSize: "md",
        w: 10,
        h: 10,
        borderRadius: "md"
    }),
    sm: (0, _styledSystem.defineStyle)({
        fontSize: "sm",
        w: 8,
        h: 8,
        borderRadius: "sm"
    }),
    xs: (0, _styledSystem.defineStyle)({
        fontSize: "xs",
        w: 6,
        h: 6,
        borderRadius: "sm"
    })
};
var _a2, _b;
var variants = {
    outline: (0, _styledSystem.defineStyle)((props)=>{
        var _a3, _b2, _c;
        return (_c = (_b2 = (0, _chunkUV3F75RFMjs.runIfFn)((_a3 = (0, _chunkICL3HPTTMjs.inputTheme).variants) == null ? void 0 : _a3.outline, props)) == null ? void 0 : _b2.field) != null ? _c : {};
    }),
    flushed: (0, _styledSystem.defineStyle)((props)=>{
        var _a3, _b2, _c;
        return (_c = (_b2 = (0, _chunkUV3F75RFMjs.runIfFn)((_a3 = (0, _chunkICL3HPTTMjs.inputTheme).variants) == null ? void 0 : _a3.flushed, props)) == null ? void 0 : _b2.field) != null ? _c : {};
    }),
    filled: (0, _styledSystem.defineStyle)((props)=>{
        var _a3, _b2, _c;
        return (_c = (_b2 = (0, _chunkUV3F75RFMjs.runIfFn)((_a3 = (0, _chunkICL3HPTTMjs.inputTheme).variants) == null ? void 0 : _a3.filled, props)) == null ? void 0 : _b2.field) != null ? _c : {};
    }),
    unstyled: (_b = (_a2 = (0, _chunkICL3HPTTMjs.inputTheme).variants) == null ? void 0 : _a2.unstyled.field) != null ? _b : {}
};
var pinInputTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle,
    sizes,
    variants,
    defaultProps: (0, _chunkICL3HPTTMjs.inputTheme).defaultProps
});

},{"./chunk-ICL3HPTT.mjs":"6RdGo","./chunk-UV3F75RF.mjs":"7PBMW","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"atrHy":[function(require,module,exports) {
// src/components/popover.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popoverTheme", ()=>popoverTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.popoverAnatomy).keys);
var $popperBg = (0, _themeTools.cssVar)("popper-bg");
var $arrowBg = (0, _themeTools.cssVar)("popper-arrow-bg");
var $arrowShadowColor = (0, _themeTools.cssVar)("popper-arrow-shadow-color");
var baseStylePopper = (0, _styledSystem.defineStyle)({
    zIndex: 10
});
var baseStyleContent = (0, _styledSystem.defineStyle)({
    [$popperBg.variable]: `colors.white`,
    bg: $popperBg.reference,
    [$arrowBg.variable]: $popperBg.reference,
    [$arrowShadowColor.variable]: `colors.gray.200`,
    _dark: {
        [$popperBg.variable]: `colors.gray.700`,
        [$arrowShadowColor.variable]: `colors.whiteAlpha.300`
    },
    width: "xs",
    border: "1px solid",
    borderColor: "inherit",
    borderRadius: "md",
    boxShadow: "sm",
    zIndex: "inherit",
    _focusVisible: {
        outline: 0,
        boxShadow: "outline"
    }
});
var baseStyleHeader = (0, _styledSystem.defineStyle)({
    px: 3,
    py: 2,
    borderBottomWidth: "1px"
});
var baseStyleBody = (0, _styledSystem.defineStyle)({
    px: 3,
    py: 2
});
var baseStyleFooter = (0, _styledSystem.defineStyle)({
    px: 3,
    py: 2,
    borderTopWidth: "1px"
});
var baseStyleCloseButton = (0, _styledSystem.defineStyle)({
    position: "absolute",
    borderRadius: "md",
    top: 1,
    insetEnd: 2,
    padding: 2
});
var baseStyle = definePartsStyle({
    popper: baseStylePopper,
    content: baseStyleContent,
    header: baseStyleHeader,
    body: baseStyleBody,
    footer: baseStyleFooter,
    closeButton: baseStyleCloseButton
});
var popoverTheme = defineMultiStyleConfig({
    baseStyle
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j6MxT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "drawerTheme", ()=>drawerTheme);
var _chunkUV3F75RFMjs = require("./chunk-UV3F75RF.mjs");
// src/components/drawer.ts
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.drawerAnatomy).keys);
var $bg = (0, _styledSystem.cssVar)("drawer-bg");
var $bs = (0, _styledSystem.cssVar)("drawer-box-shadow");
function getSize(value) {
    if (value === "full") return definePartsStyle({
        dialog: {
            maxW: "100vw",
            h: "100vh"
        }
    });
    return definePartsStyle({
        dialog: {
            maxW: value
        }
    });
}
var baseStyleOverlay = (0, _styledSystem.defineStyle)({
    bg: "blackAlpha.600",
    zIndex: "modal"
});
var baseStyleDialogContainer = (0, _styledSystem.defineStyle)({
    display: "flex",
    zIndex: "modal",
    justifyContent: "center"
});
var baseStyleDialog = (0, _styledSystem.defineStyle)((props)=>{
    const { isFullHeight } = props;
    return {
        ...isFullHeight && {
            height: "100vh"
        },
        zIndex: "modal",
        maxH: "100vh",
        color: "inherit",
        [$bg.variable]: "colors.white",
        [$bs.variable]: "shadows.lg",
        _dark: {
            [$bg.variable]: "colors.gray.700",
            [$bs.variable]: "shadows.dark-lg"
        },
        bg: $bg.reference,
        boxShadow: $bs.reference
    };
});
var baseStyleHeader = (0, _styledSystem.defineStyle)({
    px: "6",
    py: "4",
    fontSize: "xl",
    fontWeight: "semibold"
});
var baseStyleCloseButton = (0, _styledSystem.defineStyle)({
    position: "absolute",
    top: "2",
    insetEnd: "3"
});
var baseStyleBody = (0, _styledSystem.defineStyle)({
    px: "6",
    py: "2",
    flex: "1",
    overflow: "auto"
});
var baseStyleFooter = (0, _styledSystem.defineStyle)({
    px: "6",
    py: "4"
});
var baseStyle = definePartsStyle((props)=>({
        overlay: baseStyleOverlay,
        dialogContainer: baseStyleDialogContainer,
        dialog: (0, _chunkUV3F75RFMjs.runIfFn)(baseStyleDialog, props),
        header: baseStyleHeader,
        closeButton: baseStyleCloseButton,
        body: baseStyleBody,
        footer: baseStyleFooter
    }));
var sizes = {
    xs: getSize("xs"),
    sm: getSize("md"),
    md: getSize("lg"),
    lg: getSize("2xl"),
    xl: getSize("4xl"),
    full: getSize("full")
};
var drawerTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    defaultProps: {
        size: "xs"
    }
});

},{"./chunk-UV3F75RF.mjs":"7PBMW","@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"KZOaA":[function(require,module,exports) {
// src/components/editable.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "editableTheme", ()=>editableTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.editableAnatomy).keys);
var baseStylePreview = (0, _styledSystem.defineStyle)({
    borderRadius: "md",
    py: "1",
    transitionProperty: "common",
    transitionDuration: "normal"
});
var baseStyleInput = (0, _styledSystem.defineStyle)({
    borderRadius: "md",
    py: "1",
    transitionProperty: "common",
    transitionDuration: "normal",
    width: "full",
    _focusVisible: {
        boxShadow: "outline"
    },
    _placeholder: {
        opacity: 0.6
    }
});
var baseStyleTextarea = (0, _styledSystem.defineStyle)({
    borderRadius: "md",
    py: "1",
    transitionProperty: "common",
    transitionDuration: "normal",
    width: "full",
    _focusVisible: {
        boxShadow: "outline"
    },
    _placeholder: {
        opacity: 0.6
    }
});
var baseStyle = definePartsStyle({
    preview: baseStylePreview,
    input: baseStyleInput,
    textarea: baseStyleTextarea
});
var editableTheme = defineMultiStyleConfig({
    baseStyle
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lw0B7":[function(require,module,exports) {
// src/components/form-control.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formTheme", ()=>formTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.formAnatomy).keys);
var $fg = (0, _styledSystem.cssVar)("form-control-color");
var baseStyleRequiredIndicator = (0, _styledSystem.defineStyle)({
    marginStart: "1",
    [$fg.variable]: "colors.red.500",
    _dark: {
        [$fg.variable]: "colors.red.300"
    },
    color: $fg.reference
});
var baseStyleHelperText = (0, _styledSystem.defineStyle)({
    mt: "2",
    [$fg.variable]: "colors.gray.600",
    _dark: {
        [$fg.variable]: "colors.whiteAlpha.600"
    },
    color: $fg.reference,
    lineHeight: "normal",
    fontSize: "sm"
});
var baseStyle = definePartsStyle({
    container: {
        width: "100%",
        position: "relative"
    },
    requiredIndicator: baseStyleRequiredIndicator,
    helperText: baseStyleHelperText
});
var formTheme = defineMultiStyleConfig({
    baseStyle
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7i6Da":[function(require,module,exports) {
// src/components/form-error.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formErrorTheme", ()=>formErrorTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.formErrorAnatomy).keys);
var $fg = (0, _styledSystem.cssVar)("form-error-color");
var baseStyleText = (0, _styledSystem.defineStyle)({
    [$fg.variable]: `colors.red.500`,
    _dark: {
        [$fg.variable]: `colors.red.300`
    },
    color: $fg.reference,
    mt: "2",
    fontSize: "sm",
    lineHeight: "normal"
});
var baseStyleIcon = (0, _styledSystem.defineStyle)({
    marginEnd: "0.5em",
    [$fg.variable]: `colors.red.500`,
    _dark: {
        [$fg.variable]: `colors.red.300`
    },
    color: $fg.reference
});
var baseStyle = definePartsStyle({
    text: baseStyleText,
    icon: baseStyleIcon
});
var formErrorTheme = defineMultiStyleConfig({
    baseStyle
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8BN4K":[function(require,module,exports) {
// src/components/form-label.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formLabelTheme", ()=>formLabelTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var baseStyle = (0, _styledSystem.defineStyle)({
    fontSize: "md",
    marginEnd: "3",
    mb: "2",
    fontWeight: "medium",
    transitionProperty: "common",
    transitionDuration: "normal",
    opacity: 1,
    _disabled: {
        opacity: 0.4
    }
});
var formLabelTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle
});

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jQXyB":[function(require,module,exports) {
// src/components/heading.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "headingTheme", ()=>headingTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var baseStyle = (0, _styledSystem.defineStyle)({
    fontFamily: "heading",
    fontWeight: "bold"
});
var sizes = {
    "4xl": (0, _styledSystem.defineStyle)({
        fontSize: [
            "6xl",
            null,
            "7xl"
        ],
        lineHeight: 1
    }),
    "3xl": (0, _styledSystem.defineStyle)({
        fontSize: [
            "5xl",
            null,
            "6xl"
        ],
        lineHeight: 1
    }),
    "2xl": (0, _styledSystem.defineStyle)({
        fontSize: [
            "4xl",
            null,
            "5xl"
        ],
        lineHeight: [
            1.2,
            null,
            1
        ]
    }),
    xl: (0, _styledSystem.defineStyle)({
        fontSize: [
            "3xl",
            null,
            "4xl"
        ],
        lineHeight: [
            1.33,
            null,
            1.2
        ]
    }),
    lg: (0, _styledSystem.defineStyle)({
        fontSize: [
            "2xl",
            null,
            "3xl"
        ],
        lineHeight: [
            1.33,
            null,
            1.2
        ]
    }),
    md: (0, _styledSystem.defineStyle)({
        fontSize: "xl",
        lineHeight: 1.2
    }),
    sm: (0, _styledSystem.defineStyle)({
        fontSize: "md",
        lineHeight: 1.2
    }),
    xs: (0, _styledSystem.defineStyle)({
        fontSize: "sm",
        lineHeight: 1.2
    })
};
var headingTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle,
    sizes,
    defaultProps: {
        size: "xl"
    }
});

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l8fB4":[function(require,module,exports) {
// src/components/breadcrumb.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "breadcrumbTheme", ()=>breadcrumbTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { defineMultiStyleConfig, definePartsStyle } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.breadcrumbAnatomy).keys);
var $decor = (0, _styledSystem.cssVar)("breadcrumb-link-decor");
var baseStyleLink = (0, _styledSystem.defineStyle)({
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    outline: "none",
    color: "inherit",
    textDecoration: $decor.reference,
    [$decor.variable]: "none",
    "&:not([aria-current=page])": {
        cursor: "pointer",
        _hover: {
            [$decor.variable]: "underline"
        },
        _focusVisible: {
            boxShadow: "outline"
        }
    }
});
var baseStyle = definePartsStyle({
    link: baseStyleLink
});
var breadcrumbTheme = defineMultiStyleConfig({
    baseStyle
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eYrbA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buttonTheme", ()=>buttonTheme);
var _chunkUV3F75RFMjs = require("./chunk-UV3F75RF.mjs");
// src/components/button.ts
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var baseStyle = (0, _styledSystem.defineStyle)({
    lineHeight: "1.2",
    borderRadius: "md",
    fontWeight: "semibold",
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
        boxShadow: "outline"
    },
    _disabled: {
        opacity: 0.4,
        cursor: "not-allowed",
        boxShadow: "none"
    },
    _hover: {
        _disabled: {
            bg: "initial"
        }
    }
});
var variantGhost = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c, theme } = props;
    if (c === "gray") return {
        color: (0, _themeTools.mode)(`gray.800`, `whiteAlpha.900`)(props),
        _hover: {
            bg: (0, _themeTools.mode)(`gray.100`, `whiteAlpha.200`)(props)
        },
        _active: {
            bg: (0, _themeTools.mode)(`gray.200`, `whiteAlpha.300`)(props)
        }
    };
    const darkHoverBg = (0, _themeTools.transparentize)(`${c}.200`, 0.12)(theme);
    const darkActiveBg = (0, _themeTools.transparentize)(`${c}.200`, 0.24)(theme);
    return {
        color: (0, _themeTools.mode)(`${c}.600`, `${c}.200`)(props),
        bg: "transparent",
        _hover: {
            bg: (0, _themeTools.mode)(`${c}.50`, darkHoverBg)(props)
        },
        _active: {
            bg: (0, _themeTools.mode)(`${c}.100`, darkActiveBg)(props)
        }
    };
});
var variantOutline = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c } = props;
    const borderColor = (0, _themeTools.mode)(`gray.200`, `whiteAlpha.300`)(props);
    return {
        border: "1px solid",
        borderColor: c === "gray" ? borderColor : "currentColor",
        ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": {
            marginEnd: "-1px"
        },
        ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": {
            marginBottom: "-1px"
        },
        ...(0, _chunkUV3F75RFMjs.runIfFn)(variantGhost, props)
    };
});
var accessibleColorMap = {
    yellow: {
        bg: "yellow.400",
        color: "black",
        hoverBg: "yellow.500",
        activeBg: "yellow.600"
    },
    cyan: {
        bg: "cyan.400",
        color: "black",
        hoverBg: "cyan.500",
        activeBg: "cyan.600"
    }
};
var variantSolid = (0, _styledSystem.defineStyle)((props)=>{
    var _a;
    const { colorScheme: c } = props;
    if (c === "gray") {
        const bg2 = (0, _themeTools.mode)(`gray.100`, `whiteAlpha.200`)(props);
        return {
            bg: bg2,
            color: (0, _themeTools.mode)(`gray.800`, `whiteAlpha.900`)(props),
            _hover: {
                bg: (0, _themeTools.mode)(`gray.200`, `whiteAlpha.300`)(props),
                _disabled: {
                    bg: bg2
                }
            },
            _active: {
                bg: (0, _themeTools.mode)(`gray.300`, `whiteAlpha.400`)(props)
            }
        };
    }
    const { bg = `${c}.500`, color = "white", hoverBg = `${c}.600`, activeBg = `${c}.700` } = (_a = accessibleColorMap[c]) != null ? _a : {};
    const background = (0, _themeTools.mode)(bg, `${c}.200`)(props);
    return {
        bg: background,
        color: (0, _themeTools.mode)(color, `gray.800`)(props),
        _hover: {
            bg: (0, _themeTools.mode)(hoverBg, `${c}.300`)(props),
            _disabled: {
                bg: background
            }
        },
        _active: {
            bg: (0, _themeTools.mode)(activeBg, `${c}.400`)(props)
        }
    };
});
var variantLink = (0, _styledSystem.defineStyle)((props)=>{
    const { colorScheme: c } = props;
    return {
        padding: 0,
        height: "auto",
        lineHeight: "normal",
        verticalAlign: "baseline",
        color: (0, _themeTools.mode)(`${c}.500`, `${c}.200`)(props),
        _hover: {
            textDecoration: "underline",
            _disabled: {
                textDecoration: "none"
            }
        },
        _active: {
            color: (0, _themeTools.mode)(`${c}.700`, `${c}.500`)(props)
        }
    };
});
var variantUnstyled = (0, _styledSystem.defineStyle)({
    bg: "none",
    color: "inherit",
    display: "inline",
    lineHeight: "inherit",
    m: "0",
    p: "0"
});
var variants = {
    ghost: variantGhost,
    outline: variantOutline,
    solid: variantSolid,
    link: variantLink,
    unstyled: variantUnstyled
};
var sizes = {
    lg: (0, _styledSystem.defineStyle)({
        h: "12",
        minW: "12",
        fontSize: "lg",
        px: "6"
    }),
    md: (0, _styledSystem.defineStyle)({
        h: "10",
        minW: "10",
        fontSize: "md",
        px: "4"
    }),
    sm: (0, _styledSystem.defineStyle)({
        h: "8",
        minW: "8",
        fontSize: "sm",
        px: "3"
    }),
    xs: (0, _styledSystem.defineStyle)({
        h: "6",
        minW: "6",
        fontSize: "xs",
        px: "2"
    })
};
var buttonTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle,
    variants,
    sizes,
    defaultProps: {
        variant: "solid",
        size: "md",
        colorScheme: "gray"
    }
});

},{"./chunk-UV3F75RF.mjs":"7PBMW","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3sdge":[function(require,module,exports) {
// src/components/card.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cardTheme", ()=>cardTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.cardAnatomy).keys);
var $bg = (0, _styledSystem.cssVar)("card-bg");
var $padding = (0, _styledSystem.cssVar)("card-padding");
var $shadow = (0, _styledSystem.cssVar)("card-shadow");
var $radius = (0, _styledSystem.cssVar)("card-radius");
var $border = (0, _styledSystem.cssVar)("card-border-width", "0");
var $borderColor = (0, _styledSystem.cssVar)("card-border-color");
var baseStyle = definePartsStyle({
    container: {
        [$bg.variable]: "colors.chakra-body-bg",
        backgroundColor: $bg.reference,
        boxShadow: $shadow.reference,
        borderRadius: $radius.reference,
        color: "chakra-body-text",
        borderWidth: $border.reference,
        borderColor: $borderColor.reference
    },
    body: {
        padding: $padding.reference,
        flex: "1 1 0%"
    },
    header: {
        padding: $padding.reference
    },
    footer: {
        padding: $padding.reference
    }
});
var sizes = {
    sm: definePartsStyle({
        container: {
            [$radius.variable]: "radii.base",
            [$padding.variable]: "space.3"
        }
    }),
    md: definePartsStyle({
        container: {
            [$radius.variable]: "radii.md",
            [$padding.variable]: "space.5"
        }
    }),
    lg: definePartsStyle({
        container: {
            [$radius.variable]: "radii.xl",
            [$padding.variable]: "space.7"
        }
    })
};
var variants = {
    elevated: definePartsStyle({
        container: {
            [$shadow.variable]: "shadows.base",
            _dark: {
                [$bg.variable]: "colors.gray.700"
            }
        }
    }),
    outline: definePartsStyle({
        container: {
            [$border.variable]: "1px",
            [$borderColor.variable]: "colors.chakra-border-color"
        }
    }),
    filled: definePartsStyle({
        container: {
            [$bg.variable]: "colors.chakra-subtle-bg"
        }
    }),
    unstyled: {
        body: {
            [$padding.variable]: 0
        },
        header: {
            [$padding.variable]: 0
        },
        footer: {
            [$padding.variable]: 0
        }
    }
};
var cardTheme = defineMultiStyleConfig({
    baseStyle,
    variants,
    sizes,
    defaultProps: {
        variant: "elevated",
        size: "md"
    }
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fLGBc":[function(require,module,exports) {
// src/components/close-button.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "closeButtonTheme", ()=>closeButtonTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var $size = (0, _themeTools.cssVar)("close-button-size");
var $bg = (0, _themeTools.cssVar)("close-button-bg");
var baseStyle = (0, _styledSystem.defineStyle)({
    w: [
        $size.reference
    ],
    h: [
        $size.reference
    ],
    borderRadius: "md",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
        opacity: 0.4,
        cursor: "not-allowed",
        boxShadow: "none"
    },
    _hover: {
        [$bg.variable]: "colors.blackAlpha.100",
        _dark: {
            [$bg.variable]: "colors.whiteAlpha.100"
        }
    },
    _active: {
        [$bg.variable]: "colors.blackAlpha.200",
        _dark: {
            [$bg.variable]: "colors.whiteAlpha.200"
        }
    },
    _focusVisible: {
        boxShadow: "outline"
    },
    bg: $bg.reference
});
var sizes = {
    lg: (0, _styledSystem.defineStyle)({
        [$size.variable]: "sizes.10",
        fontSize: "md"
    }),
    md: (0, _styledSystem.defineStyle)({
        [$size.variable]: "sizes.8",
        fontSize: "xs"
    }),
    sm: (0, _styledSystem.defineStyle)({
        [$size.variable]: "sizes.6",
        fontSize: "2xs"
    })
};
var closeButtonTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle,
    sizes,
    defaultProps: {
        size: "md"
    }
});

},{"@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"U0d6b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "codeTheme", ()=>codeTheme);
var _chunkZQMLTFF3Mjs = require("./chunk-ZQMLTFF3.mjs");
// src/components/code.ts
var _styledSystem = require("@chakra-ui/styled-system");
var { variants, defaultProps } = (0, _chunkZQMLTFF3Mjs.badgeTheme);
var baseStyle = (0, _styledSystem.defineStyle)({
    fontFamily: "mono",
    fontSize: "sm",
    px: "0.2em",
    borderRadius: "sm",
    bg: (0, _chunkZQMLTFF3Mjs.vars).bg.reference,
    color: (0, _chunkZQMLTFF3Mjs.vars).color.reference,
    boxShadow: (0, _chunkZQMLTFF3Mjs.vars).shadow.reference
});
var codeTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle,
    variants,
    defaultProps
});

},{"./chunk-ZQMLTFF3.mjs":"41w8N","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2yV3H":[function(require,module,exports) {
// src/components/container.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "containerTheme", ()=>containerTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var baseStyle = (0, _styledSystem.defineStyle)({
    w: "100%",
    mx: "auto",
    maxW: "prose",
    px: "4"
});
var containerTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle
});

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"36hvT":[function(require,module,exports) {
// src/components/divider.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dividerTheme", ()=>dividerTheme);
var _styledSystem = require("@chakra-ui/styled-system");
var baseStyle = (0, _styledSystem.defineStyle)({
    opacity: 0.6,
    borderColor: "inherit"
});
var variantSolid = (0, _styledSystem.defineStyle)({
    borderStyle: "solid"
});
var variantDashed = (0, _styledSystem.defineStyle)({
    borderStyle: "dashed"
});
var variants = {
    solid: variantSolid,
    dashed: variantDashed
};
var dividerTheme = (0, _styledSystem.defineStyleConfig)({
    baseStyle,
    variants,
    defaultProps: {
        variant: "solid"
    }
});

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"is2N4":[function(require,module,exports) {
// src/components/accordion.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "accordionTheme", ()=>accordionTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.accordionAnatomy).keys);
var baseStyleContainer = (0, _styledSystem.defineStyle)({
    borderTopWidth: "1px",
    borderColor: "inherit",
    _last: {
        borderBottomWidth: "1px"
    }
});
var baseStyleButton = (0, _styledSystem.defineStyle)({
    transitionProperty: "common",
    transitionDuration: "normal",
    fontSize: "md",
    _focusVisible: {
        boxShadow: "outline"
    },
    _hover: {
        bg: "blackAlpha.50"
    },
    _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
    },
    px: "4",
    py: "2"
});
var baseStylePanel = (0, _styledSystem.defineStyle)({
    pt: "2",
    px: "4",
    pb: "5"
});
var baseStyleIcon = (0, _styledSystem.defineStyle)({
    fontSize: "1.25em"
});
var baseStyle = definePartsStyle({
    container: baseStyleContainer,
    button: baseStyleButton,
    panel: baseStylePanel,
    icon: baseStyleIcon
});
var accordionTheme = defineMultiStyleConfig({
    baseStyle
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bIZ4j":[function(require,module,exports) {
// src/components/alert.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "alertTheme", ()=>alertTheme);
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.alertAnatomy).keys);
var $fg = (0, _styledSystem.cssVar)("alert-fg");
var $bg = (0, _styledSystem.cssVar)("alert-bg");
var baseStyle = definePartsStyle({
    container: {
        bg: $bg.reference,
        px: "4",
        py: "3"
    },
    title: {
        fontWeight: "bold",
        lineHeight: "6",
        marginEnd: "2"
    },
    description: {
        lineHeight: "6"
    },
    icon: {
        color: $fg.reference,
        flexShrink: 0,
        marginEnd: "3",
        w: "5",
        h: "6"
    },
    spinner: {
        color: $fg.reference,
        flexShrink: 0,
        marginEnd: "3",
        w: "5",
        h: "5"
    }
});
function getBg(props) {
    const { theme, colorScheme: c } = props;
    const darkBg = (0, _themeTools.transparentize)(`${c}.200`, 0.16)(theme);
    return {
        light: `colors.${c}.100`,
        dark: darkBg
    };
}
var variantSubtle = definePartsStyle((props)=>{
    const { colorScheme: c } = props;
    const bg = getBg(props);
    return {
        container: {
            [$fg.variable]: `colors.${c}.500`,
            [$bg.variable]: bg.light,
            _dark: {
                [$fg.variable]: `colors.${c}.200`,
                [$bg.variable]: bg.dark
            }
        }
    };
});
var variantLeftAccent = definePartsStyle((props)=>{
    const { colorScheme: c } = props;
    const bg = getBg(props);
    return {
        container: {
            [$fg.variable]: `colors.${c}.500`,
            [$bg.variable]: bg.light,
            _dark: {
                [$fg.variable]: `colors.${c}.200`,
                [$bg.variable]: bg.dark
            },
            paddingStart: "3",
            borderStartWidth: "4px",
            borderStartColor: $fg.reference
        }
    };
});
var variantTopAccent = definePartsStyle((props)=>{
    const { colorScheme: c } = props;
    const bg = getBg(props);
    return {
        container: {
            [$fg.variable]: `colors.${c}.500`,
            [$bg.variable]: bg.light,
            _dark: {
                [$fg.variable]: `colors.${c}.200`,
                [$bg.variable]: bg.dark
            },
            pt: "2",
            borderTopWidth: "4px",
            borderTopColor: $fg.reference
        }
    };
});
var variantSolid = definePartsStyle((props)=>{
    const { colorScheme: c } = props;
    return {
        container: {
            [$fg.variable]: `colors.white`,
            [$bg.variable]: `colors.${c}.500`,
            _dark: {
                [$fg.variable]: `colors.gray.900`,
                [$bg.variable]: `colors.${c}.200`
            },
            color: $fg.reference
        }
    };
});
var variants = {
    subtle: variantSubtle,
    "left-accent": variantLeftAccent,
    "top-accent": variantTopAccent,
    solid: variantSolid
};
var alertTheme = defineMultiStyleConfig({
    baseStyle,
    variants,
    defaultProps: {
        variant: "subtle",
        colorScheme: "blue"
    }
});

},{"@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4x0Wg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avatarTheme", ()=>avatarTheme);
var _chunkNJCYBKFHMjs = require("./chunk-NJCYBKFH.mjs");
var _chunkUV3F75RFMjs = require("./chunk-UV3F75RF.mjs");
// src/components/avatar.ts
var _anatomy = require("@chakra-ui/anatomy");
var _styledSystem = require("@chakra-ui/styled-system");
var _themeTools = require("@chakra-ui/theme-tools");
var { definePartsStyle, defineMultiStyleConfig } = (0, _styledSystem.createMultiStyleConfigHelpers)((0, _anatomy.avatarAnatomy).keys);
var $border = (0, _styledSystem.cssVar)("avatar-border-color");
var $bg = (0, _styledSystem.cssVar)("avatar-bg");
var $fs = (0, _styledSystem.cssVar)("avatar-font-size");
var $size = (0, _styledSystem.cssVar)("avatar-size");
var baseStyleBadge = (0, _styledSystem.defineStyle)({
    borderRadius: "full",
    border: "0.2em solid",
    borderColor: $border.reference,
    [$border.variable]: "white",
    _dark: {
        [$border.variable]: "colors.gray.800"
    }
});
var baseStyleExcessLabel = (0, _styledSystem.defineStyle)({
    bg: $bg.reference,
    fontSize: $fs.reference,
    width: $size.reference,
    height: $size.reference,
    lineHeight: "1",
    [$bg.variable]: "colors.gray.200",
    _dark: {
        [$bg.variable]: "colors.whiteAlpha.400"
    }
});
var baseStyleContainer = (0, _styledSystem.defineStyle)((props)=>{
    const { name, theme } = props;
    const bg = name ? (0, _themeTools.randomColor)({
        string: name
    }) : "colors.gray.400";
    const isBgDark = (0, _themeTools.isDark)(bg)(theme);
    let color = "white";
    if (!isBgDark) color = "gray.800";
    return {
        bg: $bg.reference,
        fontSize: $fs.reference,
        color,
        borderColor: $border.reference,
        verticalAlign: "top",
        width: $size.reference,
        height: $size.reference,
        "&:not([data-loaded])": {
            [$bg.variable]: bg
        },
        [$border.variable]: "colors.white",
        _dark: {
            [$border.variable]: "colors.gray.800"
        }
    };
});
var baseStyleLabel = (0, _styledSystem.defineStyle)({
    fontSize: $fs.reference,
    lineHeight: "1"
});
var baseStyle = definePartsStyle((props)=>({
        badge: (0, _chunkUV3F75RFMjs.runIfFn)(baseStyleBadge, props),
        excessLabel: (0, _chunkUV3F75RFMjs.runIfFn)(baseStyleExcessLabel, props),
        container: (0, _chunkUV3F75RFMjs.runIfFn)(baseStyleContainer, props),
        label: baseStyleLabel
    }));
function getSize(size) {
    const themeSize = size !== "100%" ? (0, _chunkNJCYBKFHMjs.sizes_default)[size] : void 0;
    return definePartsStyle({
        container: {
            [$size.variable]: themeSize != null ? themeSize : size,
            [$fs.variable]: `calc(${themeSize != null ? themeSize : size} / 2.5)`
        },
        excessLabel: {
            [$size.variable]: themeSize != null ? themeSize : size,
            [$fs.variable]: `calc(${themeSize != null ? themeSize : size} / 2.5)`
        }
    });
}
var sizes = {
    "2xs": getSize(4),
    xs: getSize(6),
    sm: getSize(8),
    md: getSize(12),
    lg: getSize(16),
    xl: getSize(24),
    "2xl": getSize(32),
    full: getSize("100%")
};
var avatarTheme = defineMultiStyleConfig({
    baseStyle,
    sizes,
    defaultProps: {
        size: "md"
    }
});

},{"./chunk-NJCYBKFH.mjs":"laKb1","./chunk-UV3F75RF.mjs":"7PBMW","@chakra-ui/anatomy":"jzkqp","@chakra-ui/styled-system":"l3oON","@chakra-ui/theme-tools":"lTwFR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gKSof":[function(require,module,exports) {
// src/semantic-tokens.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "semanticTokens", ()=>semanticTokens);
var semanticTokens = {
    colors: {
        "chakra-body-text": {
            _light: "gray.800",
            _dark: "whiteAlpha.900"
        },
        "chakra-body-bg": {
            _light: "white",
            _dark: "gray.800"
        },
        "chakra-border-color": {
            _light: "gray.200",
            _dark: "whiteAlpha.300"
        },
        "chakra-inverse-text": {
            _light: "white",
            _dark: "gray.800"
        },
        "chakra-subtle-bg": {
            _light: "gray.100",
            _dark: "gray.700"
        },
        "chakra-subtle-text": {
            _light: "gray.600",
            _dark: "gray.400"
        },
        "chakra-placeholder-color": {
            _light: "gray.500",
            _dark: "whiteAlpha.400"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWdFk":[function(require,module,exports) {
// src/styles.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles);
var styles = {
    global: {
        body: {
            fontFamily: "body",
            color: "chakra-body-text",
            bg: "chakra-body-bg",
            transitionProperty: "background-color",
            transitionDuration: "normal",
            lineHeight: "base"
        },
        "*::placeholder": {
            color: "chakra-placeholder-color"
        },
        "*, *::before, &::after": {
            borderColor: "chakra-border-color"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"57T8d":[function(require,module,exports) {

},{}],"jpv8Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "withDefaultSize", ()=>withDefaultSize);
var _chunkLIR5QAZYMjs = require("./chunk-LIR5QAZY.mjs");
// src/theme-extensions/with-default-size.ts
var _sharedUtils = require("@chakra-ui/shared-utils");
function withDefaultSize({ size, components }) {
    return (theme)=>{
        let names = Object.keys(theme.components || {});
        if (Array.isArray(components)) names = components;
        else if ((0, _sharedUtils.isObject)(components)) names = Object.keys(components);
        return (0, _chunkLIR5QAZYMjs.mergeThemeOverride)(theme, {
            components: Object.fromEntries(names.map((componentName)=>{
                const withSize = {
                    defaultProps: {
                        size
                    }
                };
                return [
                    componentName,
                    withSize
                ];
            }))
        });
    };
}

},{"./chunk-LIR5QAZY.mjs":"jSln8","@chakra-ui/shared-utils":"h33Zu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmt5Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "withDefaultVariant", ()=>withDefaultVariant);
var _chunkLIR5QAZYMjs = require("./chunk-LIR5QAZY.mjs");
// src/theme-extensions/with-default-variant.ts
var _sharedUtils = require("@chakra-ui/shared-utils");
function withDefaultVariant({ variant, components }) {
    return (theme)=>{
        let names = Object.keys(theme.components || {});
        if (Array.isArray(components)) names = components;
        else if ((0, _sharedUtils.isObject)(components)) names = Object.keys(components);
        return (0, _chunkLIR5QAZYMjs.mergeThemeOverride)(theme, {
            components: Object.fromEntries(names.map((componentName)=>{
                const withVariant = {
                    defaultProps: {
                        variant
                    }
                };
                return [
                    componentName,
                    withVariant
                ];
            }))
        });
    };
}

},{"./chunk-LIR5QAZY.mjs":"jSln8","@chakra-ui/shared-utils":"h33Zu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cOMMM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PanSession", ()=>(0, _chunkSV3JYFGCMjs.PanSession));
parcelHelpers.export(exports, "__DEV__", ()=>(0, _chunkY5FGD7DMMjs.__DEV__));
parcelHelpers.export(exports, "__TEST__", ()=>(0, _chunkY5FGD7DMMjs.__TEST__));
parcelHelpers.export(exports, "addDomEvent", ()=>(0, _chunkO3SWHQEEMjs.addDomEvent));
parcelHelpers.export(exports, "addItem", ()=>(0, _chunkYTAYUX3PMjs.addItem));
parcelHelpers.export(exports, "addPointerEvent", ()=>(0, _chunkLCE7F24AMjs.addPointerEvent));
parcelHelpers.export(exports, "analyzeBreakpoints", ()=>(0, _chunkFDX7JCYEMjs.analyzeBreakpoints));
parcelHelpers.export(exports, "ariaAttr", ()=>(0, _chunkO3SWHQEEMjs.ariaAttr));
parcelHelpers.export(exports, "arrayToObjectNotation", ()=>(0, _chunkFGAEJGLBMjs.arrayToObjectNotation));
parcelHelpers.export(exports, "breakpoints", ()=>(0, _chunkFGAEJGLBMjs.breakpoints));
parcelHelpers.export(exports, "callAll", ()=>(0, _chunkM3TFMUOLMjs.callAll));
parcelHelpers.export(exports, "callAllHandlers", ()=>(0, _chunkM3TFMUOLMjs.callAllHandlers));
parcelHelpers.export(exports, "canUseDOM", ()=>(0, _chunkO3SWHQEEMjs.canUseDOM));
parcelHelpers.export(exports, "chunk", ()=>(0, _chunkYTAYUX3PMjs.chunk));
parcelHelpers.export(exports, "clampValue", ()=>(0, _chunkYAFHXCR4Mjs.clampValue));
parcelHelpers.export(exports, "closest", ()=>(0, _chunk5LUSIWEAMjs.closest));
parcelHelpers.export(exports, "compose", ()=>(0, _chunkM3TFMUOLMjs.compose));
parcelHelpers.export(exports, "contains", ()=>(0, _chunkO3SWHQEEMjs.contains));
parcelHelpers.export(exports, "countDecimalPlaces", ()=>(0, _chunkYAFHXCR4Mjs.countDecimalPlaces));
parcelHelpers.export(exports, "cx", ()=>(0, _chunkO3SWHQEEMjs.cx));
parcelHelpers.export(exports, "dataAttr", ()=>(0, _chunkO3SWHQEEMjs.dataAttr));
parcelHelpers.export(exports, "detectBrowser", ()=>(0, _chunkDGFLLHTMMjs.detectBrowser));
parcelHelpers.export(exports, "detectDeviceType", ()=>(0, _chunkDGFLLHTMMjs.detectDeviceType));
parcelHelpers.export(exports, "detectOS", ()=>(0, _chunkDGFLLHTMMjs.detectOS));
parcelHelpers.export(exports, "detectTouch", ()=>(0, _chunkDGFLLHTMMjs.detectTouch));
parcelHelpers.export(exports, "determineLazyBehavior", ()=>(0, _chunkXHETS734Mjs.determineLazyBehavior));
parcelHelpers.export(exports, "distance", ()=>(0, _chunkM3TFMUOLMjs.distance));
parcelHelpers.export(exports, "error", ()=>(0, _chunkM3TFMUOLMjs.error));
parcelHelpers.export(exports, "extractEventInfo", ()=>(0, _chunkLCE7F24AMjs.extractEventInfo));
parcelHelpers.export(exports, "filterUndefined", ()=>(0, _chunkYTQ3XZ3TMjs.filterUndefined));
parcelHelpers.export(exports, "flatten", ()=>(0, _chunkW5Y7LCVYMjs.flatten));
parcelHelpers.export(exports, "focus", ()=>(0, _chunkQKXRP2IXMjs.focus));
parcelHelpers.export(exports, "focusNextTabbable", ()=>(0, _chunk5LUSIWEAMjs.focusNextTabbable));
parcelHelpers.export(exports, "focusPreviousTabbable", ()=>(0, _chunk5LUSIWEAMjs.focusPreviousTabbable));
parcelHelpers.export(exports, "fromEntries", ()=>(0, _chunkYTQ3XZ3TMjs.fromEntries));
parcelHelpers.export(exports, "get", ()=>(0, _chunkYTQ3XZ3TMjs.get));
parcelHelpers.export(exports, "getActiveElement", ()=>(0, _chunkO3SWHQEEMjs.getActiveElement));
parcelHelpers.export(exports, "getAllFocusable", ()=>(0, _chunk5LUSIWEAMjs.getAllFocusable));
parcelHelpers.export(exports, "getAllTabbable", ()=>(0, _chunk5LUSIWEAMjs.getAllTabbable));
parcelHelpers.export(exports, "getCSSVar", ()=>(0, _chunkYTQ3XZ3TMjs.getCSSVar));
parcelHelpers.export(exports, "getEventWindow", ()=>(0, _chunkO3SWHQEEMjs.getEventWindow));
parcelHelpers.export(exports, "getFirstFocusable", ()=>(0, _chunk5LUSIWEAMjs.getFirstFocusable));
parcelHelpers.export(exports, "getFirstItem", ()=>(0, _chunkYTAYUX3PMjs.getFirstItem));
parcelHelpers.export(exports, "getFirstTabbableIn", ()=>(0, _chunk5LUSIWEAMjs.getFirstTabbableIn));
parcelHelpers.export(exports, "getLastItem", ()=>(0, _chunkYTAYUX3PMjs.getLastItem));
parcelHelpers.export(exports, "getLastTabbableIn", ()=>(0, _chunk5LUSIWEAMjs.getLastTabbableIn));
parcelHelpers.export(exports, "getNextIndex", ()=>(0, _chunkYTAYUX3PMjs.getNextIndex));
parcelHelpers.export(exports, "getNextItem", ()=>(0, _chunkYTAYUX3PMjs.getNextItem));
parcelHelpers.export(exports, "getNextItemFromSearch", ()=>(0, _chunkYTAYUX3PMjs.getNextItemFromSearch));
parcelHelpers.export(exports, "getNextTabbable", ()=>(0, _chunk5LUSIWEAMjs.getNextTabbable));
parcelHelpers.export(exports, "getOwnerDocument", ()=>(0, _chunkO3SWHQEEMjs.getOwnerDocument));
parcelHelpers.export(exports, "getOwnerWindow", ()=>(0, _chunkO3SWHQEEMjs.getOwnerWindow));
parcelHelpers.export(exports, "getPointerEventName", ()=>(0, _chunkLCE7F24AMjs.getPointerEventName));
parcelHelpers.export(exports, "getPrevIndex", ()=>(0, _chunkYTAYUX3PMjs.getPrevIndex));
parcelHelpers.export(exports, "getPrevItem", ()=>(0, _chunkYTAYUX3PMjs.getPrevItem));
parcelHelpers.export(exports, "getPreviousTabbable", ()=>(0, _chunk5LUSIWEAMjs.getPreviousTabbable));
parcelHelpers.export(exports, "getRelatedTarget", ()=>(0, _chunkO3SWHQEEMjs.getRelatedTarget));
parcelHelpers.export(exports, "getViewportPointFromEvent", ()=>(0, _chunkLCE7F24AMjs.getViewportPointFromEvent));
parcelHelpers.export(exports, "getWithDefault", ()=>(0, _chunkYTQ3XZ3TMjs.getWithDefault));
parcelHelpers.export(exports, "hasDisplayNone", ()=>(0, _chunkP6S57EDQMjs.hasDisplayNone));
parcelHelpers.export(exports, "hasFocusWithin", ()=>(0, _chunkP6S57EDQMjs.hasFocusWithin));
parcelHelpers.export(exports, "hasNegativeTabIndex", ()=>(0, _chunkP6S57EDQMjs.hasNegativeTabIndex));
parcelHelpers.export(exports, "hasTabIndex", ()=>(0, _chunkP6S57EDQMjs.hasTabIndex));
parcelHelpers.export(exports, "isActiveElement", ()=>(0, _chunkP6S57EDQMjs.isActiveElement));
parcelHelpers.export(exports, "isArray", ()=>(0, _chunkY5FGD7DMMjs.isArray));
parcelHelpers.export(exports, "isBrowser", ()=>(0, _chunkO3SWHQEEMjs.isBrowser));
parcelHelpers.export(exports, "isContentEditable", ()=>(0, _chunkP6S57EDQMjs.isContentEditable));
parcelHelpers.export(exports, "isCssVar", ()=>(0, _chunkY5FGD7DMMjs.isCssVar));
parcelHelpers.export(exports, "isCustomBreakpoint", ()=>(0, _chunkFGAEJGLBMjs.isCustomBreakpoint));
parcelHelpers.export(exports, "isDefined", ()=>(0, _chunkY5FGD7DMMjs.isDefined));
parcelHelpers.export(exports, "isDisabled", ()=>(0, _chunkP6S57EDQMjs.isDisabled));
parcelHelpers.export(exports, "isElement", ()=>(0, _chunkO3SWHQEEMjs.isElement));
parcelHelpers.export(exports, "isEmpty", ()=>(0, _chunkY5FGD7DMMjs.isEmpty));
parcelHelpers.export(exports, "isEmptyArray", ()=>(0, _chunkY5FGD7DMMjs.isEmptyArray));
parcelHelpers.export(exports, "isEmptyObject", ()=>(0, _chunkY5FGD7DMMjs.isEmptyObject));
parcelHelpers.export(exports, "isFocusable", ()=>(0, _chunkP6S57EDQMjs.isFocusable));
parcelHelpers.export(exports, "isFunction", ()=>(0, _chunkY5FGD7DMMjs.isFunction));
parcelHelpers.export(exports, "isHTMLElement", ()=>(0, _chunkO3SWHQEEMjs.isHTMLElement));
parcelHelpers.export(exports, "isHidden", ()=>(0, _chunkP6S57EDQMjs.isHidden));
parcelHelpers.export(exports, "isInputElement", ()=>(0, _chunkP6S57EDQMjs.isInputElement));
parcelHelpers.export(exports, "isInputEvent", ()=>(0, _chunkY5FGD7DMMjs.isInputEvent));
parcelHelpers.export(exports, "isMouseEvent", ()=>(0, _chunkLCE7F24AMjs.isMouseEvent));
parcelHelpers.export(exports, "isMultiTouchEvent", ()=>(0, _chunkLCE7F24AMjs.isMultiTouchEvent));
parcelHelpers.export(exports, "isNotEmptyObject", ()=>(0, _chunkY5FGD7DMMjs.isNotEmptyObject));
parcelHelpers.export(exports, "isNotNumber", ()=>(0, _chunkY5FGD7DMMjs.isNotNumber));
parcelHelpers.export(exports, "isNull", ()=>(0, _chunkY5FGD7DMMjs.isNull));
parcelHelpers.export(exports, "isNumber", ()=>(0, _chunkY5FGD7DMMjs.isNumber));
parcelHelpers.export(exports, "isNumeric", ()=>(0, _chunkY5FGD7DMMjs.isNumeric));
parcelHelpers.export(exports, "isObject", ()=>(0, _chunkY5FGD7DMMjs.isObject));
parcelHelpers.export(exports, "isRefObject", ()=>(0, _chunkY5FGD7DMMjs.isRefObject));
parcelHelpers.export(exports, "isResponsiveObjectLike", ()=>(0, _chunkFGAEJGLBMjs.isResponsiveObjectLike));
parcelHelpers.export(exports, "isRightClick", ()=>(0, _chunkO3SWHQEEMjs.isRightClick));
parcelHelpers.export(exports, "isString", ()=>(0, _chunkY5FGD7DMMjs.isString));
parcelHelpers.export(exports, "isTabbable", ()=>(0, _chunkP6S57EDQMjs.isTabbable));
parcelHelpers.export(exports, "isTouchEvent", ()=>(0, _chunkLCE7F24AMjs.isTouchEvent));
parcelHelpers.export(exports, "isUndefined", ()=>(0, _chunkY5FGD7DMMjs.isUndefined));
parcelHelpers.export(exports, "mapResponsive", ()=>(0, _chunkFGAEJGLBMjs.mapResponsive));
parcelHelpers.export(exports, "maxSafeInteger", ()=>(0, _chunkYAFHXCR4Mjs.maxSafeInteger));
parcelHelpers.export(exports, "memoize", ()=>(0, _chunkYTQ3XZ3TMjs.memoize));
parcelHelpers.export(exports, "memoizedGet", ()=>(0, _chunkYTQ3XZ3TMjs.memoizedGet));
parcelHelpers.export(exports, "mergeWith", ()=>(0, _chunkYTQ3XZ3TMjsDefault.default));
parcelHelpers.export(exports, "minSafeInteger", ()=>(0, _chunkYAFHXCR4Mjs.minSafeInteger));
parcelHelpers.export(exports, "noop", ()=>(0, _chunkM3TFMUOLMjs.noop));
parcelHelpers.export(exports, "normalizeEventKey", ()=>(0, _chunkO3SWHQEEMjs.normalizeEventKey));
parcelHelpers.export(exports, "objectFilter", ()=>(0, _chunkYTQ3XZ3TMjs.objectFilter));
parcelHelpers.export(exports, "objectKeys", ()=>(0, _chunkYTQ3XZ3TMjs.objectKeys));
parcelHelpers.export(exports, "objectToArrayNotation", ()=>(0, _chunkFGAEJGLBMjs.objectToArrayNotation));
parcelHelpers.export(exports, "omit", ()=>(0, _chunkYTQ3XZ3TMjs.omit));
parcelHelpers.export(exports, "once", ()=>(0, _chunkM3TFMUOLMjs.once));
parcelHelpers.export(exports, "percentToValue", ()=>(0, _chunkYAFHXCR4Mjs.percentToValue));
parcelHelpers.export(exports, "pick", ()=>(0, _chunkYTQ3XZ3TMjs.pick));
parcelHelpers.export(exports, "pipe", ()=>(0, _chunkM3TFMUOLMjs.pipe));
parcelHelpers.export(exports, "px", ()=>(0, _chunkFDX7JCYEMjs.px));
parcelHelpers.export(exports, "removeIndex", ()=>(0, _chunkYTAYUX3PMjs.removeIndex));
parcelHelpers.export(exports, "removeItem", ()=>(0, _chunkYTAYUX3PMjs.removeItem));
parcelHelpers.export(exports, "roundValueToStep", ()=>(0, _chunkYAFHXCR4Mjs.roundValueToStep));
parcelHelpers.export(exports, "runIfFn", ()=>(0, _chunkM3TFMUOLMjs.runIfFn));
parcelHelpers.export(exports, "split", ()=>(0, _chunkYTQ3XZ3TMjs.split));
parcelHelpers.export(exports, "toMediaQueryString", ()=>(0, _chunkFDX7JCYEMjs.toMediaQueryString));
parcelHelpers.export(exports, "toPrecision", ()=>(0, _chunkYAFHXCR4Mjs.toPrecision));
parcelHelpers.export(exports, "valueToPercent", ()=>(0, _chunkYAFHXCR4Mjs.valueToPercent));
parcelHelpers.export(exports, "walkObject", ()=>(0, _chunkDVFODTG7Mjs.walkObject));
parcelHelpers.export(exports, "warn", ()=>(0, _chunkM3TFMUOLMjs.warn));
parcelHelpers.export(exports, "wrapPointerEventHandler", ()=>(0, _chunkLCE7F24AMjs.wrapPointerEventHandler));
var _chunkWBQAMGXKMjs = require("./chunk-WBQAMGXK.mjs");
var _chunkDGFLLHTMMjs = require("./chunk-DGFLLHTM.mjs");
var _chunkDVFODTG7Mjs = require("./chunk-DVFODTG7.mjs");
var _chunkXHETS734Mjs = require("./chunk-XHETS734.mjs");
var _chunkYAFHXCR4Mjs = require("./chunk-YAFHXCR4.mjs");
var _chunkSV3JYFGCMjs = require("./chunk-SV3JYFGC.mjs");
var _chunkLCE7F24AMjs = require("./chunk-LCE7F24A.mjs");
var _chunkFGAEJGLBMjs = require("./chunk-FGAEJGLB.mjs");
var _chunkFDX7JCYEMjs = require("./chunk-FDX7JCYE.mjs");
var _chunkYTQ3XZ3TMjs = require("./chunk-YTQ3XZ3T.mjs");
var _chunkYTQ3XZ3TMjsDefault = parcelHelpers.interopDefault(_chunkYTQ3XZ3TMjs);
var _chunkYTAYUX3PMjs = require("./chunk-YTAYUX3P.mjs");
var _chunk5LUSIWEAMjs = require("./chunk-5LUSIWEA.mjs");
var _chunkW5Y7LCVYMjs = require("./chunk-W5Y7LCVY.mjs");
var _chunkQKXRP2IXMjs = require("./chunk-QKXRP2IX.mjs");
var _chunkP6S57EDQMjs = require("./chunk-P6S57EDQ.mjs");
var _chunkO3SWHQEEMjs = require("./chunk-O3SWHQEE.mjs");
var _chunkM3TFMUOLMjs = require("./chunk-M3TFMUOL.mjs");
var _chunkY5FGD7DMMjs = require("./chunk-Y5FGD7DM.mjs");
var _chunkNHABU752Mjs = require("./chunk-NHABU752.mjs");
// src/index.ts
var _cssBoxModel = require("css-box-model");
parcelHelpers.exportAll(_cssBoxModel, exports);

},{"./chunk-WBQAMGXK.mjs":"fTQF3","./chunk-DGFLLHTM.mjs":"aR8Ka","./chunk-DVFODTG7.mjs":false,"./chunk-XHETS734.mjs":false,"./chunk-YAFHXCR4.mjs":false,"./chunk-SV3JYFGC.mjs":"3MRxk","./chunk-LCE7F24A.mjs":"ltjm8","./chunk-FGAEJGLB.mjs":false,"./chunk-FDX7JCYE.mjs":false,"./chunk-YTQ3XZ3T.mjs":"gxriI","./chunk-YTAYUX3P.mjs":false,"./chunk-5LUSIWEA.mjs":"cwgzH","./chunk-W5Y7LCVY.mjs":false,"./chunk-QKXRP2IX.mjs":"dpQjb","./chunk-P6S57EDQ.mjs":"40lpu","./chunk-O3SWHQEE.mjs":"baVZI","./chunk-M3TFMUOL.mjs":"dLY81","./chunk-Y5FGD7DM.mjs":"hyzwB","./chunk-NHABU752.mjs":"dASwa","css-box-model":"353vO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fTQF3":[function(require,module,exports) {

},{}],"aR8Ka":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "detectDeviceType", ()=>detectDeviceType);
parcelHelpers.export(exports, "detectOS", ()=>detectOS);
parcelHelpers.export(exports, "detectBrowser", ()=>detectBrowser);
parcelHelpers.export(exports, "detectTouch", ()=>detectTouch);
var _chunkO3SWHQEEMjs = require("./chunk-O3SWHQEE.mjs");
// src/user-agent.ts
function getUserAgentBrowser(navigator) {
    const { userAgent: ua, vendor } = navigator;
    const android = /(android)/i.test(ua);
    switch(true){
        case /CriOS/.test(ua):
            return "Chrome for iOS";
        case /Edg\//.test(ua):
            return "Edge";
        case android && /Silk\//.test(ua):
            return "Silk";
        case /Chrome/.test(ua) && /Google Inc/.test(vendor):
            return "Chrome";
        case /Firefox\/\d+\.\d+$/.test(ua):
            return "Firefox";
        case android:
            return "AOSP";
        case /MSIE|Trident/.test(ua):
            return "IE";
        case /Safari/.test(navigator.userAgent) && /Apple Computer/.test(ua):
            return "Safari";
        case /AppleWebKit/.test(ua):
            return "WebKit";
        default:
            return null;
    }
}
function getUserAgentOS(navigator) {
    const { userAgent: ua, platform } = navigator;
    switch(true){
        case /Android/.test(ua):
            return "Android";
        case /iPhone|iPad|iPod/.test(platform):
            return "iOS";
        case /Win/.test(platform):
            return "Windows";
        case /Mac/.test(platform):
            return "Mac";
        case /CrOS/.test(ua):
            return "Chrome OS";
        case /Firefox/.test(ua):
            return "Firefox OS";
        default:
            return null;
    }
}
function detectDeviceType(navigator) {
    const { userAgent: ua } = navigator;
    if (/(tablet)|(iPad)|(Nexus 9)/i.test(ua)) return "tablet";
    if (/(mobi)/i.test(ua)) return "phone";
    return "desktop";
}
function detectOS(os) {
    if (!(0, _chunkO3SWHQEEMjs.isBrowser)) return false;
    return getUserAgentOS(window.navigator) === os;
}
function detectBrowser(browser) {
    if (!(0, _chunkO3SWHQEEMjs.isBrowser)) return false;
    return getUserAgentBrowser(window.navigator) === browser;
}
function detectTouch() {
    if (!(0, _chunkO3SWHQEEMjs.isBrowser)) return false;
    return window.ontouchstart === null && window.ontouchmove === null && window.ontouchend === null;
}

},{"./chunk-O3SWHQEE.mjs":"baVZI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"baVZI":[function(require,module,exports) {
// src/dom.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement);
parcelHelpers.export(exports, "getOwnerWindow", ()=>getOwnerWindow);
parcelHelpers.export(exports, "getOwnerDocument", ()=>getOwnerDocument);
parcelHelpers.export(exports, "getEventWindow", ()=>getEventWindow);
parcelHelpers.export(exports, "canUseDOM", ()=>canUseDOM);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
parcelHelpers.export(exports, "dataAttr", ()=>dataAttr);
parcelHelpers.export(exports, "ariaAttr", ()=>ariaAttr);
parcelHelpers.export(exports, "cx", ()=>cx);
parcelHelpers.export(exports, "getActiveElement", ()=>getActiveElement);
parcelHelpers.export(exports, "contains", ()=>contains);
parcelHelpers.export(exports, "addDomEvent", ()=>addDomEvent);
parcelHelpers.export(exports, "normalizeEventKey", ()=>normalizeEventKey);
parcelHelpers.export(exports, "getRelatedTarget", ()=>getRelatedTarget);
parcelHelpers.export(exports, "isRightClick", ()=>isRightClick);
function isElement(el) {
    return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}
function isHTMLElement(el) {
    var _a;
    if (!isElement(el)) return false;
    const win = (_a = el.ownerDocument.defaultView) != null ? _a : window;
    return el instanceof win.HTMLElement;
}
function getOwnerWindow(node) {
    var _a, _b;
    return isElement(node) ? (_b = (_a = getOwnerDocument(node)) == null ? void 0 : _a.defaultView) != null ? _b : window : window;
}
function getOwnerDocument(node) {
    var _a;
    return isElement(node) ? (_a = node.ownerDocument) != null ? _a : document : document;
}
function getEventWindow(event) {
    var _a;
    return (_a = event.view) != null ? _a : window;
}
function canUseDOM() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser = /* @__PURE__ */ canUseDOM();
var dataAttr = (condition)=>condition ? "" : void 0;
var ariaAttr = (condition)=>condition ? true : void 0;
var cx = (...classNames)=>classNames.filter(Boolean).join(" ");
function getActiveElement(node) {
    const doc = getOwnerDocument(node);
    return doc == null ? void 0 : doc.activeElement;
}
function contains(parent, child) {
    if (!parent) return false;
    return parent === child || parent.contains(child);
}
function addDomEvent(target, eventName, handler, options) {
    target.addEventListener(eventName, handler, options);
    return ()=>{
        target.removeEventListener(eventName, handler, options);
    };
}
function normalizeEventKey(event) {
    const { key, keyCode } = event;
    const isArrowKey = keyCode >= 37 && keyCode <= 40 && key.indexOf("Arrow") !== 0;
    const eventKey = isArrowKey ? `Arrow${key}` : key;
    return eventKey;
}
function getRelatedTarget(event) {
    var _a, _b;
    const target = (_a = event.target) != null ? _a : event.currentTarget;
    const activeElement = getActiveElement(target);
    return (_b = event.relatedTarget) != null ? _b : activeElement;
}
function isRightClick(event) {
    return event.button !== 0;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3MRxk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PanSession", ()=>PanSession);
var _chunkLCE7F24AMjs = require("./chunk-LCE7F24A.mjs");
var _chunkO3SWHQEEMjs = require("./chunk-O3SWHQEE.mjs");
var _chunkM3TFMUOLMjs = require("./chunk-M3TFMUOL.mjs");
var _chunkNHABU752Mjs = require("./chunk-NHABU752.mjs");
// src/pan-event.ts
var _framesync = require("framesync");
var _framesyncDefault = parcelHelpers.interopDefault(_framesync);
var PanSession = class {
    constructor(event, handlers, threshold){
        (0, _chunkNHABU752Mjs.__publicField)(this, "history", []);
        (0, _chunkNHABU752Mjs.__publicField)(this, "startEvent", null);
        (0, _chunkNHABU752Mjs.__publicField)(this, "lastEvent", null);
        (0, _chunkNHABU752Mjs.__publicField)(this, "lastEventInfo", null);
        (0, _chunkNHABU752Mjs.__publicField)(this, "handlers", {});
        (0, _chunkNHABU752Mjs.__publicField)(this, "removeListeners", (0, _chunkM3TFMUOLMjs.noop));
        (0, _chunkNHABU752Mjs.__publicField)(this, "threshold", 3);
        (0, _chunkNHABU752Mjs.__publicField)(this, "win");
        (0, _chunkNHABU752Mjs.__publicField)(this, "updatePoint", ()=>{
            if (!(this.lastEvent && this.lastEventInfo)) return;
            const info = getPanInfo(this.lastEventInfo, this.history);
            const isPanStarted = this.startEvent !== null;
            const isDistancePastThreshold = (0, _chunkM3TFMUOLMjs.distance)(info.offset, {
                x: 0,
                y: 0
            }) >= this.threshold;
            if (!isPanStarted && !isDistancePastThreshold) return;
            const { timestamp } = (0, _framesync.getFrameData)();
            this.history.push({
                ...info.point,
                timestamp
            });
            const { onStart, onMove } = this.handlers;
            if (!isPanStarted) {
                onStart == null || onStart(this.lastEvent, info);
                this.startEvent = this.lastEvent;
            }
            onMove == null || onMove(this.lastEvent, info);
        });
        (0, _chunkNHABU752Mjs.__publicField)(this, "onPointerMove", (event, info)=>{
            this.lastEvent = event;
            this.lastEventInfo = info;
            if ((0, _chunkLCE7F24AMjs.isMouseEvent)(event) && event.buttons === 0) {
                this.onPointerUp(event, info);
                return;
            }
            (0, _framesyncDefault.default).update(this.updatePoint, true);
        });
        (0, _chunkNHABU752Mjs.__publicField)(this, "onPointerUp", (event, info)=>{
            const panInfo = getPanInfo(info, this.history);
            const { onEnd, onSessionEnd } = this.handlers;
            onSessionEnd == null || onSessionEnd(event, panInfo);
            this.end();
            if (!onEnd || !this.startEvent) return;
            onEnd == null || onEnd(event, panInfo);
        });
        this.win = (0, _chunkO3SWHQEEMjs.getEventWindow)(event);
        if ((0, _chunkLCE7F24AMjs.isMultiTouchEvent)(event)) return;
        this.handlers = handlers;
        if (threshold) this.threshold = threshold;
        event.stopPropagation();
        event.preventDefault();
        const info = (0, _chunkLCE7F24AMjs.extractEventInfo)(event);
        const { timestamp } = (0, _framesync.getFrameData)();
        this.history = [
            {
                ...info.point,
                timestamp
            }
        ];
        const { onSessionStart } = handlers;
        onSessionStart == null || onSessionStart(event, getPanInfo(info, this.history));
        this.removeListeners = (0, _chunkM3TFMUOLMjs.pipe)((0, _chunkLCE7F24AMjs.addPointerEvent)(this.win, "pointermove", this.onPointerMove), (0, _chunkLCE7F24AMjs.addPointerEvent)(this.win, "pointerup", this.onPointerUp), (0, _chunkLCE7F24AMjs.addPointerEvent)(this.win, "pointercancel", this.onPointerUp));
    }
    updateHandlers(handlers) {
        this.handlers = handlers;
    }
    end() {
        var _a;
        (_a = this.removeListeners) == null || _a.call(this);
        (0, _framesync.cancelSync).update(this.updatePoint);
    }
};
function subtractPoint(a, b) {
    return {
        x: a.x - b.x,
        y: a.y - b.y
    };
}
function startPanPoint(history) {
    return history[0];
}
function lastPanPoint(history) {
    return history[history.length - 1];
}
function getPanInfo(info, history) {
    return {
        point: info.point,
        delta: subtractPoint(info.point, lastPanPoint(history)),
        offset: subtractPoint(info.point, startPanPoint(history)),
        velocity: getVelocity(history, 0.1)
    };
}
function lastDevicePoint(history) {
    return history[history.length - 1];
}
var toMilliseconds = (seconds)=>seconds * 1e3;
function getVelocity(history, timeDelta) {
    if (history.length < 2) return {
        x: 0,
        y: 0
    };
    let i = history.length - 1;
    let timestampedPoint = null;
    const lastPoint = lastDevicePoint(history);
    while(i >= 0){
        timestampedPoint = history[i];
        if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) break;
        i--;
    }
    if (!timestampedPoint) return {
        x: 0,
        y: 0
    };
    const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
    if (time === 0) return {
        x: 0,
        y: 0
    };
    const currentVelocity = {
        x: (lastPoint.x - timestampedPoint.x) / time,
        y: (lastPoint.y - timestampedPoint.y) / time
    };
    if (currentVelocity.x === Infinity) currentVelocity.x = 0;
    if (currentVelocity.y === Infinity) currentVelocity.y = 0;
    return currentVelocity;
}

},{"./chunk-LCE7F24A.mjs":"ltjm8","./chunk-O3SWHQEE.mjs":"baVZI","./chunk-M3TFMUOL.mjs":"dLY81","./chunk-NHABU752.mjs":"dASwa","framesync":"lhfBw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltjm8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isMouseEvent", ()=>isMouseEvent);
parcelHelpers.export(exports, "isTouchEvent", ()=>isTouchEvent);
parcelHelpers.export(exports, "extractEventInfo", ()=>extractEventInfo);
parcelHelpers.export(exports, "getViewportPointFromEvent", ()=>getViewportPointFromEvent);
parcelHelpers.export(exports, "wrapPointerEventHandler", ()=>wrapPointerEventHandler);
parcelHelpers.export(exports, "getPointerEventName", ()=>getPointerEventName);
parcelHelpers.export(exports, "addPointerEvent", ()=>addPointerEvent);
parcelHelpers.export(exports, "isMultiTouchEvent", ()=>isMultiTouchEvent);
var _chunkO3SWHQEEMjs = require("./chunk-O3SWHQEE.mjs");
// src/pointer-event.ts
function isMouseEvent(event) {
    const win = (0, _chunkO3SWHQEEMjs.getEventWindow)(event);
    if (typeof win.PointerEvent !== "undefined" && event instanceof win.PointerEvent) return !!(event.pointerType === "mouse");
    return event instanceof win.MouseEvent;
}
function isTouchEvent(event) {
    const hasTouches = !!event.touches;
    return hasTouches;
}
function filterPrimaryPointer(eventHandler) {
    return (event)=>{
        const win = (0, _chunkO3SWHQEEMjs.getEventWindow)(event);
        const isMouseEvent2 = event instanceof win.MouseEvent;
        const isPrimaryPointer = !isMouseEvent2 || isMouseEvent2 && event.button === 0;
        if (isPrimaryPointer) eventHandler(event);
    };
}
var defaultPagePoint = {
    pageX: 0,
    pageY: 0
};
function pointFromTouch(e, pointType = "page") {
    const primaryTouch = e.touches[0] || e.changedTouches[0];
    const point = primaryTouch || defaultPagePoint;
    return {
        x: point[`${pointType}X`],
        y: point[`${pointType}Y`]
    };
}
function pointFromMouse(point, pointType = "page") {
    return {
        x: point[`${pointType}X`],
        y: point[`${pointType}Y`]
    };
}
function extractEventInfo(event, pointType = "page") {
    return {
        point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
    };
}
function getViewportPointFromEvent(event) {
    return extractEventInfo(event, "client");
}
var wrapPointerEventHandler = (handler, shouldFilterPrimaryPointer = false)=>{
    const listener = (event)=>handler(event, extractEventInfo(event));
    return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
};
var supportsPointerEvents = ()=>(0, _chunkO3SWHQEEMjs.isBrowser) && window.onpointerdown === null;
var supportsTouchEvents = ()=>(0, _chunkO3SWHQEEMjs.isBrowser) && window.ontouchstart === null;
var supportsMouseEvents = ()=>(0, _chunkO3SWHQEEMjs.isBrowser) && window.onmousedown === null;
var mouseEventNames = {
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointercancel: "mousecancel",
    pointerover: "mouseover",
    pointerout: "mouseout",
    pointerenter: "mouseenter",
    pointerleave: "mouseleave"
};
var touchEventNames = {
    pointerdown: "touchstart",
    pointermove: "touchmove",
    pointerup: "touchend",
    pointercancel: "touchcancel"
};
function getPointerEventName(name) {
    if (supportsPointerEvents()) return name;
    if (supportsTouchEvents()) return touchEventNames[name];
    if (supportsMouseEvents()) return mouseEventNames[name];
    return name;
}
function addPointerEvent(target, eventName, handler, options) {
    return (0, _chunkO3SWHQEEMjs.addDomEvent)(target, getPointerEventName(eventName), wrapPointerEventHandler(handler, eventName === "pointerdown"), options);
}
function isMultiTouchEvent(event) {
    return isTouchEvent(event) && event.touches.length > 1;
}

},{"./chunk-O3SWHQEE.mjs":"baVZI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dLY81":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runIfFn", ()=>runIfFn);
parcelHelpers.export(exports, "callAllHandlers", ()=>callAllHandlers);
parcelHelpers.export(exports, "callAll", ()=>callAll);
parcelHelpers.export(exports, "compose", ()=>compose);
parcelHelpers.export(exports, "once", ()=>once);
parcelHelpers.export(exports, "noop", ()=>noop);
parcelHelpers.export(exports, "warn", ()=>warn);
parcelHelpers.export(exports, "error", ()=>error);
parcelHelpers.export(exports, "pipe", ()=>pipe);
parcelHelpers.export(exports, "distance", ()=>distance);
var _chunkY5FGD7DMMjs = require("./chunk-Y5FGD7DM.mjs");
// src/function.ts
function runIfFn(valueOrFn, ...args) {
    return (0, _chunkY5FGD7DMMjs.isFunction)(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function callAllHandlers(...fns) {
    return function func(event) {
        fns.some((fn)=>{
            fn == null || fn(event);
            return event == null ? void 0 : event.defaultPrevented;
        });
    };
}
function callAll(...fns) {
    return function mergedFn(arg) {
        fns.forEach((fn)=>{
            fn == null || fn(arg);
        });
    };
}
var compose = (fn1, ...fns)=>fns.reduce((f1, f2)=>(...args)=>f1(f2(...args)), fn1);
function once(fn) {
    let result;
    return function func(...args) {
        if (fn) {
            result = fn.apply(this, args);
            fn = null;
        }
        return result;
    };
}
var noop = ()=>{};
var warn = /* @__PURE__ */ once((options)=>()=>{
        const { condition, message } = options;
        if (condition && (0, _chunkY5FGD7DMMjs.__DEV__)) console.warn(message);
    });
var error = /* @__PURE__ */ once((options)=>()=>{
        const { condition, message } = options;
        if (condition && (0, _chunkY5FGD7DMMjs.__DEV__)) console.error(message);
    });
var pipe = (...fns)=>(v)=>fns.reduce((a, b)=>b(a), v);
var distance1D = (a, b)=>Math.abs(a - b);
var isPoint = (point)=>"x" in point && "y" in point;
function distance(a, b) {
    if ((0, _chunkY5FGD7DMMjs.isNumber)(a) && (0, _chunkY5FGD7DMMjs.isNumber)(b)) return distance1D(a, b);
    if (isPoint(a) && isPoint(b)) {
        const xDelta = distance1D(a.x, b.x);
        const yDelta = distance1D(a.y, b.y);
        return Math.sqrt(xDelta ** 2 + yDelta ** 2);
    }
    return 0;
}

},{"./chunk-Y5FGD7DM.mjs":"hyzwB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hyzwB":[function(require,module,exports) {
// src/assertion.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNumber", ()=>isNumber);
parcelHelpers.export(exports, "isNotNumber", ()=>isNotNumber);
parcelHelpers.export(exports, "isNumeric", ()=>isNumeric);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isEmptyArray", ()=>isEmptyArray);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isDefined", ()=>isDefined);
parcelHelpers.export(exports, "isUndefined", ()=>isUndefined);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isEmptyObject", ()=>isEmptyObject);
parcelHelpers.export(exports, "isNotEmptyObject", ()=>isNotEmptyObject);
parcelHelpers.export(exports, "isNull", ()=>isNull);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isCssVar", ()=>isCssVar);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty);
parcelHelpers.export(exports, "__DEV__", ()=>__DEV__);
parcelHelpers.export(exports, "__TEST__", ()=>__TEST__);
parcelHelpers.export(exports, "isRefObject", ()=>isRefObject);
parcelHelpers.export(exports, "isInputEvent", ()=>isInputEvent);
function isNumber(value) {
    return typeof value === "number";
}
function isNotNumber(value) {
    return typeof value !== "number" || Number.isNaN(value) || !Number.isFinite(value);
}
function isNumeric(value) {
    return value != null && value - parseFloat(value) + 1 >= 0;
}
function isArray(value) {
    return Array.isArray(value);
}
function isEmptyArray(value) {
    return isArray(value) && value.length === 0;
}
function isFunction(value) {
    return typeof value === "function";
}
function isDefined(value) {
    return typeof value !== "undefined" && value !== void 0;
}
function isUndefined(value) {
    return typeof value === "undefined" || value === void 0;
}
function isObject(value) {
    const type = typeof value;
    return value != null && (type === "object" || type === "function") && !isArray(value);
}
function isEmptyObject(value) {
    return isObject(value) && Object.keys(value).length === 0;
}
function isNotEmptyObject(value) {
    return value && !isEmptyObject(value);
}
function isNull(value) {
    return value == null;
}
function isString(value) {
    return Object.prototype.toString.call(value) === "[object String]";
}
function isCssVar(value) {
    return /^var\(--.+\)$/.test(value);
}
function isEmpty(value) {
    if (isArray(value)) return isEmptyArray(value);
    if (isObject(value)) return isEmptyObject(value);
    if (value == null || value === "") return true;
    return false;
}
var __DEV__ = true;
var __TEST__ = false;
function isRefObject(val) {
    return "current" in val;
}
function isInputEvent(value) {
    return value && isObject(value) && isObject(value.target);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dASwa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__publicField", ()=>__publicField);
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>{
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lhfBw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cancelSync", ()=>cancelSync);
parcelHelpers.export(exports, "flushSync", ()=>flushSync);
parcelHelpers.export(exports, "getFrameData", ()=>getFrameData);
var _onNextFrameMjs = require("./on-next-frame.mjs");
var _createRenderStepMjs = require("./create-render-step.mjs");
const maxElapsed = 40;
let useDefaultElapsed = true;
let runNextFrame = false;
let isProcessing = false;
const frame = {
    delta: 0,
    timestamp: 0
};
const stepsOrder = [
    "read",
    "update",
    "preRender",
    "render",
    "postRender"
];
const steps = stepsOrder.reduce((acc, key)=>{
    acc[key] = (0, _createRenderStepMjs.createRenderStep)(()=>runNextFrame = true);
    return acc;
}, {});
const sync = stepsOrder.reduce((acc, key)=>{
    const step = steps[key];
    acc[key] = (process, keepAlive = false, immediate = false)=>{
        if (!runNextFrame) startLoop();
        return step.schedule(process, keepAlive, immediate);
    };
    return acc;
}, {});
const cancelSync = stepsOrder.reduce((acc, key)=>{
    acc[key] = steps[key].cancel;
    return acc;
}, {});
const flushSync = stepsOrder.reduce((acc, key)=>{
    acc[key] = ()=>steps[key].process(frame);
    return acc;
}, {});
const processStep = (stepId)=>steps[stepId].process(frame);
const processFrame = (timestamp)=>{
    runNextFrame = false;
    frame.delta = useDefaultElapsed ? (0, _onNextFrameMjs.defaultTimestep) : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
    frame.timestamp = timestamp;
    isProcessing = true;
    stepsOrder.forEach(processStep);
    isProcessing = false;
    if (runNextFrame) {
        useDefaultElapsed = false;
        (0, _onNextFrameMjs.onNextFrame)(processFrame);
    }
};
const startLoop = ()=>{
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!isProcessing) (0, _onNextFrameMjs.onNextFrame)(processFrame);
};
const getFrameData = ()=>frame;
exports.default = sync;

},{"./on-next-frame.mjs":"7pqDN","./create-render-step.mjs":"ix13w","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7pqDN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultTimestep", ()=>defaultTimestep);
parcelHelpers.export(exports, "onNextFrame", ()=>onNextFrame);
const defaultTimestep = 1 / 60 * 1000;
const getCurrentTime = typeof performance !== "undefined" ? ()=>performance.now() : ()=>Date.now();
const onNextFrame = typeof window !== "undefined" ? (callback)=>window.requestAnimationFrame(callback) : (callback)=>setTimeout(()=>callback(getCurrentTime()), defaultTimestep);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ix13w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRenderStep", ()=>createRenderStep);
function createRenderStep(runNextFrame) {
    let toRun = [];
    let toRunNextFrame = [];
    let numToRun = 0;
    let isProcessing = false;
    let flushNextFrame = false;
    const toKeepAlive = new WeakSet();
    const step = {
        schedule: (callback, keepAlive = false, immediate = false)=>{
            const addToCurrentFrame = immediate && isProcessing;
            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
            if (keepAlive) toKeepAlive.add(callback);
            if (buffer.indexOf(callback) === -1) {
                buffer.push(callback);
                if (addToCurrentFrame && isProcessing) numToRun = toRun.length;
            }
            return callback;
        },
        cancel: (callback)=>{
            const index = toRunNextFrame.indexOf(callback);
            if (index !== -1) toRunNextFrame.splice(index, 1);
            toKeepAlive.delete(callback);
        },
        process: (frameData)=>{
            if (isProcessing) {
                flushNextFrame = true;
                return;
            }
            isProcessing = true;
            [toRun, toRunNextFrame] = [
                toRunNextFrame,
                toRun
            ];
            toRunNextFrame.length = 0;
            numToRun = toRun.length;
            if (numToRun) for(let i = 0; i < numToRun; i++){
                const callback = toRun[i];
                callback(frameData);
                if (toKeepAlive.has(callback)) {
                    step.schedule(callback);
                    runNextFrame();
                }
            }
            isProcessing = false;
            if (flushNextFrame) {
                flushNextFrame = false;
                step.process(frameData);
            }
        }
    };
    return step;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gxriI":[function(require,module,exports) {
// src/object.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "omit", ()=>omit);
parcelHelpers.export(exports, "pick", ()=>pick);
parcelHelpers.export(exports, "split", ()=>split);
parcelHelpers.export(exports, "get", ()=>get);
parcelHelpers.export(exports, "memoize", ()=>memoize);
parcelHelpers.export(exports, "memoizedGet", ()=>memoizedGet);
parcelHelpers.export(exports, "getWithDefault", ()=>getWithDefault);
parcelHelpers.export(exports, "objectFilter", ()=>objectFilter);
parcelHelpers.export(exports, "filterUndefined", ()=>filterUndefined);
parcelHelpers.export(exports, "objectKeys", ()=>objectKeys);
parcelHelpers.export(exports, "fromEntries", ()=>fromEntries);
parcelHelpers.export(exports, "getCSSVar", ()=>getCSSVar);
parcelHelpers.export(exports, "default", ()=>(0, _lodashMergewithDefault.default));
var _lodashMergewith = require("lodash.mergewith");
var _lodashMergewithDefault = parcelHelpers.interopDefault(_lodashMergewith);
function omit(object, keys) {
    const result = {};
    Object.keys(object).forEach((key)=>{
        if (keys.includes(key)) return;
        result[key] = object[key];
    });
    return result;
}
function pick(object, keys) {
    const result = {};
    keys.forEach((key)=>{
        if (key in object) result[key] = object[key];
    });
    return result;
}
function split(object, keys) {
    const picked = {};
    const omitted = {};
    Object.keys(object).forEach((key)=>{
        if (keys.includes(key)) picked[key] = object[key];
        else omitted[key] = object[key];
    });
    return [
        picked,
        omitted
    ];
}
function get(obj, path, fallback, index) {
    const key = typeof path === "string" ? path.split(".") : [
        path
    ];
    for(index = 0; index < key.length; index += 1){
        if (!obj) break;
        obj = obj[key[index]];
    }
    return obj === void 0 ? fallback : obj;
}
var memoize = (fn)=>{
    const cache = /* @__PURE__ */ new WeakMap();
    const memoizedFn = (obj, path, fallback, index)=>{
        if (typeof obj === "undefined") return fn(obj, path, fallback);
        if (!cache.has(obj)) cache.set(obj, /* @__PURE__ */ new Map());
        const map = cache.get(obj);
        if (map.has(path)) return map.get(path);
        const value = fn(obj, path, fallback, index);
        map.set(path, value);
        return value;
    };
    return memoizedFn;
};
var memoizedGet = memoize(get);
function getWithDefault(path, scale) {
    return memoizedGet(scale, path, path);
}
function objectFilter(object, fn) {
    const result = {};
    Object.keys(object).forEach((key)=>{
        const value = object[key];
        const shouldPass = fn(value, key, object);
        if (shouldPass) result[key] = value;
    });
    return result;
}
var filterUndefined = (object)=>objectFilter(object, (val)=>val !== null && val !== void 0);
var objectKeys = (obj)=>Object.keys(obj);
var fromEntries = (entries)=>entries.reduce((carry, [key, value])=>{
        carry[key] = value;
        return carry;
    }, {});
var getCSSVar = (theme, scale, value)=>{
    var _a, _b, _c;
    return (_c = (_b = (_a = theme.__cssMap) == null ? void 0 : _a[`${scale}.${value}`]) == null ? void 0 : _b.varRef) != null ? _c : value;
};

},{"lodash.mergewith":"XBPGM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwgzH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAllFocusable", ()=>getAllFocusable);
parcelHelpers.export(exports, "getFirstFocusable", ()=>getFirstFocusable);
parcelHelpers.export(exports, "getAllTabbable", ()=>getAllTabbable);
parcelHelpers.export(exports, "getFirstTabbableIn", ()=>getFirstTabbableIn);
parcelHelpers.export(exports, "getLastTabbableIn", ()=>getLastTabbableIn);
parcelHelpers.export(exports, "getNextTabbable", ()=>getNextTabbable);
parcelHelpers.export(exports, "getPreviousTabbable", ()=>getPreviousTabbable);
parcelHelpers.export(exports, "focusNextTabbable", ()=>focusNextTabbable);
parcelHelpers.export(exports, "focusPreviousTabbable", ()=>focusPreviousTabbable);
parcelHelpers.export(exports, "closest", ()=>closest);
var _chunkP6S57EDQMjs = require("./chunk-P6S57EDQ.mjs");
var _chunkO3SWHQEEMjs = require("./chunk-O3SWHQEE.mjs");
// src/dom-query.ts
var focusableElList = [
    "input:not(:disabled):not([disabled])",
    "select:not(:disabled):not([disabled])",
    "textarea:not(:disabled):not([disabled])",
    "embed",
    "iframe",
    "object",
    "a[href]",
    "area[href]",
    "button:not(:disabled):not([disabled])",
    "[tabindex]",
    "audio[controls]",
    "video[controls]",
    "*[tabindex]:not([aria-disabled])",
    "*[contenteditable]"
];
var focusableElSelector = focusableElList.join();
var isVisible = (el)=>el.offsetWidth > 0 && el.offsetHeight > 0;
function getAllFocusable(container) {
    const focusableEls = Array.from(container.querySelectorAll(focusableElSelector));
    focusableEls.unshift(container);
    return focusableEls.filter((el)=>(0, _chunkP6S57EDQMjs.isFocusable)(el) && isVisible(el));
}
function getFirstFocusable(container) {
    const allFocusable = getAllFocusable(container);
    return allFocusable.length ? allFocusable[0] : null;
}
function getAllTabbable(container, fallbackToFocusable) {
    const allFocusable = Array.from(container.querySelectorAll(focusableElSelector));
    const allTabbable = allFocusable.filter((0, _chunkP6S57EDQMjs.isTabbable));
    if ((0, _chunkP6S57EDQMjs.isTabbable)(container)) allTabbable.unshift(container);
    if (!allTabbable.length && fallbackToFocusable) return allFocusable;
    return allTabbable;
}
function getFirstTabbableIn(container, fallbackToFocusable) {
    const [first] = getAllTabbable(container, fallbackToFocusable);
    return first || null;
}
function getLastTabbableIn(container, fallbackToFocusable) {
    const allTabbable = getAllTabbable(container, fallbackToFocusable);
    return allTabbable[allTabbable.length - 1] || null;
}
function getNextTabbable(container, fallbackToFocusable) {
    const allFocusable = getAllFocusable(container);
    const index = allFocusable.indexOf(document.activeElement);
    const slice = allFocusable.slice(index + 1);
    return slice.find((0, _chunkP6S57EDQMjs.isTabbable)) || allFocusable.find((0, _chunkP6S57EDQMjs.isTabbable)) || (fallbackToFocusable ? slice[0] : null);
}
function getPreviousTabbable(container, fallbackToFocusable) {
    const allFocusable = getAllFocusable(container).reverse();
    const index = allFocusable.indexOf(document.activeElement);
    const slice = allFocusable.slice(index + 1);
    return slice.find((0, _chunkP6S57EDQMjs.isTabbable)) || allFocusable.find((0, _chunkP6S57EDQMjs.isTabbable)) || (fallbackToFocusable ? slice[0] : null);
}
function focusNextTabbable(container, fallbackToFocusable) {
    const nextTabbable = getNextTabbable(container, fallbackToFocusable);
    if (nextTabbable && (0, _chunkO3SWHQEEMjs.isHTMLElement)(nextTabbable)) nextTabbable.focus();
}
function focusPreviousTabbable(container, fallbackToFocusable) {
    const previousTabbable = getPreviousTabbable(container, fallbackToFocusable);
    if (previousTabbable && (0, _chunkO3SWHQEEMjs.isHTMLElement)(previousTabbable)) previousTabbable.focus();
}
function matches(element, selectors) {
    if ("matches" in element) return element.matches(selectors);
    if ("msMatchesSelector" in element) return element.msMatchesSelector(selectors);
    return element.webkitMatchesSelector(selectors);
}
function closest(element, selectors) {
    if ("closest" in element) return element.closest(selectors);
    do {
        if (matches(element, selectors)) return element;
        element = element.parentElement || element.parentNode;
    }while (element !== null && element.nodeType === 1);
    return null;
}

},{"./chunk-P6S57EDQ.mjs":"40lpu","./chunk-O3SWHQEE.mjs":"baVZI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"40lpu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasDisplayNone", ()=>hasDisplayNone);
parcelHelpers.export(exports, "hasTabIndex", ()=>hasTabIndex);
parcelHelpers.export(exports, "hasNegativeTabIndex", ()=>hasNegativeTabIndex);
parcelHelpers.export(exports, "isDisabled", ()=>isDisabled);
parcelHelpers.export(exports, "isInputElement", ()=>isInputElement);
parcelHelpers.export(exports, "isActiveElement", ()=>isActiveElement);
parcelHelpers.export(exports, "hasFocusWithin", ()=>hasFocusWithin);
parcelHelpers.export(exports, "isHidden", ()=>isHidden);
parcelHelpers.export(exports, "isContentEditable", ()=>isContentEditable);
parcelHelpers.export(exports, "isFocusable", ()=>isFocusable);
parcelHelpers.export(exports, "isTabbable", ()=>isTabbable);
var _chunkO3SWHQEEMjs = require("./chunk-O3SWHQEE.mjs");
// src/tabbable.ts
var hasDisplayNone = (element)=>window.getComputedStyle(element).display === "none";
var hasTabIndex = (element)=>element.hasAttribute("tabindex");
var hasNegativeTabIndex = (element)=>hasTabIndex(element) && element.tabIndex === -1;
function isDisabled(element) {
    return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
}
function isInputElement(element) {
    return (0, _chunkO3SWHQEEMjs.isHTMLElement)(element) && element.localName === "input" && "select" in element;
}
function isActiveElement(element) {
    const doc = (0, _chunkO3SWHQEEMjs.isHTMLElement)(element) ? (0, _chunkO3SWHQEEMjs.getOwnerDocument)(element) : document;
    return doc.activeElement === element;
}
function hasFocusWithin(element) {
    if (!document.activeElement) return false;
    return element.contains(document.activeElement);
}
function isHidden(element) {
    if (element.parentElement && isHidden(element.parentElement)) return true;
    return element.hidden;
}
function isContentEditable(element) {
    const value = element.getAttribute("contenteditable");
    return value !== "false" && value != null;
}
function isFocusable(element) {
    if (!(0, _chunkO3SWHQEEMjs.isHTMLElement)(element) || isHidden(element) || isDisabled(element)) return false;
    const { localName } = element;
    const focusableTags = [
        "input",
        "select",
        "textarea",
        "button"
    ];
    if (focusableTags.indexOf(localName) >= 0) return true;
    const others = {
        a: ()=>element.hasAttribute("href"),
        audio: ()=>element.hasAttribute("controls"),
        video: ()=>element.hasAttribute("controls")
    };
    if (localName in others) return others[localName]();
    if (isContentEditable(element)) return true;
    return hasTabIndex(element);
}
function isTabbable(element) {
    if (!element) return false;
    return (0, _chunkO3SWHQEEMjs.isHTMLElement)(element) && isFocusable(element) && !hasNegativeTabIndex(element);
}

},{"./chunk-O3SWHQEE.mjs":"baVZI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dpQjb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "focus", ()=>focus);
var _chunkP6S57EDQMjs = require("./chunk-P6S57EDQ.mjs");
var _chunkO3SWHQEEMjs = require("./chunk-O3SWHQEE.mjs");
var _chunkM3TFMUOLMjs = require("./chunk-M3TFMUOL.mjs");
// src/focus.ts
function focus(element, options = {}) {
    const { isActive = (0, _chunkP6S57EDQMjs.isActiveElement), nextTick, preventScroll = true, selectTextIfInput = true } = options;
    if (!element || isActive(element)) return -1;
    function triggerFocus() {
        if (!element) {
            (0, _chunkM3TFMUOLMjs.warn)({
                condition: true,
                message: "[chakra-ui]: can't call focus() on `null` or `undefined` element"
            });
            return;
        }
        if (supportsPreventScroll()) element.focus({
            preventScroll
        });
        else {
            element.focus();
            if (preventScroll) {
                const scrollableElements = getScrollableElements(element);
                restoreScrollPosition(scrollableElements);
            }
        }
        if (selectTextIfInput) {
            if ((0, _chunkP6S57EDQMjs.isInputElement)(element)) element.select();
            else if ("setSelectionRange" in element) {
                const el = element;
                el.setSelectionRange(el.value.length, el.value.length);
            }
        }
    }
    if (nextTick) return requestAnimationFrame(triggerFocus);
    triggerFocus();
    return -1;
}
var supportsPreventScrollCached = null;
function supportsPreventScroll() {
    if (supportsPreventScrollCached == null) {
        supportsPreventScrollCached = false;
        try {
            const div = document.createElement("div");
            div.focus({
                get preventScroll () {
                    supportsPreventScrollCached = true;
                    return true;
                }
            });
        } catch (e) {}
    }
    return supportsPreventScrollCached;
}
function getScrollableElements(element) {
    var _a;
    const doc = (0, _chunkO3SWHQEEMjs.getOwnerDocument)(element);
    const win = (_a = doc.defaultView) != null ? _a : window;
    let parent = element.parentNode;
    const scrollableElements = [];
    const rootScrollingElement = doc.scrollingElement || doc.documentElement;
    while(parent instanceof win.HTMLElement && parent !== rootScrollingElement){
        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
            element: parent,
            scrollTop: parent.scrollTop,
            scrollLeft: parent.scrollLeft
        });
        parent = parent.parentNode;
    }
    if (rootScrollingElement instanceof win.HTMLElement) scrollableElements.push({
        element: rootScrollingElement,
        scrollTop: rootScrollingElement.scrollTop,
        scrollLeft: rootScrollingElement.scrollLeft
    });
    return scrollableElements;
}
function restoreScrollPosition(scrollableElements) {
    for (const { element, scrollTop, scrollLeft } of scrollableElements){
        element.scrollTop = scrollTop;
        element.scrollLeft = scrollLeft;
    }
}

},{"./chunk-P6S57EDQ.mjs":"40lpu","./chunk-O3SWHQEE.mjs":"baVZI","./chunk-M3TFMUOL.mjs":"dLY81","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"353vO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateBox", ()=>calculateBox);
parcelHelpers.export(exports, "createBox", ()=>createBox);
parcelHelpers.export(exports, "expand", ()=>expand);
parcelHelpers.export(exports, "getBox", ()=>getBox);
parcelHelpers.export(exports, "getRect", ()=>getRect);
parcelHelpers.export(exports, "offset", ()=>offset);
parcelHelpers.export(exports, "shrink", ()=>shrink);
parcelHelpers.export(exports, "withScroll", ()=>withScroll);
var _tinyInvariant = require("tiny-invariant");
var _tinyInvariantDefault = parcelHelpers.interopDefault(_tinyInvariant);
var getRect = function getRect(_ref) {
    var top = _ref.top, right = _ref.right, bottom = _ref.bottom, left = _ref.left;
    var width = right - left;
    var height = bottom - top;
    var rect = {
        top: top,
        right: right,
        bottom: bottom,
        left: left,
        width: width,
        height: height,
        x: left,
        y: top,
        center: {
            x: (right + left) / 2,
            y: (bottom + top) / 2
        }
    };
    return rect;
};
var expand = function expand(target, expandBy) {
    return {
        top: target.top - expandBy.top,
        left: target.left - expandBy.left,
        bottom: target.bottom + expandBy.bottom,
        right: target.right + expandBy.right
    };
};
var shrink = function shrink(target, shrinkBy) {
    return {
        top: target.top + shrinkBy.top,
        left: target.left + shrinkBy.left,
        bottom: target.bottom - shrinkBy.bottom,
        right: target.right - shrinkBy.right
    };
};
var shift = function shift(target, shiftBy) {
    return {
        top: target.top + shiftBy.y,
        left: target.left + shiftBy.x,
        bottom: target.bottom + shiftBy.y,
        right: target.right + shiftBy.x
    };
};
var noSpacing = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
};
var createBox = function createBox(_ref2) {
    var borderBox = _ref2.borderBox, _ref2$margin = _ref2.margin, margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? noSpacing : _ref2$border, _ref2$padding = _ref2.padding, padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
    var marginBox = getRect(expand(borderBox, margin));
    var paddingBox = getRect(shrink(borderBox, border));
    var contentBox = getRect(shrink(paddingBox, padding));
    return {
        marginBox: marginBox,
        borderBox: getRect(borderBox),
        paddingBox: paddingBox,
        contentBox: contentBox,
        margin: margin,
        border: border,
        padding: padding
    };
};
var parse = function parse(raw) {
    var value = raw.slice(0, -2);
    var suffix = raw.slice(-2);
    if (suffix !== "px") return 0;
    var result = Number(value);
    !!isNaN(result) && (0, _tinyInvariantDefault.default)(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]");
    return result;
};
var getWindowScroll = function getWindowScroll() {
    return {
        x: window.pageXOffset,
        y: window.pageYOffset
    };
};
var offset = function offset(original, change) {
    var borderBox = original.borderBox, border = original.border, margin = original.margin, padding = original.padding;
    var shifted = shift(borderBox, change);
    return createBox({
        borderBox: shifted,
        border: border,
        margin: margin,
        padding: padding
    });
};
var withScroll = function withScroll(original, scroll) {
    if (scroll === void 0) scroll = getWindowScroll();
    return offset(original, scroll);
};
var calculateBox = function calculateBox(borderBox, styles) {
    var margin = {
        top: parse(styles.marginTop),
        right: parse(styles.marginRight),
        bottom: parse(styles.marginBottom),
        left: parse(styles.marginLeft)
    };
    var padding = {
        top: parse(styles.paddingTop),
        right: parse(styles.paddingRight),
        bottom: parse(styles.paddingBottom),
        left: parse(styles.paddingLeft)
    };
    var border = {
        top: parse(styles.borderTopWidth),
        right: parse(styles.borderRightWidth),
        bottom: parse(styles.borderBottomWidth),
        left: parse(styles.borderLeftWidth)
    };
    return createBox({
        borderBox: borderBox,
        margin: margin,
        padding: padding,
        border: border
    });
};
var getBox = function getBox(el) {
    var borderBox = el.getBoundingClientRect();
    var styles = window.getComputedStyle(el);
    return calculateBox(borderBox, styles);
};

},{"tiny-invariant":"fnIPv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fnIPv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>invariant);
var isProduction = false;
var prefix = "Invariant failed";
function invariant(condition, message) {
    if (condition) return;
    if (isProduction) throw new Error(prefix);
    var provided = typeof message === "function" ? message() : message;
    var value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
    throw new Error(value);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"isHbY":[function(require,module,exports) {
/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */ var hasElementType = typeof Element !== "undefined";
var hasMap = typeof Map === "function";
var hasSet = typeof Set === "function";
var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js
function equal(a, b) {
    // START: fast-deep-equal es6/index.js 3.1.3
    if (a === b) return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; i-- !== 0;)if (!equal(a[i], b[i])) return false;
            return true;
        }
        // START: Modifications:
        // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
        //    to co-exist with es5.
        // 2. Replace `for of` with es5 compliant iteration using `for`.
        //    Basically, take:
        //
        //    ```js
        //    for (i of a.entries())
        //      if (!b.has(i[0])) return false;
        //    ```
        //
        //    ... and convert to:
        //
        //    ```js
        //    it = a.entries();
        //    while (!(i = it.next()).done)
        //      if (!b.has(i.value[0])) return false;
        //    ```
        //
        //    **Note**: `i` access switches to `i.value`.
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
            if (a.size !== b.size) return false;
            it = a.entries();
            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;
            it = a.entries();
            while(!(i = it.next()).done)if (!equal(i.value[1], b.get(i.value[0]))) return false;
            return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
            if (a.size !== b.size) return false;
            it = a.entries();
            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;
            return true;
        }
        // END: Modifications
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; i-- !== 0;)if (a[i] !== b[i]) return false;
            return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        // START: Modifications:
        // Apply guards for `Object.create(null)` handling. See:
        // - https://github.com/FormidableLabs/react-fast-compare/issues/64
        // - https://github.com/epoberezkin/fast-deep-equal/issues/49
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function") return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function") return a.toString() === b.toString();
        // END: Modifications
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        // END: fast-deep-equal
        // START: react-fast-compare
        // custom handling for DOM elements
        if (hasElementType && a instanceof Element) return false;
        // custom handling for React/Preact
        for(i = length; i-- !== 0;){
            if ((keys[i] === "_owner" || keys[i] === "__v" || keys[i] === "__o") && a.$$typeof) continue;
            // all other properties should be traversed as usual
            if (!equal(a[keys[i]], b[keys[i]])) return false;
        }
        // END: react-fast-compare
        // START: fast-deep-equal
        return true;
    }
    return a !== a && b !== b;
}
// end fast-deep-equal
module.exports = function isEqual(a, b) {
    try {
        return equal(a, b);
    } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
            // warn on circular references, don't crash
            // browsers give this different errors name and messages:
            // chrome/safari: "RangeError", "Maximum call stack size exceeded"
            // firefox: "InternalError", too much recursion"
            // edge: "Error", "Out of stack space"
            console.warn("react-fast-compare cannot handle circular refs");
            return false;
        }
        // some other error. we should definitely know about these
        throw error;
    }
};

},{}],"cnoBn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "chakra", ()=>chakra);
var _chunk5PL47M24Mjs = require("./chunk-5PL47M24.mjs");
"use client";
// src/factory.ts
function factory() {
    const cache = /* @__PURE__ */ new Map();
    return new Proxy((0, _chunk5PL47M24Mjs.styled), {
        /**
     * @example
     * const Div = chakra("div")
     * const WithChakra = chakra(AnotherComponent)
     */ apply (target, thisArg, argArray) {
            return (0, _chunk5PL47M24Mjs.styled)(...argArray);
        },
        /**
     * @example
     * <chakra.div />
     */ get (_, element) {
            if (!cache.has(element)) cache.set(element, (0, _chunk5PL47M24Mjs.styled)(element));
            return cache.get(element);
        }
    });
}
var chakra = factory();

},{"./chunk-5PL47M24.mjs":"dMXqF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dMXqF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toCSSObject", ()=>toCSSObject);
parcelHelpers.export(exports, "styled", ()=>styled);
var _chunkFDQH4LQIMjs = require("./chunk-FDQH4LQI.mjs");
// src/system.ts
var _colorMode = require("@chakra-ui/color-mode");
var _styledSystem = require("@chakra-ui/styled-system");
var _utils = require("@chakra-ui/utils");
var _objectUtils = require("@chakra-ui/object-utils");
var _styled = require("@emotion/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
"use client";
var _a;
var emotion_styled = (_a = (0, _styledDefault.default).default) != null ? _a : (0, _styledDefault.default);
var toCSSObject = ({ baseStyle })=>(props)=>{
        const { theme, css: cssProp, __css, sx, ...rest } = props;
        const styleProps = (0, _utils.objectFilter)(rest, (_, prop)=>(0, _styledSystem.isStyleProp)(prop));
        const finalBaseStyle = (0, _utils.runIfFn)(baseStyle, props);
        const finalStyles = (0, _objectUtils.assignAfter)({}, __css, finalBaseStyle, (0, _utils.filterUndefined)(styleProps), sx);
        const computedCSS = (0, _styledSystem.css)(finalStyles)(props.theme);
        return cssProp ? [
            computedCSS,
            cssProp
        ] : computedCSS;
    };
function styled(component, options) {
    const { baseStyle, ...styledOptions } = options != null ? options : {};
    if (!styledOptions.shouldForwardProp) styledOptions.shouldForwardProp = (0, _chunkFDQH4LQIMjs.shouldForwardProp);
    const styleObject = toCSSObject({
        baseStyle
    });
    const Component = emotion_styled(component, styledOptions)(styleObject);
    const chakraComponent = (0, _reactDefault.default).forwardRef(function ChakraComponent(props, ref) {
        const { colorMode, forced } = (0, _colorMode.useColorMode)();
        return (0, _reactDefault.default).createElement(Component, {
            ref,
            "data-theme": forced ? colorMode : void 0,
            ...props
        });
    });
    return chakraComponent;
}

},{"./chunk-FDQH4LQI.mjs":"cSMeG","@chakra-ui/color-mode":"l1BNc","@chakra-ui/styled-system":"l3oON","@chakra-ui/utils":"cOMMM","@chakra-ui/object-utils":"dOsk1","@emotion/styled":"99PmY","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cSMeG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shouldForwardProp", ()=>shouldForwardProp);
// src/should-forward-prop.ts
var _styledSystem = require("@chakra-ui/styled-system");
"use client";
var allPropNames = /* @__PURE__ */ new Set([
    ...(0, _styledSystem.propNames),
    "textStyle",
    "layerStyle",
    "apply",
    "noOfLines",
    "focusBorderColor",
    "errorBorderColor",
    "as",
    "__css",
    "css",
    "sx"
]);
var validHTMLProps = /* @__PURE__ */ new Set([
    "htmlWidth",
    "htmlHeight",
    "htmlSize",
    "htmlTranslate"
]);
function shouldForwardProp(prop) {
    return validHTMLProps.has(prop) || !allPropNames.has(prop);
}

},{"@chakra-ui/styled-system":"l3oON","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dOsk1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignAfter", ()=>(0, _chunkOLTBUDV5Mjs.assignAfter));
parcelHelpers.export(exports, "compact", ()=>(0, _chunkR3DH46PFMjs.compact));
parcelHelpers.export(exports, "omit", ()=>(0, _chunkYQUYOBWYMjs.omit));
parcelHelpers.export(exports, "pick", ()=>(0, _chunkMJZ6TYBKMjs.pick));
parcelHelpers.export(exports, "split", ()=>(0, _chunkPJU7OK64Mjs.split));
parcelHelpers.export(exports, "walkObject", ()=>(0, _chunkTWZHCAWYMjs.walkObject));
var _chunkOLTBUDV5Mjs = require("./chunk-OLTBUDV5.mjs");
var _chunkR3DH46PFMjs = require("./chunk-R3DH46PF.mjs");
var _chunkYQUYOBWYMjs = require("./chunk-YQUYOBWY.mjs");
var _chunkMJZ6TYBKMjs = require("./chunk-MJZ6TYBK.mjs");
var _chunkPJU7OK64Mjs = require("./chunk-PJU7OK64.mjs");
var _chunkTWZHCAWYMjs = require("./chunk-TWZHCAWY.mjs");

},{"./chunk-OLTBUDV5.mjs":"4wo7i","./chunk-R3DH46PF.mjs":"jhigB","./chunk-YQUYOBWY.mjs":false,"./chunk-MJZ6TYBK.mjs":false,"./chunk-PJU7OK64.mjs":false,"./chunk-TWZHCAWY.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4wo7i":[function(require,module,exports) {
// src/assign-after.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignAfter", ()=>assignAfter);
function assignAfter(target, ...sources) {
    if (target == null) throw new TypeError("Cannot convert undefined or null to object");
    const result = {
        ...target
    };
    for (const nextSource of sources){
        if (nextSource == null) continue;
        for(const nextKey in nextSource){
            if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey)) continue;
            if (nextKey in result) delete result[nextKey];
            result[nextKey] = nextSource[nextKey];
        }
    }
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhigB":[function(require,module,exports) {
// src/compact.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compact", ()=>compact);
function compact(object) {
    const clone = Object.assign({}, object);
    for(let key in clone)if (clone[key] === void 0) delete clone[key];
    return clone;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99PmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>newStyled);
var _emotionStyledBaseBrowserEsmJs = require("../base/dist/emotion-styled-base.browser.esm.js");
var _emotionStyledBaseBrowserEsmJsDefault = parcelHelpers.interopDefault(_emotionStyledBaseBrowserEsmJs);
var _extends = require("@babel/runtime/helpers/extends");
var _react = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var _react1 = require("@emotion/react");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
];
var newStyled = (0, _emotionStyledBaseBrowserEsmJsDefault.default).bind();
tags.forEach(function(tagName) {
    // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
    newStyled[tagName] = newStyled(tagName);
});

},{"../base/dist/emotion-styled-base.browser.esm.js":"aUeJ5","@babel/runtime/helpers/extends":"vw3vn","react":"21dqq","@emotion/is-prop-valid":"fCkkt","@emotion/react":"9qiaY","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@emotion/use-insertion-effect-with-fallbacks":"lPCYn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aUeJ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createStyled);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var _isPropValidDefault = parcelHelpers.interopDefault(_isPropValid);
var _react1 = require("@emotion/react");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var testOmitPropsOnStringTag = (0, _isPropValidDefault.default);
var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
    return key !== "theme";
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
    var shouldForwardProp;
    if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp !== "function" && isReal) shouldForwardProp = tag.__emotion_forwardProp;
    return shouldForwardProp;
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    (0, _utils.registerStyles)(cache, serialized, isStringTag);
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback)(function() {
        return (0, _utils.insertStyles)(cache, serialized, isStringTag);
    });
    return null;
};
var createStyled = function createStyled(tag, options) {
    if (tag === undefined) throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== undefined) {
        identifierName = options.label;
        targetClassName = options.target;
    }
    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
        var args = arguments;
        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== undefined) styles.push("label:" + identifierName + ";");
        if (args[0] == null || args[0].raw === undefined) styles.push.apply(styles, args);
        else {
            if (args[0][0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for(; i < len; i++){
                if (args[0][i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
                styles.push(args[i], args[0][i]);
            }
        } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class
        var Styled = (0, _react1.withEmotionCache)(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
                mergedProps = {};
                for(var key in props)mergedProps[key] = props[key];
                mergedProps.theme = _react.useContext((0, _react1.ThemeContext));
            }
            if (typeof props.className === "string") className = (0, _utils.getRegisteredStyles)(cache.registered, classInterpolations, props.className);
            else if (props.className != null) className = props.className + " ";
            var serialized = (0, _serialize.serializeStyles)(styles.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== undefined) className += " " + targetClassName;
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for(var _key in props){
                if (shouldUseAs && _key === "as") continue;
                if (finalShouldForwardProp(_key)) newProps[_key] = props[_key];
            }
            newProps.className = className;
            newProps.ref = ref;
            return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
                cache: cache,
                serialized: serialized,
                isStringTag: typeof FinalTag === "string"
            }), /*#__PURE__*/ _react.createElement(FinalTag, newProps));
        });
        Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles;
        Styled.__emotion_forwardProp = shouldForwardProp;
        Object.defineProperty(Styled, "toString", {
            value: function value() {
                if (targetClassName === undefined && true) return "NO_COMPONENT_SELECTOR";
                 // $FlowFixMe: coerce undefined to string
                return "." + targetClassName;
            }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled(nextTag, (0, _extendsDefault.default)({}, options, nextOptions, {
                shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles);
        };
        return Styled;
    };
};

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@emotion/is-prop-valid":"fCkkt","@emotion/react":"9qiaY","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@emotion/use-insertion-effect-with-fallbacks":"lPCYn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCkkt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isPropValid);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var isPropValid = /* #__PURE__ */ (0, _memoizeDefault.default)(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});

},{"@emotion/memoize":"2vzJd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hGgge":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "forwardRef", ()=>forwardRef);
// src/forward-ref.tsx
var _react = require("react");
"use client";
function forwardRef(component) {
    return (0, _react.forwardRef)(component);
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9iNXF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ThemeProvider", ()=>ThemeProvider);
parcelHelpers.export(exports, "CSSVars", ()=>CSSVars);
parcelHelpers.export(exports, "StylesProvider", ()=>StylesProvider);
parcelHelpers.export(exports, "useStyles", ()=>useStyles);
parcelHelpers.export(exports, "createStylesContext", ()=>createStylesContext);
parcelHelpers.export(exports, "GlobalStyle", ()=>GlobalStyle);
// src/providers.tsx
var _colorMode = require("@chakra-ui/color-mode");
var _reactUtils = require("@chakra-ui/react-utils");
var _styledSystem = require("@chakra-ui/styled-system");
var _utils = require("@chakra-ui/utils");
var _react = require("@emotion/react");
var _react1 = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function ThemeProvider(props) {
    const { cssVarsRoot, theme, children } = props;
    const computedTheme = (0, _react1.useMemo)(()=>(0, _styledSystem.toCSSVar)(theme), [
        theme
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _react.ThemeProvider), {
        theme: computedTheme,
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsx)(CSSVars, {
                root: cssVarsRoot
            }),
            children
        ]
    });
}
function CSSVars({ root = ":host, :root" }) {
    const selector = [
        root,
        `[data-theme]`
    ].join(",");
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _react.Global), {
        styles: (theme)=>({
                [selector]: theme.__cssVars
            })
    });
}
var [StylesProvider, useStyles] = (0, _reactUtils.createContext)({
    name: "StylesContext",
    errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});
function createStylesContext(componentName) {
    return (0, _reactUtils.createContext)({
        name: `${componentName}StylesContext`,
        errorMessage: `useStyles: "styles" is undefined. Seems you forgot to wrap the components in "<${componentName} />" `
    });
}
function GlobalStyle() {
    const { colorMode } = (0, _colorMode.useColorMode)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _react.Global), {
        styles: (theme)=>{
            const styleObjectOrFn = (0, _utils.memoizedGet)(theme, "styles.global");
            const globalStyles = (0, _utils.runIfFn)(styleObjectOrFn, {
                theme,
                colorMode
            });
            if (!globalStyles) return void 0;
            const styles = (0, _styledSystem.css)(globalStyles)(theme);
            return styles;
        }
    });
}

},{"@chakra-ui/color-mode":"l1BNc","@chakra-ui/react-utils":"aYHyv","@chakra-ui/styled-system":"l3oON","@chakra-ui/utils":"cOMMM","@emotion/react":"9qiaY","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aYHyv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignRef", ()=>(0, _chunkA3EAUGILMjs.assignRef));
parcelHelpers.export(exports, "createContext", ()=>(0, _chunkITIKTQWJMjs.createContext));
parcelHelpers.export(exports, "getValidChildren", ()=>(0, _chunkIH2MM24AMjs.getValidChildren));
parcelHelpers.export(exports, "mergeRefs", ()=>(0, _chunkA3EAUGILMjs.mergeRefs));
var _chunkIH2MM24AMjs = require("./chunk-IH2MM24A.mjs");
var _chunkITIKTQWJMjs = require("./chunk-ITIKTQWJ.mjs");
var _chunkA3EAUGILMjs = require("./chunk-A3EAUGIL.mjs");
var _chunkWBQAMGXKMjs = require("./chunk-WBQAMGXK.mjs");

},{"./chunk-IH2MM24A.mjs":false,"./chunk-ITIKTQWJ.mjs":"huWOH","./chunk-A3EAUGIL.mjs":false,"./chunk-WBQAMGXK.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"huWOH":[function(require,module,exports) {
// src/context.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createContext", ()=>createContext);
var _react = require("react");
function createContext(options = {}) {
    const { strict = true, errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider", name } = options;
    const Context = (0, _react.createContext)(void 0);
    Context.displayName = name;
    function useContext() {
        var _a;
        const context = (0, _react.useContext)(Context);
        if (!context && strict) {
            const error = new Error(errorMessage);
            error.name = "ContextError";
            (_a = Error.captureStackTrace) == null || _a.call(Error, error, useContext);
            throw error;
        }
        return context;
    }
    return [
        Context.Provider,
        useContext,
        Context
    ];
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l6kAN":[function(require,module,exports) {
"use client";

},{}],"jTqMf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EnvironmentProvider", ()=>(0, _chunkVMD3UMGKMjs.EnvironmentProvider));
parcelHelpers.export(exports, "useEnvironment", ()=>(0, _chunkVMD3UMGKMjs.useEnvironment));
var _chunkVMD3UMGKMjs = require("./chunk-VMD3UMGK.mjs");
"use client";

},{"./chunk-VMD3UMGK.mjs":"gnd4b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gnd4b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEnvironment", ()=>useEnvironment);
parcelHelpers.export(exports, "EnvironmentProvider", ()=>EnvironmentProvider);
// src/env.tsx
var _reactUseSafeLayoutEffect = require("@chakra-ui/react-use-safe-layout-effect");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var EnvironmentContext = (0, _react.createContext)({
    getDocument () {
        return document;
    },
    getWindow () {
        return window;
    }
});
EnvironmentContext.displayName = "EnvironmentContext";
function useEnvironment({ defer } = {}) {
    const [, forceUpdate] = (0, _react.useReducer)((c)=>c + 1, 0);
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (!defer) return;
        forceUpdate();
    }, [
        defer
    ]);
    return (0, _react.useContext)(EnvironmentContext);
}
function EnvironmentProvider(props) {
    const { children, environment: environmentProp, disabled } = props;
    const ref = (0, _react.useRef)(null);
    const context = (0, _react.useMemo)(()=>{
        if (environmentProp) return environmentProp;
        return {
            getDocument: ()=>{
                var _a, _b;
                return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;
            },
            getWindow: ()=>{
                var _a, _b;
                return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument.defaultView) != null ? _b : window;
            }
        };
    }, [
        environmentProp
    ]);
    const showSpan = !disabled || !environmentProp;
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(EnvironmentContext.Provider, {
        value: context,
        children: [
            children,
            showSpan && /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
                id: "__chakra_env",
                hidden: true,
                ref
            })
        ]
    });
}
EnvironmentProvider.displayName = "EnvironmentProvider";

},{"@chakra-ui/react-use-safe-layout-effect":"eJbER","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kaZow":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Toast", ()=>(0, _chunkHYCJNCPEMjs.Toast));
parcelHelpers.export(exports, "ToastOptionProvider", ()=>(0, _chunk5LZ7WDUFMjs.ToastOptionProvider));
parcelHelpers.export(exports, "ToastProvider", ()=>(0, _chunk5LZ7WDUFMjs.ToastProvider));
parcelHelpers.export(exports, "createRenderToast", ()=>(0, _chunkHYCJNCPEMjs.createRenderToast));
parcelHelpers.export(exports, "createStandaloneToast", ()=>(0, _chunkVYT3TZECMjs.createStandaloneToast));
parcelHelpers.export(exports, "createToastFn", ()=>(0, _chunkHYCJNCPEMjs.createToastFn));
parcelHelpers.export(exports, "getToastPlacement", ()=>(0, _chunkLHPMGMGTMjs.getToastPlacement));
parcelHelpers.export(exports, "useToast", ()=>(0, _chunk5LTIYV3AMjs.useToast));
var _chunk5LTIYV3AMjs = require("./chunk-5LTIYV3A.mjs");
var _chunkVYT3TZECMjs = require("./chunk-VYT3TZEC.mjs");
var _chunk5LZ7WDUFMjs = require("./chunk-5LZ7WDUF.mjs");
var _chunkVXESY33OMjs = require("./chunk-VXESY33O.mjs");
var _chunkHYCJNCPEMjs = require("./chunk-HYCJNCPE.mjs");
var _chunkLDADOVIMMjs = require("./chunk-LDADOVIM.mjs");
var _chunkLHPMGMGTMjs = require("./chunk-LHPMGMGT.mjs");
"use client";

},{"./chunk-5LTIYV3A.mjs":"6W0GN","./chunk-VYT3TZEC.mjs":"fPqDy","./chunk-5LZ7WDUF.mjs":"gp5WX","./chunk-VXESY33O.mjs":"97Qvx","./chunk-HYCJNCPE.mjs":"PF5k3","./chunk-LDADOVIM.mjs":"3Cb7X","./chunk-LHPMGMGT.mjs":"6G7eL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6W0GN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useToast", ()=>useToast);
parcelHelpers.export(exports, "use_toast_default", ()=>use_toast_default);
var _chunk5LZ7WDUFMjs = require("./chunk-5LZ7WDUF.mjs");
var _chunkHYCJNCPEMjs = require("./chunk-HYCJNCPE.mjs");
// src/use-toast.tsx
var _system = require("@chakra-ui/system");
var _react = require("react");
"use client";
function useToast(options) {
    const { theme } = (0, _system.useChakra)();
    const defaultOptions = (0, _chunk5LZ7WDUFMjs.useToastOptionContext)();
    return (0, _react.useMemo)(()=>(0, _chunkHYCJNCPEMjs.createToastFn)(theme.direction, {
            ...defaultOptions,
            ...options
        }), [
        options,
        theme.direction,
        defaultOptions
    ]);
}
var use_toast_default = useToast;

},{"./chunk-5LZ7WDUF.mjs":"gp5WX","./chunk-HYCJNCPE.mjs":"PF5k3","@chakra-ui/system":"jpRoG","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gp5WX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ToastOptionProvider", ()=>ToastOptionProvider);
parcelHelpers.export(exports, "useToastOptionContext", ()=>useToastOptionContext);
parcelHelpers.export(exports, "ToastProvider", ()=>ToastProvider);
var _chunkVXESY33OMjs = require("./chunk-VXESY33O.mjs");
var _chunkHYCJNCPEMjs = require("./chunk-HYCJNCPE.mjs");
var _chunkLDADOVIMMjs = require("./chunk-LDADOVIM.mjs");
// src/toast.provider.tsx
var _framerMotion = require("framer-motion");
var _portal = require("@chakra-ui/portal");
var _react = require("react");
var _reactContext = require("@chakra-ui/react-context");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [ToastOptionProvider, useToastOptionContext] = (0, _reactContext.createContext)({
    name: `ToastOptionsContext`,
    strict: false
});
var ToastProvider = (props)=>{
    const state = (0, _react.useSyncExternalStore)((0, _chunkHYCJNCPEMjs.toastStore).subscribe, (0, _chunkHYCJNCPEMjs.toastStore).getState, (0, _chunkHYCJNCPEMjs.toastStore).getState);
    const { motionVariants, component: Component = (0, _chunkVXESY33OMjs.ToastComponent), portalProps } = props;
    const stateKeys = Object.keys(state);
    const toastList = stateKeys.map((position)=>{
        const toasts = state[position];
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)("div", {
            role: "region",
            "aria-live": "polite",
            "aria-label": "Notifications",
            id: `chakra-toast-manager-${position}`,
            style: (0, _chunkLDADOVIMMjs.getToastListStyle)(position),
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.AnimatePresence), {
                initial: false,
                children: toasts.map((toast)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)(Component, {
                        motionVariants,
                        ...toast
                    }, toast.id))
            })
        }, position);
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _portal.Portal), {
        ...portalProps,
        children: toastList
    });
};

},{"./chunk-VXESY33O.mjs":"97Qvx","./chunk-HYCJNCPE.mjs":"PF5k3","./chunk-LDADOVIM.mjs":"3Cb7X","framer-motion":"5bZBB","@chakra-ui/portal":"d4tN5","react":"21dqq","@chakra-ui/react-context":"7RVZP","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"97Qvx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ToastComponent", ()=>ToastComponent);
var _chunkLDADOVIMMjs = require("./chunk-LDADOVIM.mjs");
// src/toast.component.tsx
var _reactUseTimeout = require("@chakra-ui/react-use-timeout");
var _reactUseUpdateEffect = require("@chakra-ui/react-use-update-effect");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _framerMotion = require("framer-motion");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var toastMotionVariants = {
    initial: (props)=>{
        const { position } = props;
        const dir = [
            "top",
            "bottom"
        ].includes(position) ? "y" : "x";
        let factor = [
            "top-right",
            "bottom-right"
        ].includes(position) ? 1 : -1;
        if (position === "bottom") factor = 1;
        return {
            opacity: 0,
            [dir]: factor * 24
        };
    },
    animate: {
        opacity: 1,
        y: 0,
        x: 0,
        scale: 1,
        transition: {
            duration: 0.4,
            ease: [
                0.4,
                0,
                0.2,
                1
            ]
        }
    },
    exit: {
        opacity: 0,
        scale: 0.85,
        transition: {
            duration: 0.2,
            ease: [
                0.4,
                0,
                1,
                1
            ]
        }
    }
};
var ToastComponent = (0, _react.memo)((props)=>{
    const { id, message, onCloseComplete, onRequestRemove, requestClose = false, position = "bottom", duration = 5e3, containerStyle, motionVariants = toastMotionVariants, toastSpacing = "0.5rem" } = props;
    const [delay, setDelay] = (0, _react.useState)(duration);
    const isPresent = (0, _framerMotion.useIsPresent)();
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        if (!isPresent) onCloseComplete == null || onCloseComplete();
    }, [
        isPresent
    ]);
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        setDelay(duration);
    }, [
        duration
    ]);
    const onMouseEnter = ()=>setDelay(null);
    const onMouseLeave = ()=>setDelay(duration);
    const close = ()=>{
        if (isPresent) onRequestRemove();
    };
    (0, _react.useEffect)(()=>{
        if (isPresent && requestClose) onRequestRemove();
    }, [
        isPresent,
        requestClose,
        onRequestRemove
    ]);
    (0, _reactUseTimeout.useTimeout)(close, delay);
    const containerStyles = (0, _react.useMemo)(()=>({
            pointerEvents: "auto",
            maxWidth: 560,
            minWidth: 300,
            margin: toastSpacing,
            ...containerStyle
        }), [
        containerStyle,
        toastSpacing
    ]);
    const toastStyle = (0, _react.useMemo)(()=>(0, _chunkLDADOVIMMjs.getToastStyle)(position), [
        position
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.motion).div, {
        layout: true,
        className: "chakra-toast",
        variants: motionVariants,
        initial: "initial",
        animate: "animate",
        exit: "exit",
        onHoverStart: onMouseEnter,
        onHoverEnd: onMouseLeave,
        custom: {
            position
        },
        style: toastStyle,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            role: "status",
            "aria-atomic": "true",
            className: "chakra-toast__inner",
            __css: containerStyles,
            children: (0, _sharedUtils.runIfFn)(message, {
                id,
                onClose: close
            })
        })
    });
});
ToastComponent.displayName = "ToastComponent";

},{"./chunk-LDADOVIM.mjs":"3Cb7X","@chakra-ui/react-use-timeout":"efAWf","@chakra-ui/react-use-update-effect":"kfB4Y","@chakra-ui/shared-utils":"h33Zu","framer-motion":"5bZBB","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Cb7X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "findById", ()=>findById);
parcelHelpers.export(exports, "findToast", ()=>findToast);
parcelHelpers.export(exports, "getToastPosition", ()=>getToastPosition);
parcelHelpers.export(exports, "isVisible", ()=>isVisible);
parcelHelpers.export(exports, "getToastStyle", ()=>getToastStyle);
parcelHelpers.export(exports, "getToastListStyle", ()=>getToastListStyle);
"use client";
// src/toast.utils.ts
var findById = (arr, id)=>arr.find((toast)=>toast.id === id);
function findToast(toasts, id) {
    const position = getToastPosition(toasts, id);
    const index = position ? toasts[position].findIndex((toast)=>toast.id === id) : -1;
    return {
        position,
        index
    };
}
function getToastPosition(toasts, id) {
    for (const [position, values] of Object.entries(toasts)){
        if (findById(values, id)) return position;
    }
}
var isVisible = (toasts, id)=>!!getToastPosition(toasts, id);
function getToastStyle(position) {
    const isRighty = position.includes("right");
    const isLefty = position.includes("left");
    let alignItems = "center";
    if (isRighty) alignItems = "flex-end";
    if (isLefty) alignItems = "flex-start";
    return {
        display: "flex",
        flexDirection: "column",
        alignItems
    };
}
function getToastListStyle(position) {
    const isTopOrBottom = position === "top" || position === "bottom";
    const margin = isTopOrBottom ? "0 auto" : void 0;
    const top = position.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
    const bottom = position.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
    const right = !position.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
    const left = !position.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
    return {
        position: "fixed",
        zIndex: "var(--toast-z-index, 5500)",
        pointerEvents: "none",
        display: "flex",
        flexDirection: "column",
        margin,
        top,
        bottom,
        right,
        left
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"efAWf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useTimeout", ()=>useTimeout);
// src/index.ts
var _react = require("react");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
"use client";
function useTimeout(callback, delay) {
    const fn = (0, _reactUseCallbackRef.useCallbackRef)(callback);
    (0, _react.useEffect)(()=>{
        if (delay == null) return void 0;
        let timeoutId = null;
        timeoutId = window.setTimeout(()=>{
            fn();
        }, delay);
        return ()=>{
            if (timeoutId) window.clearTimeout(timeoutId);
        };
    }, [
        delay,
        fn
    ]);
}

},{"react":"21dqq","@chakra-ui/react-use-callback-ref":"dbPJ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dbPJ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCallbackRef", ()=>useCallbackRef);
// src/index.ts
var _react = require("react");
"use client";
function useCallbackRef(callback, deps = []) {
    const callbackRef = (0, _react.useRef)(callback);
    (0, _react.useEffect)(()=>{
        callbackRef.current = callback;
    });
    return (0, _react.useCallback)((...args)=>{
        var _a;
        return (_a = callbackRef.current) == null ? void 0 : _a.call(callbackRef, ...args);
    }, deps);
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kfB4Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useUpdateEffect", ()=>useUpdateEffect);
// src/index.ts
var _react = require("react");
"use client";
function useUpdateEffect(callback, deps) {
    const renderCycleRef = (0, _react.useRef)(false);
    const effectCycleRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(()=>{
        const mounted = renderCycleRef.current;
        const run = mounted && effectCycleRef.current;
        if (run) return callback();
        effectCycleRef.current = true;
    }, deps);
    (0, _react.useEffect)(()=>{
        renderCycleRef.current = true;
        return ()=>{
            renderCycleRef.current = false;
        };
    }, []);
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5bZBB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDomMotionComponent", ()=>(0, _motionMjs.createDomMotionComponent));
parcelHelpers.export(exports, "motion", ()=>(0, _motionMjs.motion));
parcelHelpers.export(exports, "m", ()=>(0, _motionMinimalMjs.m));
parcelHelpers.export(exports, "AnimatePresence", ()=>(0, _indexMjs.AnimatePresence));
parcelHelpers.export(exports, "MotionConfig", ()=>(0, _indexMjs1.MotionConfig));
parcelHelpers.export(exports, "LazyMotion", ()=>(0, _indexMjs2.LazyMotion));
parcelHelpers.export(exports, "LayoutGroup", ()=>(0, _indexMjs3.LayoutGroup));
parcelHelpers.export(exports, "Reorder", ()=>(0, _indexMjs4.Reorder));
parcelHelpers.export(exports, "domAnimation", ()=>(0, _featuresAnimationMjs.domAnimation));
parcelHelpers.export(exports, "domMax", ()=>(0, _featuresMaxMjs.domMax));
parcelHelpers.export(exports, "useMotionValue", ()=>(0, _useMotionValueMjs.useMotionValue));
parcelHelpers.export(exports, "useMotionTemplate", ()=>(0, _useMotionTemplateMjs.useMotionTemplate));
parcelHelpers.export(exports, "resolveMotionValue", ()=>(0, _resolveMotionValueMjs.resolveMotionValue));
parcelHelpers.export(exports, "useTransform", ()=>(0, _useTransformMjs.useTransform));
parcelHelpers.export(exports, "useSpring", ()=>(0, _useSpringMjs.useSpring));
parcelHelpers.export(exports, "useVelocity", ()=>(0, _useVelocityMjs.useVelocity));
parcelHelpers.export(exports, "useScroll", ()=>(0, _useScrollMjs.useScroll));
parcelHelpers.export(exports, "useElementScroll", ()=>(0, _useElementScrollMjs.useElementScroll));
parcelHelpers.export(exports, "useViewportScroll", ()=>(0, _useViewportScrollMjs.useViewportScroll));
parcelHelpers.export(exports, "useTime", ()=>(0, _useTimeMjs.useTime));
parcelHelpers.export(exports, "useWillChange", ()=>(0, _indexMjs5.useWillChange));
parcelHelpers.export(exports, "useMotionValueEvent", ()=>(0, _useMotionValueEventMjs.useMotionValueEvent));
parcelHelpers.export(exports, "useReducedMotion", ()=>(0, _useReducedMotionMjs.useReducedMotion));
parcelHelpers.export(exports, "useReducedMotionConfig", ()=>(0, _useReducedMotionConfigMjs.useReducedMotionConfig));
parcelHelpers.export(exports, "animationControls", ()=>(0, _animationControlsMjs.animationControls));
parcelHelpers.export(exports, "useAnimate", ()=>(0, _useAnimateMjs.useAnimate));
parcelHelpers.export(exports, "useAnimation", ()=>(0, _useAnimationMjs.useAnimation));
parcelHelpers.export(exports, "useAnimationControls", ()=>(0, _useAnimationMjs.useAnimationControls));
parcelHelpers.export(exports, "useAnimationFrame", ()=>(0, _useAnimationFrameMjs.useAnimationFrame));
parcelHelpers.export(exports, "animateVisualElement", ()=>(0, _visualElementMjs.animateVisualElement));
parcelHelpers.export(exports, "useCycle", ()=>(0, _useCycleMjs.useCycle));
parcelHelpers.export(exports, "isValidMotionProp", ()=>(0, _validPropMjs.isValidMotionProp));
parcelHelpers.export(exports, "useIsPresent", ()=>(0, _usePresenceMjs.useIsPresent));
parcelHelpers.export(exports, "usePresence", ()=>(0, _usePresenceMjs.usePresence));
parcelHelpers.export(exports, "useInView", ()=>(0, _useInViewMjs.useInView));
parcelHelpers.export(exports, "DragControls", ()=>(0, _useDragControlsMjs.DragControls));
parcelHelpers.export(exports, "useDragControls", ()=>(0, _useDragControlsMjs.useDragControls));
parcelHelpers.export(exports, "useDomEvent", ()=>(0, _useDomEventMjs.useDomEvent));
parcelHelpers.export(exports, "createMotionComponent", ()=>(0, _indexMjs6.createMotionComponent));
parcelHelpers.export(exports, "isMotionComponent", ()=>(0, _isMotionComponentMjs.isMotionComponent));
parcelHelpers.export(exports, "unwrapMotionComponent", ()=>(0, _unwrapMotionComponentMjs.unwrapMotionComponent));
parcelHelpers.export(exports, "VisualElement", ()=>(0, _visualElementMjs1.VisualElement));
parcelHelpers.export(exports, "addScaleCorrector", ()=>(0, _scaleCorrectionMjs.addScaleCorrector));
parcelHelpers.export(exports, "useInstantTransition", ()=>(0, _useInstantTransitionMjs.useInstantTransition));
parcelHelpers.export(exports, "useInstantLayoutTransition", ()=>(0, _useInstantLayoutTransitionMjs.useInstantLayoutTransition));
parcelHelpers.export(exports, "useResetProjection", ()=>(0, _useResetProjectionMjs.useResetProjection));
parcelHelpers.export(exports, "buildTransform", ()=>(0, _buildTransformMjs.buildTransform));
parcelHelpers.export(exports, "visualElementStore", ()=>(0, _storeMjs.visualElementStore));
parcelHelpers.export(exports, "animateValue", ()=>(0, _indexMjs7.animateValue));
parcelHelpers.export(exports, "color", ()=>(0, _indexMjs8.color));
parcelHelpers.export(exports, "complex", ()=>(0, _indexMjs9.complex));
parcelHelpers.export(exports, "px", ()=>(0, _unitsMjs.px));
parcelHelpers.export(exports, "startOptimizedAppearAnimation", ()=>(0, _startMjs.startOptimizedAppearAnimation));
parcelHelpers.export(exports, "optimizedAppearDataAttribute", ()=>(0, _dataIdMjs.optimizedAppearDataAttribute));
parcelHelpers.export(exports, "spring", ()=>(0, _indexMjs10.spring));
parcelHelpers.export(exports, "MotionContext", ()=>(0, _indexMjs11.MotionContext));
parcelHelpers.export(exports, "MotionConfigContext", ()=>(0, _motionConfigContextMjs.MotionConfigContext));
parcelHelpers.export(exports, "PresenceContext", ()=>(0, _presenceContextMjs.PresenceContext));
parcelHelpers.export(exports, "LayoutGroupContext", ()=>(0, _layoutGroupContextMjs.LayoutGroupContext));
parcelHelpers.export(exports, "SwitchLayoutGroupContext", ()=>(0, _switchLayoutGroupContextMjs.SwitchLayoutGroupContext));
parcelHelpers.export(exports, "FlatTree", ()=>(0, _flatTreeMjs.FlatTree));
parcelHelpers.export(exports, "DeprecatedLayoutGroupContext", ()=>(0, _deprecatedLayoutGroupContextMjs.DeprecatedLayoutGroupContext));
parcelHelpers.export(exports, "useDeprecatedAnimatedState", ()=>(0, _useAnimatedStateMjs.useAnimatedState));
parcelHelpers.export(exports, "useDeprecatedInvertedScale", ()=>(0, _useInvertedScaleMjs.useInvertedScale));
parcelHelpers.export(exports, "AnimateSharedLayout", ()=>(0, _animateSharedLayoutMjs.AnimateSharedLayout));
parcelHelpers.export(exports, "MotionValue", ()=>(0, _indexMjs12.MotionValue));
parcelHelpers.export(exports, "motionValue", ()=>(0, _indexMjs12.motionValue));
parcelHelpers.export(exports, "animate", ()=>(0, _animateMjs.animate));
parcelHelpers.export(exports, "createScopedAnimate", ()=>(0, _animateMjs.createScopedAnimate));
parcelHelpers.export(exports, "scroll", ()=>(0, _indexMjs13.scroll));
parcelHelpers.export(exports, "scrollInfo", ()=>(0, _trackMjs.scrollInfo));
parcelHelpers.export(exports, "inView", ()=>(0, _indexMjs14.inView));
parcelHelpers.export(exports, "stagger", ()=>(0, _staggerMjs.stagger));
parcelHelpers.export(exports, "transform", ()=>(0, _transformMjs.transform));
parcelHelpers.export(exports, "clamp", ()=>(0, _clampMjs.clamp));
parcelHelpers.export(exports, "mix", ()=>(0, _mixMjs.mix));
parcelHelpers.export(exports, "pipe", ()=>(0, _pipeMjs.pipe));
parcelHelpers.export(exports, "progress", ()=>(0, _progressMjs.progress));
parcelHelpers.export(exports, "wrap", ()=>(0, _wrapMjs.wrap));
parcelHelpers.export(exports, "cancelSync", ()=>(0, _indexLegacyMjs.cancelSync));
parcelHelpers.export(exports, "sync", ()=>(0, _indexLegacyMjs.sync));
parcelHelpers.export(exports, "anticipate", ()=>(0, _anticipateMjs.anticipate));
parcelHelpers.export(exports, "backIn", ()=>(0, _backMjs.backIn));
parcelHelpers.export(exports, "backInOut", ()=>(0, _backMjs.backInOut));
parcelHelpers.export(exports, "backOut", ()=>(0, _backMjs.backOut));
parcelHelpers.export(exports, "circIn", ()=>(0, _circMjs.circIn));
parcelHelpers.export(exports, "circInOut", ()=>(0, _circMjs.circInOut));
parcelHelpers.export(exports, "circOut", ()=>(0, _circMjs.circOut));
parcelHelpers.export(exports, "easeIn", ()=>(0, _easeMjs.easeIn));
parcelHelpers.export(exports, "easeInOut", ()=>(0, _easeMjs.easeInOut));
parcelHelpers.export(exports, "easeOut", ()=>(0, _easeMjs.easeOut));
parcelHelpers.export(exports, "cubicBezier", ()=>(0, _cubicBezierMjs.cubicBezier));
parcelHelpers.export(exports, "mirrorEasing", ()=>(0, _mirrorMjs.mirrorEasing));
parcelHelpers.export(exports, "reverseEasing", ()=>(0, _reverseMjs.reverseEasing));
parcelHelpers.export(exports, "delay", ()=>(0, _delayMjs.delay));
parcelHelpers.export(exports, "distance", ()=>(0, _distanceMjs.distance));
parcelHelpers.export(exports, "distance2D", ()=>(0, _distanceMjs.distance2D));
parcelHelpers.export(exports, "invariant", ()=>(0, _errorsMjs.invariant));
parcelHelpers.export(exports, "warning", ()=>(0, _errorsMjs.warning));
parcelHelpers.export(exports, "interpolate", ()=>(0, _interpolateMjs.interpolate));
parcelHelpers.export(exports, "cancelFrame", ()=>(0, _frameMjs.cancelFrame));
parcelHelpers.export(exports, "frame", ()=>(0, _frameMjs.frame));
parcelHelpers.export(exports, "frameData", ()=>(0, _frameMjs.frameData));
parcelHelpers.export(exports, "steps", ()=>(0, _frameMjs.steps));
parcelHelpers.export(exports, "animations", ()=>(0, _animationsMjs.animations));
parcelHelpers.export(exports, "checkTargetForNewValues", ()=>(0, _settersMjs.checkTargetForNewValues));
parcelHelpers.export(exports, "createBox", ()=>(0, _modelsMjs.createBox));
parcelHelpers.export(exports, "calcLength", ()=>(0, _deltaCalcMjs.calcLength));
parcelHelpers.export(exports, "filterProps", ()=>(0, _filterPropsMjs.filterProps));
parcelHelpers.export(exports, "makeUseVisualState", ()=>(0, _useVisualStateMjs.makeUseVisualState));
parcelHelpers.export(exports, "isDragActive", ()=>(0, _lockMjs.isDragActive));
parcelHelpers.export(exports, "addPointerEvent", ()=>(0, _addPointerEventMjs.addPointerEvent));
parcelHelpers.export(exports, "addPointerInfo", ()=>(0, _eventInfoMjs.addPointerInfo));
parcelHelpers.export(exports, "isMotionValue", ()=>(0, _isMotionValueMjs.isMotionValue));
parcelHelpers.export(exports, "isBrowser", ()=>(0, _isBrowserMjs.isBrowser));
parcelHelpers.export(exports, "useUnmountEffect", ()=>(0, _useUnmountEffectMjs.useUnmountEffect));
parcelHelpers.export(exports, "useIsomorphicLayoutEffect", ()=>(0, _useIsomorphicEffectMjs.useIsomorphicLayoutEffect));
parcelHelpers.export(exports, "useForceUpdate", ()=>(0, _useForceUpdateMjs.useForceUpdate));
var _motionMjs = require("./render/dom/motion.mjs");
var _motionMinimalMjs = require("./render/dom/motion-minimal.mjs");
var _indexMjs = require("./components/AnimatePresence/index.mjs");
var _indexMjs1 = require("./components/MotionConfig/index.mjs");
var _indexMjs2 = require("./components/LazyMotion/index.mjs");
var _indexMjs3 = require("./components/LayoutGroup/index.mjs");
var _indexMjs4 = require("./components/Reorder/index.mjs");
var _featuresAnimationMjs = require("./render/dom/features-animation.mjs");
var _featuresMaxMjs = require("./render/dom/features-max.mjs");
var _useMotionValueMjs = require("./value/use-motion-value.mjs");
var _useMotionTemplateMjs = require("./value/use-motion-template.mjs");
var _resolveMotionValueMjs = require("./value/utils/resolve-motion-value.mjs");
var _useTransformMjs = require("./value/use-transform.mjs");
var _useSpringMjs = require("./value/use-spring.mjs");
var _useVelocityMjs = require("./value/use-velocity.mjs");
var _useScrollMjs = require("./value/use-scroll.mjs");
var _useElementScrollMjs = require("./value/scroll/use-element-scroll.mjs");
var _useViewportScrollMjs = require("./value/scroll/use-viewport-scroll.mjs");
var _useTimeMjs = require("./value/use-time.mjs");
var _indexMjs5 = require("./value/use-will-change/index.mjs");
var _useMotionValueEventMjs = require("./utils/use-motion-value-event.mjs");
var _useReducedMotionMjs = require("./utils/reduced-motion/use-reduced-motion.mjs");
var _useReducedMotionConfigMjs = require("./utils/reduced-motion/use-reduced-motion-config.mjs");
var _animationControlsMjs = require("./animation/hooks/animation-controls.mjs");
var _useAnimateMjs = require("./animation/hooks/use-animate.mjs");
var _useAnimationMjs = require("./animation/hooks/use-animation.mjs");
var _useAnimationFrameMjs = require("./utils/use-animation-frame.mjs");
var _visualElementMjs = require("./animation/interfaces/visual-element.mjs");
var _useCycleMjs = require("./utils/use-cycle.mjs");
var _validPropMjs = require("./motion/utils/valid-prop.mjs");
var _usePresenceMjs = require("./components/AnimatePresence/use-presence.mjs");
var _useInViewMjs = require("./utils/use-in-view.mjs");
var _useDragControlsMjs = require("./gestures/drag/use-drag-controls.mjs");
var _useDomEventMjs = require("./events/use-dom-event.mjs");
var _indexMjs6 = require("./motion/index.mjs");
var _isMotionComponentMjs = require("./motion/utils/is-motion-component.mjs");
var _unwrapMotionComponentMjs = require("./motion/utils/unwrap-motion-component.mjs");
var _visualElementMjs1 = require("./render/VisualElement.mjs");
var _scaleCorrectionMjs = require("./projection/styles/scale-correction.mjs");
var _useInstantTransitionMjs = require("./utils/use-instant-transition.mjs");
var _useInstantLayoutTransitionMjs = require("./projection/use-instant-layout-transition.mjs");
var _useResetProjectionMjs = require("./projection/use-reset-projection.mjs");
var _buildTransformMjs = require("./render/html/utils/build-transform.mjs");
var _storeMjs = require("./render/store.mjs");
var _indexMjs7 = require("./animation/animators/js/index.mjs");
var _indexMjs8 = require("./value/types/color/index.mjs");
var _indexMjs9 = require("./value/types/complex/index.mjs");
var _unitsMjs = require("./value/types/numbers/units.mjs");
var _startMjs = require("./animation/optimized-appear/start.mjs");
var _dataIdMjs = require("./animation/optimized-appear/data-id.mjs");
var _indexMjs10 = require("./animation/generators/spring/index.mjs");
var _indexMjs11 = require("./context/MotionContext/index.mjs");
var _motionConfigContextMjs = require("./context/MotionConfigContext.mjs");
var _presenceContextMjs = require("./context/PresenceContext.mjs");
var _layoutGroupContextMjs = require("./context/LayoutGroupContext.mjs");
var _switchLayoutGroupContextMjs = require("./context/SwitchLayoutGroupContext.mjs");
var _flatTreeMjs = require("./render/utils/flat-tree.mjs");
var _deprecatedLayoutGroupContextMjs = require("./context/DeprecatedLayoutGroupContext.mjs");
var _useAnimatedStateMjs = require("./animation/hooks/use-animated-state.mjs");
var _useInvertedScaleMjs = require("./value/use-inverted-scale.mjs");
var _animateSharedLayoutMjs = require("./components/AnimateSharedLayout.mjs");
var _indexMjs12 = require("./value/index.mjs");
var _animateMjs = require("./animation/animate.mjs");
var _indexMjs13 = require("./render/dom/scroll/index.mjs");
var _trackMjs = require("./render/dom/scroll/track.mjs");
var _indexMjs14 = require("./render/dom/viewport/index.mjs");
var _staggerMjs = require("./animation/utils/stagger.mjs");
var _transformMjs = require("./utils/transform.mjs");
var _clampMjs = require("./utils/clamp.mjs");
var _mixMjs = require("./utils/mix.mjs");
var _pipeMjs = require("./utils/pipe.mjs");
var _progressMjs = require("./utils/progress.mjs");
var _wrapMjs = require("./utils/wrap.mjs");
var _indexLegacyMjs = require("./frameloop/index-legacy.mjs");
var _anticipateMjs = require("./easing/anticipate.mjs");
var _backMjs = require("./easing/back.mjs");
var _circMjs = require("./easing/circ.mjs");
var _easeMjs = require("./easing/ease.mjs");
var _cubicBezierMjs = require("./easing/cubic-bezier.mjs");
var _mirrorMjs = require("./easing/modifiers/mirror.mjs");
var _reverseMjs = require("./easing/modifiers/reverse.mjs");
var _delayMjs = require("./utils/delay.mjs");
var _distanceMjs = require("./utils/distance.mjs");
var _errorsMjs = require("./utils/errors.mjs");
var _interpolateMjs = require("./utils/interpolate.mjs");
var _frameMjs = require("./frameloop/frame.mjs");
var _animationsMjs = require("./motion/features/animations.mjs");
var _settersMjs = require("./render/utils/setters.mjs");
var _modelsMjs = require("./projection/geometry/models.mjs");
var _deltaCalcMjs = require("./projection/geometry/delta-calc.mjs");
var _filterPropsMjs = require("./render/dom/utils/filter-props.mjs");
var _useVisualStateMjs = require("./motion/utils/use-visual-state.mjs");
var _lockMjs = require("./gestures/drag/utils/lock.mjs");
var _addPointerEventMjs = require("./events/add-pointer-event.mjs");
var _eventInfoMjs = require("./events/event-info.mjs");
var _isMotionValueMjs = require("./value/utils/is-motion-value.mjs");
var _isBrowserMjs = require("./utils/is-browser.mjs");
var _useUnmountEffectMjs = require("./utils/use-unmount-effect.mjs");
var _useIsomorphicEffectMjs = require("./utils/use-isomorphic-effect.mjs");
var _useForceUpdateMjs = require("./utils/use-force-update.mjs");

},{"./render/dom/motion.mjs":"9Tsxv","./render/dom/motion-minimal.mjs":false,"./components/AnimatePresence/index.mjs":"fBuY4","./components/MotionConfig/index.mjs":false,"./components/LazyMotion/index.mjs":false,"./components/LayoutGroup/index.mjs":false,"./components/Reorder/index.mjs":false,"./render/dom/features-animation.mjs":false,"./render/dom/features-max.mjs":false,"./value/use-motion-value.mjs":false,"./value/use-motion-template.mjs":false,"./value/utils/resolve-motion-value.mjs":false,"./value/use-transform.mjs":false,"./value/use-spring.mjs":false,"./value/use-velocity.mjs":false,"./value/use-scroll.mjs":false,"./value/scroll/use-element-scroll.mjs":false,"./value/scroll/use-viewport-scroll.mjs":false,"./value/use-time.mjs":false,"./value/use-will-change/index.mjs":false,"./utils/use-motion-value-event.mjs":false,"./utils/reduced-motion/use-reduced-motion.mjs":false,"./utils/reduced-motion/use-reduced-motion-config.mjs":false,"./animation/hooks/animation-controls.mjs":false,"./animation/hooks/use-animate.mjs":false,"./animation/hooks/use-animation.mjs":false,"./utils/use-animation-frame.mjs":false,"./animation/interfaces/visual-element.mjs":false,"./utils/use-cycle.mjs":false,"./motion/utils/valid-prop.mjs":false,"./components/AnimatePresence/use-presence.mjs":"5CDO8","./utils/use-in-view.mjs":false,"./gestures/drag/use-drag-controls.mjs":false,"./events/use-dom-event.mjs":false,"./motion/index.mjs":false,"./motion/utils/is-motion-component.mjs":false,"./motion/utils/unwrap-motion-component.mjs":false,"./render/VisualElement.mjs":false,"./projection/styles/scale-correction.mjs":false,"./utils/use-instant-transition.mjs":false,"./projection/use-instant-layout-transition.mjs":false,"./projection/use-reset-projection.mjs":false,"./render/html/utils/build-transform.mjs":false,"./render/store.mjs":false,"./animation/animators/js/index.mjs":false,"./value/types/color/index.mjs":false,"./value/types/complex/index.mjs":false,"./value/types/numbers/units.mjs":false,"./animation/optimized-appear/start.mjs":false,"./animation/optimized-appear/data-id.mjs":false,"./animation/generators/spring/index.mjs":false,"./context/MotionContext/index.mjs":false,"./context/MotionConfigContext.mjs":false,"./context/PresenceContext.mjs":false,"./context/LayoutGroupContext.mjs":false,"./context/SwitchLayoutGroupContext.mjs":false,"./render/utils/flat-tree.mjs":false,"./context/DeprecatedLayoutGroupContext.mjs":false,"./animation/hooks/use-animated-state.mjs":false,"./value/use-inverted-scale.mjs":false,"./components/AnimateSharedLayout.mjs":false,"./value/index.mjs":false,"./animation/animate.mjs":false,"./render/dom/scroll/index.mjs":false,"./render/dom/scroll/track.mjs":false,"./render/dom/viewport/index.mjs":false,"./animation/utils/stagger.mjs":false,"./utils/transform.mjs":false,"./utils/clamp.mjs":false,"./utils/mix.mjs":false,"./utils/pipe.mjs":false,"./utils/progress.mjs":false,"./utils/wrap.mjs":false,"./frameloop/index-legacy.mjs":false,"./easing/anticipate.mjs":false,"./easing/back.mjs":false,"./easing/circ.mjs":false,"./easing/ease.mjs":false,"./easing/cubic-bezier.mjs":false,"./easing/modifiers/mirror.mjs":false,"./easing/modifiers/reverse.mjs":false,"./utils/delay.mjs":false,"./utils/distance.mjs":false,"./utils/errors.mjs":false,"./utils/interpolate.mjs":false,"./frameloop/frame.mjs":false,"./motion/features/animations.mjs":false,"./render/utils/setters.mjs":false,"./projection/geometry/models.mjs":false,"./projection/geometry/delta-calc.mjs":false,"./render/dom/utils/filter-props.mjs":false,"./motion/utils/use-visual-state.mjs":false,"./gestures/drag/utils/lock.mjs":false,"./events/add-pointer-event.mjs":false,"./events/event-info.mjs":false,"./value/utils/is-motion-value.mjs":false,"./utils/is-browser.mjs":false,"./utils/use-unmount-effect.mjs":false,"./utils/use-isomorphic-effect.mjs":false,"./utils/use-force-update.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Tsxv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDomMotionComponent", ()=>createDomMotionComponent);
parcelHelpers.export(exports, "motion", ()=>motion);
var _indexMjs = require("../../motion/index.mjs");
var _motionProxyMjs = require("./motion-proxy.mjs");
var _createConfigMjs = require("./utils/create-config.mjs");
var _gesturesMjs = require("../../motion/features/gestures.mjs");
var _animationsMjs = require("../../motion/features/animations.mjs");
var _dragMjs = require("../../motion/features/drag.mjs");
var _createVisualElementMjs = require("./create-visual-element.mjs");
var _layoutMjs = require("../../motion/features/layout.mjs");
const preloadedFeatures = {
    ...(0, _animationsMjs.animations),
    ...(0, _gesturesMjs.gestureAnimations),
    ...(0, _dragMjs.drag),
    ...(0, _layoutMjs.layout)
};
/**
 * HTML & SVG components, optimised for use with gestures and animation. These can be used as
 * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.
 *
 * @public
 */ const motion = /*@__PURE__*/ (0, _motionProxyMjs.createMotionProxy)((Component, config)=>(0, _createConfigMjs.createDomMotionConfig)(Component, config, preloadedFeatures, (0, _createVisualElementMjs.createDomVisualElement)));
/**
 * Create a DOM `motion` component with the provided string. This is primarily intended
 * as a full alternative to `motion` for consumers who have to support environments that don't
 * support `Proxy`.
 *
 * ```javascript
 * import { createDomMotionComponent } from "framer-motion"
 *
 * const motion = {
 *   div: createDomMotionComponent('div')
 * }
 * ```
 *
 * @public
 */ function createDomMotionComponent(key) {
    return (0, _indexMjs.createMotionComponent)((0, _createConfigMjs.createDomMotionConfig)(key, {
        forwardMotionProps: false
    }, preloadedFeatures, (0, _createVisualElementMjs.createDomVisualElement)));
}

},{"../../motion/index.mjs":"iexSD","./motion-proxy.mjs":"3j9Za","./utils/create-config.mjs":"6TbpJ","../../motion/features/gestures.mjs":"h2ALs","../../motion/features/animations.mjs":"c1lwU","../../motion/features/drag.mjs":"fBUJ5","./create-visual-element.mjs":"WHCBp","../../motion/features/layout.mjs":"6XGhA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iexSD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMotionComponent", ()=>createMotionComponent);
var _react = require("react");
var _motionConfigContextMjs = require("../context/MotionConfigContext.mjs");
var _indexMjs = require("../context/MotionContext/index.mjs");
var _useVisualElementMjs = require("./utils/use-visual-element.mjs");
var _useMotionRefMjs = require("./utils/use-motion-ref.mjs");
var _createMjs = require("../context/MotionContext/create.mjs");
var _loadFeaturesMjs = require("./features/load-features.mjs");
var _isBrowserMjs = require("../utils/is-browser.mjs");
var _layoutGroupContextMjs = require("../context/LayoutGroupContext.mjs");
var _lazyContextMjs = require("../context/LazyContext.mjs");
var _switchLayoutGroupContextMjs = require("../context/SwitchLayoutGroupContext.mjs");
var _symbolMjs = require("./utils/symbol.mjs");
/**
 * Create a `motion` component.
 *
 * This function accepts a Component argument, which can be either a string (ie "div"
 * for `motion.div`), or an actual React component.
 *
 * Alongside this is a config option which provides a way of rendering the provided
 * component "offline", or outside the React render cycle.
 */ function createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component }) {
    preloadedFeatures && (0, _loadFeaturesMjs.loadFeatures)(preloadedFeatures);
    function MotionComponent(props, externalRef) {
        /**
         * If we need to measure the element we load this functionality in a
         * separate class component in order to gain access to getSnapshotBeforeUpdate.
         */ let MeasureLayout;
        const configAndProps = {
            ...(0, _react.useContext)((0, _motionConfigContextMjs.MotionConfigContext)),
            ...props,
            layoutId: useLayoutId(props)
        };
        const { isStatic } = configAndProps;
        const context = (0, _createMjs.useCreateMotionContext)(props);
        const visualState = useVisualState(props, isStatic);
        if (!isStatic && (0, _isBrowserMjs.isBrowser)) {
            /**
             * Create a VisualElement for this component. A VisualElement provides a common
             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as
             * providing a way of rendering to these APIs outside of the React render loop
             * for more performant animations and interactions
             */ context.visualElement = (0, _useVisualElementMjs.useVisualElement)(Component, visualState, configAndProps, createVisualElement);
            /**
             * Load Motion gesture and animation features. These are rendered as renderless
             * components so each feature can optionally make use of React lifecycle methods.
             */ const initialLayoutGroupConfig = (0, _react.useContext)((0, _switchLayoutGroupContextMjs.SwitchLayoutGroupContext));
            const isStrict = (0, _react.useContext)((0, _lazyContextMjs.LazyContext)).strict;
            if (context.visualElement) MeasureLayout = context.visualElement.loadFeatures(// Note: Pass the full new combined props to correctly re-render dynamic feature components.
            configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);
        }
        /**
         * The mount order and hierarchy is specific to ensure our element ref
         * is hydrated by the time features fire their effects.
         */ return _react.createElement((0, _indexMjs.MotionContext).Provider, {
            value: context
        }, MeasureLayout && context.visualElement ? _react.createElement(MeasureLayout, {
            visualElement: context.visualElement,
            ...configAndProps
        }) : null, useRender(Component, props, (0, _useMotionRefMjs.useMotionRef)(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement));
    }
    const ForwardRefComponent = (0, _react.forwardRef)(MotionComponent);
    ForwardRefComponent[0, _symbolMjs.motionComponentSymbol] = Component;
    return ForwardRefComponent;
}
function useLayoutId({ layoutId }) {
    const layoutGroupId = (0, _react.useContext)((0, _layoutGroupContextMjs.LayoutGroupContext)).id;
    return layoutGroupId && layoutId !== undefined ? layoutGroupId + "-" + layoutId : layoutId;
}

},{"react":"21dqq","../context/MotionConfigContext.mjs":"8MLRw","../context/MotionContext/index.mjs":"3aBYo","./utils/use-visual-element.mjs":"jpZGy","./utils/use-motion-ref.mjs":"dSaJF","../context/MotionContext/create.mjs":"e5BOK","./features/load-features.mjs":"5V8E4","../utils/is-browser.mjs":"1XAMO","../context/LayoutGroupContext.mjs":"dEA1W","../context/LazyContext.mjs":"3dClU","../context/SwitchLayoutGroupContext.mjs":"7GP4u","./utils/symbol.mjs":"11WZZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8MLRw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MotionConfigContext", ()=>MotionConfigContext);
var _react = require("react");
/**
 * @public
 */ const MotionConfigContext = (0, _react.createContext)({
    transformPagePoint: (p)=>p,
    isStatic: false,
    reducedMotion: "never"
});

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3aBYo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MotionContext", ()=>MotionContext);
var _react = require("react");
const MotionContext = (0, _react.createContext)({});

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jpZGy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useVisualElement", ()=>useVisualElement);
var _react = require("react");
var _presenceContextMjs = require("../../context/PresenceContext.mjs");
var _indexMjs = require("../../context/MotionContext/index.mjs");
var _useIsomorphicEffectMjs = require("../../utils/use-isomorphic-effect.mjs");
var _lazyContextMjs = require("../../context/LazyContext.mjs");
var _motionConfigContextMjs = require("../../context/MotionConfigContext.mjs");
function useVisualElement(Component, visualState, props, createVisualElement) {
    const { visualElement: parent } = (0, _react.useContext)((0, _indexMjs.MotionContext));
    const lazyContext = (0, _react.useContext)((0, _lazyContextMjs.LazyContext));
    const presenceContext = (0, _react.useContext)((0, _presenceContextMjs.PresenceContext));
    const reducedMotionConfig = (0, _react.useContext)((0, _motionConfigContextMjs.MotionConfigContext)).reducedMotion;
    const visualElementRef = (0, _react.useRef)();
    /**
     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded
     */ createVisualElement = createVisualElement || lazyContext.renderer;
    if (!visualElementRef.current && createVisualElement) visualElementRef.current = createVisualElement(Component, {
        visualState,
        parent,
        props,
        presenceContext,
        blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
        reducedMotionConfig
    });
    const visualElement = visualElementRef.current;
    (0, _react.useInsertionEffect)(()=>{
        visualElement && visualElement.update(props, presenceContext);
    });
    /**
     * Cache this value as we want to know whether HandoffAppearAnimations
     * was present on initial render - it will be deleted after this.
     */ const canHandoff = (0, _react.useRef)(Boolean(window.HandoffAppearAnimations));
    (0, _useIsomorphicEffectMjs.useIsomorphicLayoutEffect)(()=>{
        if (!visualElement) return;
        visualElement.render();
        /**
         * Ideally this function would always run in a useEffect.
         *
         * However, if we have optimised appear animations to handoff from,
         * it needs to happen synchronously to ensure there's no flash of
         * incorrect styles in the event of a hydration error.
         *
         * So if we detect a situtation where optimised appear animations
         * are running, we use useLayoutEffect to trigger animations.
         */ if (canHandoff.current && visualElement.animationState) visualElement.animationState.animateChanges();
    });
    (0, _react.useEffect)(()=>{
        if (!visualElement) return;
        visualElement.updateFeatures();
        if (!canHandoff.current && visualElement.animationState) visualElement.animationState.animateChanges();
        /**
         * Once we've handed off animations we can delete HandoffAppearAnimations
         * so components added after the initial render can animate changes
         * in useEffect vs useLayoutEffect.
         */ window.HandoffAppearAnimations = undefined;
        canHandoff.current = false;
    });
    return visualElement;
}

},{"react":"21dqq","../../context/PresenceContext.mjs":"7DzvZ","../../context/MotionContext/index.mjs":"3aBYo","../../utils/use-isomorphic-effect.mjs":"5Yog2","../../context/LazyContext.mjs":"3dClU","../../context/MotionConfigContext.mjs":"8MLRw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7DzvZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PresenceContext", ()=>PresenceContext);
var _react = require("react");
/**
 * @public
 */ const PresenceContext = (0, _react.createContext)(null);

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Yog2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useIsomorphicLayoutEffect", ()=>useIsomorphicLayoutEffect);
var _react = require("react");
var _isBrowserMjs = require("./is-browser.mjs");
const useIsomorphicLayoutEffect = (0, _isBrowserMjs.isBrowser) ? (0, _react.useLayoutEffect) : (0, _react.useEffect);

},{"react":"21dqq","./is-browser.mjs":"1XAMO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1XAMO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
const isBrowser = typeof document !== "undefined";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3dClU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LazyContext", ()=>LazyContext);
var _react = require("react");
const LazyContext = (0, _react.createContext)({
    strict: false
});

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dSaJF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useMotionRef", ()=>useMotionRef);
var _react = require("react");
var _isRefObjectMjs = require("../../utils/is-ref-object.mjs");
/**
 * Creates a ref function that, when called, hydrates the provided
 * external ref and VisualElement.
 */ function useMotionRef(visualState, visualElement, externalRef) {
    return (0, _react.useCallback)((instance)=>{
        instance && visualState.mount && visualState.mount(instance);
        if (visualElement) instance ? visualElement.mount(instance) : visualElement.unmount();
        if (externalRef) {
            if (typeof externalRef === "function") externalRef(instance);
            else if ((0, _isRefObjectMjs.isRefObject)(externalRef)) externalRef.current = instance;
        }
    }, /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */ [
        visualElement
    ]);
}

},{"react":"21dqq","../../utils/is-ref-object.mjs":"hA3DA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hA3DA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isRefObject", ()=>isRefObject);
function isRefObject(ref) {
    return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e5BOK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCreateMotionContext", ()=>useCreateMotionContext);
var _react = require("react");
var _indexMjs = require("./index.mjs");
var _utilsMjs = require("./utils.mjs");
function useCreateMotionContext(props) {
    const { initial, animate } = (0, _utilsMjs.getCurrentTreeVariants)(props, (0, _react.useContext)((0, _indexMjs.MotionContext)));
    return (0, _react.useMemo)(()=>({
            initial,
            animate
        }), [
        variantLabelsAsDependency(initial),
        variantLabelsAsDependency(animate)
    ]);
}
function variantLabelsAsDependency(prop) {
    return Array.isArray(prop) ? prop.join(" ") : prop;
}

},{"react":"21dqq","./index.mjs":"3aBYo","./utils.mjs":"i5uJb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i5uJb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCurrentTreeVariants", ()=>getCurrentTreeVariants);
var _isVariantLabelMjs = require("../../render/utils/is-variant-label.mjs");
var _isControllingVariantsMjs = require("../../render/utils/is-controlling-variants.mjs");
function getCurrentTreeVariants(props, context) {
    if ((0, _isControllingVariantsMjs.isControllingVariants)(props)) {
        const { initial, animate } = props;
        return {
            initial: initial === false || (0, _isVariantLabelMjs.isVariantLabel)(initial) ? initial : undefined,
            animate: (0, _isVariantLabelMjs.isVariantLabel)(animate) ? animate : undefined
        };
    }
    return props.inherit !== false ? context : {};
}

},{"../../render/utils/is-variant-label.mjs":"erxli","../../render/utils/is-controlling-variants.mjs":"i9jG9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"erxli":[function(require,module,exports) {
/**
 * Decides if the supplied variable is variant label
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isVariantLabel", ()=>isVariantLabel);
function isVariantLabel(v) {
    return typeof v === "string" || Array.isArray(v);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i9jG9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isControllingVariants", ()=>isControllingVariants);
parcelHelpers.export(exports, "isVariantNode", ()=>isVariantNode);
var _isAnimationControlsMjs = require("../../animation/utils/is-animation-controls.mjs");
var _isVariantLabelMjs = require("./is-variant-label.mjs");
var _variantPropsMjs = require("./variant-props.mjs");
function isControllingVariants(props) {
    return (0, _isAnimationControlsMjs.isAnimationControls)(props.animate) || (0, _variantPropsMjs.variantProps).some((name)=>(0, _isVariantLabelMjs.isVariantLabel)(props[name]));
}
function isVariantNode(props) {
    return Boolean(isControllingVariants(props) || props.variants);
}

},{"../../animation/utils/is-animation-controls.mjs":"3wAZE","./is-variant-label.mjs":"erxli","./variant-props.mjs":"huf2R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3wAZE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isAnimationControls", ()=>isAnimationControls);
function isAnimationControls(v) {
    return typeof v === "object" && typeof v.start === "function";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"huf2R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "variantPriorityOrder", ()=>variantPriorityOrder);
parcelHelpers.export(exports, "variantProps", ()=>variantProps);
const variantPriorityOrder = [
    "animate",
    "whileInView",
    "whileFocus",
    "whileHover",
    "whileTap",
    "whileDrag",
    "exit"
];
const variantProps = [
    "initial",
    ...variantPriorityOrder
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5V8E4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loadFeatures", ()=>loadFeatures);
var _definitionsMjs = require("./definitions.mjs");
function loadFeatures(features) {
    for(const key in features)(0, _definitionsMjs.featureDefinitions)[key] = {
        ...(0, _definitionsMjs.featureDefinitions)[key],
        ...features[key]
    };
}

},{"./definitions.mjs":"2lmsj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2lmsj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "featureDefinitions", ()=>featureDefinitions);
const featureProps = {
    animation: [
        "animate",
        "variants",
        "whileHover",
        "whileTap",
        "exit",
        "whileInView",
        "whileFocus",
        "whileDrag"
    ],
    exit: [
        "exit"
    ],
    drag: [
        "drag",
        "dragControls"
    ],
    focus: [
        "whileFocus"
    ],
    hover: [
        "whileHover",
        "onHoverStart",
        "onHoverEnd"
    ],
    tap: [
        "whileTap",
        "onTap",
        "onTapStart",
        "onTapCancel"
    ],
    pan: [
        "onPan",
        "onPanStart",
        "onPanSessionStart",
        "onPanEnd"
    ],
    inView: [
        "whileInView",
        "onViewportEnter",
        "onViewportLeave"
    ],
    layout: [
        "layout",
        "layoutId"
    ]
};
const featureDefinitions = {};
for(const key in featureProps)featureDefinitions[key] = {
    isEnabled: (props)=>featureProps[key].some((name)=>!!props[name])
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dEA1W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LayoutGroupContext", ()=>LayoutGroupContext);
var _react = require("react");
const LayoutGroupContext = (0, _react.createContext)({});

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7GP4u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SwitchLayoutGroupContext", ()=>SwitchLayoutGroupContext);
var _react = require("react");
/**
 * Internal, exported only for usage in Framer
 */ const SwitchLayoutGroupContext = (0, _react.createContext)({});

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"11WZZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "motionComponentSymbol", ()=>motionComponentSymbol);
const motionComponentSymbol = Symbol.for("motionComponentSymbol");

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3j9Za":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMotionProxy", ()=>createMotionProxy);
var _indexMjs = require("../../motion/index.mjs");
/**
 * Convert any React component into a `motion` component. The provided component
 * **must** use `React.forwardRef` to the underlying DOM component you want to animate.
 *
 * ```jsx
 * const Component = React.forwardRef((props, ref) => {
 *   return <div ref={ref} />
 * })
 *
 * const MotionComponent = motion(Component)
 * ```
 *
 * @public
 */ function createMotionProxy(createConfig) {
    function custom(Component, customMotionComponentConfig = {}) {
        return (0, _indexMjs.createMotionComponent)(createConfig(Component, customMotionComponentConfig));
    }
    if (typeof Proxy === "undefined") return custom;
    /**
     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.
     * Rather than generating them anew every render.
     */ const componentCache = new Map();
    return new Proxy(custom, {
        /**
         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
         * The prop name is passed through as `key` and we can use that to generate a `motion`
         * DOM component with that name.
         */ get: (_target, key)=>{
            /**
             * If this element doesn't exist in the component cache, create it and cache.
             */ if (!componentCache.has(key)) componentCache.set(key, custom(key));
            return componentCache.get(key);
        }
    });
}

},{"../../motion/index.mjs":"iexSD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6TbpJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDomMotionConfig", ()=>createDomMotionConfig);
var _isSvgComponentMjs = require("./is-svg-component.mjs");
var _useRenderMjs = require("../use-render.mjs");
var _configMotionMjs = require("../../svg/config-motion.mjs");
var _configMotionMjs1 = require("../../html/config-motion.mjs");
function createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {
    const baseConfig = (0, _isSvgComponentMjs.isSVGComponent)(Component) ? (0, _configMotionMjs.svgMotionConfig) : (0, _configMotionMjs1.htmlMotionConfig);
    return {
        ...baseConfig,
        preloadedFeatures,
        useRender: (0, _useRenderMjs.createUseRender)(forwardMotionProps),
        createVisualElement,
        Component
    };
}

},{"./is-svg-component.mjs":"hnK2P","../use-render.mjs":"7Sb9b","../../svg/config-motion.mjs":"fAKfy","../../html/config-motion.mjs":"bqr1f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hnK2P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isSVGComponent", ()=>isSVGComponent);
var _lowercaseElementsMjs = require("../../svg/lowercase-elements.mjs");
function isSVGComponent(Component) {
    if (/**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */ typeof Component !== "string" || /**
         * If it contains a dash, the element is a custom HTML webcomponent.
         */ Component.includes("-")) return false;
    else if (/**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */ (0, _lowercaseElementsMjs.lowercaseSVGElements).indexOf(Component) > -1 || /**
         * If it contains a capital letter, it's an SVG component
         */ /[A-Z]/.test(Component)) return true;
    return false;
}

},{"../../svg/lowercase-elements.mjs":"4UtXq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4UtXq":[function(require,module,exports) {
/**
 * We keep these listed seperately as we use the lowercase tag names as part
 * of the runtime bundle to detect SVG components
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lowercaseSVGElements", ()=>lowercaseSVGElements);
const lowercaseSVGElements = [
    "animate",
    "circle",
    "defs",
    "desc",
    "ellipse",
    "g",
    "image",
    "line",
    "filter",
    "marker",
    "mask",
    "metadata",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "rect",
    "stop",
    "switch",
    "symbol",
    "svg",
    "text",
    "tspan",
    "use",
    "view"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Sb9b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUseRender", ()=>createUseRender);
var _react = require("react");
var _usePropsMjs = require("../html/use-props.mjs");
var _filterPropsMjs = require("./utils/filter-props.mjs");
var _isSvgComponentMjs = require("./utils/is-svg-component.mjs");
var _usePropsMjs1 = require("../svg/use-props.mjs");
var _isMotionValueMjs = require("../../value/utils/is-motion-value.mjs");
function createUseRender(forwardMotionProps = false) {
    const useRender = (Component, props, ref, { latestValues }, isStatic)=>{
        const useVisualProps = (0, _isSvgComponentMjs.isSVGComponent)(Component) ? (0, _usePropsMjs1.useSVGProps) : (0, _usePropsMjs.useHTMLProps);
        const visualProps = useVisualProps(props, latestValues, isStatic, Component);
        const filteredProps = (0, _filterPropsMjs.filterProps)(props, typeof Component === "string", forwardMotionProps);
        const elementProps = {
            ...filteredProps,
            ...visualProps,
            ref
        };
        /**
         * If component has been handed a motion value as its child,
         * memoise its initial value and render that. Subsequent updates
         * will be handled by the onChange handler
         */ const { children } = props;
        const renderedChildren = (0, _react.useMemo)(()=>(0, _isMotionValueMjs.isMotionValue)(children) ? children.get() : children, [
            children
        ]);
        return (0, _react.createElement)(Component, {
            ...elementProps,
            children: renderedChildren
        });
    };
    return useRender;
}

},{"react":"21dqq","../html/use-props.mjs":"2D388","./utils/filter-props.mjs":"juMO1","./utils/is-svg-component.mjs":"hnK2P","../svg/use-props.mjs":"eKOGX","../../value/utils/is-motion-value.mjs":"94AYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2D388":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "copyRawValuesOnly", ()=>copyRawValuesOnly);
parcelHelpers.export(exports, "useHTMLProps", ()=>useHTMLProps);
var _react = require("react");
var _isForcedMotionValueMjs = require("../../motion/utils/is-forced-motion-value.mjs");
var _isMotionValueMjs = require("../../value/utils/is-motion-value.mjs");
var _buildStylesMjs = require("./utils/build-styles.mjs");
var _createRenderStateMjs = require("./utils/create-render-state.mjs");
function copyRawValuesOnly(target, source, props) {
    for(const key in source)if (!(0, _isMotionValueMjs.isMotionValue)(source[key]) && !(0, _isForcedMotionValueMjs.isForcedMotionValue)(key, props)) target[key] = source[key];
}
function useInitialMotionValues({ transformTemplate }, visualState, isStatic) {
    return (0, _react.useMemo)(()=>{
        const state = (0, _createRenderStateMjs.createHtmlRenderState)();
        (0, _buildStylesMjs.buildHTMLStyles)(state, visualState, {
            enableHardwareAcceleration: !isStatic
        }, transformTemplate);
        return Object.assign({}, state.vars, state.style);
    }, [
        visualState
    ]);
}
function useStyle(props, visualState, isStatic) {
    const styleProp = props.style || {};
    const style = {};
    /**
     * Copy non-Motion Values straight into style
     */ copyRawValuesOnly(style, styleProp, props);
    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
    return props.transformValues ? props.transformValues(style) : style;
}
function useHTMLProps(props, visualState, isStatic) {
    // The `any` isn't ideal but it is the type of createElement props argument
    const htmlProps = {};
    const style = useStyle(props, visualState, isStatic);
    if (props.drag && props.dragListener !== false) {
        // Disable the ghost element when a user drags
        htmlProps.draggable = false;
        // Disable text selection
        style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
        // Disable scrolling on the draggable direction
        style.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
    }
    if (props.tabIndex === undefined && (props.onTap || props.onTapStart || props.whileTap)) htmlProps.tabIndex = 0;
    htmlProps.style = style;
    return htmlProps;
}

},{"react":"21dqq","../../motion/utils/is-forced-motion-value.mjs":"lWFg7","../../value/utils/is-motion-value.mjs":"94AYa","./utils/build-styles.mjs":"2ABzU","./utils/create-render-state.mjs":"fH0Wg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWFg7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isForcedMotionValue", ()=>isForcedMotionValue);
var _scaleCorrectionMjs = require("../../projection/styles/scale-correction.mjs");
var _transformMjs = require("../../render/html/utils/transform.mjs");
function isForcedMotionValue(key, { layout, layoutId }) {
    return (0, _transformMjs.transformProps).has(key) || key.startsWith("origin") || (layout || layoutId !== undefined) && (!!(0, _scaleCorrectionMjs.scaleCorrectors)[key] || key === "opacity");
}

},{"../../projection/styles/scale-correction.mjs":"4Bydu","../../render/html/utils/transform.mjs":"iSy8E","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Bydu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addScaleCorrector", ()=>addScaleCorrector);
parcelHelpers.export(exports, "scaleCorrectors", ()=>scaleCorrectors);
const scaleCorrectors = {};
function addScaleCorrector(correctors) {
    Object.assign(scaleCorrectors, correctors);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iSy8E":[function(require,module,exports) {
/**
 * Generate a list of every possible transform key.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transformPropOrder", ()=>transformPropOrder);
parcelHelpers.export(exports, "transformProps", ()=>transformProps);
const transformPropOrder = [
    "transformPerspective",
    "x",
    "y",
    "z",
    "translateX",
    "translateY",
    "translateZ",
    "scale",
    "scaleX",
    "scaleY",
    "rotate",
    "rotateX",
    "rotateY",
    "rotateZ",
    "skew",
    "skewX",
    "skewY"
];
/**
 * A quick lookup for transform props.
 */ const transformProps = new Set(transformPropOrder);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"94AYa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isMotionValue", ()=>isMotionValue);
const isMotionValue = (value)=>Boolean(value && value.getVelocity);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ABzU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildHTMLStyles", ()=>buildHTMLStyles);
var _buildTransformMjs = require("./build-transform.mjs");
var _isCssVariableMjs = require("../../dom/utils/is-css-variable.mjs");
var _transformMjs = require("./transform.mjs");
var _getAsTypeMjs = require("../../dom/value-types/get-as-type.mjs");
var _numberMjs = require("../../dom/value-types/number.mjs");
function buildHTMLStyles(state, latestValues, options, transformTemplate) {
    const { style, vars, transform, transformOrigin } = state;
    // Track whether we encounter any transform or transformOrigin values.
    let hasTransform = false;
    let hasTransformOrigin = false;
    // Does the calculated transform essentially equal "none"?
    let transformIsNone = true;
    /**
     * Loop over all our latest animated values and decide whether to handle them
     * as a style or CSS variable.
     *
     * Transforms and transform origins are kept seperately for further processing.
     */ for(const key in latestValues){
        const value = latestValues[key];
        /**
         * If this is a CSS variable we don't do any further processing.
         */ if ((0, _isCssVariableMjs.isCSSVariableName)(key)) {
            vars[key] = value;
            continue;
        }
        // Convert the value to its default value type, ie 0 -> "0px"
        const valueType = (0, _numberMjs.numberValueTypes)[key];
        const valueAsType = (0, _getAsTypeMjs.getValueAsType)(value, valueType);
        if ((0, _transformMjs.transformProps).has(key)) {
            // If this is a transform, flag to enable further transform processing
            hasTransform = true;
            transform[key] = valueAsType;
            // If we already know we have a non-default transform, early return
            if (!transformIsNone) continue;
            // Otherwise check to see if this is a default transform
            if (value !== (valueType.default || 0)) transformIsNone = false;
        } else if (key.startsWith("origin")) {
            // If this is a transform origin, flag and enable further transform-origin processing
            hasTransformOrigin = true;
            transformOrigin[key] = valueAsType;
        } else style[key] = valueAsType;
    }
    if (!latestValues.transform) {
        if (hasTransform || transformTemplate) style.transform = (0, _buildTransformMjs.buildTransform)(state.transform, options, transformIsNone, transformTemplate);
        else if (style.transform) /**
             * If we have previously created a transform but currently don't have any,
             * reset transform style to none.
             */ style.transform = "none";
    }
    /**
     * Build a transformOrigin style. Uses the same defaults as the browser for
     * undefined origins.
     */ if (hasTransformOrigin) {
        const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
        style.transformOrigin = `${originX} ${originY} ${originZ}`;
    }
}

},{"./build-transform.mjs":"exDqb","../../dom/utils/is-css-variable.mjs":"8qZz5","./transform.mjs":"iSy8E","../../dom/value-types/get-as-type.mjs":"cv0EP","../../dom/value-types/number.mjs":"biQiX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"exDqb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildTransform", ()=>buildTransform);
var _transformMjs = require("./transform.mjs");
const translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective"
};
const numTransforms = (0, _transformMjs.transformPropOrder).length;
/**
 * Build a CSS transform style from individual x/y/scale etc properties.
 *
 * This outputs with a default order of transforms/scales/rotations, this can be customised by
 * providing a transformTemplate function.
 */ function buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate) {
    // The transform string we're going to build into.
    let transformString = "";
    /**
     * Loop over all possible transforms in order, adding the ones that
     * are present to the transform string.
     */ for(let i = 0; i < numTransforms; i++){
        const key = (0, _transformMjs.transformPropOrder)[i];
        if (transform[key] !== undefined) {
            const transformName = translateAlias[key] || key;
            transformString += `${transformName}(${transform[key]}) `;
        }
    }
    if (enableHardwareAcceleration && !transform.z) transformString += "translateZ(0)";
    transformString = transformString.trim();
    // If we have a custom `transform` template, pass our transform values and
    // generated transformString to that before returning
    if (transformTemplate) transformString = transformTemplate(transform, transformIsDefault ? "" : transformString);
    else if (allowTransformNone && transformIsDefault) transformString = "none";
    return transformString;
}

},{"./transform.mjs":"iSy8E","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8qZz5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssVariableRegex", ()=>cssVariableRegex);
parcelHelpers.export(exports, "isCSSVariableName", ()=>isCSSVariableName);
parcelHelpers.export(exports, "isCSSVariableToken", ()=>isCSSVariableToken);
const checkStringStartsWith = (token)=>(key)=>typeof key === "string" && key.startsWith(token);
const isCSSVariableName = checkStringStartsWith("--");
const isCSSVariableToken = checkStringStartsWith("var(--");
const cssVariableRegex = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cv0EP":[function(require,module,exports) {
/**
 * Provided a value and a ValueType, returns the value as that value type.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getValueAsType", ()=>getValueAsType);
const getValueAsType = (value, type)=>{
    return type && typeof value === "number" ? type.transform(value) : value;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"biQiX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numberValueTypes", ()=>numberValueTypes);
var _indexMjs = require("../../../value/types/numbers/index.mjs");
var _unitsMjs = require("../../../value/types/numbers/units.mjs");
var _typeIntMjs = require("./type-int.mjs");
const numberValueTypes = {
    // Border props
    borderWidth: (0, _unitsMjs.px),
    borderTopWidth: (0, _unitsMjs.px),
    borderRightWidth: (0, _unitsMjs.px),
    borderBottomWidth: (0, _unitsMjs.px),
    borderLeftWidth: (0, _unitsMjs.px),
    borderRadius: (0, _unitsMjs.px),
    radius: (0, _unitsMjs.px),
    borderTopLeftRadius: (0, _unitsMjs.px),
    borderTopRightRadius: (0, _unitsMjs.px),
    borderBottomRightRadius: (0, _unitsMjs.px),
    borderBottomLeftRadius: (0, _unitsMjs.px),
    // Positioning props
    width: (0, _unitsMjs.px),
    maxWidth: (0, _unitsMjs.px),
    height: (0, _unitsMjs.px),
    maxHeight: (0, _unitsMjs.px),
    size: (0, _unitsMjs.px),
    top: (0, _unitsMjs.px),
    right: (0, _unitsMjs.px),
    bottom: (0, _unitsMjs.px),
    left: (0, _unitsMjs.px),
    // Spacing props
    padding: (0, _unitsMjs.px),
    paddingTop: (0, _unitsMjs.px),
    paddingRight: (0, _unitsMjs.px),
    paddingBottom: (0, _unitsMjs.px),
    paddingLeft: (0, _unitsMjs.px),
    margin: (0, _unitsMjs.px),
    marginTop: (0, _unitsMjs.px),
    marginRight: (0, _unitsMjs.px),
    marginBottom: (0, _unitsMjs.px),
    marginLeft: (0, _unitsMjs.px),
    // Transform props
    rotate: (0, _unitsMjs.degrees),
    rotateX: (0, _unitsMjs.degrees),
    rotateY: (0, _unitsMjs.degrees),
    rotateZ: (0, _unitsMjs.degrees),
    scale: (0, _indexMjs.scale),
    scaleX: (0, _indexMjs.scale),
    scaleY: (0, _indexMjs.scale),
    scaleZ: (0, _indexMjs.scale),
    skew: (0, _unitsMjs.degrees),
    skewX: (0, _unitsMjs.degrees),
    skewY: (0, _unitsMjs.degrees),
    distance: (0, _unitsMjs.px),
    translateX: (0, _unitsMjs.px),
    translateY: (0, _unitsMjs.px),
    translateZ: (0, _unitsMjs.px),
    x: (0, _unitsMjs.px),
    y: (0, _unitsMjs.px),
    z: (0, _unitsMjs.px),
    perspective: (0, _unitsMjs.px),
    transformPerspective: (0, _unitsMjs.px),
    opacity: (0, _indexMjs.alpha),
    originX: (0, _unitsMjs.progressPercentage),
    originY: (0, _unitsMjs.progressPercentage),
    originZ: (0, _unitsMjs.px),
    // Misc
    zIndex: (0, _typeIntMjs.int),
    // SVG
    fillOpacity: (0, _indexMjs.alpha),
    strokeOpacity: (0, _indexMjs.alpha),
    numOctaves: (0, _typeIntMjs.int)
};

},{"../../../value/types/numbers/index.mjs":"bI9mf","../../../value/types/numbers/units.mjs":"lGBHA","./type-int.mjs":"cWdiE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bI9mf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "alpha", ()=>alpha);
parcelHelpers.export(exports, "number", ()=>number);
parcelHelpers.export(exports, "scale", ()=>scale);
var _clampMjs = require("../../../utils/clamp.mjs");
const number = {
    test: (v)=>typeof v === "number",
    parse: parseFloat,
    transform: (v)=>v
};
const alpha = {
    ...number,
    transform: (v)=>(0, _clampMjs.clamp)(0, 1, v)
};
const scale = {
    ...number,
    default: 1
};

},{"../../../utils/clamp.mjs":"aZOh4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aZOh4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clamp", ()=>clamp);
const clamp = (min, max, v)=>Math.min(Math.max(v, min), max);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lGBHA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "degrees", ()=>degrees);
parcelHelpers.export(exports, "percent", ()=>percent);
parcelHelpers.export(exports, "progressPercentage", ()=>progressPercentage);
parcelHelpers.export(exports, "px", ()=>px);
parcelHelpers.export(exports, "vh", ()=>vh);
parcelHelpers.export(exports, "vw", ()=>vw);
var _utilsMjs = require("../utils.mjs");
const createUnitType = (unit)=>({
        test: (v)=>(0, _utilsMjs.isString)(v) && v.endsWith(unit) && v.split(" ").length === 1,
        parse: parseFloat,
        transform: (v)=>`${v}${unit}`
    });
const degrees = createUnitType("deg");
const percent = createUnitType("%");
const px = createUnitType("px");
const vh = createUnitType("vh");
const vw = createUnitType("vw");
const progressPercentage = {
    ...percent,
    parse: (v)=>percent.parse(v) / 100,
    transform: (v)=>percent.transform(v * 100)
};

},{"../utils.mjs":"kaB0b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kaB0b":[function(require,module,exports) {
/**
 * TODO: When we move from string as a source of truth to data models
 * everything in this folder should probably be referred to as models vs types
 */ // If this number is a decimal, make it just five decimal places
// to avoid exponents
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "colorRegex", ()=>colorRegex);
parcelHelpers.export(exports, "floatRegex", ()=>floatRegex);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "sanitize", ()=>sanitize);
parcelHelpers.export(exports, "singleColorRegex", ()=>singleColorRegex);
const sanitize = (v)=>Math.round(v * 100000) / 100000;
const floatRegex = /(-)?([\d]*\.?[\d])+/g;
const colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
const singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
function isString(v) {
    return typeof v === "string";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cWdiE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "int", ()=>int);
var _indexMjs = require("../../../value/types/numbers/index.mjs");
const int = {
    ...(0, _indexMjs.number),
    transform: Math.round
};

},{"../../../value/types/numbers/index.mjs":"bI9mf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fH0Wg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHtmlRenderState", ()=>createHtmlRenderState);
const createHtmlRenderState = ()=>({
        style: {},
        transform: {},
        transformOrigin: {},
        vars: {}
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"juMO1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterProps", ()=>filterProps);
parcelHelpers.export(exports, "loadExternalIsValidProp", ()=>loadExternalIsValidProp);
var _validPropMjs = require("../../../motion/utils/valid-prop.mjs");
let shouldForward = (key)=>!(0, _validPropMjs.isValidMotionProp)(key);
function loadExternalIsValidProp(isValidProp) {
    if (!isValidProp) return;
    // Explicitly filter our events
    shouldForward = (key)=>key.startsWith("on") ? !(0, _validPropMjs.isValidMotionProp)(key) : isValidProp(key);
}
/**
 * Emotion and Styled Components both allow users to pass through arbitrary props to their components
 * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which
 * of these should be passed to the underlying DOM node.
 *
 * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props
 * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props
 * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of
 * `@emotion/is-prop-valid`, however to fix this problem we need to use it.
 *
 * By making it an optionalDependency we can offer this functionality only in the situations where it's
 * actually required.
 */ try {
    /**
     * We attempt to import this package but require won't be defined in esm environments, in that case
     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed
     * in favour of explicit injection.
     */ loadExternalIsValidProp(require("125f13913be7321c").default);
} catch (_a) {
// We don't need to actually do anything here - the fallback is the existing `isPropValid`.
}
function filterProps(props, isDom, forwardMotionProps) {
    const filteredProps = {};
    for(const key in props){
        /**
         * values is considered a valid prop by Emotion, so if it's present
         * this will be rendered out to the DOM unless explicitly filtered.
         *
         * We check the type as it could be used with the `feColorMatrix`
         * element, which we support.
         */ if (key === "values" && typeof props.values === "object") continue;
        if (shouldForward(key) || forwardMotionProps === true && (0, _validPropMjs.isValidMotionProp)(key) || !isDom && !(0, _validPropMjs.isValidMotionProp)(key) || // If trying to use native HTML drag events, forward drag listeners
        props["draggable"] && key.startsWith("onDrag")) filteredProps[key] = props[key];
    }
    return filteredProps;
}

},{"../../../motion/utils/valid-prop.mjs":"9bBA6","125f13913be7321c":"5ZOhJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9bBA6":[function(require,module,exports) {
/**
 * A list of all valid MotionProps.
 *
 * @privateRemarks
 * This doesn't throw if a `MotionProp` name is missing - it should.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidMotionProp", ()=>isValidMotionProp);
const validMotionProps = new Set([
    "animate",
    "exit",
    "variants",
    "initial",
    "style",
    "values",
    "variants",
    "transition",
    "transformTemplate",
    "transformValues",
    "custom",
    "inherit",
    "onLayoutAnimationStart",
    "onLayoutAnimationComplete",
    "onLayoutMeasure",
    "onBeforeLayoutMeasure",
    "onAnimationStart",
    "onAnimationComplete",
    "onUpdate",
    "onDragStart",
    "onDrag",
    "onDragEnd",
    "onMeasureDragConstraints",
    "onDirectionLock",
    "onDragTransitionEnd",
    "_dragX",
    "_dragY",
    "onHoverStart",
    "onHoverEnd",
    "onViewportEnter",
    "onViewportLeave",
    "ignoreStrict",
    "viewport"
]);
/**
 * Check whether a prop name is a valid `MotionProp` key.
 *
 * @param key - Name of the property to check
 * @returns `true` is key is a valid `MotionProp`.
 *
 * @public
 */ function isValidMotionProp(key) {
    return key.startsWith("while") || key.startsWith("drag") && key !== "draggable" || key.startsWith("layout") || key.startsWith("onTap") || key.startsWith("onPan") || validMotionProps.has(key);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ZOhJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var index = (0, _memoizeDefault.default)(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});
exports.default = index;

},{"@emotion/memoize":"ko51r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ko51r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function memoize(fn) {
    var cache = {};
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}
exports.default = memoize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKOGX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSVGProps", ()=>useSVGProps);
var _react = require("react");
var _usePropsMjs = require("../html/use-props.mjs");
var _buildAttrsMjs = require("./utils/build-attrs.mjs");
var _createRenderStateMjs = require("./utils/create-render-state.mjs");
var _isSvgTagMjs = require("./utils/is-svg-tag.mjs");
function useSVGProps(props, visualState, _isStatic, Component) {
    const visualProps = (0, _react.useMemo)(()=>{
        const state = (0, _createRenderStateMjs.createSvgRenderState)();
        (0, _buildAttrsMjs.buildSVGAttrs)(state, visualState, {
            enableHardwareAcceleration: false
        }, (0, _isSvgTagMjs.isSVGTag)(Component), props.transformTemplate);
        return {
            ...state.attrs,
            style: {
                ...state.style
            }
        };
    }, [
        visualState
    ]);
    if (props.style) {
        const rawStyles = {};
        (0, _usePropsMjs.copyRawValuesOnly)(rawStyles, props.style, props);
        visualProps.style = {
            ...rawStyles,
            ...visualProps.style
        };
    }
    return visualProps;
}

},{"react":"21dqq","../html/use-props.mjs":"2D388","./utils/build-attrs.mjs":"lDaMj","./utils/create-render-state.mjs":"bM46q","./utils/is-svg-tag.mjs":"iLrl0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lDaMj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildSVGAttrs", ()=>buildSVGAttrs);
var _buildStylesMjs = require("../../html/utils/build-styles.mjs");
var _transformOriginMjs = require("./transform-origin.mjs");
var _pathMjs = require("./path.mjs");
/**
 * Build SVG visual attrbutes, like cx and style.transform
 */ function buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, // This is object creation, which we try to avoid per-frame.
...latest }, options, isSVGTag, transformTemplate) {
    (0, _buildStylesMjs.buildHTMLStyles)(state, latest, options, transformTemplate);
    /**
     * For svg tags we just want to make sure viewBox is animatable and treat all the styles
     * as normal HTML tags.
     */ if (isSVGTag) {
        if (state.style.viewBox) state.attrs.viewBox = state.style.viewBox;
        return;
    }
    state.attrs = state.style;
    state.style = {};
    const { attrs, style, dimensions } = state;
    /**
     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs
     * and copy it into style.
     */ if (attrs.transform) {
        if (dimensions) style.transform = attrs.transform;
        delete attrs.transform;
    }
    // Parse transformOrigin
    if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) style.transformOrigin = (0, _transformOriginMjs.calcSVGTransformOrigin)(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);
    // Render attrX/attrY/attrScale as attributes
    if (attrX !== undefined) attrs.x = attrX;
    if (attrY !== undefined) attrs.y = attrY;
    if (attrScale !== undefined) attrs.scale = attrScale;
    // Build SVG path if one has been defined
    if (pathLength !== undefined) (0, _pathMjs.buildSVGPath)(attrs, pathLength, pathSpacing, pathOffset, false);
}

},{"../../html/utils/build-styles.mjs":"2ABzU","./transform-origin.mjs":"hcFr3","./path.mjs":"akvM2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hcFr3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calcSVGTransformOrigin", ()=>calcSVGTransformOrigin);
var _unitsMjs = require("../../../value/types/numbers/units.mjs");
function calcOrigin(origin, offset, size) {
    return typeof origin === "string" ? origin : (0, _unitsMjs.px).transform(offset + size * origin);
}
/**
 * The SVG transform origin defaults are different to CSS and is less intuitive,
 * so we use the measured dimensions of the SVG to reconcile these.
 */ function calcSVGTransformOrigin(dimensions, originX, originY) {
    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
    return `${pxOriginX} ${pxOriginY}`;
}

},{"../../../value/types/numbers/units.mjs":"lGBHA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"akvM2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildSVGPath", ()=>buildSVGPath);
var _unitsMjs = require("../../../value/types/numbers/units.mjs");
const dashKeys = {
    offset: "stroke-dashoffset",
    array: "stroke-dasharray"
};
const camelKeys = {
    offset: "strokeDashoffset",
    array: "strokeDasharray"
};
/**
 * Build SVG path properties. Uses the path's measured length to convert
 * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset
 * and stroke-dasharray attributes.
 *
 * This function is mutative to reduce per-frame GC.
 */ function buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {
    // Normalise path length by setting SVG attribute pathLength to 1
    attrs.pathLength = 1;
    // We use dash case when setting attributes directly to the DOM node and camel case
    // when defining props on a React component.
    const keys = useDashCase ? dashKeys : camelKeys;
    // Build the dash offset
    attrs[keys.offset] = (0, _unitsMjs.px).transform(-offset);
    // Build the dash array
    const pathLength = (0, _unitsMjs.px).transform(length);
    const pathSpacing = (0, _unitsMjs.px).transform(spacing);
    attrs[keys.array] = `${pathLength} ${pathSpacing}`;
}

},{"../../../value/types/numbers/units.mjs":"lGBHA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bM46q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSvgRenderState", ()=>createSvgRenderState);
var _createRenderStateMjs = require("../../html/utils/create-render-state.mjs");
const createSvgRenderState = ()=>({
        ...(0, _createRenderStateMjs.createHtmlRenderState)(),
        attrs: {}
    });

},{"../../html/utils/create-render-state.mjs":"fH0Wg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iLrl0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag);
const isSVGTag = (tag)=>typeof tag === "string" && tag.toLowerCase() === "svg";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fAKfy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "svgMotionConfig", ()=>svgMotionConfig);
var _renderMjs = require("./utils/render.mjs");
var _scrapeMotionValuesMjs = require("./utils/scrape-motion-values.mjs");
var _useVisualStateMjs = require("../../motion/utils/use-visual-state.mjs");
var _createRenderStateMjs = require("./utils/create-render-state.mjs");
var _buildAttrsMjs = require("./utils/build-attrs.mjs");
var _isSvgTagMjs = require("./utils/is-svg-tag.mjs");
var _frameMjs = require("../../frameloop/frame.mjs");
const svgMotionConfig = {
    useVisualState: (0, _useVisualStateMjs.makeUseVisualState)({
        scrapeMotionValuesFromProps: (0, _scrapeMotionValuesMjs.scrapeMotionValuesFromProps),
        createRenderState: (0, _createRenderStateMjs.createSvgRenderState),
        onMount: (props, instance, { renderState, latestValues })=>{
            (0, _frameMjs.frame).read(()=>{
                try {
                    renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
                } catch (e) {
                    // Most likely trying to measure an unrendered element under Firefox
                    renderState.dimensions = {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0
                    };
                }
            });
            (0, _frameMjs.frame).render(()=>{
                (0, _buildAttrsMjs.buildSVGAttrs)(renderState, latestValues, {
                    enableHardwareAcceleration: false
                }, (0, _isSvgTagMjs.isSVGTag)(instance.tagName), props.transformTemplate);
                (0, _renderMjs.renderSVG)(instance, renderState);
            });
        }
    })
};

},{"./utils/render.mjs":"iuDSF","./utils/scrape-motion-values.mjs":"bGUYu","../../motion/utils/use-visual-state.mjs":"bYE4p","./utils/create-render-state.mjs":"bM46q","./utils/build-attrs.mjs":"lDaMj","./utils/is-svg-tag.mjs":"iLrl0","../../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iuDSF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "renderSVG", ()=>renderSVG);
var _camelToDashMjs = require("../../dom/utils/camel-to-dash.mjs");
var _renderMjs = require("../../html/utils/render.mjs");
var _camelCaseAttrsMjs = require("./camel-case-attrs.mjs");
function renderSVG(element, renderState, _styleProp, projection) {
    (0, _renderMjs.renderHTML)(element, renderState, undefined, projection);
    for(const key in renderState.attrs)element.setAttribute(!(0, _camelCaseAttrsMjs.camelCaseAttributes).has(key) ? (0, _camelToDashMjs.camelToDash)(key) : key, renderState.attrs[key]);
}

},{"../../dom/utils/camel-to-dash.mjs":"eUOx7","../../html/utils/render.mjs":"jRfU5","./camel-case-attrs.mjs":"aH7Xw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eUOx7":[function(require,module,exports) {
/**
 * Convert camelCase to dash-case properties.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "camelToDash", ()=>camelToDash);
const camelToDash = (str)=>str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jRfU5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "renderHTML", ()=>renderHTML);
function renderHTML(element, { style, vars }, styleProp, projection) {
    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
    // Loop over any CSS variables and assign those.
    for(const key in vars)element.style.setProperty(key, vars[key]);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aH7Xw":[function(require,module,exports) {
/**
 * A set of attribute names that are always read/written as camel case.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "camelCaseAttributes", ()=>camelCaseAttributes);
const camelCaseAttributes = new Set([
    "baseFrequency",
    "diffuseConstant",
    "kernelMatrix",
    "kernelUnitLength",
    "keySplines",
    "keyTimes",
    "limitingConeAngle",
    "markerHeight",
    "markerWidth",
    "numOctaves",
    "targetX",
    "targetY",
    "surfaceScale",
    "specularConstant",
    "specularExponent",
    "stdDeviation",
    "tableValues",
    "viewBox",
    "gradientTransform",
    "pathLength",
    "startOffset",
    "textLength",
    "lengthAdjust"
]);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGUYu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scrapeMotionValuesFromProps", ()=>scrapeMotionValuesFromProps);
var _isMotionValueMjs = require("../../../value/utils/is-motion-value.mjs");
var _scrapeMotionValuesMjs = require("../../html/utils/scrape-motion-values.mjs");
var _transformMjs = require("../../html/utils/transform.mjs");
function scrapeMotionValuesFromProps(props, prevProps) {
    const newValues = (0, _scrapeMotionValuesMjs.scrapeMotionValuesFromProps)(props, prevProps);
    for(const key in props)if ((0, _isMotionValueMjs.isMotionValue)(props[key]) || (0, _isMotionValueMjs.isMotionValue)(prevProps[key])) {
        const targetKey = (0, _transformMjs.transformPropOrder).indexOf(key) !== -1 ? "attr" + key.charAt(0).toUpperCase() + key.substring(1) : key;
        newValues[targetKey] = props[key];
    }
    return newValues;
}

},{"../../../value/utils/is-motion-value.mjs":"94AYa","../../html/utils/scrape-motion-values.mjs":"fCzyn","../../html/utils/transform.mjs":"iSy8E","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCzyn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scrapeMotionValuesFromProps", ()=>scrapeMotionValuesFromProps);
var _isForcedMotionValueMjs = require("../../../motion/utils/is-forced-motion-value.mjs");
var _isMotionValueMjs = require("../../../value/utils/is-motion-value.mjs");
function scrapeMotionValuesFromProps(props, prevProps) {
    const { style } = props;
    const newValues = {};
    for(const key in style)if ((0, _isMotionValueMjs.isMotionValue)(style[key]) || prevProps.style && (0, _isMotionValueMjs.isMotionValue)(prevProps.style[key]) || (0, _isForcedMotionValueMjs.isForcedMotionValue)(key, props)) newValues[key] = style[key];
    return newValues;
}

},{"../../../motion/utils/is-forced-motion-value.mjs":"lWFg7","../../../value/utils/is-motion-value.mjs":"94AYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bYE4p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeUseVisualState", ()=>makeUseVisualState);
var _react = require("react");
var _isAnimationControlsMjs = require("../../animation/utils/is-animation-controls.mjs");
var _presenceContextMjs = require("../../context/PresenceContext.mjs");
var _resolveVariantsMjs = require("../../render/utils/resolve-variants.mjs");
var _useConstantMjs = require("../../utils/use-constant.mjs");
var _resolveMotionValueMjs = require("../../value/utils/resolve-motion-value.mjs");
var _indexMjs = require("../../context/MotionContext/index.mjs");
var _isControllingVariantsMjs = require("../../render/utils/is-controlling-variants.mjs");
function makeState({ scrapeMotionValuesFromProps, createRenderState, onMount }, props, context, presenceContext) {
    const state = {
        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),
        renderState: createRenderState()
    };
    if (onMount) state.mount = (instance)=>onMount(props, instance, state);
    return state;
}
const makeUseVisualState = (config)=>(props, isStatic)=>{
        const context = (0, _react.useContext)((0, _indexMjs.MotionContext));
        const presenceContext = (0, _react.useContext)((0, _presenceContextMjs.PresenceContext));
        const make = ()=>makeState(config, props, context, presenceContext);
        return isStatic ? make() : (0, _useConstantMjs.useConstant)(make);
    };
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
    const values = {};
    const motionValues = scrapeMotionValues(props, {});
    for(const key in motionValues)values[key] = (0, _resolveMotionValueMjs.resolveMotionValue)(motionValues[key]);
    let { initial, animate } = props;
    const isControllingVariants$1 = (0, _isControllingVariantsMjs.isControllingVariants)(props);
    const isVariantNode$1 = (0, _isControllingVariantsMjs.isVariantNode)(props);
    if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
        if (initial === undefined) initial = context.initial;
        if (animate === undefined) animate = context.animate;
    }
    let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
    const variantToSet = isInitialAnimationBlocked ? animate : initial;
    if (variantToSet && typeof variantToSet !== "boolean" && !(0, _isAnimationControlsMjs.isAnimationControls)(variantToSet)) {
        const list = Array.isArray(variantToSet) ? variantToSet : [
            variantToSet
        ];
        list.forEach((definition)=>{
            const resolved = (0, _resolveVariantsMjs.resolveVariantFromProps)(props, definition);
            if (!resolved) return;
            const { transitionEnd, transition, ...target } = resolved;
            for(const key in target){
                let valueTarget = target[key];
                if (Array.isArray(valueTarget)) {
                    /**
                     * Take final keyframe if the initial animation is blocked because
                     * we want to initialise at the end of that blocked animation.
                     */ const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
                    valueTarget = valueTarget[index];
                }
                if (valueTarget !== null) values[key] = valueTarget;
            }
            for(const key in transitionEnd)values[key] = transitionEnd[key];
        });
    }
    return values;
}

},{"react":"21dqq","../../animation/utils/is-animation-controls.mjs":"3wAZE","../../context/PresenceContext.mjs":"7DzvZ","../../render/utils/resolve-variants.mjs":"8MzkH","../../utils/use-constant.mjs":"gAAJI","../../value/utils/resolve-motion-value.mjs":"2waBq","../../context/MotionContext/index.mjs":"3aBYo","../../render/utils/is-controlling-variants.mjs":"i9jG9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8MzkH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveVariantFromProps", ()=>resolveVariantFromProps);
function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {
    /**
     * If the variant definition is a function, resolve.
     */ if (typeof definition === "function") definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);
    /**
     * If the variant definition is a variant label, or
     * the function returned a variant label, resolve.
     */ if (typeof definition === "string") definition = props.variants && props.variants[definition];
    /**
     * At this point we've resolved both functions and variant labels,
     * but the resolved variant label might itself have been a function.
     * If so, resolve. This can only have returned a valid target object.
     */ if (typeof definition === "function") definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);
    return definition;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gAAJI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useConstant", ()=>useConstant);
var _react = require("react");
/**
 * Creates a constant value over the lifecycle of a component.
 *
 * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer
 * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`
 * you can ensure that initialisers don't execute twice or more.
 */ function useConstant(init) {
    const ref = (0, _react.useRef)(null);
    if (ref.current === null) ref.current = init();
    return ref.current;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2waBq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveMotionValue", ()=>resolveMotionValue);
var _resolveValueMjs = require("../../utils/resolve-value.mjs");
var _isMotionValueMjs = require("./is-motion-value.mjs");
/**
 * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself
 *
 * TODO: Remove and move to library
 */ function resolveMotionValue(value) {
    const unwrappedValue = (0, _isMotionValueMjs.isMotionValue)(value) ? value.get() : value;
    return (0, _resolveValueMjs.isCustomValue)(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

},{"../../utils/resolve-value.mjs":"cPnbP","./is-motion-value.mjs":"94AYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cPnbP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCustomValue", ()=>isCustomValue);
parcelHelpers.export(exports, "resolveFinalValueInKeyframes", ()=>resolveFinalValueInKeyframes);
var _isKeyframesTargetMjs = require("../animation/utils/is-keyframes-target.mjs");
const isCustomValue = (v)=>{
    return Boolean(v && typeof v === "object" && v.mix && v.toValue);
};
const resolveFinalValueInKeyframes = (v)=>{
    // TODO maybe throw if v.length - 1 is placeholder token?
    return (0, _isKeyframesTargetMjs.isKeyframesTarget)(v) ? v[v.length - 1] || 0 : v;
};

},{"../animation/utils/is-keyframes-target.mjs":"sPTPk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"sPTPk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isKeyframesTarget", ()=>isKeyframesTarget);
const isKeyframesTarget = (v)=>{
    return Array.isArray(v);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3xPo8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cancelFrame", ()=>cancelFrame);
parcelHelpers.export(exports, "frame", ()=>frame);
parcelHelpers.export(exports, "frameData", ()=>frameData);
parcelHelpers.export(exports, "steps", ()=>steps);
var _noopMjs = require("../utils/noop.mjs");
var _batcherMjs = require("./batcher.mjs");
const { schedule: frame, cancel: cancelFrame, state: frameData, steps } = (0, _batcherMjs.createRenderBatcher)(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : (0, _noopMjs.noop), true);

},{"../utils/noop.mjs":"67SDH","./batcher.mjs":"3fYwv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"67SDH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "noop", ()=>noop);
const noop = (any)=>any;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3fYwv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRenderBatcher", ()=>createRenderBatcher);
parcelHelpers.export(exports, "stepsOrder", ()=>stepsOrder);
var _renderStepMjs = require("./render-step.mjs");
const stepsOrder = [
    "prepare",
    "read",
    "update",
    "preRender",
    "render",
    "postRender"
];
const maxElapsed = 40;
function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
    let runNextFrame = false;
    let useDefaultElapsed = true;
    const state = {
        delta: 0,
        timestamp: 0,
        isProcessing: false
    };
    const steps = stepsOrder.reduce((acc, key)=>{
        acc[key] = (0, _renderStepMjs.createRenderStep)(()=>runNextFrame = true);
        return acc;
    }, {});
    const processStep = (stepId)=>steps[stepId].process(state);
    const processBatch = ()=>{
        const timestamp = performance.now();
        runNextFrame = false;
        state.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);
        state.timestamp = timestamp;
        state.isProcessing = true;
        stepsOrder.forEach(processStep);
        state.isProcessing = false;
        if (runNextFrame && allowKeepAlive) {
            useDefaultElapsed = false;
            scheduleNextBatch(processBatch);
        }
    };
    const wake = ()=>{
        runNextFrame = true;
        useDefaultElapsed = true;
        if (!state.isProcessing) scheduleNextBatch(processBatch);
    };
    const schedule = stepsOrder.reduce((acc, key)=>{
        const step = steps[key];
        acc[key] = (process, keepAlive = false, immediate = false)=>{
            if (!runNextFrame) wake();
            return step.schedule(process, keepAlive, immediate);
        };
        return acc;
    }, {});
    const cancel = (process)=>stepsOrder.forEach((key)=>steps[key].cancel(process));
    return {
        schedule,
        cancel,
        state,
        steps
    };
}

},{"./render-step.mjs":"61ioC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61ioC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRenderStep", ()=>createRenderStep);
class Queue {
    constructor(){
        this.order = [];
        this.scheduled = new Set();
    }
    add(process) {
        if (!this.scheduled.has(process)) {
            this.scheduled.add(process);
            this.order.push(process);
            return true;
        }
    }
    remove(process) {
        const index = this.order.indexOf(process);
        if (index !== -1) {
            this.order.splice(index, 1);
            this.scheduled.delete(process);
        }
    }
    clear() {
        this.order.length = 0;
        this.scheduled.clear();
    }
}
function createRenderStep(runNextFrame) {
    /**
     * We create and reuse two queues, one to queue jobs for the current frame
     * and one for the next. We reuse to avoid triggering GC after x frames.
     */ let thisFrame = new Queue();
    let nextFrame = new Queue();
    let numToRun = 0;
    /**
     * Track whether we're currently processing jobs in this step. This way
     * we can decide whether to schedule new jobs for this frame or next.
     */ let isProcessing = false;
    let flushNextFrame = false;
    /**
     * A set of processes which were marked keepAlive when scheduled.
     */ const toKeepAlive = new WeakSet();
    const step = {
        /**
         * Schedule a process to run on the next frame.
         */ schedule: (callback, keepAlive = false, immediate = false)=>{
            const addToCurrentFrame = immediate && isProcessing;
            const queue = addToCurrentFrame ? thisFrame : nextFrame;
            if (keepAlive) toKeepAlive.add(callback);
            if (queue.add(callback) && addToCurrentFrame && isProcessing) // If we're adding it to the currently running queue, update its measured size
            numToRun = thisFrame.order.length;
            return callback;
        },
        /**
         * Cancel the provided callback from running on the next frame.
         */ cancel: (callback)=>{
            nextFrame.remove(callback);
            toKeepAlive.delete(callback);
        },
        /**
         * Execute all schedule callbacks.
         */ process: (frameData)=>{
            /**
             * If we're already processing we've probably been triggered by a flushSync
             * inside an existing process. Instead of executing, mark flushNextFrame
             * as true and ensure we flush the following frame at the end of this one.
             */ if (isProcessing) {
                flushNextFrame = true;
                return;
            }
            isProcessing = true;
            [thisFrame, nextFrame] = [
                nextFrame,
                thisFrame
            ];
            // Clear the next frame queue
            nextFrame.clear();
            // Execute this frame
            numToRun = thisFrame.order.length;
            if (numToRun) for(let i = 0; i < numToRun; i++){
                const callback = thisFrame.order[i];
                callback(frameData);
                if (toKeepAlive.has(callback)) {
                    step.schedule(callback);
                    runNextFrame();
                }
            }
            isProcessing = false;
            if (flushNextFrame) {
                flushNextFrame = false;
                step.process(frameData);
            }
        }
    };
    return step;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bqr1f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "htmlMotionConfig", ()=>htmlMotionConfig);
var _useVisualStateMjs = require("../../motion/utils/use-visual-state.mjs");
var _scrapeMotionValuesMjs = require("./utils/scrape-motion-values.mjs");
var _createRenderStateMjs = require("./utils/create-render-state.mjs");
const htmlMotionConfig = {
    useVisualState: (0, _useVisualStateMjs.makeUseVisualState)({
        scrapeMotionValuesFromProps: (0, _scrapeMotionValuesMjs.scrapeMotionValuesFromProps),
        createRenderState: (0, _createRenderStateMjs.createHtmlRenderState)
    })
};

},{"../../motion/utils/use-visual-state.mjs":"bYE4p","./utils/scrape-motion-values.mjs":"fCzyn","./utils/create-render-state.mjs":"fH0Wg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2ALs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gestureAnimations", ()=>gestureAnimations);
var _hoverMjs = require("../../gestures/hover.mjs");
var _focusMjs = require("../../gestures/focus.mjs");
var _pressMjs = require("../../gestures/press.mjs");
var _indexMjs = require("./viewport/index.mjs");
const gestureAnimations = {
    inView: {
        Feature: (0, _indexMjs.InViewFeature)
    },
    tap: {
        Feature: (0, _pressMjs.PressGesture)
    },
    focus: {
        Feature: (0, _focusMjs.FocusGesture)
    },
    hover: {
        Feature: (0, _hoverMjs.HoverGesture)
    }
};

},{"../../gestures/hover.mjs":"45i9b","../../gestures/focus.mjs":"lF48W","../../gestures/press.mjs":"f9WQy","./viewport/index.mjs":"lrrdM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45i9b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HoverGesture", ()=>HoverGesture);
var _addPointerEventMjs = require("../events/add-pointer-event.mjs");
var _pipeMjs = require("../utils/pipe.mjs");
var _lockMjs = require("./drag/utils/lock.mjs");
var _featureMjs = require("../motion/features/Feature.mjs");
var _frameMjs = require("../frameloop/frame.mjs");
function addHoverEvent(node, isActive) {
    const eventName = "pointer" + (isActive ? "enter" : "leave");
    const callbackName = "onHover" + (isActive ? "Start" : "End");
    const handleEvent = (event, info)=>{
        if (event.type === "touch" || (0, _lockMjs.isDragActive)()) return;
        const props = node.getProps();
        if (node.animationState && props.whileHover) node.animationState.setActive("whileHover", isActive);
        if (props[callbackName]) (0, _frameMjs.frame).update(()=>props[callbackName](event, info));
    };
    return (0, _addPointerEventMjs.addPointerEvent)(node.current, eventName, handleEvent, {
        passive: !node.getProps()[callbackName]
    });
}
class HoverGesture extends (0, _featureMjs.Feature) {
    mount() {
        this.unmount = (0, _pipeMjs.pipe)(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
    }
    unmount() {}
}

},{"../events/add-pointer-event.mjs":"80iJi","../utils/pipe.mjs":"jGo2b","./drag/utils/lock.mjs":"81Jq8","../motion/features/Feature.mjs":"lI7Ue","../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80iJi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addPointerEvent", ()=>addPointerEvent);
var _addDomEventMjs = require("./add-dom-event.mjs");
var _eventInfoMjs = require("./event-info.mjs");
function addPointerEvent(target, eventName, handler, options) {
    return (0, _addDomEventMjs.addDomEvent)(target, eventName, (0, _eventInfoMjs.addPointerInfo)(handler), options);
}

},{"./add-dom-event.mjs":"jAgCf","./event-info.mjs":"4Spbd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jAgCf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addDomEvent", ()=>addDomEvent);
function addDomEvent(target, eventName, handler, options = {
    passive: true
}) {
    target.addEventListener(eventName, handler, options);
    return ()=>target.removeEventListener(eventName, handler);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Spbd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addPointerInfo", ()=>addPointerInfo);
parcelHelpers.export(exports, "extractEventInfo", ()=>extractEventInfo);
var _isPrimaryPointerMjs = require("./utils/is-primary-pointer.mjs");
function extractEventInfo(event, pointType = "page") {
    return {
        point: {
            x: event[pointType + "X"],
            y: event[pointType + "Y"]
        }
    };
}
const addPointerInfo = (handler)=>{
    return (event)=>(0, _isPrimaryPointerMjs.isPrimaryPointer)(event) && handler(event, extractEventInfo(event));
};

},{"./utils/is-primary-pointer.mjs":"lSBSo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lSBSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPrimaryPointer", ()=>isPrimaryPointer);
const isPrimaryPointer = (event)=>{
    if (event.pointerType === "mouse") return typeof event.button !== "number" || event.button <= 0;
    else /**
         * isPrimary is true for all mice buttons, whereas every touch point
         * is regarded as its own input. So subsequent concurrent touch points
         * will be false.
         *
         * Specifically match against false here as incomplete versions of
         * PointerEvents in very old browser might have it set as undefined.
         */ return event.isPrimary !== false;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jGo2b":[function(require,module,exports) {
/**
 * Pipe
 * Compose other transformers to run linearily
 * pipe(min(20), max(40))
 * @param  {...functions} transformers
 * @return {function}
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pipe", ()=>pipe);
const combineFunctions = (a, b)=>(v)=>b(a(v));
const pipe = (...transformers)=>transformers.reduce(combineFunctions);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"81Jq8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLock", ()=>createLock);
parcelHelpers.export(exports, "getGlobalLock", ()=>getGlobalLock);
parcelHelpers.export(exports, "isDragActive", ()=>isDragActive);
function createLock(name) {
    let lock = null;
    return ()=>{
        const openLock = ()=>{
            lock = null;
        };
        if (lock === null) {
            lock = name;
            return openLock;
        }
        return false;
    };
}
const globalHorizontalLock = createLock("dragHorizontal");
const globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag) {
    let lock = false;
    if (drag === "y") lock = globalVerticalLock();
    else if (drag === "x") lock = globalHorizontalLock();
    else {
        const openHorizontal = globalHorizontalLock();
        const openVertical = globalVerticalLock();
        if (openHorizontal && openVertical) lock = ()=>{
            openHorizontal();
            openVertical();
        };
        else {
            // Release the locks because we don't use them
            if (openHorizontal) openHorizontal();
            if (openVertical) openVertical();
        }
    }
    return lock;
}
function isDragActive() {
    // Check the gesture lock - if we get it, it means no drag gesture is active
    // and we can safely fire the tap gesture.
    const openGestureLock = getGlobalLock(true);
    if (!openGestureLock) return true;
    openGestureLock();
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lI7Ue":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Feature", ()=>Feature);
class Feature {
    constructor(node){
        this.isMounted = false;
        this.node = node;
    }
    update() {}
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lF48W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FocusGesture", ()=>FocusGesture);
var _addDomEventMjs = require("../events/add-dom-event.mjs");
var _featureMjs = require("../motion/features/Feature.mjs");
var _pipeMjs = require("../utils/pipe.mjs");
class FocusGesture extends (0, _featureMjs.Feature) {
    constructor(){
        super(...arguments);
        this.isActive = false;
    }
    onFocus() {
        let isFocusVisible = false;
        /**
         * If this element doesn't match focus-visible then don't
         * apply whileHover. But, if matches throws that focus-visible
         * is not a valid selector then in that browser outline styles will be applied
         * to the element by default and we want to match that behaviour with whileFocus.
         */ try {
            isFocusVisible = this.node.current.matches(":focus-visible");
        } catch (e) {
            isFocusVisible = true;
        }
        if (!isFocusVisible || !this.node.animationState) return;
        this.node.animationState.setActive("whileFocus", true);
        this.isActive = true;
    }
    onBlur() {
        if (!this.isActive || !this.node.animationState) return;
        this.node.animationState.setActive("whileFocus", false);
        this.isActive = false;
    }
    mount() {
        this.unmount = (0, _pipeMjs.pipe)((0, _addDomEventMjs.addDomEvent)(this.node.current, "focus", ()=>this.onFocus()), (0, _addDomEventMjs.addDomEvent)(this.node.current, "blur", ()=>this.onBlur()));
    }
    unmount() {}
}

},{"../events/add-dom-event.mjs":"jAgCf","../motion/features/Feature.mjs":"lI7Ue","../utils/pipe.mjs":"jGo2b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f9WQy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PressGesture", ()=>PressGesture);
var _eventInfoMjs = require("../events/event-info.mjs");
var _addDomEventMjs = require("../events/add-dom-event.mjs");
var _addPointerEventMjs = require("../events/add-pointer-event.mjs");
var _featureMjs = require("../motion/features/Feature.mjs");
var _pipeMjs = require("../utils/pipe.mjs");
var _lockMjs = require("./drag/utils/lock.mjs");
var _isNodeOrChildMjs = require("./utils/is-node-or-child.mjs");
var _noopMjs = require("../utils/noop.mjs");
var _frameMjs = require("../frameloop/frame.mjs");
function fireSyntheticPointerEvent(name, handler) {
    if (!handler) return;
    const syntheticPointerEvent = new PointerEvent("pointer" + name);
    handler(syntheticPointerEvent, (0, _eventInfoMjs.extractEventInfo)(syntheticPointerEvent));
}
class PressGesture extends (0, _featureMjs.Feature) {
    constructor(){
        super(...arguments);
        this.removeStartListeners = (0, _noopMjs.noop);
        this.removeEndListeners = (0, _noopMjs.noop);
        this.removeAccessibleListeners = (0, _noopMjs.noop);
        this.startPointerPress = (startEvent, startInfo)=>{
            this.removeEndListeners();
            if (this.isPressing) return;
            const props = this.node.getProps();
            const endPointerPress = (endEvent, endInfo)=>{
                if (!this.checkPressEnd()) return;
                const { onTap, onTapCancel } = this.node.getProps();
                (0, _frameMjs.frame).update(()=>{
                    /**
                     * We only count this as a tap gesture if the event.target is the same
                     * as, or a child of, this component's element
                     */ !(0, _isNodeOrChildMjs.isNodeOrChild)(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);
                });
            };
            const removePointerUpListener = (0, _addPointerEventMjs.addPointerEvent)(window, "pointerup", endPointerPress, {
                passive: !(props.onTap || props["onPointerUp"])
            });
            const removePointerCancelListener = (0, _addPointerEventMjs.addPointerEvent)(window, "pointercancel", (cancelEvent, cancelInfo)=>this.cancelPress(cancelEvent, cancelInfo), {
                passive: !(props.onTapCancel || props["onPointerCancel"])
            });
            this.removeEndListeners = (0, _pipeMjs.pipe)(removePointerUpListener, removePointerCancelListener);
            this.startPress(startEvent, startInfo);
        };
        this.startAccessiblePress = ()=>{
            const handleKeydown = (keydownEvent)=>{
                if (keydownEvent.key !== "Enter" || this.isPressing) return;
                const handleKeyup = (keyupEvent)=>{
                    if (keyupEvent.key !== "Enter" || !this.checkPressEnd()) return;
                    fireSyntheticPointerEvent("up", (event, info)=>{
                        const { onTap } = this.node.getProps();
                        if (onTap) (0, _frameMjs.frame).update(()=>onTap(event, info));
                    });
                };
                this.removeEndListeners();
                this.removeEndListeners = (0, _addDomEventMjs.addDomEvent)(this.node.current, "keyup", handleKeyup);
                fireSyntheticPointerEvent("down", (event, info)=>{
                    this.startPress(event, info);
                });
            };
            const removeKeydownListener = (0, _addDomEventMjs.addDomEvent)(this.node.current, "keydown", handleKeydown);
            const handleBlur = ()=>{
                if (!this.isPressing) return;
                fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo)=>this.cancelPress(cancelEvent, cancelInfo));
            };
            const removeBlurListener = (0, _addDomEventMjs.addDomEvent)(this.node.current, "blur", handleBlur);
            this.removeAccessibleListeners = (0, _pipeMjs.pipe)(removeKeydownListener, removeBlurListener);
        };
    }
    startPress(event, info) {
        this.isPressing = true;
        const { onTapStart, whileTap } = this.node.getProps();
        /**
         * Ensure we trigger animations before firing event callback
         */ if (whileTap && this.node.animationState) this.node.animationState.setActive("whileTap", true);
        if (onTapStart) (0, _frameMjs.frame).update(()=>onTapStart(event, info));
    }
    checkPressEnd() {
        this.removeEndListeners();
        this.isPressing = false;
        const props = this.node.getProps();
        if (props.whileTap && this.node.animationState) this.node.animationState.setActive("whileTap", false);
        return !(0, _lockMjs.isDragActive)();
    }
    cancelPress(event, info) {
        if (!this.checkPressEnd()) return;
        const { onTapCancel } = this.node.getProps();
        if (onTapCancel) (0, _frameMjs.frame).update(()=>onTapCancel(event, info));
    }
    mount() {
        const props = this.node.getProps();
        const removePointerListener = (0, _addPointerEventMjs.addPointerEvent)(this.node.current, "pointerdown", this.startPointerPress, {
            passive: !(props.onTapStart || props["onPointerStart"])
        });
        const removeFocusListener = (0, _addDomEventMjs.addDomEvent)(this.node.current, "focus", this.startAccessiblePress);
        this.removeStartListeners = (0, _pipeMjs.pipe)(removePointerListener, removeFocusListener);
    }
    unmount() {
        this.removeStartListeners();
        this.removeEndListeners();
        this.removeAccessibleListeners();
    }
}

},{"../events/event-info.mjs":"4Spbd","../events/add-dom-event.mjs":"jAgCf","../events/add-pointer-event.mjs":"80iJi","../motion/features/Feature.mjs":"lI7Ue","../utils/pipe.mjs":"jGo2b","./drag/utils/lock.mjs":"81Jq8","./utils/is-node-or-child.mjs":"he1j7","../utils/noop.mjs":"67SDH","../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"he1j7":[function(require,module,exports) {
/**
 * Recursively traverse up the tree to check whether the provided child node
 * is the parent or a descendant of it.
 *
 * @param parent - Element to find
 * @param child - Element to test against parent
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNodeOrChild", ()=>isNodeOrChild);
const isNodeOrChild = (parent, child)=>{
    if (!child) return false;
    else if (parent === child) return true;
    else return isNodeOrChild(parent, child.parentElement);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lrrdM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InViewFeature", ()=>InViewFeature);
var _featureMjs = require("../Feature.mjs");
var _observersMjs = require("./observers.mjs");
const thresholdNames = {
    some: 0,
    all: 1
};
class InViewFeature extends (0, _featureMjs.Feature) {
    constructor(){
        super(...arguments);
        this.hasEnteredView = false;
        this.isInView = false;
    }
    startObserver() {
        this.unmount();
        const { viewport = {} } = this.node.getProps();
        const { root, margin: rootMargin, amount = "some", once } = viewport;
        const options = {
            root: root ? root.current : undefined,
            rootMargin,
            threshold: typeof amount === "number" ? amount : thresholdNames[amount]
        };
        const onIntersectionUpdate = (entry)=>{
            const { isIntersecting } = entry;
            /**
             * If there's been no change in the viewport state, early return.
             */ if (this.isInView === isIntersecting) return;
            this.isInView = isIntersecting;
            /**
             * Handle hasEnteredView. If this is only meant to run once, and
             * element isn't visible, early return. Otherwise set hasEnteredView to true.
             */ if (once && !isIntersecting && this.hasEnteredView) return;
            else if (isIntersecting) this.hasEnteredView = true;
            if (this.node.animationState) this.node.animationState.setActive("whileInView", isIntersecting);
            /**
             * Use the latest committed props rather than the ones in scope
             * when this observer is created
             */ const { onViewportEnter, onViewportLeave } = this.node.getProps();
            const callback = isIntersecting ? onViewportEnter : onViewportLeave;
            callback && callback(entry);
        };
        return (0, _observersMjs.observeIntersection)(this.node.current, options, onIntersectionUpdate);
    }
    mount() {
        this.startObserver();
    }
    update() {
        if (typeof IntersectionObserver === "undefined") return;
        const { props, prevProps } = this.node;
        const hasOptionsChanged = [
            "amount",
            "margin",
            "root"
        ].some(hasViewportOptionChanged(props, prevProps));
        if (hasOptionsChanged) this.startObserver();
    }
    unmount() {}
}
function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
    return (name)=>viewport[name] !== prevViewport[name];
}

},{"../Feature.mjs":"lI7Ue","./observers.mjs":"esyQ3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"esyQ3":[function(require,module,exports) {
/**
 * Map an IntersectionHandler callback to an element. We only ever make one handler for one
 * element, so even though these handlers might all be triggered by different
 * observers, we can keep them in the same map.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "observeIntersection", ()=>observeIntersection);
const observerCallbacks = new WeakMap();
/**
 * Multiple observers can be created for multiple element/document roots. Each with
 * different settings. So here we store dictionaries of observers to each root,
 * using serialised settings (threshold/margin) as lookup keys.
 */ const observers = new WeakMap();
const fireObserverCallback = (entry)=>{
    const callback = observerCallbacks.get(entry.target);
    callback && callback(entry);
};
const fireAllObserverCallbacks = (entries)=>{
    entries.forEach(fireObserverCallback);
};
function initIntersectionObserver({ root, ...options }) {
    const lookupRoot = root || document;
    /**
     * If we don't have an observer lookup map for this root, create one.
     */ if (!observers.has(lookupRoot)) observers.set(lookupRoot, {});
    const rootObservers = observers.get(lookupRoot);
    const key = JSON.stringify(options);
    /**
     * If we don't have an observer for this combination of root and settings,
     * create one.
     */ if (!rootObservers[key]) rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, {
        root,
        ...options
    });
    return rootObservers[key];
}
function observeIntersection(element, options, callback) {
    const rootInteresectionObserver = initIntersectionObserver(options);
    observerCallbacks.set(element, callback);
    rootInteresectionObserver.observe(element);
    return ()=>{
        observerCallbacks.delete(element);
        rootInteresectionObserver.unobserve(element);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c1lwU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animations", ()=>animations);
var _indexMjs = require("./animation/index.mjs");
var _exitMjs = require("./animation/exit.mjs");
const animations = {
    animation: {
        Feature: (0, _indexMjs.AnimationFeature)
    },
    exit: {
        Feature: (0, _exitMjs.ExitAnimationFeature)
    }
};

},{"./animation/index.mjs":"2F0Qk","./animation/exit.mjs":"inv8k","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2F0Qk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AnimationFeature", ()=>AnimationFeature);
var _isAnimationControlsMjs = require("../../../animation/utils/is-animation-controls.mjs");
var _animationStateMjs = require("../../../render/utils/animation-state.mjs");
var _featureMjs = require("../Feature.mjs");
class AnimationFeature extends (0, _featureMjs.Feature) {
    /**
     * We dynamically generate the AnimationState manager as it contains a reference
     * to the underlying animation library. We only want to load that if we load this,
     * so people can optionally code split it out using the `m` component.
     */ constructor(node){
        super(node);
        node.animationState || (node.animationState = (0, _animationStateMjs.createAnimationState)(node));
    }
    updateAnimationControlsSubscription() {
        const { animate } = this.node.getProps();
        this.unmount();
        if ((0, _isAnimationControlsMjs.isAnimationControls)(animate)) this.unmount = animate.subscribe(this.node);
    }
    /**
     * Subscribe any provided AnimationControls to the component's VisualElement
     */ mount() {
        this.updateAnimationControlsSubscription();
    }
    update() {
        const { animate } = this.node.getProps();
        const { animate: prevAnimate } = this.node.prevProps || {};
        if (animate !== prevAnimate) this.updateAnimationControlsSubscription();
    }
    unmount() {}
}

},{"../../../animation/utils/is-animation-controls.mjs":"3wAZE","../../../render/utils/animation-state.mjs":"f4EjM","../Feature.mjs":"lI7Ue","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f4EjM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkVariantsDidChange", ()=>checkVariantsDidChange);
parcelHelpers.export(exports, "createAnimationState", ()=>createAnimationState);
var _isAnimationControlsMjs = require("../../animation/utils/is-animation-controls.mjs");
var _isKeyframesTargetMjs = require("../../animation/utils/is-keyframes-target.mjs");
var _shallowCompareMjs = require("../../utils/shallow-compare.mjs");
var _isVariantLabelMjs = require("./is-variant-label.mjs");
var _resolveDynamicVariantsMjs = require("./resolve-dynamic-variants.mjs");
var _variantPropsMjs = require("./variant-props.mjs");
var _visualElementMjs = require("../../animation/interfaces/visual-element.mjs");
const reversePriorityOrder = [
    ...(0, _variantPropsMjs.variantPriorityOrder)
].reverse();
const numAnimationTypes = (0, _variantPropsMjs.variantPriorityOrder).length;
function animateList(visualElement) {
    return (animations)=>Promise.all(animations.map(({ animation, options })=>(0, _visualElementMjs.animateVisualElement)(visualElement, animation, options)));
}
function createAnimationState(visualElement) {
    let animate = animateList(visualElement);
    const state = createState();
    let isInitialRender = true;
    /**
     * This function will be used to reduce the animation definitions for
     * each active animation type into an object of resolved values for it.
     */ const buildResolvedTypeValues = (acc, definition)=>{
        const resolved = (0, _resolveDynamicVariantsMjs.resolveVariant)(visualElement, definition);
        if (resolved) {
            const { transition, transitionEnd, ...target } = resolved;
            acc = {
                ...acc,
                ...target,
                ...transitionEnd
            };
        }
        return acc;
    };
    /**
     * This just allows us to inject mocked animation functions
     * @internal
     */ function setAnimateFunction(makeAnimator) {
        animate = makeAnimator(visualElement);
    }
    /**
     * When we receive new props, we need to:
     * 1. Create a list of protected keys for each type. This is a directory of
     *    value keys that are currently being "handled" by types of a higher priority
     *    so that whenever an animation is played of a given type, these values are
     *    protected from being animated.
     * 2. Determine if an animation type needs animating.
     * 3. Determine if any values have been removed from a type and figure out
     *    what to animate those to.
     */ function animateChanges(options, changedActiveType) {
        const props = visualElement.getProps();
        const context = visualElement.getVariantContext(true) || {};
        /**
         * A list of animations that we'll build into as we iterate through the animation
         * types. This will get executed at the end of the function.
         */ const animations = [];
        /**
         * Keep track of which values have been removed. Then, as we hit lower priority
         * animation types, we can check if they contain removed values and animate to that.
         */ const removedKeys = new Set();
        /**
         * A dictionary of all encountered keys. This is an object to let us build into and
         * copy it without iteration. Each time we hit an animation type we set its protected
         * keys - the keys its not allowed to animate - to the latest version of this object.
         */ let encounteredKeys = {};
        /**
         * If a variant has been removed at a given index, and this component is controlling
         * variant animations, we want to ensure lower-priority variants are forced to animate.
         */ let removedVariantIndex = Infinity;
        /**
         * Iterate through all animation types in reverse priority order. For each, we want to
         * detect which values it's handling and whether or not they've changed (and therefore
         * need to be animated). If any values have been removed, we want to detect those in
         * lower priority props and flag for animation.
         */ for(let i = 0; i < numAnimationTypes; i++){
            const type = reversePriorityOrder[i];
            const typeState = state[type];
            const prop = props[type] !== undefined ? props[type] : context[type];
            const propIsVariant = (0, _isVariantLabelMjs.isVariantLabel)(prop);
            /**
             * If this type has *just* changed isActive status, set activeDelta
             * to that status. Otherwise set to null.
             */ const activeDelta = type === changedActiveType ? typeState.isActive : null;
            if (activeDelta === false) removedVariantIndex = i;
            /**
             * If this prop is an inherited variant, rather than been set directly on the
             * component itself, we want to make sure we allow the parent to trigger animations.
             *
             * TODO: Can probably change this to a !isControllingVariants check
             */ let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
            /**
             *
             */ if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) isInherited = false;
            /**
             * Set all encountered keys so far as the protected keys for this type. This will
             * be any key that has been animated or otherwise handled by active, higher-priortiy types.
             */ typeState.protectedKeys = {
                ...encounteredKeys
            };
            // Check if we can skip analysing this prop early
            if (// If it isn't active and hasn't *just* been set as inactive
            !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
            !prop && !typeState.prevProp || // Or if the prop doesn't define an animation
            (0, _isAnimationControlsMjs.isAnimationControls)(prop) || typeof prop === "boolean") continue;
            /**
             * As we go look through the values defined on this type, if we detect
             * a changed value or a value that was removed in a higher priority, we set
             * this to true and add this prop to the animation list.
             */ const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
            let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
            type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
            i > removedVariantIndex && propIsVariant;
            /**
             * As animations can be set as variant lists, variants or target objects, we
             * coerce everything to an array if it isn't one already
             */ const definitionList = Array.isArray(prop) ? prop : [
                prop
            ];
            /**
             * Build an object of all the resolved values. We'll use this in the subsequent
             * animateChanges calls to determine whether a value has changed.
             */ let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
            if (activeDelta === false) resolvedValues = {};
            /**
             * Now we need to loop through all the keys in the prev prop and this prop,
             * and decide:
             * 1. If the value has changed, and needs animating
             * 2. If it has been removed, and needs adding to the removedKeys set
             * 3. If it has been removed in a higher priority type and needs animating
             * 4. If it hasn't been removed in a higher priority but hasn't changed, and
             *    needs adding to the type's protectedKeys list.
             */ const { prevResolvedValues = {} } = typeState;
            const allKeys = {
                ...prevResolvedValues,
                ...resolvedValues
            };
            const markToAnimate = (key)=>{
                shouldAnimateType = true;
                removedKeys.delete(key);
                typeState.needsAnimating[key] = true;
            };
            for(const key in allKeys){
                const next = resolvedValues[key];
                const prev = prevResolvedValues[key];
                // If we've already handled this we can just skip ahead
                if (encounteredKeys.hasOwnProperty(key)) continue;
                /**
                 * If the value has changed, we probably want to animate it.
                 */ if (next !== prev) {
                    /**
                     * If both values are keyframes, we need to shallow compare them to
                     * detect whether any value has changed. If it has, we animate it.
                     */ if ((0, _isKeyframesTargetMjs.isKeyframesTarget)(next) && (0, _isKeyframesTargetMjs.isKeyframesTarget)(prev)) {
                        if (!(0, _shallowCompareMjs.shallowCompare)(next, prev) || variantDidChange) markToAnimate(key);
                        else /**
                             * If it hasn't changed, we want to ensure it doesn't animate by
                             * adding it to the list of protected keys.
                             */ typeState.protectedKeys[key] = true;
                    } else if (next !== undefined) // If next is defined and doesn't equal prev, it needs animating
                    markToAnimate(key);
                    else // If it's undefined, it's been removed.
                    removedKeys.add(key);
                } else if (next !== undefined && removedKeys.has(key)) /**
                     * If next hasn't changed and it isn't undefined, we want to check if it's
                     * been removed by a higher priority
                     */ markToAnimate(key);
                else /**
                     * If it hasn't changed, we add it to the list of protected values
                     * to ensure it doesn't get animated.
                     */ typeState.protectedKeys[key] = true;
            }
            /**
             * Update the typeState so next time animateChanges is called we can compare the
             * latest prop and resolvedValues to these.
             */ typeState.prevProp = prop;
            typeState.prevResolvedValues = resolvedValues;
            /**
             *
             */ if (typeState.isActive) encounteredKeys = {
                ...encounteredKeys,
                ...resolvedValues
            };
            if (isInitialRender && visualElement.blockInitialAnimation) shouldAnimateType = false;
            /**
             * If this is an inherited prop we want to hard-block animations
             * TODO: Test as this should probably still handle animations triggered
             * by removed values?
             */ if (shouldAnimateType && !isInherited) animations.push(...definitionList.map((animation)=>({
                    animation: animation,
                    options: {
                        type,
                        ...options
                    }
                })));
        }
        /**
         * If there are some removed value that haven't been dealt with,
         * we need to create a new animation that falls back either to the value
         * defined in the style prop, or the last read value.
         */ if (removedKeys.size) {
            const fallbackAnimation = {};
            removedKeys.forEach((key)=>{
                const fallbackTarget = visualElement.getBaseTarget(key);
                if (fallbackTarget !== undefined) fallbackAnimation[key] = fallbackTarget;
            });
            animations.push({
                animation: fallbackAnimation
            });
        }
        let shouldAnimate = Boolean(animations.length);
        if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) shouldAnimate = false;
        isInitialRender = false;
        return shouldAnimate ? animate(animations) : Promise.resolve();
    }
    /**
     * Change whether a certain animation type is active.
     */ function setActive(type, isActive, options) {
        var _a;
        // If the active state hasn't changed, we can safely do nothing here
        if (state[type].isActive === isActive) return Promise.resolve();
        // Propagate active change to children
        (_a = visualElement.variantChildren) === null || _a === void 0 || _a.forEach((child)=>{
            var _a;
            return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);
        });
        state[type].isActive = isActive;
        const animations = animateChanges(options, type);
        for(const key in state)state[key].protectedKeys = {};
        return animations;
    }
    return {
        animateChanges,
        setActive,
        setAnimateFunction,
        getState: ()=>state
    };
}
function checkVariantsDidChange(prev, next) {
    if (typeof next === "string") return next !== prev;
    else if (Array.isArray(next)) return !(0, _shallowCompareMjs.shallowCompare)(next, prev);
    return false;
}
function createTypeState(isActive = false) {
    return {
        isActive,
        protectedKeys: {},
        needsAnimating: {},
        prevResolvedValues: {}
    };
}
function createState() {
    return {
        animate: createTypeState(true),
        whileInView: createTypeState(),
        whileHover: createTypeState(),
        whileTap: createTypeState(),
        whileDrag: createTypeState(),
        whileFocus: createTypeState(),
        exit: createTypeState()
    };
}

},{"../../animation/utils/is-animation-controls.mjs":"3wAZE","../../animation/utils/is-keyframes-target.mjs":"sPTPk","../../utils/shallow-compare.mjs":"7y29z","./is-variant-label.mjs":"erxli","./resolve-dynamic-variants.mjs":"dSXph","./variant-props.mjs":"huf2R","../../animation/interfaces/visual-element.mjs":"e0aFv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7y29z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shallowCompare", ()=>shallowCompare);
function shallowCompare(next, prev) {
    if (!Array.isArray(prev)) return false;
    const prevLength = prev.length;
    if (prevLength !== next.length) return false;
    for(let i = 0; i < prevLength; i++){
        if (prev[i] !== next[i]) return false;
    }
    return true;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dSXph":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveVariant", ()=>resolveVariant);
var _resolveVariantsMjs = require("./resolve-variants.mjs");
/**
 * Creates an object containing the latest state of every MotionValue on a VisualElement
 */ function getCurrent(visualElement) {
    const current = {};
    visualElement.values.forEach((value, key)=>current[key] = value.get());
    return current;
}
/**
 * Creates an object containing the latest velocity of every MotionValue on a VisualElement
 */ function getVelocity(visualElement) {
    const velocity = {};
    visualElement.values.forEach((value, key)=>velocity[key] = value.getVelocity());
    return velocity;
}
function resolveVariant(visualElement, definition, custom) {
    const props = visualElement.getProps();
    return (0, _resolveVariantsMjs.resolveVariantFromProps)(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));
}

},{"./resolve-variants.mjs":"8MzkH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e0aFv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animateVisualElement", ()=>animateVisualElement);
var _resolveDynamicVariantsMjs = require("../../render/utils/resolve-dynamic-variants.mjs");
var _visualElementTargetMjs = require("./visual-element-target.mjs");
var _visualElementVariantMjs = require("./visual-element-variant.mjs");
function animateVisualElement(visualElement, definition, options = {}) {
    visualElement.notify("AnimationStart", definition);
    let animation;
    if (Array.isArray(definition)) {
        const animations = definition.map((variant)=>(0, _visualElementVariantMjs.animateVariant)(visualElement, variant, options));
        animation = Promise.all(animations);
    } else if (typeof definition === "string") animation = (0, _visualElementVariantMjs.animateVariant)(visualElement, definition, options);
    else {
        const resolvedDefinition = typeof definition === "function" ? (0, _resolveDynamicVariantsMjs.resolveVariant)(visualElement, definition, options.custom) : definition;
        animation = Promise.all((0, _visualElementTargetMjs.animateTarget)(visualElement, resolvedDefinition, options));
    }
    return animation.then(()=>visualElement.notify("AnimationComplete", definition));
}

},{"../../render/utils/resolve-dynamic-variants.mjs":"dSXph","./visual-element-target.mjs":"6SL9E","./visual-element-variant.mjs":"80mMV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6SL9E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animateTarget", ()=>animateTarget);
var _transformMjs = require("../../render/html/utils/transform.mjs");
var _dataIdMjs = require("../optimized-appear/data-id.mjs");
var _motionValueMjs = require("./motion-value.mjs");
var _isMjs = require("../../value/use-will-change/is.mjs");
var _settersMjs = require("../../render/utils/setters.mjs");
var _frameMjs = require("../../frameloop/frame.mjs");
/**
 * Decide whether we should block this animation. Previously, we achieved this
 * just by checking whether the key was listed in protectedKeys, but this
 * posed problems if an animation was triggered by afterChildren and protectedKeys
 * had been set to true in the meantime.
 */ function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
    needsAnimating[key] = false;
    return shouldBlock;
}
function animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {
    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);
    const willChange = visualElement.getValue("willChange");
    if (transitionOverride) transition = transitionOverride;
    const animations = [];
    const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
    for(const key in target){
        const value = visualElement.getValue(key);
        const valueTarget = target[key];
        if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) continue;
        const valueTransition = {
            delay,
            elapsed: 0,
            ...transition
        };
        /**
         * If this is the first time a value is being animated, check
         * to see if we're handling off from an existing animation.
         */ if (window.HandoffAppearAnimations && !value.hasAnimated) {
            const appearId = visualElement.getProps()[0, _dataIdMjs.optimizedAppearDataAttribute];
            if (appearId) {
                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, (0, _frameMjs.frame));
                valueTransition.syncStart = true;
            }
        }
        value.start((0, _motionValueMjs.animateMotionValue)(key, value, valueTarget, visualElement.shouldReduceMotion && (0, _transformMjs.transformProps).has(key) ? {
            type: false
        } : valueTransition));
        const animation = value.animation;
        if ((0, _isMjs.isWillChangeMotionValue)(willChange)) {
            willChange.add(key);
            animation.then(()=>willChange.remove(key));
        }
        animations.push(animation);
    }
    if (transitionEnd) Promise.all(animations).then(()=>{
        transitionEnd && (0, _settersMjs.setTarget)(visualElement, transitionEnd);
    });
    return animations;
}

},{"../../render/html/utils/transform.mjs":"iSy8E","../optimized-appear/data-id.mjs":"4rpx1","./motion-value.mjs":"gQYlj","../../value/use-will-change/is.mjs":"6vOmr","../../render/utils/setters.mjs":"5AEB8","../../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4rpx1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "optimizedAppearDataAttribute", ()=>optimizedAppearDataAttribute);
parcelHelpers.export(exports, "optimizedAppearDataId", ()=>optimizedAppearDataId);
var _camelToDashMjs = require("../../render/dom/utils/camel-to-dash.mjs");
const optimizedAppearDataId = "framerAppearId";
const optimizedAppearDataAttribute = "data-" + (0, _camelToDashMjs.camelToDash)(optimizedAppearDataId);

},{"../../render/dom/utils/camel-to-dash.mjs":"eUOx7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQYlj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animateMotionValue", ()=>animateMotionValue);
var _errorsMjs = require("../../utils/errors.mjs");
var _timeConversionMjs = require("../../utils/time-conversion.mjs");
var _useInstantTransitionStateMjs = require("../../utils/use-instant-transition-state.mjs");
var _createAcceleratedAnimationMjs = require("../animators/waapi/create-accelerated-animation.mjs");
var _instantMjs = require("../animators/instant.mjs");
var _defaultTransitionsMjs = require("../utils/default-transitions.mjs");
var _isAnimatableMjs = require("../utils/is-animatable.mjs");
var _keyframesMjs = require("../utils/keyframes.mjs");
var _transitionsMjs = require("../utils/transitions.mjs");
var _indexMjs = require("../animators/js/index.mjs");
const animateMotionValue = (valueName, value, target, transition = {})=>{
    return (onComplete)=>{
        const valueTransition = (0, _transitionsMjs.getValueTransition)(transition, valueName) || {};
        /**
         * Most transition values are currently completely overwritten by value-specific
         * transitions. In the future it'd be nicer to blend these transitions. But for now
         * delay actually does inherit from the root transition if not value-specific.
         */ const delay = valueTransition.delay || transition.delay || 0;
        /**
         * Elapsed isn't a public transition option but can be passed through from
         * optimized appear effects in milliseconds.
         */ let { elapsed = 0 } = transition;
        elapsed = elapsed - (0, _timeConversionMjs.secondsToMilliseconds)(delay);
        const keyframes = (0, _keyframesMjs.getKeyframes)(value, valueName, target, valueTransition);
        /**
         * Check if we're able to animate between the start and end keyframes,
         * and throw a warning if we're attempting to animate between one that's
         * animatable and another that isn't.
         */ const originKeyframe = keyframes[0];
        const targetKeyframe = keyframes[keyframes.length - 1];
        const isOriginAnimatable = (0, _isAnimatableMjs.isAnimatable)(valueName, originKeyframe);
        const isTargetAnimatable = (0, _isAnimatableMjs.isAnimatable)(valueName, targetKeyframe);
        (0, _errorsMjs.warning)(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
        let options = {
            keyframes,
            velocity: value.getVelocity(),
            ease: "easeOut",
            ...valueTransition,
            delay: -elapsed,
            onUpdate: (v)=>{
                value.set(v);
                valueTransition.onUpdate && valueTransition.onUpdate(v);
            },
            onComplete: ()=>{
                onComplete();
                valueTransition.onComplete && valueTransition.onComplete();
            }
        };
        /**
         * If there's no transition defined for this value, we can generate
         * unqiue transition settings for this value.
         */ if (!(0, _transitionsMjs.isTransitionDefined)(valueTransition)) options = {
            ...options,
            ...(0, _defaultTransitionsMjs.getDefaultTransition)(valueName, options)
        };
        /**
         * Both WAAPI and our internal animation functions use durations
         * as defined by milliseconds, while our external API defines them
         * as seconds.
         */ if (options.duration) options.duration = (0, _timeConversionMjs.secondsToMilliseconds)(options.duration);
        if (options.repeatDelay) options.repeatDelay = (0, _timeConversionMjs.secondsToMilliseconds)(options.repeatDelay);
        if (!isOriginAnimatable || !isTargetAnimatable || (0, _useInstantTransitionStateMjs.instantAnimationState).current || valueTransition.type === false) /**
             * If we can't animate this value, or the global instant animation flag is set,
             * or this is simply defined as an instant transition, return an instant transition.
             */ return (0, _instantMjs.createInstantAnimation)((0, _useInstantTransitionStateMjs.instantAnimationState).current ? {
            ...options,
            delay: 0
        } : options);
        /**
         * Animate via WAAPI if possible.
         */ if (value.owner && value.owner.current instanceof HTMLElement && !value.owner.getProps().onUpdate) {
            const acceleratedAnimation = (0, _createAcceleratedAnimationMjs.createAcceleratedAnimation)(value, valueName, options);
            if (acceleratedAnimation) return acceleratedAnimation;
        }
        /**
         * If we didn't create an accelerated animation, create a JS animation
         */ return (0, _indexMjs.animateValue)(options);
    };
};

},{"../../utils/errors.mjs":"drRZ6","../../utils/time-conversion.mjs":"gdr8V","../../utils/use-instant-transition-state.mjs":"acYRG","../animators/waapi/create-accelerated-animation.mjs":"dCQxY","../animators/instant.mjs":"luMrD","../utils/default-transitions.mjs":"4yIKR","../utils/is-animatable.mjs":"7YoDs","../utils/keyframes.mjs":"1c50D","../utils/transitions.mjs":"bsOYk","../animators/js/index.mjs":"5PB20","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"drRZ6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invariant", ()=>invariant);
parcelHelpers.export(exports, "warning", ()=>warning);
var _noopMjs = require("./noop.mjs");
let warning = (0, _noopMjs.noop);
let invariant = (0, _noopMjs.noop);
warning = (check, message)=>{
    if (!check && typeof console !== "undefined") console.warn(message);
};
invariant = (check, message)=>{
    if (!check) throw new Error(message);
};

},{"./noop.mjs":"67SDH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gdr8V":[function(require,module,exports) {
/**
 * Converts seconds to milliseconds
 *
 * @param seconds - Time in seconds.
 * @return milliseconds - Converted time in milliseconds.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "millisecondsToSeconds", ()=>millisecondsToSeconds);
parcelHelpers.export(exports, "secondsToMilliseconds", ()=>secondsToMilliseconds);
const secondsToMilliseconds = (seconds)=>seconds * 1000;
const millisecondsToSeconds = (milliseconds)=>milliseconds / 1000;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"acYRG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "instantAnimationState", ()=>instantAnimationState);
const instantAnimationState = {
    current: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dCQxY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAcceleratedAnimation", ()=>createAcceleratedAnimation);
var _indexMjs = require("./index.mjs");
var _easingMjs = require("./easing.mjs");
var _getFinalKeyframeMjs = require("./utils/get-final-keyframe.mjs");
var _indexMjs1 = require("../js/index.mjs");
var _timeConversionMjs = require("../../../utils/time-conversion.mjs");
var _memoMjs = require("../../../utils/memo.mjs");
var _noopMjs = require("../../../utils/noop.mjs");
var _frameMjs = require("../../../frameloop/frame.mjs");
const supportsWaapi = (0, _memoMjs.memo)(()=>Object.hasOwnProperty.call(Element.prototype, "animate"));
/**
 * A list of values that can be hardware-accelerated.
 */ const acceleratedValues = new Set([
    "opacity",
    "clipPath",
    "filter",
    "transform",
    "backgroundColor"
]);
/**
 * 10ms is chosen here as it strikes a balance between smooth
 * results (more than one keyframe per frame at 60fps) and
 * keyframe quantity.
 */ const sampleDelta = 10; //ms
/**
 * Implement a practical max duration for keyframe generation
 * to prevent infinite loops
 */ const maxDuration = 20000;
const requiresPregeneratedKeyframes = (valueName, options)=>options.type === "spring" || valueName === "backgroundColor" || !(0, _easingMjs.isWaapiSupportedEasing)(options.ease);
function createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {
    const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== "mirror" && options.damping !== 0 && options.type !== "inertia";
    if (!canAccelerateAnimation) return false;
    /**
     * TODO: Unify with js/index
     */ let hasStopped = false;
    let resolveFinishedPromise;
    let currentFinishedPromise;
    /**
     * Resolve the current Promise every time we enter the
     * finished state. This is WAAPI-compatible behaviour.
     */ const updateFinishedPromise = ()=>{
        currentFinishedPromise = new Promise((resolve)=>{
            resolveFinishedPromise = resolve;
        });
    };
    // Create the first finished promise
    updateFinishedPromise();
    let { keyframes, duration = 300, ease, times } = options;
    /**
     * If this animation needs pre-generated keyframes then generate.
     */ if (requiresPregeneratedKeyframes(valueName, options)) {
        const sampleAnimation = (0, _indexMjs1.animateValue)({
            ...options,
            repeat: 0,
            delay: 0
        });
        let state = {
            done: false,
            value: keyframes[0]
        };
        const pregeneratedKeyframes = [];
        /**
         * Bail after 20 seconds of pre-generated keyframes as it's likely
         * we're heading for an infinite loop.
         */ let t = 0;
        while(!state.done && t < maxDuration){
            state = sampleAnimation.sample(t);
            pregeneratedKeyframes.push(state.value);
            t += sampleDelta;
        }
        times = undefined;
        keyframes = pregeneratedKeyframes;
        duration = t - sampleDelta;
        ease = "linear";
    }
    const animation = (0, _indexMjs.animateStyle)(value.owner.current, valueName, keyframes, {
        ...options,
        duration,
        /**
         * This function is currently not called if ease is provided
         * as a function so the cast is safe.
         *
         * However it would be possible for a future refinement to port
         * in easing pregeneration from Motion One for browsers that
         * support the upcoming `linear()` easing function.
         */ ease: ease,
        times
    });
    /**
     * WAAPI animations don't resolve startTime synchronously. But a blocked
     * thread could delay the startTime resolution by a noticeable amount.
     * For synching handoff animations with the new Motion animation we want
     * to ensure startTime is synchronously set.
     */ if (options.syncStart) animation.startTime = (0, _frameMjs.frameData).isProcessing ? (0, _frameMjs.frameData).timestamp : document.timeline ? document.timeline.currentTime : performance.now();
    const cancelAnimation = ()=>animation.cancel();
    const safeCancel = ()=>{
        (0, _frameMjs.frame).update(cancelAnimation);
        resolveFinishedPromise();
        updateFinishedPromise();
    };
    /**
     * Prefer the `onfinish` prop as it's more widely supported than
     * the `finished` promise.
     *
     * Here, we synchronously set the provided MotionValue to the end
     * keyframe. If we didn't, when the WAAPI animation is finished it would
     * be removed from the element which would then revert to its old styles.
     */ animation.onfinish = ()=>{
        value.set((0, _getFinalKeyframeMjs.getFinalKeyframe)(keyframes, options));
        onComplete && onComplete();
        safeCancel();
    };
    /**
     * Animation interrupt callback.
     */ const controls = {
        then (resolve, reject) {
            return currentFinishedPromise.then(resolve, reject);
        },
        attachTimeline (timeline) {
            animation.timeline = timeline;
            animation.onfinish = null;
            return 0, _noopMjs.noop;
        },
        get time () {
            return (0, _timeConversionMjs.millisecondsToSeconds)(animation.currentTime || 0);
        },
        set time (newTime){
            animation.currentTime = (0, _timeConversionMjs.secondsToMilliseconds)(newTime);
        },
        get speed () {
            return animation.playbackRate;
        },
        set speed (newSpeed){
            animation.playbackRate = newSpeed;
        },
        get duration () {
            return (0, _timeConversionMjs.millisecondsToSeconds)(duration);
        },
        play: ()=>{
            if (hasStopped) return;
            animation.play();
            /**
             * Cancel any pending cancel tasks
             */ (0, _frameMjs.cancelFrame)(cancelAnimation);
        },
        pause: ()=>animation.pause(),
        stop: ()=>{
            hasStopped = true;
            if (animation.playState === "idle") return;
            /**
             * WAAPI doesn't natively have any interruption capabilities.
             *
             * Rather than read commited styles back out of the DOM, we can
             * create a renderless JS animation and sample it twice to calculate
             * its current value, "previous" value, and therefore allow
             * Motion to calculate velocity for any subsequent animation.
             */ const { currentTime } = animation;
            if (currentTime) {
                const sampleAnimation = (0, _indexMjs1.animateValue)({
                    ...options,
                    autoplay: false
                });
                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
            }
            safeCancel();
        },
        complete: ()=>animation.finish(),
        cancel: safeCancel
    };
    return controls;
}

},{"./index.mjs":"br5tE","./easing.mjs":"2wybM","./utils/get-final-keyframe.mjs":"jLZPp","../js/index.mjs":"5PB20","../../../utils/time-conversion.mjs":"gdr8V","../../../utils/memo.mjs":"fPYS2","../../../utils/noop.mjs":"67SDH","../../../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"br5tE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animateStyle", ()=>animateStyle);
var _easingMjs = require("./easing.mjs");
function animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = "loop", ease, times } = {}) {
    const keyframeOptions = {
        [valueName]: keyframes
    };
    if (times) keyframeOptions.offset = times;
    const easing = (0, _easingMjs.mapEasingToNativeEasing)(ease);
    /**
     * If this is an easing array, apply to keyframes, not animation as a whole
     */ if (Array.isArray(easing)) keyframeOptions.easing = easing;
    return element.animate(keyframeOptions, {
        delay,
        duration,
        easing: !Array.isArray(easing) ? easing : "linear",
        fill: "both",
        iterations: repeat + 1,
        direction: repeatType === "reverse" ? "alternate" : "normal"
    });
}

},{"./easing.mjs":"2wybM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2wybM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubicBezierAsString", ()=>cubicBezierAsString);
parcelHelpers.export(exports, "isWaapiSupportedEasing", ()=>isWaapiSupportedEasing);
parcelHelpers.export(exports, "mapEasingToNativeEasing", ()=>mapEasingToNativeEasing);
parcelHelpers.export(exports, "supportedWaapiEasing", ()=>supportedWaapiEasing);
var _isBezierDefinitionMjs = require("../../../easing/utils/is-bezier-definition.mjs");
function isWaapiSupportedEasing(easing) {
    return Boolean(!easing || typeof easing === "string" && supportedWaapiEasing[easing] || (0, _isBezierDefinitionMjs.isBezierDefinition)(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
}
const cubicBezierAsString = ([a, b, c, d])=>`cubic-bezier(${a}, ${b}, ${c}, ${d})`;
const supportedWaapiEasing = {
    linear: "linear",
    ease: "ease",
    easeIn: "ease-in",
    easeOut: "ease-out",
    easeInOut: "ease-in-out",
    circIn: cubicBezierAsString([
        0,
        0.65,
        0.55,
        1
    ]),
    circOut: cubicBezierAsString([
        0.55,
        0,
        1,
        0.45
    ]),
    backIn: cubicBezierAsString([
        0.31,
        0.01,
        0.66,
        -0.59
    ]),
    backOut: cubicBezierAsString([
        0.33,
        1.53,
        0.69,
        0.99
    ])
};
function mapEasingToNativeEasing(easing) {
    if (!easing) return undefined;
    return (0, _isBezierDefinitionMjs.isBezierDefinition)(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
}

},{"../../../easing/utils/is-bezier-definition.mjs":"fV1CC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fV1CC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBezierDefinition", ()=>isBezierDefinition);
const isBezierDefinition = (easing)=>Array.isArray(easing) && typeof easing[0] === "number";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jLZPp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFinalKeyframe", ()=>getFinalKeyframe);
function getFinalKeyframe(keyframes, { repeat, repeatType = "loop" }) {
    const index = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : keyframes.length - 1;
    return keyframes[index];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5PB20":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animateValue", ()=>animateValue);
var _keyframesMjs = require("../../generators/keyframes.mjs");
var _indexMjs = require("../../generators/spring/index.mjs");
var _inertiaMjs = require("../../generators/inertia.mjs");
var _driverFrameloopMjs = require("./driver-frameloop.mjs");
var _interpolateMjs = require("../../../utils/interpolate.mjs");
var _clampMjs = require("../../../utils/clamp.mjs");
var _timeConversionMjs = require("../../../utils/time-conversion.mjs");
var _calcDurationMjs = require("../../generators/utils/calc-duration.mjs");
const types = {
    decay: (0, _inertiaMjs.inertia),
    inertia: (0, _inertiaMjs.inertia),
    tween: (0, _keyframesMjs.keyframes),
    keyframes: (0, _keyframesMjs.keyframes),
    spring: (0, _indexMjs.spring)
};
/**
 * Animate a single value on the main thread.
 *
 * This function is written, where functionality overlaps,
 * to be largely spec-compliant with WAAPI to allow fungibility
 * between the two.
 */ function animateValue({ autoplay = true, delay = 0, driver = (0, _driverFrameloopMjs.frameloopDriver), keyframes: keyframes$1, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate, ...options }) {
    let speed = 1;
    let hasStopped = false;
    let resolveFinishedPromise;
    let currentFinishedPromise;
    /**
     * Resolve the current Promise every time we enter the
     * finished state. This is WAAPI-compatible behaviour.
     */ const updateFinishedPromise = ()=>{
        currentFinishedPromise = new Promise((resolve)=>{
            resolveFinishedPromise = resolve;
        });
    };
    // Create the first finished promise
    updateFinishedPromise();
    let animationDriver;
    const generatorFactory = types[type] || (0, _keyframesMjs.keyframes);
    /**
     * If this isn't the keyframes generator and we've been provided
     * strings as keyframes, we need to interpolate these.
     * TODO: Support velocity for units and complex value types/
     */ let mapNumbersToKeyframes;
    if (generatorFactory !== (0, _keyframesMjs.keyframes) && typeof keyframes$1[0] !== "number") {
        mapNumbersToKeyframes = (0, _interpolateMjs.interpolate)([
            0,
            100
        ], keyframes$1, {
            clamp: false
        });
        keyframes$1 = [
            0,
            100
        ];
    }
    const generator = generatorFactory({
        ...options,
        keyframes: keyframes$1
    });
    let mirroredGenerator;
    if (repeatType === "mirror") mirroredGenerator = generatorFactory({
        ...options,
        keyframes: [
            ...keyframes$1
        ].reverse(),
        velocity: -(options.velocity || 0)
    });
    let playState = "idle";
    let holdTime = null;
    let startTime = null;
    let cancelTime = null;
    /**
     * If duration is undefined and we have repeat options,
     * we need to calculate a duration from the generator.
     *
     * We set it to the generator itself to cache the duration.
     * Any timeline resolver will need to have already precalculated
     * the duration by this step.
     */ if (generator.calculatedDuration === null && repeat) generator.calculatedDuration = (0, _calcDurationMjs.calcGeneratorDuration)(generator);
    const { calculatedDuration } = generator;
    let resolvedDuration = Infinity;
    let totalDuration = Infinity;
    if (calculatedDuration !== null) {
        resolvedDuration = calculatedDuration + repeatDelay;
        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
    }
    let currentTime = 0;
    const tick = (timestamp)=>{
        if (startTime === null) return;
        /**
         * requestAnimationFrame timestamps can come through as lower than
         * the startTime as set by performance.now(). Here we prevent this,
         * though in the future it could be possible to make setting startTime
         * a pending operation that gets resolved here.
         */ if (speed > 0) startTime = Math.min(startTime, timestamp);
        if (speed < 0) startTime = Math.min(timestamp - totalDuration / speed, startTime);
        if (holdTime !== null) currentTime = holdTime;
        else // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =
        // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for
        // example.
        currentTime = Math.round(timestamp - startTime) * speed;
        // Rebase on delay
        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);
        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
        currentTime = Math.max(timeWithoutDelay, 0);
        /**
         * If this animation has finished, set the current time
         * to the total duration.
         */ if (playState === "finished" && holdTime === null) currentTime = totalDuration;
        let elapsed = currentTime;
        let frameGenerator = generator;
        if (repeat) {
            /**
             * Get the current progress (0-1) of the animation. If t is >
             * than duration we'll get values like 2.5 (midway through the
             * third iteration)
             */ const progress = currentTime / resolvedDuration;
            /**
             * Get the current iteration (0 indexed). For instance the floor of
             * 2.5 is 2.
             */ let currentIteration = Math.floor(progress);
            /**
             * Get the current progress of the iteration by taking the remainder
             * so 2.5 is 0.5 through iteration 2
             */ let iterationProgress = progress % 1.0;
            /**
             * If iteration progress is 1 we count that as the end
             * of the previous iteration.
             */ if (!iterationProgress && progress >= 1) iterationProgress = 1;
            iterationProgress === 1 && currentIteration--;
            currentIteration = Math.min(currentIteration, repeat + 1);
            /**
             * Reverse progress if we're not running in "normal" direction
             */ const iterationIsOdd = Boolean(currentIteration % 2);
            if (iterationIsOdd) {
                if (repeatType === "reverse") {
                    iterationProgress = 1 - iterationProgress;
                    if (repeatDelay) iterationProgress -= repeatDelay / resolvedDuration;
                } else if (repeatType === "mirror") frameGenerator = mirroredGenerator;
            }
            let p = (0, _clampMjs.clamp)(0, 1, iterationProgress);
            if (currentTime > totalDuration) p = repeatType === "reverse" && iterationIsOdd ? 1 : 0;
            elapsed = p * resolvedDuration;
        }
        /**
         * If we're in negative time, set state as the initial keyframe.
         * This prevents delay: x, duration: 0 animations from finishing
         * instantly.
         */ const state = isInDelayPhase ? {
            done: false,
            value: keyframes$1[0]
        } : frameGenerator.next(elapsed);
        if (mapNumbersToKeyframes) state.value = mapNumbersToKeyframes(state.value);
        let { done } = state;
        if (!isInDelayPhase && calculatedDuration !== null) done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;
        const isAnimationFinished = holdTime === null && (playState === "finished" || playState === "running" && done);
        if (onUpdate) onUpdate(state.value);
        if (isAnimationFinished) finish();
        return state;
    };
    const stopAnimationDriver = ()=>{
        animationDriver && animationDriver.stop();
        animationDriver = undefined;
    };
    const cancel = ()=>{
        playState = "idle";
        stopAnimationDriver();
        resolveFinishedPromise();
        updateFinishedPromise();
        startTime = cancelTime = null;
    };
    const finish = ()=>{
        playState = "finished";
        onComplete && onComplete();
        stopAnimationDriver();
        resolveFinishedPromise();
    };
    const play = ()=>{
        if (hasStopped) return;
        if (!animationDriver) animationDriver = driver(tick);
        const now = animationDriver.now();
        onPlay && onPlay();
        if (holdTime !== null) startTime = now - holdTime;
        else if (!startTime || playState === "finished") startTime = now;
        if (playState === "finished") updateFinishedPromise();
        cancelTime = startTime;
        holdTime = null;
        /**
         * Set playState to running only after we've used it in
         * the previous logic.
         */ playState = "running";
        animationDriver.start();
    };
    if (autoplay) play();
    const controls = {
        then (resolve, reject) {
            return currentFinishedPromise.then(resolve, reject);
        },
        get time () {
            return (0, _timeConversionMjs.millisecondsToSeconds)(currentTime);
        },
        set time (newTime){
            newTime = (0, _timeConversionMjs.secondsToMilliseconds)(newTime);
            currentTime = newTime;
            if (holdTime !== null || !animationDriver || speed === 0) holdTime = newTime;
            else startTime = animationDriver.now() - newTime / speed;
        },
        get duration () {
            const duration = generator.calculatedDuration === null ? (0, _calcDurationMjs.calcGeneratorDuration)(generator) : generator.calculatedDuration;
            return (0, _timeConversionMjs.millisecondsToSeconds)(duration);
        },
        get speed () {
            return speed;
        },
        set speed (newSpeed){
            if (newSpeed === speed || !animationDriver) return;
            speed = newSpeed;
            controls.time = (0, _timeConversionMjs.millisecondsToSeconds)(currentTime);
        },
        get state () {
            return playState;
        },
        play,
        pause: ()=>{
            playState = "paused";
            holdTime = currentTime;
        },
        stop: ()=>{
            hasStopped = true;
            if (playState === "idle") return;
            playState = "idle";
            onStop && onStop();
            cancel();
        },
        cancel: ()=>{
            if (cancelTime !== null) tick(cancelTime);
            cancel();
        },
        complete: ()=>{
            playState = "finished";
        },
        sample: (elapsed)=>{
            startTime = 0;
            return tick(elapsed);
        }
    };
    return controls;
}

},{"../../generators/keyframes.mjs":"hjEq3","../../generators/spring/index.mjs":"aNeOI","../../generators/inertia.mjs":"50UUJ","./driver-frameloop.mjs":"fRIMv","../../../utils/interpolate.mjs":"d7x9H","../../../utils/clamp.mjs":"aZOh4","../../../utils/time-conversion.mjs":"gdr8V","../../generators/utils/calc-duration.mjs":"iTe1T","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hjEq3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultEasing", ()=>defaultEasing);
parcelHelpers.export(exports, "keyframes", ()=>keyframes);
var _easeMjs = require("../../easing/ease.mjs");
var _isEasingArrayMjs = require("../../easing/utils/is-easing-array.mjs");
var _mapMjs = require("../../easing/utils/map.mjs");
var _interpolateMjs = require("../../utils/interpolate.mjs");
var _defaultMjs = require("../../utils/offsets/default.mjs");
var _timeMjs = require("../../utils/offsets/time.mjs");
function defaultEasing(values, easing) {
    return values.map(()=>easing || (0, _easeMjs.easeInOut)).splice(0, values.length - 1);
}
function keyframes({ duration = 300, keyframes: keyframeValues, times, ease = "easeInOut" }) {
    /**
     * Easing functions can be externally defined as strings. Here we convert them
     * into actual functions.
     */ const easingFunctions = (0, _isEasingArrayMjs.isEasingArray)(ease) ? ease.map((0, _mapMjs.easingDefinitionToFunction)) : (0, _mapMjs.easingDefinitionToFunction)(ease);
    /**
     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
     * to reduce GC during animation.
     */ const state = {
        done: false,
        value: keyframeValues[0]
    };
    /**
     * Create a times array based on the provided 0-1 offsets
     */ const absoluteTimes = (0, _timeMjs.convertOffsetToTimes)(// Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    times && times.length === keyframeValues.length ? times : (0, _defaultMjs.defaultOffset)(keyframeValues), duration);
    const mapTimeToKeyframe = (0, _interpolateMjs.interpolate)(absoluteTimes, keyframeValues, {
        ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
    });
    return {
        calculatedDuration: duration,
        next: (t)=>{
            state.value = mapTimeToKeyframe(t);
            state.done = t >= duration;
            return state;
        }
    };
}

},{"../../easing/ease.mjs":"8Qwxb","../../easing/utils/is-easing-array.mjs":"i3ygY","../../easing/utils/map.mjs":"e97Gy","../../utils/interpolate.mjs":"d7x9H","../../utils/offsets/default.mjs":"7Njqq","../../utils/offsets/time.mjs":"2k776","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Qwxb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "easeIn", ()=>easeIn);
parcelHelpers.export(exports, "easeInOut", ()=>easeInOut);
parcelHelpers.export(exports, "easeOut", ()=>easeOut);
var _cubicBezierMjs = require("./cubic-bezier.mjs");
const easeIn = (0, _cubicBezierMjs.cubicBezier)(0.42, 0, 1, 1);
const easeOut = (0, _cubicBezierMjs.cubicBezier)(0, 0, 0.58, 1);
const easeInOut = (0, _cubicBezierMjs.cubicBezier)(0.42, 0, 0.58, 1);

},{"./cubic-bezier.mjs":"hC5AC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hC5AC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubicBezier", ()=>cubicBezier);
var _noopMjs = require("../utils/noop.mjs");
/*
  Bezier function generator
  This has been modified from Gaëtan Renaudeau's BezierEasing
  https://github.com/gre/bezier-easing/blob/master/src/index.js
  https://github.com/gre/bezier-easing/blob/master/LICENSE
  
  I've removed the newtonRaphsonIterate algo because in benchmarking it
  wasn't noticiably faster than binarySubdivision, indeed removing it
  usually improved times, depending on the curve.
  I also removed the lookup table, as for the added bundle size and loop we're
  only cutting ~4 or so subdivision iterations. I bumped the max iterations up
  to 12 to compensate and this still tended to be faster for no perceivable
  loss in accuracy.
  Usage
    const easeOut = cubicBezier(.17,.67,.83,.67);
    const x = easeOut(0.5); // returns 0.627...
*/ // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
const calcBezier = (t, a1, a2)=>(((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) * t;
const subdivisionPrecision = 0.0000001;
const subdivisionMaxIterations = 12;
function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
    let currentX;
    let currentT;
    let i = 0;
    do {
        currentT = lowerBound + (upperBound - lowerBound) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - x;
        if (currentX > 0.0) upperBound = currentT;
        else lowerBound = currentT;
    }while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
    return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
    // If this is a linear gradient, return linear easing
    if (mX1 === mY1 && mX2 === mY2) return 0, _noopMjs.noop;
    const getTForX = (aX)=>binarySubdivide(aX, 0, 1, mX1, mX2);
    // If animation is at start/end, return t without easing
    return (t)=>t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
}

},{"../utils/noop.mjs":"67SDH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i3ygY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isEasingArray", ()=>isEasingArray);
const isEasingArray = (ease)=>{
    return Array.isArray(ease) && typeof ease[0] !== "number";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e97Gy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "easingDefinitionToFunction", ()=>easingDefinitionToFunction);
var _errorsMjs = require("../../utils/errors.mjs");
var _cubicBezierMjs = require("../cubic-bezier.mjs");
var _noopMjs = require("../../utils/noop.mjs");
var _easeMjs = require("../ease.mjs");
var _circMjs = require("../circ.mjs");
var _backMjs = require("../back.mjs");
var _anticipateMjs = require("../anticipate.mjs");
const easingLookup = {
    linear: (0, _noopMjs.noop),
    easeIn: (0, _easeMjs.easeIn),
    easeInOut: (0, _easeMjs.easeInOut),
    easeOut: (0, _easeMjs.easeOut),
    circIn: (0, _circMjs.circIn),
    circInOut: (0, _circMjs.circInOut),
    circOut: (0, _circMjs.circOut),
    backIn: (0, _backMjs.backIn),
    backInOut: (0, _backMjs.backInOut),
    backOut: (0, _backMjs.backOut),
    anticipate: (0, _anticipateMjs.anticipate)
};
const easingDefinitionToFunction = (definition)=>{
    if (Array.isArray(definition)) {
        // If cubic bezier definition, create bezier curve
        (0, _errorsMjs.invariant)(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
        const [x1, y1, x2, y2] = definition;
        return (0, _cubicBezierMjs.cubicBezier)(x1, y1, x2, y2);
    } else if (typeof definition === "string") {
        // Else lookup from table
        (0, _errorsMjs.invariant)(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);
        return easingLookup[definition];
    }
    return definition;
};

},{"../../utils/errors.mjs":"drRZ6","../cubic-bezier.mjs":"hC5AC","../../utils/noop.mjs":"67SDH","../ease.mjs":"8Qwxb","../circ.mjs":"LdSua","../back.mjs":"d5Nwb","../anticipate.mjs":"1Nbn6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"LdSua":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "circIn", ()=>circIn);
parcelHelpers.export(exports, "circInOut", ()=>circInOut);
parcelHelpers.export(exports, "circOut", ()=>circOut);
var _mirrorMjs = require("./modifiers/mirror.mjs");
var _reverseMjs = require("./modifiers/reverse.mjs");
const circIn = (p)=>1 - Math.sin(Math.acos(p));
const circOut = (0, _reverseMjs.reverseEasing)(circIn);
const circInOut = (0, _mirrorMjs.mirrorEasing)(circOut);

},{"./modifiers/mirror.mjs":"8JYdZ","./modifiers/reverse.mjs":"9dSeG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8JYdZ":[function(require,module,exports) {
// Accepts an easing function and returns a new one that outputs mirrored values for
// the second half of the animation. Turns easeIn into easeInOut.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mirrorEasing", ()=>mirrorEasing);
const mirrorEasing = (easing)=>(p)=>p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9dSeG":[function(require,module,exports) {
// Accepts an easing function and returns a new one that outputs reversed values.
// Turns easeIn into easeOut.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reverseEasing", ()=>reverseEasing);
const reverseEasing = (easing)=>(p)=>1 - easing(1 - p);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5Nwb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "backIn", ()=>backIn);
parcelHelpers.export(exports, "backInOut", ()=>backInOut);
parcelHelpers.export(exports, "backOut", ()=>backOut);
var _cubicBezierMjs = require("./cubic-bezier.mjs");
var _mirrorMjs = require("./modifiers/mirror.mjs");
var _reverseMjs = require("./modifiers/reverse.mjs");
const backOut = (0, _cubicBezierMjs.cubicBezier)(0.33, 1.53, 0.69, 0.99);
const backIn = (0, _reverseMjs.reverseEasing)(backOut);
const backInOut = (0, _mirrorMjs.mirrorEasing)(backIn);

},{"./cubic-bezier.mjs":"hC5AC","./modifiers/mirror.mjs":"8JYdZ","./modifiers/reverse.mjs":"9dSeG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Nbn6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "anticipate", ()=>anticipate);
var _backMjs = require("./back.mjs");
const anticipate = (p)=>(p *= 2) < 1 ? 0.5 * (0, _backMjs.backIn)(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));

},{"./back.mjs":"d5Nwb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d7x9H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "interpolate", ()=>interpolate);
var _errorsMjs = require("./errors.mjs");
var _indexMjs = require("../value/types/color/index.mjs");
var _clampMjs = require("./clamp.mjs");
var _mixMjs = require("./mix.mjs");
var _mixColorMjs = require("./mix-color.mjs");
var _mixComplexMjs = require("./mix-complex.mjs");
var _pipeMjs = require("./pipe.mjs");
var _progressMjs = require("./progress.mjs");
var _noopMjs = require("./noop.mjs");
const mixNumber = (from, to)=>(p)=>(0, _mixMjs.mix)(from, to, p);
function detectMixerFactory(v) {
    if (typeof v === "number") return mixNumber;
    else if (typeof v === "string") return (0, _indexMjs.color).test(v) ? (0, _mixColorMjs.mixColor) : (0, _mixComplexMjs.mixComplex);
    else if (Array.isArray(v)) return 0, _mixComplexMjs.mixArray;
    else if (typeof v === "object") return 0, _mixComplexMjs.mixObject;
    return mixNumber;
}
function createMixers(output, ease, customMixer) {
    const mixers = [];
    const mixerFactory = customMixer || detectMixerFactory(output[0]);
    const numMixers = output.length - 1;
    for(let i = 0; i < numMixers; i++){
        let mixer = mixerFactory(output[i], output[i + 1]);
        if (ease) {
            const easingFunction = Array.isArray(ease) ? ease[i] || (0, _noopMjs.noop) : ease;
            mixer = (0, _pipeMjs.pipe)(easingFunction, mixer);
        }
        mixers.push(mixer);
    }
    return mixers;
}
/**
 * Create a function that maps from a numerical input array to a generic output array.
 *
 * Accepts:
 *   - Numbers
 *   - Colors (hex, hsl, hsla, rgb, rgba)
 *   - Complex (combinations of one or more numbers or strings)
 *
 * ```jsx
 * const mixColor = interpolate([0, 1], ['#fff', '#000'])
 *
 * mixColor(0.5) // 'rgba(128, 128, 128, 1)'
 * ```
 *
 * TODO Revist this approach once we've moved to data models for values,
 * probably not needed to pregenerate mixer functions.
 *
 * @public
 */ function interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {
    const inputLength = input.length;
    (0, _errorsMjs.invariant)(inputLength === output.length, "Both input and output ranges must be the same length");
    /**
     * If we're only provided a single input, we can just make a function
     * that returns the output.
     */ if (inputLength === 1) return ()=>output[0];
    // If input runs highest -> lowest, reverse both arrays
    if (input[0] > input[inputLength - 1]) {
        input = [
            ...input
        ].reverse();
        output = [
            ...output
        ].reverse();
    }
    const mixers = createMixers(output, ease, mixer);
    const numMixers = mixers.length;
    const interpolator = (v)=>{
        let i = 0;
        if (numMixers > 1) for(; i < input.length - 2; i++){
            if (v < input[i + 1]) break;
        }
        const progressInRange = (0, _progressMjs.progress)(input[i], input[i + 1], v);
        return mixers[i](progressInRange);
    };
    return isClamp ? (v)=>interpolator((0, _clampMjs.clamp)(input[0], input[inputLength - 1], v)) : interpolator;
}

},{"./errors.mjs":"drRZ6","../value/types/color/index.mjs":"1nAma","./clamp.mjs":"aZOh4","./mix.mjs":"jx86W","./mix-color.mjs":"7Evog","./mix-complex.mjs":"27EWY","./pipe.mjs":"jGo2b","./progress.mjs":"3vvIn","./noop.mjs":"67SDH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1nAma":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "color", ()=>color);
var _utilsMjs = require("../utils.mjs");
var _hexMjs = require("./hex.mjs");
var _hslaMjs = require("./hsla.mjs");
var _rgbaMjs = require("./rgba.mjs");
const color = {
    test: (v)=>(0, _rgbaMjs.rgba).test(v) || (0, _hexMjs.hex).test(v) || (0, _hslaMjs.hsla).test(v),
    parse: (v)=>{
        if ((0, _rgbaMjs.rgba).test(v)) return (0, _rgbaMjs.rgba).parse(v);
        else if ((0, _hslaMjs.hsla).test(v)) return (0, _hslaMjs.hsla).parse(v);
        else return (0, _hexMjs.hex).parse(v);
    },
    transform: (v)=>{
        return (0, _utilsMjs.isString)(v) ? v : v.hasOwnProperty("red") ? (0, _rgbaMjs.rgba).transform(v) : (0, _hslaMjs.hsla).transform(v);
    }
};

},{"../utils.mjs":"kaB0b","./hex.mjs":"5epZU","./hsla.mjs":"5FDku","./rgba.mjs":"4MXDV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5epZU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hex", ()=>hex);
var _rgbaMjs = require("./rgba.mjs");
var _utilsMjs = require("./utils.mjs");
function parseHex(v) {
    let r = "";
    let g = "";
    let b = "";
    let a = "";
    // If we have 6 characters, ie #FF0000
    if (v.length > 5) {
        r = v.substring(1, 3);
        g = v.substring(3, 5);
        b = v.substring(5, 7);
        a = v.substring(7, 9);
    // Or we have 3 characters, ie #F00
    } else {
        r = v.substring(1, 2);
        g = v.substring(2, 3);
        b = v.substring(3, 4);
        a = v.substring(4, 5);
        r += r;
        g += g;
        b += b;
        a += a;
    }
    return {
        red: parseInt(r, 16),
        green: parseInt(g, 16),
        blue: parseInt(b, 16),
        alpha: a ? parseInt(a, 16) / 255 : 1
    };
}
const hex = {
    test: (0, _utilsMjs.isColorString)("#"),
    parse: parseHex,
    transform: (0, _rgbaMjs.rgba).transform
};

},{"./rgba.mjs":"4MXDV","./utils.mjs":"kSu8U","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4MXDV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rgbUnit", ()=>rgbUnit);
parcelHelpers.export(exports, "rgba", ()=>rgba);
var _clampMjs = require("../../../utils/clamp.mjs");
var _indexMjs = require("../numbers/index.mjs");
var _utilsMjs = require("../utils.mjs");
var _utilsMjs1 = require("./utils.mjs");
const clampRgbUnit = (v)=>(0, _clampMjs.clamp)(0, 255, v);
const rgbUnit = {
    ...(0, _indexMjs.number),
    transform: (v)=>Math.round(clampRgbUnit(v))
};
const rgba = {
    test: (0, _utilsMjs1.isColorString)("rgb", "red"),
    parse: (0, _utilsMjs1.splitColor)("red", "green", "blue"),
    transform: ({ red, green, blue, alpha: alpha$1 = 1 })=>"rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + (0, _utilsMjs.sanitize)((0, _indexMjs.alpha).transform(alpha$1)) + ")"
};

},{"../../../utils/clamp.mjs":"aZOh4","../numbers/index.mjs":"bI9mf","../utils.mjs":"kaB0b","./utils.mjs":"kSu8U","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kSu8U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isColorString", ()=>isColorString);
parcelHelpers.export(exports, "splitColor", ()=>splitColor);
var _utilsMjs = require("../utils.mjs");
/**
 * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,
 * but false if a number or multiple colors
 */ const isColorString = (type, testProp)=>(v)=>{
        return Boolean((0, _utilsMjs.isString)(v) && (0, _utilsMjs.singleColorRegex).test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
    };
const splitColor = (aName, bName, cName)=>(v)=>{
        if (!(0, _utilsMjs.isString)(v)) return v;
        const [a, b, c, alpha] = v.match((0, _utilsMjs.floatRegex));
        return {
            [aName]: parseFloat(a),
            [bName]: parseFloat(b),
            [cName]: parseFloat(c),
            alpha: alpha !== undefined ? parseFloat(alpha) : 1
        };
    };

},{"../utils.mjs":"kaB0b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5FDku":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hsla", ()=>hsla);
var _indexMjs = require("../numbers/index.mjs");
var _unitsMjs = require("../numbers/units.mjs");
var _utilsMjs = require("../utils.mjs");
var _utilsMjs1 = require("./utils.mjs");
const hsla = {
    test: (0, _utilsMjs1.isColorString)("hsl", "hue"),
    parse: (0, _utilsMjs1.splitColor)("hue", "saturation", "lightness"),
    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 })=>{
        return "hsla(" + Math.round(hue) + ", " + (0, _unitsMjs.percent).transform((0, _utilsMjs.sanitize)(saturation)) + ", " + (0, _unitsMjs.percent).transform((0, _utilsMjs.sanitize)(lightness)) + ", " + (0, _utilsMjs.sanitize)((0, _indexMjs.alpha).transform(alpha$1)) + ")";
    }
};

},{"../numbers/index.mjs":"bI9mf","../numbers/units.mjs":"lGBHA","../utils.mjs":"kaB0b","./utils.mjs":"kSu8U","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jx86W":[function(require,module,exports) {
/*
  Value in range from progress

  Given a lower limit and an upper limit, we return the value within
  that range as expressed by progress (usually a number from 0 to 1)

  So progress = 0.5 would change

  from -------- to

  to

  from ---- to

  E.g. from = 10, to = 20, progress = 0.5 => 15

  @param [number]: Lower limit of range
  @param [number]: Upper limit of range
  @param [number]: The progress between lower and upper limits expressed 0-1
  @return [number]: Value as calculated from progress within range (not limited within range)
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mix", ()=>mix);
const mix = (from, to, progress)=>-progress * from + progress * to + from;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Evog":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mixColor", ()=>mixColor);
parcelHelpers.export(exports, "mixLinearColor", ()=>mixLinearColor);
var _mixMjs = require("./mix.mjs");
var _errorsMjs = require("./errors.mjs");
var _hslaToRgbaMjs = require("./hsla-to-rgba.mjs");
var _hexMjs = require("../value/types/color/hex.mjs");
var _rgbaMjs = require("../value/types/color/rgba.mjs");
var _hslaMjs = require("../value/types/color/hsla.mjs");
// Linear color space blending
// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw
// Demonstrated http://codepen.io/osublake/pen/xGVVaN
const mixLinearColor = (from, to, v)=>{
    const fromExpo = from * from;
    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));
};
const colorTypes = [
    (0, _hexMjs.hex),
    (0, _rgbaMjs.rgba),
    (0, _hslaMjs.hsla)
];
const getColorType = (v)=>colorTypes.find((type)=>type.test(v));
function asRGBA(color) {
    const type = getColorType(color);
    (0, _errorsMjs.invariant)(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);
    let model = type.parse(color);
    if (type === (0, _hslaMjs.hsla)) // TODO Remove this cast - needed since Framer Motion's stricter typing
    model = (0, _hslaToRgbaMjs.hslaToRgba)(model);
    return model;
}
const mixColor = (from, to)=>{
    const fromRGBA = asRGBA(from);
    const toRGBA = asRGBA(to);
    const blended = {
        ...fromRGBA
    };
    return (v)=>{
        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
        blended.alpha = (0, _mixMjs.mix)(fromRGBA.alpha, toRGBA.alpha, v);
        return (0, _rgbaMjs.rgba).transform(blended);
    };
};

},{"./mix.mjs":"jx86W","./errors.mjs":"drRZ6","./hsla-to-rgba.mjs":"4xZpQ","../value/types/color/hex.mjs":"5epZU","../value/types/color/rgba.mjs":"4MXDV","../value/types/color/hsla.mjs":"5FDku","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4xZpQ":[function(require,module,exports) {
// Adapted from https://gist.github.com/mjackson/5311256
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hslaToRgba", ()=>hslaToRgba);
function hueToRgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 0.5) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
}
function hslaToRgba({ hue, saturation, lightness, alpha }) {
    hue /= 360;
    saturation /= 100;
    lightness /= 100;
    let red = 0;
    let green = 0;
    let blue = 0;
    if (!saturation) red = green = blue = lightness;
    else {
        const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
        const p = 2 * lightness - q;
        red = hueToRgb(p, q, hue + 1 / 3);
        green = hueToRgb(p, q, hue);
        blue = hueToRgb(p, q, hue - 1 / 3);
    }
    return {
        red: Math.round(red * 255),
        green: Math.round(green * 255),
        blue: Math.round(blue * 255),
        alpha
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"27EWY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mixArray", ()=>mixArray);
parcelHelpers.export(exports, "mixComplex", ()=>mixComplex);
parcelHelpers.export(exports, "mixObject", ()=>mixObject);
var _mixMjs = require("./mix.mjs");
var _mixColorMjs = require("./mix-color.mjs");
var _pipeMjs = require("./pipe.mjs");
var _errorsMjs = require("./errors.mjs");
var _indexMjs = require("../value/types/color/index.mjs");
var _indexMjs1 = require("../value/types/complex/index.mjs");
const mixImmediate = (origin, target)=>(p)=>`${p > 0 ? target : origin}`;
function getMixer(origin, target) {
    if (typeof origin === "number") return (v)=>(0, _mixMjs.mix)(origin, target, v);
    else if ((0, _indexMjs.color).test(origin)) return (0, _mixColorMjs.mixColor)(origin, target);
    else return origin.startsWith("var(") ? mixImmediate(origin, target) : mixComplex(origin, target);
}
const mixArray = (from, to)=>{
    const output = [
        ...from
    ];
    const numValues = output.length;
    const blendValue = from.map((fromThis, i)=>getMixer(fromThis, to[i]));
    return (v)=>{
        for(let i = 0; i < numValues; i++)output[i] = blendValue[i](v);
        return output;
    };
};
const mixObject = (origin, target)=>{
    const output = {
        ...origin,
        ...target
    };
    const blendValue = {};
    for(const key in output)if (origin[key] !== undefined && target[key] !== undefined) blendValue[key] = getMixer(origin[key], target[key]);
    return (v)=>{
        for(const key in blendValue)output[key] = blendValue[key](v);
        return output;
    };
};
const mixComplex = (origin, target)=>{
    const template = (0, _indexMjs1.complex).createTransformer(target);
    const originStats = (0, _indexMjs1.analyseComplexValue)(origin);
    const targetStats = (0, _indexMjs1.analyseComplexValue)(target);
    const canInterpolate = originStats.numVars === targetStats.numVars && originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers;
    if (canInterpolate) return (0, _pipeMjs.pipe)(mixArray(originStats.values, targetStats.values), template);
    else {
        (0, _errorsMjs.warning)(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
        return mixImmediate(origin, target);
    }
};

},{"./mix.mjs":"jx86W","./mix-color.mjs":"7Evog","./pipe.mjs":"jGo2b","./errors.mjs":"drRZ6","../value/types/color/index.mjs":"1nAma","../value/types/complex/index.mjs":"lmoWV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmoWV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "analyseComplexValue", ()=>analyseComplexValue);
parcelHelpers.export(exports, "complex", ()=>complex);
var _isCssVariableMjs = require("../../../render/dom/utils/is-css-variable.mjs");
var _noopMjs = require("../../../utils/noop.mjs");
var _indexMjs = require("../color/index.mjs");
var _indexMjs1 = require("../numbers/index.mjs");
var _utilsMjs = require("../utils.mjs");
function test(v) {
    var _a, _b;
    return isNaN(v) && (0, _utilsMjs.isString)(v) && (((_a = v.match((0, _utilsMjs.floatRegex))) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match((0, _utilsMjs.colorRegex))) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;
}
const cssVarTokeniser = {
    regex: (0, _isCssVariableMjs.cssVariableRegex),
    countKey: "Vars",
    token: "${v}",
    parse: (0, _noopMjs.noop)
};
const colorTokeniser = {
    regex: (0, _utilsMjs.colorRegex),
    countKey: "Colors",
    token: "${c}",
    parse: (0, _indexMjs.color).parse
};
const numberTokeniser = {
    regex: (0, _utilsMjs.floatRegex),
    countKey: "Numbers",
    token: "${n}",
    parse: (0, _indexMjs1.number).parse
};
function tokenise(info, { regex, countKey, token, parse }) {
    const matches = info.tokenised.match(regex);
    if (!matches) return;
    info["num" + countKey] = matches.length;
    info.tokenised = info.tokenised.replace(regex, token);
    info.values.push(...matches.map(parse));
}
function analyseComplexValue(value) {
    const originalValue = value.toString();
    const info = {
        value: originalValue,
        tokenised: originalValue,
        values: [],
        numVars: 0,
        numColors: 0,
        numNumbers: 0
    };
    if (info.value.includes("var(--")) tokenise(info, cssVarTokeniser);
    tokenise(info, colorTokeniser);
    tokenise(info, numberTokeniser);
    return info;
}
function parseComplexValue(v) {
    return analyseComplexValue(v).values;
}
function createTransformer(source) {
    const { values, numColors, numVars, tokenised } = analyseComplexValue(source);
    const numValues = values.length;
    return (v)=>{
        let output = tokenised;
        for(let i = 0; i < numValues; i++){
            if (i < numVars) output = output.replace(cssVarTokeniser.token, v[i]);
            else if (i < numVars + numColors) output = output.replace(colorTokeniser.token, (0, _indexMjs.color).transform(v[i]));
            else output = output.replace(numberTokeniser.token, (0, _utilsMjs.sanitize)(v[i]));
        }
        return output;
    };
}
const convertNumbersToZero = (v)=>typeof v === "number" ? 0 : v;
function getAnimatableNone(v) {
    const parsed = parseComplexValue(v);
    const transformer = createTransformer(v);
    return transformer(parsed.map(convertNumbersToZero));
}
const complex = {
    test,
    parse: parseComplexValue,
    createTransformer,
    getAnimatableNone
};

},{"../../../render/dom/utils/is-css-variable.mjs":"8qZz5","../../../utils/noop.mjs":"67SDH","../color/index.mjs":"1nAma","../numbers/index.mjs":"bI9mf","../utils.mjs":"kaB0b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3vvIn":[function(require,module,exports) {
/*
  Progress within given range

  Given a lower limit and an upper limit, we return the progress
  (expressed as a number 0-1) represented by the given value, and
  limit that progress to within 0-1.

  @param [number]: Lower limit
  @param [number]: Upper limit
  @param [number]: Value to find progress within given range
  @return [number]: Progress of value within range as expressed 0-1
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "progress", ()=>progress);
const progress = (from, to, value)=>{
    const toFromDifference = to - from;
    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Njqq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultOffset", ()=>defaultOffset);
var _fillMjs = require("./fill.mjs");
function defaultOffset(arr) {
    const offset = [
        0
    ];
    (0, _fillMjs.fillOffset)(offset, arr.length - 1);
    return offset;
}

},{"./fill.mjs":"i5hk9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i5hk9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fillOffset", ()=>fillOffset);
var _mixMjs = require("../mix.mjs");
var _progressMjs = require("../progress.mjs");
function fillOffset(offset, remaining) {
    const min = offset[offset.length - 1];
    for(let i = 1; i <= remaining; i++){
        const offsetProgress = (0, _progressMjs.progress)(0, remaining, i);
        offset.push((0, _mixMjs.mix)(min, 1, offsetProgress));
    }
}

},{"../mix.mjs":"jx86W","../progress.mjs":"3vvIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2k776":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertOffsetToTimes", ()=>convertOffsetToTimes);
function convertOffsetToTimes(offset, duration) {
    return offset.map((o)=>o * duration);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aNeOI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spring", ()=>spring);
var _timeConversionMjs = require("../../../utils/time-conversion.mjs");
var _velocityMjs = require("../utils/velocity.mjs");
var _findMjs = require("./find.mjs");
const durationKeys = [
    "duration",
    "bounce"
];
const physicsKeys = [
    "stiffness",
    "damping",
    "mass"
];
function isSpringType(options, keys) {
    return keys.some((key)=>options[key] !== undefined);
}
function getSpringOptions(options) {
    let springOptions = {
        velocity: 0.0,
        stiffness: 100,
        damping: 10,
        mass: 1.0,
        isResolvedFromDuration: false,
        ...options
    };
    // stiffness/damping/mass overrides duration/bounce
    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
        const derived = (0, _findMjs.findSpring)(options);
        springOptions = {
            ...springOptions,
            ...derived,
            velocity: 0.0,
            mass: 1.0
        };
        springOptions.isResolvedFromDuration = true;
    }
    return springOptions;
}
function spring({ keyframes, restDelta, restSpeed, ...options }) {
    const origin = keyframes[0];
    const target = keyframes[keyframes.length - 1];
    /**
     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
     * to reduce GC during animation.
     */ const state = {
        done: false,
        value: origin
    };
    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);
    const initialVelocity = velocity ? -(0, _timeConversionMjs.millisecondsToSeconds)(velocity) : 0.0;
    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
    const initialDelta = target - origin;
    const undampedAngularFreq = (0, _timeConversionMjs.millisecondsToSeconds)(Math.sqrt(stiffness / mass));
    /**
     * If we're working on a granular scale, use smaller defaults for determining
     * when the spring is finished.
     *
     * These defaults have been selected emprically based on what strikes a good
     * ratio between feeling good and finishing as soon as changes are imperceptible.
     */ const isGranularScale = Math.abs(initialDelta) < 5;
    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);
    let resolveSpring;
    if (dampingRatio < 1) {
        const angularFreq = (0, _findMjs.calcAngularFreq)(undampedAngularFreq, dampingRatio);
        // Underdamped spring
        resolveSpring = (t)=>{
            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));
        };
    } else if (dampingRatio === 1) // Critically damped spring
    resolveSpring = (t)=>target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
    else {
        // Overdamped spring
        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
        resolveSpring = (t)=>{
            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
            // When performing sinh or cosh values can hit Infinity so we cap them here
            const freqForT = Math.min(dampedAngularFreq * t, 300);
            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
        };
    }
    return {
        calculatedDuration: isResolvedFromDuration ? duration || null : null,
        next: (t)=>{
            const current = resolveSpring(t);
            if (!isResolvedFromDuration) {
                let currentVelocity = initialVelocity;
                if (t !== 0) {
                    /**
                     * We only need to calculate velocity for under-damped springs
                     * as over- and critically-damped springs can't overshoot, so
                     * checking only for displacement is enough.
                     */ if (dampingRatio < 1) currentVelocity = (0, _velocityMjs.calcGeneratorVelocity)(resolveSpring, t, current);
                    else currentVelocity = 0;
                }
                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
                state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
            } else state.done = t >= duration;
            state.value = state.done ? target : current;
            return state;
        }
    };
}

},{"../../../utils/time-conversion.mjs":"gdr8V","../utils/velocity.mjs":"dfkbs","./find.mjs":"6HyEr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dfkbs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calcGeneratorVelocity", ()=>calcGeneratorVelocity);
var _velocityPerSecondMjs = require("../../../utils/velocity-per-second.mjs");
const velocitySampleDuration = 5; // ms
function calcGeneratorVelocity(resolveValue, t, current) {
    const prevT = Math.max(t - velocitySampleDuration, 0);
    return (0, _velocityPerSecondMjs.velocityPerSecond)(current - resolveValue(prevT), t - prevT);
}

},{"../../../utils/velocity-per-second.mjs":"1eGg6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1eGg6":[function(require,module,exports) {
/*
  Convert velocity into velocity per second

  @param [number]: Unit per frame
  @param [number]: Frame duration in ms
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "velocityPerSecond", ()=>velocityPerSecond);
function velocityPerSecond(velocity, frameDuration) {
    return frameDuration ? velocity * (1000 / frameDuration) : 0;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HyEr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calcAngularFreq", ()=>calcAngularFreq);
parcelHelpers.export(exports, "findSpring", ()=>findSpring);
parcelHelpers.export(exports, "maxDamping", ()=>maxDamping);
parcelHelpers.export(exports, "maxDuration", ()=>maxDuration);
parcelHelpers.export(exports, "minDamping", ()=>minDamping);
parcelHelpers.export(exports, "minDuration", ()=>minDuration);
var _errorsMjs = require("../../../utils/errors.mjs");
var _clampMjs = require("../../../utils/clamp.mjs");
var _timeConversionMjs = require("../../../utils/time-conversion.mjs");
const safeMin = 0.001;
const minDuration = 0.01;
const maxDuration = 10.0;
const minDamping = 0.05;
const maxDamping = 1;
function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
    let envelope;
    let derivative;
    (0, _errorsMjs.warning)(duration <= (0, _timeConversionMjs.secondsToMilliseconds)(maxDuration), "Spring duration must be 10 seconds or less");
    let dampingRatio = 1 - bounce;
    /**
     * Restrict dampingRatio and duration to within acceptable ranges.
     */ dampingRatio = (0, _clampMjs.clamp)(minDamping, maxDamping, dampingRatio);
    duration = (0, _clampMjs.clamp)(minDuration, maxDuration, (0, _timeConversionMjs.millisecondsToSeconds)(duration));
    if (dampingRatio < 1) {
        /**
         * Underdamped spring
         */ envelope = (undampedFreq)=>{
            const exponentialDecay = undampedFreq * dampingRatio;
            const delta = exponentialDecay * duration;
            const a = exponentialDecay - velocity;
            const b = calcAngularFreq(undampedFreq, dampingRatio);
            const c = Math.exp(-delta);
            return safeMin - a / b * c;
        };
        derivative = (undampedFreq)=>{
            const exponentialDecay = undampedFreq * dampingRatio;
            const delta = exponentialDecay * duration;
            const d = delta * velocity + velocity;
            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;
            const f = Math.exp(-delta);
            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);
            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;
            return factor * ((d - e) * f) / g;
        };
    } else {
        /**
         * Critically-damped spring
         */ envelope = (undampedFreq)=>{
            const a = Math.exp(-undampedFreq * duration);
            const b = (undampedFreq - velocity) * duration + 1;
            return -safeMin + a * b;
        };
        derivative = (undampedFreq)=>{
            const a = Math.exp(-undampedFreq * duration);
            const b = (velocity - undampedFreq) * (duration * duration);
            return a * b;
        };
    }
    const initialGuess = 5 / duration;
    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
    duration = (0, _timeConversionMjs.secondsToMilliseconds)(duration);
    if (isNaN(undampedFreq)) return {
        stiffness: 100,
        damping: 10,
        duration
    };
    else {
        const stiffness = Math.pow(undampedFreq, 2) * mass;
        return {
            stiffness,
            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
            duration
        };
    }
}
const rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
    let result = initialGuess;
    for(let i = 1; i < rootIterations; i++)result = result - envelope(result) / derivative(result);
    return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

},{"../../../utils/errors.mjs":"drRZ6","../../../utils/clamp.mjs":"aZOh4","../../../utils/time-conversion.mjs":"gdr8V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"50UUJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inertia", ()=>inertia);
var _indexMjs = require("./spring/index.mjs");
var _velocityMjs = require("./utils/velocity.mjs");
function inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {
    const origin = keyframes[0];
    const state = {
        done: false,
        value: origin
    };
    const isOutOfBounds = (v)=>min !== undefined && v < min || max !== undefined && v > max;
    const nearestBoundary = (v)=>{
        if (min === undefined) return max;
        if (max === undefined) return min;
        return Math.abs(min - v) < Math.abs(max - v) ? min : max;
    };
    let amplitude = power * velocity;
    const ideal = origin + amplitude;
    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);
    /**
     * If the target has changed we need to re-calculate the amplitude, otherwise
     * the animation will start from the wrong position.
     */ if (target !== ideal) amplitude = target - origin;
    const calcDelta = (t)=>-amplitude * Math.exp(-t / timeConstant);
    const calcLatest = (t)=>target + calcDelta(t);
    const applyFriction = (t)=>{
        const delta = calcDelta(t);
        const latest = calcLatest(t);
        state.done = Math.abs(delta) <= restDelta;
        state.value = state.done ? target : latest;
    };
    /**
     * Ideally this would resolve for t in a stateless way, we could
     * do that by always precalculating the animation but as we know
     * this will be done anyway we can assume that spring will
     * be discovered during that.
     */ let timeReachedBoundary;
    let spring$1;
    const checkCatchBoundary = (t)=>{
        if (!isOutOfBounds(state.value)) return;
        timeReachedBoundary = t;
        spring$1 = (0, _indexMjs.spring)({
            keyframes: [
                state.value,
                nearestBoundary(state.value)
            ],
            velocity: (0, _velocityMjs.calcGeneratorVelocity)(calcLatest, t, state.value),
            damping: bounceDamping,
            stiffness: bounceStiffness,
            restDelta,
            restSpeed
        });
    };
    checkCatchBoundary(0);
    return {
        calculatedDuration: null,
        next: (t)=>{
            /**
             * We need to resolve the friction to figure out if we need a
             * spring but we don't want to do this twice per frame. So here
             * we flag if we updated for this frame and later if we did
             * we can skip doing it again.
             */ let hasUpdatedFrame = false;
            if (!spring$1 && timeReachedBoundary === undefined) {
                hasUpdatedFrame = true;
                applyFriction(t);
                checkCatchBoundary(t);
            }
            /**
             * If we have a spring and the provided t is beyond the moment the friction
             * animation crossed the min/max boundary, use the spring.
             */ if (timeReachedBoundary !== undefined && t > timeReachedBoundary) return spring$1.next(t - timeReachedBoundary);
            else {
                !hasUpdatedFrame && applyFriction(t);
                return state;
            }
        }
    };
}

},{"./spring/index.mjs":"aNeOI","./utils/velocity.mjs":"dfkbs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fRIMv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "frameloopDriver", ()=>frameloopDriver);
var _frameMjs = require("../../../frameloop/frame.mjs");
const frameloopDriver = (update)=>{
    const passTimestamp = ({ timestamp })=>update(timestamp);
    return {
        start: ()=>(0, _frameMjs.frame).update(passTimestamp, true),
        stop: ()=>(0, _frameMjs.cancelFrame)(passTimestamp),
        /**
         * If we're processing this frame we can use the
         * framelocked timestamp to keep things in sync.
         */ now: ()=>(0, _frameMjs.frameData).isProcessing ? (0, _frameMjs.frameData).timestamp : performance.now()
    };
};

},{"../../../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iTe1T":[function(require,module,exports) {
/**
 * Implement a practical max duration for keyframe generation
 * to prevent infinite loops
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calcGeneratorDuration", ()=>calcGeneratorDuration);
parcelHelpers.export(exports, "maxGeneratorDuration", ()=>maxGeneratorDuration);
const maxGeneratorDuration = 20000;
function calcGeneratorDuration(generator) {
    let duration = 0;
    const timeStep = 50;
    let state = generator.next(duration);
    while(!state.done && duration < maxGeneratorDuration){
        duration += timeStep;
        state = generator.next(duration);
    }
    return duration >= maxGeneratorDuration ? Infinity : duration;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fPYS2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "memo", ()=>memo);
function memo(callback) {
    let result;
    return ()=>{
        if (result === undefined) result = callback();
        return result;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"luMrD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createInstantAnimation", ()=>createInstantAnimation);
var _indexMjs = require("./js/index.mjs");
var _noopMjs = require("../../utils/noop.mjs");
function createInstantAnimation({ keyframes, delay, onUpdate, onComplete }) {
    const setValue = ()=>{
        onUpdate && onUpdate(keyframes[keyframes.length - 1]);
        onComplete && onComplete();
        /**
         * TODO: As this API grows it could make sense to always return
         * animateValue. This will be a bigger project as animateValue
         * is frame-locked whereas this function resolves instantly.
         * This is a behavioural change and also has ramifications regarding
         * assumptions within tests.
         */ return {
            time: 0,
            speed: 1,
            duration: 0,
            play: (0, _noopMjs.noop),
            pause: (0, _noopMjs.noop),
            stop: (0, _noopMjs.noop),
            then: (resolve)=>{
                resolve();
                return Promise.resolve();
            },
            cancel: (0, _noopMjs.noop),
            complete: (0, _noopMjs.noop)
        };
    };
    return delay ? (0, _indexMjs.animateValue)({
        keyframes: [
            0,
            1
        ],
        duration: 0,
        delay,
        onComplete: setValue
    }) : setValue();
}

},{"./js/index.mjs":"5PB20","../../utils/noop.mjs":"67SDH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4yIKR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefaultTransition", ()=>getDefaultTransition);
var _transformMjs = require("../../render/html/utils/transform.mjs");
const underDampedSpring = {
    type: "spring",
    stiffness: 500,
    damping: 25,
    restSpeed: 10
};
const criticallyDampedSpring = (target)=>({
        type: "spring",
        stiffness: 550,
        damping: target === 0 ? 2 * Math.sqrt(550) : 30,
        restSpeed: 10
    });
const keyframesTransition = {
    type: "keyframes",
    duration: 0.8
};
/**
 * Default easing curve is a slightly shallower version of
 * the default browser easing curve.
 */ const ease = {
    type: "keyframes",
    ease: [
        0.25,
        0.1,
        0.35,
        1
    ],
    duration: 0.3
};
const getDefaultTransition = (valueKey, { keyframes })=>{
    if (keyframes.length > 2) return keyframesTransition;
    else if ((0, _transformMjs.transformProps).has(valueKey)) return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes[1]) : underDampedSpring;
    return ease;
};

},{"../../render/html/utils/transform.mjs":"iSy8E","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7YoDs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isAnimatable", ()=>isAnimatable);
var _indexMjs = require("../../value/types/complex/index.mjs");
/**
 * Check if a value is animatable. Examples:
 *
 * ✅: 100, "100px", "#fff"
 * ❌: "block", "url(2.jpg)"
 * @param value
 *
 * @internal
 */ const isAnimatable = (key, value)=>{
    // If the list of keys tat might be non-animatable grows, replace with Set
    if (key === "zIndex") return false;
    // If it's a number or a keyframes array, we can animate it. We might at some point
    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,
    // but for now lets leave it like this for performance reasons
    if (typeof value === "number" || Array.isArray(value)) return true;
    if (typeof value === "string" && // It's animatable if we have a string
    ((0, _indexMjs.complex).test(value) || value === "0") && // And it contains numbers and/or colors
    !value.startsWith("url(") // Unless it starts with "url("
    ) return true;
    return false;
};

},{"../../value/types/complex/index.mjs":"lmoWV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1c50D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getKeyframes", ()=>getKeyframes);
var _animatableNoneMjs = require("../../render/dom/value-types/animatable-none.mjs");
var _isAnimatableMjs = require("./is-animatable.mjs");
var _isNoneMjs = require("./is-none.mjs");
function getKeyframes(value, valueName, target, transition) {
    const isTargetAnimatable = (0, _isAnimatableMjs.isAnimatable)(valueName, target);
    let keyframes;
    if (Array.isArray(target)) keyframes = [
        ...target
    ];
    else keyframes = [
        null,
        target
    ];
    const defaultOrigin = transition.from !== undefined ? transition.from : value.get();
    let animatableTemplateValue = undefined;
    const noneKeyframeIndexes = [];
    for(let i = 0; i < keyframes.length; i++){
        /**
         * Fill null/wildcard keyframes
         */ if (keyframes[i] === null) keyframes[i] = i === 0 ? defaultOrigin : keyframes[i - 1];
        if ((0, _isNoneMjs.isNone)(keyframes[i])) noneKeyframeIndexes.push(i);
        // TODO: Clean this conditional, it works for now
        if (typeof keyframes[i] === "string" && keyframes[i] !== "none" && keyframes[i] !== "0") animatableTemplateValue = keyframes[i];
    }
    if (isTargetAnimatable && noneKeyframeIndexes.length && animatableTemplateValue) for(let i = 0; i < noneKeyframeIndexes.length; i++){
        const index = noneKeyframeIndexes[i];
        keyframes[index] = (0, _animatableNoneMjs.getAnimatableNone)(valueName, animatableTemplateValue);
    }
    return keyframes;
}

},{"../../render/dom/value-types/animatable-none.mjs":"imHSe","./is-animatable.mjs":"7YoDs","./is-none.mjs":"hb2Jm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"imHSe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAnimatableNone", ()=>getAnimatableNone);
var _indexMjs = require("../../../value/types/complex/index.mjs");
var _filterMjs = require("../../../value/types/complex/filter.mjs");
var _defaultsMjs = require("./defaults.mjs");
function getAnimatableNone(key, value) {
    let defaultValueType = (0, _defaultsMjs.getDefaultValueType)(key);
    if (defaultValueType !== (0, _filterMjs.filter)) defaultValueType = (0, _indexMjs.complex);
    // If value is not recognised as animatable, ie "none", create an animatable version origin based on the target
    return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : undefined;
}

},{"../../../value/types/complex/index.mjs":"lmoWV","../../../value/types/complex/filter.mjs":"8VF6A","./defaults.mjs":"1Ajoh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8VF6A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filter", ()=>filter);
var _indexMjs = require("./index.mjs");
var _utilsMjs = require("../utils.mjs");
/**
 * Properties that should default to 1 or 100%
 */ const maxDefaults = new Set([
    "brightness",
    "contrast",
    "saturate",
    "opacity"
]);
function applyDefaultFilter(v) {
    const [name, value] = v.slice(0, -1).split("(");
    if (name === "drop-shadow") return v;
    const [number] = value.match((0, _utilsMjs.floatRegex)) || [];
    if (!number) return v;
    const unit = value.replace(number, "");
    let defaultValue = maxDefaults.has(name) ? 1 : 0;
    if (number !== value) defaultValue *= 100;
    return name + "(" + defaultValue + unit + ")";
}
const functionRegex = /([a-z-]*)\(.*?\)/g;
const filter = {
    ...(0, _indexMjs.complex),
    getAnimatableNone: (v)=>{
        const functions = v.match(functionRegex);
        return functions ? functions.map(applyDefaultFilter).join(" ") : v;
    }
};

},{"./index.mjs":"lmoWV","../utils.mjs":"kaB0b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Ajoh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultValueTypes", ()=>defaultValueTypes);
parcelHelpers.export(exports, "getDefaultValueType", ()=>getDefaultValueType);
var _indexMjs = require("../../../value/types/color/index.mjs");
var _filterMjs = require("../../../value/types/complex/filter.mjs");
var _numberMjs = require("./number.mjs");
/**
 * A map of default value types for common values
 */ const defaultValueTypes = {
    ...(0, _numberMjs.numberValueTypes),
    color: // Color props
    (0, _indexMjs.color),
    backgroundColor: (0, _indexMjs.color),
    outlineColor: (0, _indexMjs.color),
    fill: (0, _indexMjs.color),
    stroke: (0, _indexMjs.color),
    // Border props
    borderColor: (0, _indexMjs.color),
    borderTopColor: (0, _indexMjs.color),
    borderRightColor: (0, _indexMjs.color),
    borderBottomColor: (0, _indexMjs.color),
    borderLeftColor: (0, _indexMjs.color),
    filter: (0, _filterMjs.filter),
    WebkitFilter: (0, _filterMjs.filter)
};
/**
 * Gets the default ValueType for the provided value key
 */ const getDefaultValueType = (key)=>defaultValueTypes[key];

},{"../../../value/types/color/index.mjs":"1nAma","../../../value/types/complex/filter.mjs":"8VF6A","./number.mjs":"biQiX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hb2Jm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNone", ()=>isNone);
var _isZeroValueStringMjs = require("../../utils/is-zero-value-string.mjs");
function isNone(value) {
    if (typeof value === "number") return value === 0;
    else if (value !== null) return value === "none" || value === "0" || (0, _isZeroValueStringMjs.isZeroValueString)(value);
}

},{"../../utils/is-zero-value-string.mjs":"45kz9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45kz9":[function(require,module,exports) {
/**
 * Check if the value is a zero value string like "0px" or "0%"
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isZeroValueString", ()=>isZeroValueString);
const isZeroValueString = (v)=>/^0[^.\s]+$/.test(v);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsOYk":[function(require,module,exports) {
/**
 * Decide whether a transition is defined on a given Transition.
 * This filters out orchestration options and returns true
 * if any options are left.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getValueTransition", ()=>getValueTransition);
parcelHelpers.export(exports, "isTransitionDefined", ()=>isTransitionDefined);
function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {
    return !!Object.keys(transition).length;
}
function getValueTransition(transition, key) {
    return transition[key] || transition["default"] || transition;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6vOmr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isWillChangeMotionValue", ()=>isWillChangeMotionValue);
var _isMotionValueMjs = require("../utils/is-motion-value.mjs");
function isWillChangeMotionValue(value) {
    return Boolean((0, _isMotionValueMjs.isMotionValue)(value) && value.add);
}

},{"../utils/is-motion-value.mjs":"94AYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5AEB8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkTargetForNewValues", ()=>checkTargetForNewValues);
parcelHelpers.export(exports, "getOrigin", ()=>getOrigin);
parcelHelpers.export(exports, "getOriginFromTransition", ()=>getOriginFromTransition);
parcelHelpers.export(exports, "setTarget", ()=>setTarget);
parcelHelpers.export(exports, "setValues", ()=>setValues);
var _isNumericalStringMjs = require("../../utils/is-numerical-string.mjs");
var _isZeroValueStringMjs = require("../../utils/is-zero-value-string.mjs");
var _resolveValueMjs = require("../../utils/resolve-value.mjs");
var _indexMjs = require("../../value/index.mjs");
var _indexMjs1 = require("../../value/types/complex/index.mjs");
var _animatableNoneMjs = require("../dom/value-types/animatable-none.mjs");
var _findMjs = require("../dom/value-types/find.mjs");
var _resolveDynamicVariantsMjs = require("./resolve-dynamic-variants.mjs");
/**
 * Set VisualElement's MotionValue, creating a new MotionValue for it if
 * it doesn't exist.
 */ function setMotionValue(visualElement, key, value) {
    if (visualElement.hasValue(key)) visualElement.getValue(key).set(value);
    else visualElement.addValue(key, (0, _indexMjs.motionValue)(value));
}
function setTarget(visualElement, definition) {
    const resolved = (0, _resolveDynamicVariantsMjs.resolveVariant)(visualElement, definition);
    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};
    target = {
        ...target,
        ...transitionEnd
    };
    for(const key in target){
        const value = (0, _resolveValueMjs.resolveFinalValueInKeyframes)(target[key]);
        setMotionValue(visualElement, key, value);
    }
}
function setVariants(visualElement, variantLabels) {
    const reversedLabels = [
        ...variantLabels
    ].reverse();
    reversedLabels.forEach((key)=>{
        const variant = visualElement.getVariant(key);
        variant && setTarget(visualElement, variant);
        if (visualElement.variantChildren) visualElement.variantChildren.forEach((child)=>{
            setVariants(child, variantLabels);
        });
    });
}
function setValues(visualElement, definition) {
    if (Array.isArray(definition)) return setVariants(visualElement, definition);
    else if (typeof definition === "string") return setVariants(visualElement, [
        definition
    ]);
    else setTarget(visualElement, definition);
}
function checkTargetForNewValues(visualElement, target, origin) {
    var _a, _b;
    const newValueKeys = Object.keys(target).filter((key)=>!visualElement.hasValue(key));
    const numNewValues = newValueKeys.length;
    if (!numNewValues) return;
    for(let i = 0; i < numNewValues; i++){
        const key = newValueKeys[i];
        const targetValue = target[key];
        let value = null;
        /**
         * If the target is a series of keyframes, we can use the first value
         * in the array. If this first value is null, we'll still need to read from the DOM.
         */ if (Array.isArray(targetValue)) value = targetValue[0];
        /**
         * If the target isn't keyframes, or the first keyframe was null, we need to
         * first check if an origin value was explicitly defined in the transition as "from",
         * if not read the value from the DOM. As an absolute fallback, take the defined target value.
         */ if (value === null) value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
        /**
         * If value is still undefined or null, ignore it. Preferably this would throw,
         * but this was causing issues in Framer.
         */ if (value === undefined || value === null) continue;
        if (typeof value === "string" && ((0, _isNumericalStringMjs.isNumericalString)(value) || (0, _isZeroValueStringMjs.isZeroValueString)(value))) // If this is a number read as a string, ie "0" or "200", convert it to a number
        value = parseFloat(value);
        else if (!(0, _findMjs.findValueType)(value) && (0, _indexMjs1.complex).test(targetValue)) value = (0, _animatableNoneMjs.getAnimatableNone)(key, targetValue);
        visualElement.addValue(key, (0, _indexMjs.motionValue)(value, {
            owner: visualElement
        }));
        if (origin[key] === undefined) origin[key] = value;
        if (value !== null) visualElement.setBaseTarget(key, value);
    }
}
function getOriginFromTransition(key, transition) {
    if (!transition) return;
    const valueTransition = transition[key] || transition["default"] || transition;
    return valueTransition.from;
}
function getOrigin(target, transition, visualElement) {
    const origin = {};
    for(const key in target){
        const transitionOrigin = getOriginFromTransition(key, transition);
        if (transitionOrigin !== undefined) origin[key] = transitionOrigin;
        else {
            const value = visualElement.getValue(key);
            if (value) origin[key] = value.get();
        }
    }
    return origin;
}

},{"../../utils/is-numerical-string.mjs":"c9b9u","../../utils/is-zero-value-string.mjs":"45kz9","../../utils/resolve-value.mjs":"cPnbP","../../value/index.mjs":"he8bY","../../value/types/complex/index.mjs":"lmoWV","../dom/value-types/animatable-none.mjs":"imHSe","../dom/value-types/find.mjs":"3gWgl","./resolve-dynamic-variants.mjs":"dSXph","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c9b9u":[function(require,module,exports) {
/**
 * Check if value is a numerical string, ie a string that is purely a number eg "100" or "-100.1"
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNumericalString", ()=>isNumericalString);
const isNumericalString = (v)=>/^\-?\d*\.?\d+$/.test(v);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"he8bY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MotionValue", ()=>MotionValue);
parcelHelpers.export(exports, "collectMotionValues", ()=>collectMotionValues);
parcelHelpers.export(exports, "motionValue", ()=>motionValue);
var _subscriptionManagerMjs = require("../utils/subscription-manager.mjs");
var _velocityPerSecondMjs = require("../utils/velocity-per-second.mjs");
var _warnOnceMjs = require("../utils/warn-once.mjs");
var _frameMjs = require("../frameloop/frame.mjs");
const isFloat = (value)=>{
    return !isNaN(parseFloat(value));
};
const collectMotionValues = {
    current: undefined
};
/**
 * `MotionValue` is used to track the state and velocity of motion values.
 *
 * @public
 */ class MotionValue {
    /**
     * @param init - The initiating value
     * @param config - Optional configuration options
     *
     * -  `transformer`: A function to transform incoming values with.
     *
     * @internal
     */ constructor(init, options = {}){
        /**
         * This will be replaced by the build step with the latest version number.
         * When MotionValues are provided to motion components, warn if versions are mixed.
         */ this.version = "10.16.4";
        /**
         * Duration, in milliseconds, since last updating frame.
         *
         * @internal
         */ this.timeDelta = 0;
        /**
         * Timestamp of the last time this `MotionValue` was updated.
         *
         * @internal
         */ this.lastUpdated = 0;
        /**
         * Tracks whether this value can output a velocity. Currently this is only true
         * if the value is numerical, but we might be able to widen the scope here and support
         * other value types.
         *
         * @internal
         */ this.canTrackVelocity = false;
        /**
         * An object containing a SubscriptionManager for each active event.
         */ this.events = {};
        this.updateAndNotify = (v, render = true)=>{
            this.prev = this.current;
            this.current = v;
            // Update timestamp
            const { delta, timestamp } = (0, _frameMjs.frameData);
            if (this.lastUpdated !== timestamp) {
                this.timeDelta = delta;
                this.lastUpdated = timestamp;
                (0, _frameMjs.frame).postRender(this.scheduleVelocityCheck);
            }
            // Update update subscribers
            if (this.prev !== this.current && this.events.change) this.events.change.notify(this.current);
            // Update velocity subscribers
            if (this.events.velocityChange) this.events.velocityChange.notify(this.getVelocity());
            // Update render subscribers
            if (render && this.events.renderRequest) this.events.renderRequest.notify(this.current);
        };
        /**
         * Schedule a velocity check for the next frame.
         *
         * This is an instanced and bound function to prevent generating a new
         * function once per frame.
         *
         * @internal
         */ this.scheduleVelocityCheck = ()=>(0, _frameMjs.frame).postRender(this.velocityCheck);
        /**
         * Updates `prev` with `current` if the value hasn't been updated this frame.
         * This ensures velocity calculations return `0`.
         *
         * This is an instanced and bound function to prevent generating a new
         * function once per frame.
         *
         * @internal
         */ this.velocityCheck = ({ timestamp })=>{
            if (timestamp !== this.lastUpdated) {
                this.prev = this.current;
                if (this.events.velocityChange) this.events.velocityChange.notify(this.getVelocity());
            }
        };
        this.hasAnimated = false;
        this.prev = this.current = init;
        this.canTrackVelocity = isFloat(this.current);
        this.owner = options.owner;
    }
    /**
     * Adds a function that will be notified when the `MotionValue` is updated.
     *
     * It returns a function that, when called, will cancel the subscription.
     *
     * When calling `onChange` inside a React component, it should be wrapped with the
     * `useEffect` hook. As it returns an unsubscribe function, this should be returned
     * from the `useEffect` function to ensure you don't add duplicate subscribers..
     *
     * ```jsx
     * export const MyComponent = () => {
     *   const x = useMotionValue(0)
     *   const y = useMotionValue(0)
     *   const opacity = useMotionValue(1)
     *
     *   useEffect(() => {
     *     function updateOpacity() {
     *       const maxXY = Math.max(x.get(), y.get())
     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
     *       opacity.set(newOpacity)
     *     }
     *
     *     const unsubscribeX = x.on("change", updateOpacity)
     *     const unsubscribeY = y.on("change", updateOpacity)
     *
     *     return () => {
     *       unsubscribeX()
     *       unsubscribeY()
     *     }
     *   }, [])
     *
     *   return <motion.div style={{ x }} />
     * }
     * ```
     *
     * @param subscriber - A function that receives the latest value.
     * @returns A function that, when called, will cancel this subscription.
     *
     * @deprecated
     */ onChange(subscription) {
        (0, _warnOnceMjs.warnOnce)(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
        return this.on("change", subscription);
    }
    on(eventName, callback) {
        if (!this.events[eventName]) this.events[eventName] = new (0, _subscriptionManagerMjs.SubscriptionManager)();
        const unsubscribe = this.events[eventName].add(callback);
        if (eventName === "change") return ()=>{
            unsubscribe();
            /**
                 * If we have no more change listeners by the start
                 * of the next frame, stop active animations.
                 */ (0, _frameMjs.frame).read(()=>{
                if (!this.events.change.getSize()) this.stop();
            });
        };
        return unsubscribe;
    }
    clearListeners() {
        for(const eventManagers in this.events)this.events[eventManagers].clear();
    }
    /**
     * Attaches a passive effect to the `MotionValue`.
     *
     * @internal
     */ attach(passiveEffect, stopPassiveEffect) {
        this.passiveEffect = passiveEffect;
        this.stopPassiveEffect = stopPassiveEffect;
    }
    /**
     * Sets the state of the `MotionValue`.
     *
     * @remarks
     *
     * ```jsx
     * const x = useMotionValue(0)
     * x.set(10)
     * ```
     *
     * @param latest - Latest value to set.
     * @param render - Whether to notify render subscribers. Defaults to `true`
     *
     * @public
     */ set(v, render = true) {
        if (!render || !this.passiveEffect) this.updateAndNotify(v, render);
        else this.passiveEffect(v, this.updateAndNotify);
    }
    setWithVelocity(prev, current, delta) {
        this.set(current);
        this.prev = prev;
        this.timeDelta = delta;
    }
    /**
     * Set the state of the `MotionValue`, stopping any active animations,
     * effects, and resets velocity to `0`.
     */ jump(v) {
        this.updateAndNotify(v);
        this.prev = v;
        this.stop();
        if (this.stopPassiveEffect) this.stopPassiveEffect();
    }
    /**
     * Returns the latest state of `MotionValue`
     *
     * @returns - The latest state of `MotionValue`
     *
     * @public
     */ get() {
        if (collectMotionValues.current) collectMotionValues.current.push(this);
        return this.current;
    }
    /**
     * @public
     */ getPrevious() {
        return this.prev;
    }
    /**
     * Returns the latest velocity of `MotionValue`
     *
     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
     *
     * @public
     */ getVelocity() {
        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful
        return this.canTrackVelocity ? (0, _velocityPerSecondMjs.velocityPerSecond)(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
    }
    /**
     * Registers a new animation to control this `MotionValue`. Only one
     * animation can drive a `MotionValue` at one time.
     *
     * ```jsx
     * value.start()
     * ```
     *
     * @param animation - A function that starts the provided animation
     *
     * @internal
     */ start(startAnimation) {
        this.stop();
        return new Promise((resolve)=>{
            this.hasAnimated = true;
            this.animation = startAnimation(resolve);
            if (this.events.animationStart) this.events.animationStart.notify();
        }).then(()=>{
            if (this.events.animationComplete) this.events.animationComplete.notify();
            this.clearAnimation();
        });
    }
    /**
     * Stop the currently active animation.
     *
     * @public
     */ stop() {
        if (this.animation) {
            this.animation.stop();
            if (this.events.animationCancel) this.events.animationCancel.notify();
        }
        this.clearAnimation();
    }
    /**
     * Returns `true` if this value is currently animating.
     *
     * @public
     */ isAnimating() {
        return !!this.animation;
    }
    clearAnimation() {
        delete this.animation;
    }
    /**
     * Destroy and clean up subscribers to this `MotionValue`.
     *
     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
     * created a `MotionValue` via the `motionValue` function.
     *
     * @public
     */ destroy() {
        this.clearListeners();
        this.stop();
        if (this.stopPassiveEffect) this.stopPassiveEffect();
    }
}
function motionValue(init, options) {
    return new MotionValue(init, options);
}

},{"../utils/subscription-manager.mjs":"fxDTo","../utils/velocity-per-second.mjs":"1eGg6","../utils/warn-once.mjs":"JIiQV","../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fxDTo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SubscriptionManager", ()=>SubscriptionManager);
var _arrayMjs = require("./array.mjs");
class SubscriptionManager {
    constructor(){
        this.subscriptions = [];
    }
    add(handler) {
        (0, _arrayMjs.addUniqueItem)(this.subscriptions, handler);
        return ()=>(0, _arrayMjs.removeItem)(this.subscriptions, handler);
    }
    notify(a, b, c) {
        const numSubscriptions = this.subscriptions.length;
        if (!numSubscriptions) return;
        if (numSubscriptions === 1) /**
             * If there's only a single handler we can just call it without invoking a loop.
             */ this.subscriptions[0](a, b, c);
        else for(let i = 0; i < numSubscriptions; i++){
            /**
                 * Check whether the handler exists before firing as it's possible
                 * the subscriptions were modified during this loop running.
                 */ const handler = this.subscriptions[i];
            handler && handler(a, b, c);
        }
    }
    getSize() {
        return this.subscriptions.length;
    }
    clear() {
        this.subscriptions.length = 0;
    }
}

},{"./array.mjs":"fpJYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fpJYa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addUniqueItem", ()=>addUniqueItem);
parcelHelpers.export(exports, "moveItem", ()=>moveItem);
parcelHelpers.export(exports, "removeItem", ()=>removeItem);
function addUniqueItem(arr, item) {
    if (arr.indexOf(item) === -1) arr.push(item);
}
function removeItem(arr, item) {
    const index = arr.indexOf(item);
    if (index > -1) arr.splice(index, 1);
}
// Adapted from array-move
function moveItem([...arr], fromIndex, toIndex) {
    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
    if (startIndex >= 0 && startIndex < arr.length) {
        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
        const [item] = arr.splice(fromIndex, 1);
        arr.splice(endIndex, 0, item);
    }
    return arr;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"JIiQV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "warnOnce", ()=>warnOnce);
const warned = new Set();
function warnOnce(condition, message, element) {
    if (condition || warned.has(message)) return;
    console.warn(message);
    if (element) console.warn(element);
    warned.add(message);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3gWgl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "findValueType", ()=>findValueType);
var _indexMjs = require("../../../value/types/color/index.mjs");
var _indexMjs1 = require("../../../value/types/complex/index.mjs");
var _dimensionsMjs = require("./dimensions.mjs");
var _testMjs = require("./test.mjs");
/**
 * A list of all ValueTypes
 */ const valueTypes = [
    ...(0, _dimensionsMjs.dimensionValueTypes),
    (0, _indexMjs.color),
    (0, _indexMjs1.complex)
];
/**
 * Tests a value against the list of ValueTypes
 */ const findValueType = (v)=>valueTypes.find((0, _testMjs.testValueType)(v));

},{"../../../value/types/color/index.mjs":"1nAma","../../../value/types/complex/index.mjs":"lmoWV","./dimensions.mjs":"3Yt0V","./test.mjs":"kQneZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Yt0V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dimensionValueTypes", ()=>dimensionValueTypes);
parcelHelpers.export(exports, "findDimensionValueType", ()=>findDimensionValueType);
var _indexMjs = require("../../../value/types/numbers/index.mjs");
var _unitsMjs = require("../../../value/types/numbers/units.mjs");
var _testMjs = require("./test.mjs");
var _typeAutoMjs = require("./type-auto.mjs");
/**
 * A list of value types commonly used for dimensions
 */ const dimensionValueTypes = [
    (0, _indexMjs.number),
    (0, _unitsMjs.px),
    (0, _unitsMjs.percent),
    (0, _unitsMjs.degrees),
    (0, _unitsMjs.vw),
    (0, _unitsMjs.vh),
    (0, _typeAutoMjs.auto)
];
/**
 * Tests a dimensional value against the list of dimension ValueTypes
 */ const findDimensionValueType = (v)=>dimensionValueTypes.find((0, _testMjs.testValueType)(v));

},{"../../../value/types/numbers/index.mjs":"bI9mf","../../../value/types/numbers/units.mjs":"lGBHA","./test.mjs":"kQneZ","./type-auto.mjs":"fzm2b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQneZ":[function(require,module,exports) {
/**
 * Tests a provided value against a ValueType
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "testValueType", ()=>testValueType);
const testValueType = (v)=>(type)=>type.test(v);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fzm2b":[function(require,module,exports) {
/**
 * ValueType for "auto"
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "auto", ()=>auto);
const auto = {
    test: (v)=>v === "auto",
    parse: (v)=>v
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80mMV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animateVariant", ()=>animateVariant);
parcelHelpers.export(exports, "sortByTreeOrder", ()=>sortByTreeOrder);
var _resolveDynamicVariantsMjs = require("../../render/utils/resolve-dynamic-variants.mjs");
var _visualElementTargetMjs = require("./visual-element-target.mjs");
function animateVariant(visualElement, variant, options = {}) {
    const resolved = (0, _resolveDynamicVariantsMjs.resolveVariant)(visualElement, variant, options.custom);
    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
    if (options.transitionOverride) transition = options.transitionOverride;
    /**
     * If we have a variant, create a callback that runs it as an animation.
     * Otherwise, we resolve a Promise immediately for a composable no-op.
     */ const getAnimation = resolved ? ()=>Promise.all((0, _visualElementTargetMjs.animateTarget)(visualElement, resolved, options)) : ()=>Promise.resolve();
    /**
     * If we have children, create a callback that runs all their animations.
     * Otherwise, we resolve a Promise immediately for a composable no-op.
     */ const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0)=>{
        const { delayChildren = 0, staggerChildren, staggerDirection } = transition;
        return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
    } : ()=>Promise.resolve();
    /**
     * If the transition explicitly defines a "when" option, we need to resolve either
     * this animation or all children animations before playing the other.
     */ const { when } = transition;
    if (when) {
        const [first, last] = when === "beforeChildren" ? [
            getAnimation,
            getChildAnimations
        ] : [
            getChildAnimations,
            getAnimation
        ];
        return first().then(()=>last());
    } else return Promise.all([
        getAnimation(),
        getChildAnimations(options.delay)
    ]);
}
function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
    const animations = [];
    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
    const generateStaggerDuration = staggerDirection === 1 ? (i = 0)=>i * staggerChildren : (i = 0)=>maxStaggerDuration - i * staggerChildren;
    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i)=>{
        child.notify("AnimationStart", variant);
        animations.push(animateVariant(child, variant, {
            ...options,
            delay: delayChildren + generateStaggerDuration(i)
        }).then(()=>child.notify("AnimationComplete", variant)));
    });
    return Promise.all(animations);
}
function sortByTreeOrder(a, b) {
    return a.sortNodePosition(b);
}

},{"../../render/utils/resolve-dynamic-variants.mjs":"dSXph","./visual-element-target.mjs":"6SL9E","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"inv8k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ExitAnimationFeature", ()=>ExitAnimationFeature);
var _featureMjs = require("../Feature.mjs");
let id = 0;
class ExitAnimationFeature extends (0, _featureMjs.Feature) {
    constructor(){
        super(...arguments);
        this.id = id++;
    }
    update() {
        if (!this.node.presenceContext) return;
        const { isPresent, onExitComplete, custom } = this.node.presenceContext;
        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
        if (!this.node.animationState || isPresent === prevIsPresent) return;
        const exitAnimation = this.node.animationState.setActive("exit", !isPresent, {
            custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom
        });
        if (onExitComplete && !isPresent) exitAnimation.then(()=>onExitComplete(this.id));
    }
    mount() {
        const { register } = this.node.presenceContext || {};
        if (register) this.unmount = register(this.id);
    }
    unmount() {}
}

},{"../Feature.mjs":"lI7Ue","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fBUJ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "drag", ()=>drag);
var _indexMjs = require("../../gestures/drag/index.mjs");
var _indexMjs1 = require("../../gestures/pan/index.mjs");
var _measureLayoutMjs = require("./layout/MeasureLayout.mjs");
var _htmlprojectionNodeMjs = require("../../projection/node/HTMLProjectionNode.mjs");
const drag = {
    pan: {
        Feature: (0, _indexMjs1.PanGesture)
    },
    drag: {
        Feature: (0, _indexMjs.DragGesture),
        ProjectionNode: (0, _htmlprojectionNodeMjs.HTMLProjectionNode),
        MeasureLayout: (0, _measureLayoutMjs.MeasureLayout)
    }
};

},{"../../gestures/drag/index.mjs":"Xa3NE","../../gestures/pan/index.mjs":"8CJyV","./layout/MeasureLayout.mjs":"kA9rP","../../projection/node/HTMLProjectionNode.mjs":"d4eCC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Xa3NE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DragGesture", ()=>DragGesture);
var _featureMjs = require("../../motion/features/Feature.mjs");
var _noopMjs = require("../../utils/noop.mjs");
var _visualElementDragControlsMjs = require("./VisualElementDragControls.mjs");
class DragGesture extends (0, _featureMjs.Feature) {
    constructor(node){
        super(node);
        this.removeGroupControls = (0, _noopMjs.noop);
        this.removeListeners = (0, _noopMjs.noop);
        this.controls = new (0, _visualElementDragControlsMjs.VisualElementDragControls)(node);
    }
    mount() {
        // If we've been provided a DragControls for manual control over the drag gesture,
        // subscribe this component to it on mount.
        const { dragControls } = this.node.getProps();
        if (dragControls) this.removeGroupControls = dragControls.subscribe(this.controls);
        this.removeListeners = this.controls.addListeners() || (0, _noopMjs.noop);
    }
    unmount() {
        this.removeGroupControls();
        this.removeListeners();
    }
}

},{"../../motion/features/Feature.mjs":"lI7Ue","../../utils/noop.mjs":"67SDH","./VisualElementDragControls.mjs":"cUl58","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cUl58":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VisualElementDragControls", ()=>VisualElementDragControls);
parcelHelpers.export(exports, "elementDragControls", ()=>elementDragControls);
var _errorsMjs = require("../../utils/errors.mjs");
var _panSessionMjs = require("../pan/PanSession.mjs");
var _lockMjs = require("./utils/lock.mjs");
var _isRefObjectMjs = require("../../utils/is-ref-object.mjs");
var _addPointerEventMjs = require("../../events/add-pointer-event.mjs");
var _constraintsMjs = require("./utils/constraints.mjs");
var _modelsMjs = require("../../projection/geometry/models.mjs");
var _eachAxisMjs = require("../../projection/utils/each-axis.mjs");
var _measureMjs = require("../../projection/utils/measure.mjs");
var _eventInfoMjs = require("../../events/event-info.mjs");
var _conversionMjs = require("../../projection/geometry/conversion.mjs");
var _addDomEventMjs = require("../../events/add-dom-event.mjs");
var _deltaCalcMjs = require("../../projection/geometry/delta-calc.mjs");
var _mixMjs = require("../../utils/mix.mjs");
var _unitsMjs = require("../../value/types/numbers/units.mjs");
var _motionValueMjs = require("../../animation/interfaces/motion-value.mjs");
var _frameMjs = require("../../frameloop/frame.mjs");
const elementDragControls = new WeakMap();
/**
 *
 */ // let latestPointerEvent: PointerEvent
class VisualElementDragControls {
    constructor(visualElement){
        // This is a reference to the global drag gesture lock, ensuring only one component
        // can "capture" the drag of one or both axes.
        // TODO: Look into moving this into pansession?
        this.openGlobalLock = null;
        this.isDragging = false;
        this.currentDirection = null;
        this.originPoint = {
            x: 0,
            y: 0
        };
        /**
         * The permitted boundaries of travel, in pixels.
         */ this.constraints = false;
        this.hasMutatedConstraints = false;
        /**
         * The per-axis resolved elastic values.
         */ this.elastic = (0, _modelsMjs.createBox)();
        this.visualElement = visualElement;
    }
    start(originEvent, { snapToCursor = false } = {}) {
        /**
         * Don't start dragging if this component is exiting
         */ const { presenceContext } = this.visualElement;
        if (presenceContext && presenceContext.isPresent === false) return;
        const onSessionStart = (event)=>{
            // Stop any animations on both axis values immediately. This allows the user to throw and catch
            // the component.
            this.stopAnimation();
            if (snapToCursor) this.snapToCursor((0, _eventInfoMjs.extractEventInfo)(event, "page").point);
        };
        const onStart = (event, info)=>{
            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession
            const { drag, dragPropagation, onDragStart } = this.getProps();
            if (drag && !dragPropagation) {
                if (this.openGlobalLock) this.openGlobalLock();
                this.openGlobalLock = (0, _lockMjs.getGlobalLock)(drag);
                // If we don 't have the lock, don't start dragging
                if (!this.openGlobalLock) return;
            }
            this.isDragging = true;
            this.currentDirection = null;
            this.resolveConstraints();
            if (this.visualElement.projection) {
                this.visualElement.projection.isAnimationBlocked = true;
                this.visualElement.projection.target = undefined;
            }
            /**
             * Record gesture origin
             */ (0, _eachAxisMjs.eachAxis)((axis)=>{
                let current = this.getAxisMotionValue(axis).get() || 0;
                /**
                 * If the MotionValue is a percentage value convert to px
                 */ if ((0, _unitsMjs.percent).test(current)) {
                    const { projection } = this.visualElement;
                    if (projection && projection.layout) {
                        const measuredAxis = projection.layout.layoutBox[axis];
                        if (measuredAxis) {
                            const length = (0, _deltaCalcMjs.calcLength)(measuredAxis);
                            current = length * (parseFloat(current) / 100);
                        }
                    }
                }
                this.originPoint[axis] = current;
            });
            // Fire onDragStart event
            if (onDragStart) (0, _frameMjs.frame).update(()=>onDragStart(event, info), false, true);
            const { animationState } = this.visualElement;
            animationState && animationState.setActive("whileDrag", true);
        };
        const onMove = (event, info)=>{
            // latestPointerEvent = event
            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
            // If we didn't successfully receive the gesture lock, early return.
            if (!dragPropagation && !this.openGlobalLock) return;
            const { offset } = info;
            // Attempt to detect drag direction if directionLock is true
            if (dragDirectionLock && this.currentDirection === null) {
                this.currentDirection = getCurrentDirection(offset);
                // If we've successfully set a direction, notify listener
                if (this.currentDirection !== null) onDirectionLock && onDirectionLock(this.currentDirection);
                return;
            }
            // Update each point with the latest position
            this.updateAxis("x", info.point, offset);
            this.updateAxis("y", info.point, offset);
            /**
             * Ideally we would leave the renderer to fire naturally at the end of
             * this frame but if the element is about to change layout as the result
             * of a re-render we want to ensure the browser can read the latest
             * bounding box to ensure the pointer and element don't fall out of sync.
             */ this.visualElement.render();
            /**
             * This must fire after the render call as it might trigger a state
             * change which itself might trigger a layout update.
             */ onDrag && onDrag(event, info);
        };
        const onSessionEnd = (event, info)=>this.stop(event, info);
        this.panSession = new (0, _panSessionMjs.PanSession)(originEvent, {
            onSessionStart,
            onStart,
            onMove,
            onSessionEnd
        }, {
            transformPagePoint: this.visualElement.getTransformPagePoint()
        });
    }
    stop(event, info) {
        const isDragging = this.isDragging;
        this.cancel();
        if (!isDragging) return;
        const { velocity } = info;
        this.startAnimation(velocity);
        const { onDragEnd } = this.getProps();
        if (onDragEnd) (0, _frameMjs.frame).update(()=>onDragEnd(event, info));
    }
    cancel() {
        this.isDragging = false;
        const { projection, animationState } = this.visualElement;
        if (projection) projection.isAnimationBlocked = false;
        this.panSession && this.panSession.end();
        this.panSession = undefined;
        const { dragPropagation } = this.getProps();
        if (!dragPropagation && this.openGlobalLock) {
            this.openGlobalLock();
            this.openGlobalLock = null;
        }
        animationState && animationState.setActive("whileDrag", false);
    }
    updateAxis(axis, _point, offset) {
        const { drag } = this.getProps();
        // If we're not dragging this axis, do an early return.
        if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;
        const axisValue = this.getAxisMotionValue(axis);
        let next = this.originPoint[axis] + offset[axis];
        // Apply constraints
        if (this.constraints && this.constraints[axis]) next = (0, _constraintsMjs.applyConstraints)(next, this.constraints[axis], this.elastic[axis]);
        axisValue.set(next);
    }
    resolveConstraints() {
        const { dragConstraints, dragElastic } = this.getProps();
        const { layout } = this.visualElement.projection || {};
        const prevConstraints = this.constraints;
        if (dragConstraints && (0, _isRefObjectMjs.isRefObject)(dragConstraints)) {
            if (!this.constraints) this.constraints = this.resolveRefConstraints();
        } else if (dragConstraints && layout) this.constraints = (0, _constraintsMjs.calcRelativeConstraints)(layout.layoutBox, dragConstraints);
        else this.constraints = false;
        this.elastic = (0, _constraintsMjs.resolveDragElastic)(dragElastic);
        /**
         * If we're outputting to external MotionValues, we want to rebase the measured constraints
         * from viewport-relative to component-relative.
         */ if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) (0, _eachAxisMjs.eachAxis)((axis)=>{
            if (this.getAxisMotionValue(axis)) this.constraints[axis] = (0, _constraintsMjs.rebaseAxisConstraints)(layout.layoutBox[axis], this.constraints[axis]);
        });
    }
    resolveRefConstraints() {
        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
        if (!constraints || !(0, _isRefObjectMjs.isRefObject)(constraints)) return false;
        const constraintsElement = constraints.current;
        (0, _errorsMjs.invariant)(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
        const { projection } = this.visualElement;
        // TODO
        if (!projection || !projection.layout) return false;
        const constraintsBox = (0, _measureMjs.measurePageBox)(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
        let measuredConstraints = (0, _constraintsMjs.calcViewportConstraints)(projection.layout.layoutBox, constraintsBox);
        /**
         * If there's an onMeasureDragConstraints listener we call it and
         * if different constraints are returned, set constraints to that
         */ if (onMeasureDragConstraints) {
            const userConstraints = onMeasureDragConstraints((0, _conversionMjs.convertBoxToBoundingBox)(measuredConstraints));
            this.hasMutatedConstraints = !!userConstraints;
            if (userConstraints) measuredConstraints = (0, _conversionMjs.convertBoundingBoxToBox)(userConstraints);
        }
        return measuredConstraints;
    }
    startAnimation(velocity) {
        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
        const constraints = this.constraints || {};
        const momentumAnimations = (0, _eachAxisMjs.eachAxis)((axis)=>{
            if (!shouldDrag(axis, drag, this.currentDirection)) return;
            let transition = constraints && constraints[axis] || {};
            if (dragSnapToOrigin) transition = {
                min: 0,
                max: 0
            };
            /**
             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame
             * of spring animations so we should look into adding a disable spring option to `inertia`.
             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`
             * using the value of `dragElastic`.
             */ const bounceStiffness = dragElastic ? 200 : 1000000;
            const bounceDamping = dragElastic ? 40 : 10000000;
            const inertia = {
                type: "inertia",
                velocity: dragMomentum ? velocity[axis] : 0,
                bounceStiffness,
                bounceDamping,
                timeConstant: 750,
                restDelta: 1,
                restSpeed: 10,
                ...dragTransition,
                ...transition
            };
            // If we're not animating on an externally-provided `MotionValue` we can use the
            // component's animation controls which will handle interactions with whileHover (etc),
            // otherwise we just have to animate the `MotionValue` itself.
            return this.startAxisValueAnimation(axis, inertia);
        });
        // Run all animations and then resolve the new drag constraints.
        return Promise.all(momentumAnimations).then(onDragTransitionEnd);
    }
    startAxisValueAnimation(axis, transition) {
        const axisValue = this.getAxisMotionValue(axis);
        return axisValue.start((0, _motionValueMjs.animateMotionValue)(axis, axisValue, 0, transition));
    }
    stopAnimation() {
        (0, _eachAxisMjs.eachAxis)((axis)=>this.getAxisMotionValue(axis).stop());
    }
    /**
     * Drag works differently depending on which props are provided.
     *
     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
     * - Otherwise, we apply the delta to the x/y motion values.
     */ getAxisMotionValue(axis) {
        const dragKey = "_drag" + axis.toUpperCase();
        const props = this.visualElement.getProps();
        const externalMotionValue = props[dragKey];
        return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);
    }
    snapToCursor(point) {
        (0, _eachAxisMjs.eachAxis)((axis)=>{
            const { drag } = this.getProps();
            // If we're not dragging this axis, do an early return.
            if (!shouldDrag(axis, drag, this.currentDirection)) return;
            const { projection } = this.visualElement;
            const axisValue = this.getAxisMotionValue(axis);
            if (projection && projection.layout) {
                const { min, max } = projection.layout.layoutBox[axis];
                axisValue.set(point[axis] - (0, _mixMjs.mix)(min, max, 0.5));
            }
        });
    }
    /**
     * When the viewport resizes we want to check if the measured constraints
     * have changed and, if so, reposition the element within those new constraints
     * relative to where it was before the resize.
     */ scalePositionWithinConstraints() {
        if (!this.visualElement.current) return;
        const { drag, dragConstraints } = this.getProps();
        const { projection } = this.visualElement;
        if (!(0, _isRefObjectMjs.isRefObject)(dragConstraints) || !projection || !this.constraints) return;
        /**
         * Stop current animations as there can be visual glitching if we try to do
         * this mid-animation
         */ this.stopAnimation();
        /**
         * Record the relative position of the dragged element relative to the
         * constraints box and save as a progress value.
         */ const boxProgress = {
            x: 0,
            y: 0
        };
        (0, _eachAxisMjs.eachAxis)((axis)=>{
            const axisValue = this.getAxisMotionValue(axis);
            if (axisValue) {
                const latest = axisValue.get();
                boxProgress[axis] = (0, _constraintsMjs.calcOrigin)({
                    min: latest,
                    max: latest
                }, this.constraints[axis]);
            }
        });
        /**
         * Update the layout of this element and resolve the latest drag constraints
         */ const { transformTemplate } = this.visualElement.getProps();
        this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
        projection.root && projection.root.updateScroll();
        projection.updateLayout();
        this.resolveConstraints();
        /**
         * For each axis, calculate the current progress of the layout axis
         * within the new constraints.
         */ (0, _eachAxisMjs.eachAxis)((axis)=>{
            if (!shouldDrag(axis, drag, null)) return;
            /**
             * Calculate a new transform based on the previous box progress
             */ const axisValue = this.getAxisMotionValue(axis);
            const { min, max } = this.constraints[axis];
            axisValue.set((0, _mixMjs.mix)(min, max, boxProgress[axis]));
        });
    }
    addListeners() {
        if (!this.visualElement.current) return;
        elementDragControls.set(this.visualElement, this);
        const element = this.visualElement.current;
        /**
         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.
         */ const stopPointerListener = (0, _addPointerEventMjs.addPointerEvent)(element, "pointerdown", (event)=>{
            const { drag, dragListener = true } = this.getProps();
            drag && dragListener && this.start(event);
        });
        const measureDragConstraints = ()=>{
            const { dragConstraints } = this.getProps();
            if ((0, _isRefObjectMjs.isRefObject)(dragConstraints)) this.constraints = this.resolveRefConstraints();
        };
        const { projection } = this.visualElement;
        const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
        if (projection && !projection.layout) {
            projection.root && projection.root.updateScroll();
            projection.updateLayout();
        }
        measureDragConstraints();
        /**
         * Attach a window resize listener to scale the draggable target within its defined
         * constraints as the window resizes.
         */ const stopResizeListener = (0, _addDomEventMjs.addDomEvent)(window, "resize", ()=>this.scalePositionWithinConstraints());
        /**
         * If the element's layout changes, calculate the delta and apply that to
         * the drag gesture's origin point.
         */ const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged })=>{
            if (this.isDragging && hasLayoutChanged) {
                (0, _eachAxisMjs.eachAxis)((axis)=>{
                    const motionValue = this.getAxisMotionValue(axis);
                    if (!motionValue) return;
                    this.originPoint[axis] += delta[axis].translate;
                    motionValue.set(motionValue.get() + delta[axis].translate);
                });
                this.visualElement.render();
            }
        });
        return ()=>{
            stopResizeListener();
            stopPointerListener();
            stopMeasureLayoutListener();
            stopLayoutUpdateListener && stopLayoutUpdateListener();
        };
    }
    getProps() {
        const props = this.visualElement.getProps();
        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = (0, _constraintsMjs.defaultElastic), dragMomentum = true } = props;
        return {
            ...props,
            drag,
            dragDirectionLock,
            dragPropagation,
            dragConstraints,
            dragElastic,
            dragMomentum
        };
    }
}
function shouldDrag(direction, drag, currentDirection) {
    return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);
}
/**
 * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower
 * than the provided threshold, return `null`.
 *
 * @param offset - The x/y offset from origin.
 * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.
 */ function getCurrentDirection(offset, lockThreshold = 10) {
    let direction = null;
    if (Math.abs(offset.y) > lockThreshold) direction = "y";
    else if (Math.abs(offset.x) > lockThreshold) direction = "x";
    return direction;
}

},{"../../utils/errors.mjs":"drRZ6","../pan/PanSession.mjs":"9FpwA","./utils/lock.mjs":"81Jq8","../../utils/is-ref-object.mjs":"hA3DA","../../events/add-pointer-event.mjs":"80iJi","./utils/constraints.mjs":"aLORA","../../projection/geometry/models.mjs":"8tocy","../../projection/utils/each-axis.mjs":"iO8nE","../../projection/utils/measure.mjs":"dfpR2","../../events/event-info.mjs":"4Spbd","../../projection/geometry/conversion.mjs":"hRulW","../../events/add-dom-event.mjs":"jAgCf","../../projection/geometry/delta-calc.mjs":"7r3CU","../../utils/mix.mjs":"jx86W","../../value/types/numbers/units.mjs":"lGBHA","../../animation/interfaces/motion-value.mjs":"gQYlj","../../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9FpwA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PanSession", ()=>PanSession);
var _eventInfoMjs = require("../../events/event-info.mjs");
var _timeConversionMjs = require("../../utils/time-conversion.mjs");
var _addPointerEventMjs = require("../../events/add-pointer-event.mjs");
var _pipeMjs = require("../../utils/pipe.mjs");
var _distanceMjs = require("../../utils/distance.mjs");
var _isPrimaryPointerMjs = require("../../events/utils/is-primary-pointer.mjs");
var _frameMjs = require("../../frameloop/frame.mjs");
/**
 * @internal
 */ class PanSession {
    constructor(event, handlers, { transformPagePoint } = {}){
        /**
         * @internal
         */ this.startEvent = null;
        /**
         * @internal
         */ this.lastMoveEvent = null;
        /**
         * @internal
         */ this.lastMoveEventInfo = null;
        /**
         * @internal
         */ this.handlers = {};
        this.updatePoint = ()=>{
            if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;
            const info = getPanInfo(this.lastMoveEventInfo, this.history);
            const isPanStarted = this.startEvent !== null;
            // Only start panning if the offset is larger than 3 pixels. If we make it
            // any larger than this we'll want to reset the pointer history
            // on the first update to avoid visual snapping to the cursoe.
            const isDistancePastThreshold = (0, _distanceMjs.distance2D)(info.offset, {
                x: 0,
                y: 0
            }) >= 3;
            if (!isPanStarted && !isDistancePastThreshold) return;
            const { point } = info;
            const { timestamp } = (0, _frameMjs.frameData);
            this.history.push({
                ...point,
                timestamp
            });
            const { onStart, onMove } = this.handlers;
            if (!isPanStarted) {
                onStart && onStart(this.lastMoveEvent, info);
                this.startEvent = this.lastMoveEvent;
            }
            onMove && onMove(this.lastMoveEvent, info);
        };
        this.handlePointerMove = (event, info)=>{
            this.lastMoveEvent = event;
            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);
            // Throttle mouse move event to once per frame
            (0, _frameMjs.frame).update(this.updatePoint, true);
        };
        this.handlePointerUp = (event, info)=>{
            this.end();
            if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;
            const { onEnd, onSessionEnd } = this.handlers;
            const panInfo = getPanInfo(event.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info, this.transformPagePoint), this.history);
            if (this.startEvent && onEnd) onEnd(event, panInfo);
            onSessionEnd && onSessionEnd(event, panInfo);
        };
        // If we have more than one touch, don't start detecting this gesture
        if (!(0, _isPrimaryPointerMjs.isPrimaryPointer)(event)) return;
        this.handlers = handlers;
        this.transformPagePoint = transformPagePoint;
        const info = (0, _eventInfoMjs.extractEventInfo)(event);
        const initialInfo = transformPoint(info, this.transformPagePoint);
        const { point } = initialInfo;
        const { timestamp } = (0, _frameMjs.frameData);
        this.history = [
            {
                ...point,
                timestamp
            }
        ];
        const { onSessionStart } = handlers;
        onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
        this.removeListeners = (0, _pipeMjs.pipe)((0, _addPointerEventMjs.addPointerEvent)(window, "pointermove", this.handlePointerMove), (0, _addPointerEventMjs.addPointerEvent)(window, "pointerup", this.handlePointerUp), (0, _addPointerEventMjs.addPointerEvent)(window, "pointercancel", this.handlePointerUp));
    }
    updateHandlers(handlers) {
        this.handlers = handlers;
    }
    end() {
        this.removeListeners && this.removeListeners();
        (0, _frameMjs.cancelFrame)(this.updatePoint);
    }
}
function transformPoint(info, transformPagePoint) {
    return transformPagePoint ? {
        point: transformPagePoint(info.point)
    } : info;
}
function subtractPoint(a, b) {
    return {
        x: a.x - b.x,
        y: a.y - b.y
    };
}
function getPanInfo({ point }, history) {
    return {
        point,
        delta: subtractPoint(point, lastDevicePoint(history)),
        offset: subtractPoint(point, startDevicePoint(history)),
        velocity: getVelocity(history, 0.1)
    };
}
function startDevicePoint(history) {
    return history[0];
}
function lastDevicePoint(history) {
    return history[history.length - 1];
}
function getVelocity(history, timeDelta) {
    if (history.length < 2) return {
        x: 0,
        y: 0
    };
    let i = history.length - 1;
    let timestampedPoint = null;
    const lastPoint = lastDevicePoint(history);
    while(i >= 0){
        timestampedPoint = history[i];
        if (lastPoint.timestamp - timestampedPoint.timestamp > (0, _timeConversionMjs.secondsToMilliseconds)(timeDelta)) break;
        i--;
    }
    if (!timestampedPoint) return {
        x: 0,
        y: 0
    };
    const time = (0, _timeConversionMjs.millisecondsToSeconds)(lastPoint.timestamp - timestampedPoint.timestamp);
    if (time === 0) return {
        x: 0,
        y: 0
    };
    const currentVelocity = {
        x: (lastPoint.x - timestampedPoint.x) / time,
        y: (lastPoint.y - timestampedPoint.y) / time
    };
    if (currentVelocity.x === Infinity) currentVelocity.x = 0;
    if (currentVelocity.y === Infinity) currentVelocity.y = 0;
    return currentVelocity;
}

},{"../../events/event-info.mjs":"4Spbd","../../utils/time-conversion.mjs":"gdr8V","../../events/add-pointer-event.mjs":"80iJi","../../utils/pipe.mjs":"jGo2b","../../utils/distance.mjs":"adpzX","../../events/utils/is-primary-pointer.mjs":"lSBSo","../../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"adpzX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distance", ()=>distance);
parcelHelpers.export(exports, "distance2D", ()=>distance2D);
const distance = (a, b)=>Math.abs(a - b);
function distance2D(a, b) {
    // Multi-dimensional
    const xDelta = distance(a.x, b.x);
    const yDelta = distance(a.y, b.y);
    return Math.sqrt(xDelta ** 2 + yDelta ** 2);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aLORA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyConstraints", ()=>applyConstraints);
parcelHelpers.export(exports, "calcOrigin", ()=>calcOrigin);
parcelHelpers.export(exports, "calcRelativeAxisConstraints", ()=>calcRelativeAxisConstraints);
parcelHelpers.export(exports, "calcRelativeConstraints", ()=>calcRelativeConstraints);
parcelHelpers.export(exports, "calcViewportAxisConstraints", ()=>calcViewportAxisConstraints);
parcelHelpers.export(exports, "calcViewportConstraints", ()=>calcViewportConstraints);
parcelHelpers.export(exports, "defaultElastic", ()=>defaultElastic);
parcelHelpers.export(exports, "rebaseAxisConstraints", ()=>rebaseAxisConstraints);
parcelHelpers.export(exports, "resolveAxisElastic", ()=>resolveAxisElastic);
parcelHelpers.export(exports, "resolveDragElastic", ()=>resolveDragElastic);
parcelHelpers.export(exports, "resolvePointElastic", ()=>resolvePointElastic);
var _progressMjs = require("../../../utils/progress.mjs");
var _deltaCalcMjs = require("../../../projection/geometry/delta-calc.mjs");
var _clampMjs = require("../../../utils/clamp.mjs");
var _mixMjs = require("../../../utils/mix.mjs");
/**
 * Apply constraints to a point. These constraints are both physical along an
 * axis, and an elastic factor that determines how much to constrain the point
 * by if it does lie outside the defined parameters.
 */ function applyConstraints(point, { min, max }, elastic) {
    if (min !== undefined && point < min) // If we have a min point defined, and this is outside of that, constrain
    point = elastic ? (0, _mixMjs.mix)(min, point, elastic.min) : Math.max(point, min);
    else if (max !== undefined && point > max) // If we have a max point defined, and this is outside of that, constrain
    point = elastic ? (0, _mixMjs.mix)(max, point, elastic.max) : Math.min(point, max);
    return point;
}
/**
 * Calculate constraints in terms of the viewport when defined relatively to the
 * measured axis. This is measured from the nearest edge, so a max constraint of 200
 * on an axis with a max value of 300 would return a constraint of 500 - axis length
 */ function calcRelativeAxisConstraints(axis, min, max) {
    return {
        min: min !== undefined ? axis.min + min : undefined,
        max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined
    };
}
/**
 * Calculate constraints in terms of the viewport when
 * defined relatively to the measured bounding box.
 */ function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
    return {
        x: calcRelativeAxisConstraints(layoutBox.x, left, right),
        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
    };
}
/**
 * Calculate viewport constraints when defined as another viewport-relative axis
 */ function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
    let min = constraintsAxis.min - layoutAxis.min;
    let max = constraintsAxis.max - layoutAxis.max;
    // If the constraints axis is actually smaller than the layout axis then we can
    // flip the constraints
    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) [min, max] = [
        max,
        min
    ];
    return {
        min,
        max
    };
}
/**
 * Calculate viewport constraints when defined as another viewport-relative box
 */ function calcViewportConstraints(layoutBox, constraintsBox) {
    return {
        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
    };
}
/**
 * Calculate a transform origin relative to the source axis, between 0-1, that results
 * in an asthetically pleasing scale/transform needed to project from source to target.
 */ function calcOrigin(source, target) {
    let origin = 0.5;
    const sourceLength = (0, _deltaCalcMjs.calcLength)(source);
    const targetLength = (0, _deltaCalcMjs.calcLength)(target);
    if (targetLength > sourceLength) origin = (0, _progressMjs.progress)(target.min, target.max - sourceLength, source.min);
    else if (sourceLength > targetLength) origin = (0, _progressMjs.progress)(source.min, source.max - targetLength, target.min);
    return (0, _clampMjs.clamp)(0, 1, origin);
}
/**
 * Rebase the calculated viewport constraints relative to the layout.min point.
 */ function rebaseAxisConstraints(layout, constraints) {
    const relativeConstraints = {};
    if (constraints.min !== undefined) relativeConstraints.min = constraints.min - layout.min;
    if (constraints.max !== undefined) relativeConstraints.max = constraints.max - layout.min;
    return relativeConstraints;
}
const defaultElastic = 0.35;
/**
 * Accepts a dragElastic prop and returns resolved elastic values for each axis.
 */ function resolveDragElastic(dragElastic = defaultElastic) {
    if (dragElastic === false) dragElastic = 0;
    else if (dragElastic === true) dragElastic = defaultElastic;
    return {
        x: resolveAxisElastic(dragElastic, "left", "right"),
        y: resolveAxisElastic(dragElastic, "top", "bottom")
    };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
    return {
        min: resolvePointElastic(dragElastic, minLabel),
        max: resolvePointElastic(dragElastic, maxLabel)
    };
}
function resolvePointElastic(dragElastic, label) {
    return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
}

},{"../../../utils/progress.mjs":"3vvIn","../../../projection/geometry/delta-calc.mjs":"7r3CU","../../../utils/clamp.mjs":"aZOh4","../../../utils/mix.mjs":"jx86W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7r3CU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calcAxisDelta", ()=>calcAxisDelta);
parcelHelpers.export(exports, "calcBoxDelta", ()=>calcBoxDelta);
parcelHelpers.export(exports, "calcLength", ()=>calcLength);
parcelHelpers.export(exports, "calcRelativeAxis", ()=>calcRelativeAxis);
parcelHelpers.export(exports, "calcRelativeAxisPosition", ()=>calcRelativeAxisPosition);
parcelHelpers.export(exports, "calcRelativeBox", ()=>calcRelativeBox);
parcelHelpers.export(exports, "calcRelativePosition", ()=>calcRelativePosition);
parcelHelpers.export(exports, "isNear", ()=>isNear);
var _mixMjs = require("../../utils/mix.mjs");
function calcLength(axis) {
    return axis.max - axis.min;
}
function isNear(value, target = 0, maxDistance = 0.01) {
    return Math.abs(value - target) <= maxDistance;
}
function calcAxisDelta(delta, source, target, origin = 0.5) {
    delta.origin = origin;
    delta.originPoint = (0, _mixMjs.mix)(source.min, source.max, delta.origin);
    delta.scale = calcLength(target) / calcLength(source);
    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale)) delta.scale = 1;
    delta.translate = (0, _mixMjs.mix)(target.min, target.max, delta.origin) - delta.originPoint;
    if (isNear(delta.translate) || isNaN(delta.translate)) delta.translate = 0;
}
function calcBoxDelta(delta, source, target, origin) {
    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);
    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);
}
function calcRelativeAxis(target, relative, parent) {
    target.min = parent.min + relative.min;
    target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
    calcRelativeAxis(target.x, relative.x, parent.x);
    calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout, parent) {
    target.min = layout.min - parent.min;
    target.max = target.min + calcLength(layout);
}
function calcRelativePosition(target, layout, parent) {
    calcRelativeAxisPosition(target.x, layout.x, parent.x);
    calcRelativeAxisPosition(target.y, layout.y, parent.y);
}

},{"../../utils/mix.mjs":"jx86W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8tocy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAxis", ()=>createAxis);
parcelHelpers.export(exports, "createAxisDelta", ()=>createAxisDelta);
parcelHelpers.export(exports, "createBox", ()=>createBox);
parcelHelpers.export(exports, "createDelta", ()=>createDelta);
const createAxisDelta = ()=>({
        translate: 0,
        scale: 1,
        origin: 0,
        originPoint: 0
    });
const createDelta = ()=>({
        x: createAxisDelta(),
        y: createAxisDelta()
    });
const createAxis = ()=>({
        min: 0,
        max: 0
    });
const createBox = ()=>({
        x: createAxis(),
        y: createAxis()
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iO8nE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eachAxis", ()=>eachAxis);
function eachAxis(callback) {
    return [
        callback("x"),
        callback("y")
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dfpR2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "measurePageBox", ()=>measurePageBox);
parcelHelpers.export(exports, "measureViewportBox", ()=>measureViewportBox);
var _conversionMjs = require("../geometry/conversion.mjs");
var _deltaApplyMjs = require("../geometry/delta-apply.mjs");
function measureViewportBox(instance, transformPoint) {
    return (0, _conversionMjs.convertBoundingBoxToBox)((0, _conversionMjs.transformBoxPoints)(instance.getBoundingClientRect(), transformPoint));
}
function measurePageBox(element, rootProjectionNode, transformPagePoint) {
    const viewportBox = measureViewportBox(element, transformPagePoint);
    const { scroll } = rootProjectionNode;
    if (scroll) {
        (0, _deltaApplyMjs.translateAxis)(viewportBox.x, scroll.offset.x);
        (0, _deltaApplyMjs.translateAxis)(viewportBox.y, scroll.offset.y);
    }
    return viewportBox;
}

},{"../geometry/conversion.mjs":"hRulW","../geometry/delta-apply.mjs":"4QsuN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hRulW":[function(require,module,exports) {
/**
 * Bounding boxes tend to be defined as top, left, right, bottom. For various operations
 * it's easier to consider each axis individually. This function returns a bounding box
 * as a map of single-axis min/max values.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertBoundingBoxToBox", ()=>convertBoundingBoxToBox);
parcelHelpers.export(exports, "convertBoxToBoundingBox", ()=>convertBoxToBoundingBox);
parcelHelpers.export(exports, "transformBoxPoints", ()=>transformBoxPoints);
function convertBoundingBoxToBox({ top, left, right, bottom }) {
    return {
        x: {
            min: left,
            max: right
        },
        y: {
            min: top,
            max: bottom
        }
    };
}
function convertBoxToBoundingBox({ x, y }) {
    return {
        top: y.min,
        right: x.max,
        bottom: y.max,
        left: x.min
    };
}
/**
 * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function
 * provided by Framer to allow measured points to be corrected for device scaling. This is used
 * when measuring DOM elements and DOM event points.
 */ function transformBoxPoints(point, transformPoint) {
    if (!transformPoint) return point;
    const topLeft = transformPoint({
        x: point.left,
        y: point.top
    });
    const bottomRight = transformPoint({
        x: point.right,
        y: point.bottom
    });
    return {
        top: topLeft.y,
        left: topLeft.x,
        bottom: bottomRight.y,
        right: bottomRight.x
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4QsuN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyAxisDelta", ()=>applyAxisDelta);
parcelHelpers.export(exports, "applyBoxDelta", ()=>applyBoxDelta);
parcelHelpers.export(exports, "applyPointDelta", ()=>applyPointDelta);
parcelHelpers.export(exports, "applyTreeDeltas", ()=>applyTreeDeltas);
parcelHelpers.export(exports, "scalePoint", ()=>scalePoint);
parcelHelpers.export(exports, "transformAxis", ()=>transformAxis);
parcelHelpers.export(exports, "transformBox", ()=>transformBox);
parcelHelpers.export(exports, "translateAxis", ()=>translateAxis);
var _mixMjs = require("../../utils/mix.mjs");
var _hasTransformMjs = require("../utils/has-transform.mjs");
/**
 * Scales a point based on a factor and an originPoint
 */ function scalePoint(point, scale, originPoint) {
    const distanceFromOrigin = point - originPoint;
    const scaled = scale * distanceFromOrigin;
    return originPoint + scaled;
}
/**
 * Applies a translate/scale delta to a point
 */ function applyPointDelta(point, translate, scale, originPoint, boxScale) {
    if (boxScale !== undefined) point = scalePoint(point, boxScale, originPoint);
    return scalePoint(point, scale, originPoint) + translate;
}
/**
 * Applies a translate/scale delta to an axis
 */ function applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {
    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);
    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);
}
/**
 * Applies a translate/scale delta to a box
 */ function applyBoxDelta(box, { x, y }) {
    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
/**
 * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms
 * in a tree upon our box before then calculating how to project it into our desired viewport-relative box
 *
 * This is the final nested loop within updateLayoutDelta for future refactoring
 */ function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
    const treeLength = treePath.length;
    if (!treeLength) return;
    // Reset the treeScale
    treeScale.x = treeScale.y = 1;
    let node;
    let delta;
    for(let i = 0; i < treeLength; i++){
        node = treePath[i];
        delta = node.projectionDelta;
        /**
         * TODO: Prefer to remove this, but currently we have motion components with
         * display: contents in Framer.
         */ const instance = node.instance;
        if (instance && instance.style && instance.style.display === "contents") continue;
        if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) transformBox(box, {
            x: -node.scroll.offset.x,
            y: -node.scroll.offset.y
        });
        if (delta) {
            // Incoporate each ancestor's scale into a culmulative treeScale for this component
            treeScale.x *= delta.x.scale;
            treeScale.y *= delta.y.scale;
            // Apply each ancestor's calculated delta into this component's recorded layout box
            applyBoxDelta(box, delta);
        }
        if (isSharedTransition && (0, _hasTransformMjs.hasTransform)(node.latestValues)) transformBox(box, node.latestValues);
    }
    /**
     * Snap tree scale back to 1 if it's within a non-perceivable threshold.
     * This will help reduce useless scales getting rendered.
     */ treeScale.x = snapToDefault(treeScale.x);
    treeScale.y = snapToDefault(treeScale.y);
}
function snapToDefault(scale) {
    if (Number.isInteger(scale)) return scale;
    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;
}
function translateAxis(axis, distance) {
    axis.min = axis.min + distance;
    axis.max = axis.max + distance;
}
/**
 * Apply a transform to an axis from the latest resolved motion values.
 * This function basically acts as a bridge between a flat motion value map
 * and applyAxisDelta
 */ function transformAxis(axis, transforms, [key, scaleKey, originKey]) {
    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;
    const originPoint = (0, _mixMjs.mix)(axis.min, axis.max, axisOrigin);
    // Apply the axis delta to the final axis
    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
}
/**
 * The names of the motion values we want to apply as translation, scale and origin.
 */ const xKeys = [
    "x",
    "scaleX",
    "originX"
];
const yKeys = [
    "y",
    "scaleY",
    "originY"
];
/**
 * Apply a transform to a box from the latest resolved motion values.
 */ function transformBox(box, transform) {
    transformAxis(box.x, transform, xKeys);
    transformAxis(box.y, transform, yKeys);
}

},{"../../utils/mix.mjs":"jx86W","../utils/has-transform.mjs":"ihgFW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ihgFW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "has2DTranslate", ()=>has2DTranslate);
parcelHelpers.export(exports, "hasScale", ()=>hasScale);
parcelHelpers.export(exports, "hasTransform", ()=>hasTransform);
function isIdentityScale(scale) {
    return scale === undefined || scale === 1;
}
function hasScale({ scale, scaleX, scaleY }) {
    return !isIdentityScale(scale) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values) {
    return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY;
}
function has2DTranslate(values) {
    return is2DTranslate(values.x) || is2DTranslate(values.y);
}
function is2DTranslate(value) {
    return value && value !== "0%";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8CJyV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PanGesture", ()=>PanGesture);
var _panSessionMjs = require("./PanSession.mjs");
var _addPointerEventMjs = require("../../events/add-pointer-event.mjs");
var _featureMjs = require("../../motion/features/Feature.mjs");
var _noopMjs = require("../../utils/noop.mjs");
var _frameMjs = require("../../frameloop/frame.mjs");
const asyncHandler = (handler)=>(event, info)=>{
        if (handler) (0, _frameMjs.frame).update(()=>handler(event, info));
    };
class PanGesture extends (0, _featureMjs.Feature) {
    constructor(){
        super(...arguments);
        this.removePointerDownListener = (0, _noopMjs.noop);
    }
    onPointerDown(pointerDownEvent) {
        this.session = new (0, _panSessionMjs.PanSession)(pointerDownEvent, this.createPanHandlers(), {
            transformPagePoint: this.node.getTransformPagePoint()
        });
    }
    createPanHandlers() {
        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
        return {
            onSessionStart: asyncHandler(onPanSessionStart),
            onStart: asyncHandler(onPanStart),
            onMove: onPan,
            onEnd: (event, info)=>{
                delete this.session;
                if (onPanEnd) (0, _frameMjs.frame).update(()=>onPanEnd(event, info));
            }
        };
    }
    mount() {
        this.removePointerDownListener = (0, _addPointerEventMjs.addPointerEvent)(this.node.current, "pointerdown", (event)=>this.onPointerDown(event));
    }
    update() {
        this.session && this.session.updateHandlers(this.createPanHandlers());
    }
    unmount() {
        this.removePointerDownListener();
        this.session && this.session.end();
    }
}

},{"./PanSession.mjs":"9FpwA","../../events/add-pointer-event.mjs":"80iJi","../../motion/features/Feature.mjs":"lI7Ue","../../utils/noop.mjs":"67SDH","../../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kA9rP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MeasureLayout", ()=>MeasureLayout);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _usePresenceMjs = require("../../../components/AnimatePresence/use-presence.mjs");
var _layoutGroupContextMjs = require("../../../context/LayoutGroupContext.mjs");
var _switchLayoutGroupContextMjs = require("../../../context/SwitchLayoutGroupContext.mjs");
var _stateMjs = require("../../../projection/node/state.mjs");
var _scaleBorderRadiusMjs = require("../../../projection/styles/scale-border-radius.mjs");
var _scaleBoxShadowMjs = require("../../../projection/styles/scale-box-shadow.mjs");
var _scaleCorrectionMjs = require("../../../projection/styles/scale-correction.mjs");
var _frameMjs = require("../../../frameloop/frame.mjs");
class MeasureLayoutWithContext extends (0, _reactDefault.default).Component {
    /**
     * This only mounts projection nodes for components that
     * need measuring, we might want to do it for all components
     * in order to incorporate transforms
     */ componentDidMount() {
        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
        const { projection } = visualElement;
        (0, _scaleCorrectionMjs.addScaleCorrector)(defaultScaleCorrectors);
        if (projection) {
            if (layoutGroup.group) layoutGroup.group.add(projection);
            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) switchLayoutGroup.register(projection);
            projection.root.didUpdate();
            projection.addEventListener("animationComplete", ()=>{
                this.safeToRemove();
            });
            projection.setOptions({
                ...projection.options,
                onExitComplete: ()=>this.safeToRemove()
            });
        }
        (0, _stateMjs.globalProjectionState).hasEverUpdated = true;
    }
    getSnapshotBeforeUpdate(prevProps) {
        const { layoutDependency, visualElement, drag, isPresent } = this.props;
        const projection = visualElement.projection;
        if (!projection) return null;
        /**
         * TODO: We use this data in relegate to determine whether to
         * promote a previous element. There's no guarantee its presence data
         * will have updated by this point - if a bug like this arises it will
         * have to be that we markForRelegation and then find a new lead some other way,
         * perhaps in didUpdate
         */ projection.isPresent = isPresent;
        if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) projection.willUpdate();
        else this.safeToRemove();
        if (prevProps.isPresent !== isPresent) {
            if (isPresent) projection.promote();
            else if (!projection.relegate()) /**
                 * If there's another stack member taking over from this one,
                 * it's in charge of the exit animation and therefore should
                 * be in charge of the safe to remove. Otherwise we call it here.
                 */ (0, _frameMjs.frame).postRender(()=>{
                const stack = projection.getStack();
                if (!stack || !stack.members.length) this.safeToRemove();
            });
        }
        return null;
    }
    componentDidUpdate() {
        const { projection } = this.props.visualElement;
        if (projection) {
            projection.root.didUpdate();
            queueMicrotask(()=>{
                if (!projection.currentAnimation && projection.isLead()) this.safeToRemove();
            });
        }
    }
    componentWillUnmount() {
        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
        const { projection } = visualElement;
        if (projection) {
            projection.scheduleCheckAfterUnmount();
            if (layoutGroup && layoutGroup.group) layoutGroup.group.remove(projection);
            if (promoteContext && promoteContext.deregister) promoteContext.deregister(projection);
        }
    }
    safeToRemove() {
        const { safeToRemove } = this.props;
        safeToRemove && safeToRemove();
    }
    render() {
        return null;
    }
}
function MeasureLayout(props) {
    const [isPresent, safeToRemove] = (0, _usePresenceMjs.usePresence)();
    const layoutGroup = (0, _react.useContext)((0, _layoutGroupContextMjs.LayoutGroupContext));
    return (0, _reactDefault.default).createElement(MeasureLayoutWithContext, {
        ...props,
        layoutGroup: layoutGroup,
        switchLayoutGroup: (0, _react.useContext)((0, _switchLayoutGroupContextMjs.SwitchLayoutGroupContext)),
        isPresent: isPresent,
        safeToRemove: safeToRemove
    });
}
const defaultScaleCorrectors = {
    borderRadius: {
        ...(0, _scaleBorderRadiusMjs.correctBorderRadius),
        applyTo: [
            "borderTopLeftRadius",
            "borderTopRightRadius",
            "borderBottomLeftRadius",
            "borderBottomRightRadius"
        ]
    },
    borderTopLeftRadius: (0, _scaleBorderRadiusMjs.correctBorderRadius),
    borderTopRightRadius: (0, _scaleBorderRadiusMjs.correctBorderRadius),
    borderBottomLeftRadius: (0, _scaleBorderRadiusMjs.correctBorderRadius),
    borderBottomRightRadius: (0, _scaleBorderRadiusMjs.correctBorderRadius),
    boxShadow: (0, _scaleBoxShadowMjs.correctBoxShadow)
};

},{"react":"21dqq","../../../components/AnimatePresence/use-presence.mjs":"5CDO8","../../../context/LayoutGroupContext.mjs":"dEA1W","../../../context/SwitchLayoutGroupContext.mjs":"7GP4u","../../../projection/node/state.mjs":"bSdze","../../../projection/styles/scale-border-radius.mjs":"jq5xT","../../../projection/styles/scale-box-shadow.mjs":"ib5vk","../../../projection/styles/scale-correction.mjs":"4Bydu","../../../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5CDO8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPresent", ()=>isPresent);
parcelHelpers.export(exports, "useIsPresent", ()=>useIsPresent);
parcelHelpers.export(exports, "usePresence", ()=>usePresence);
var _react = require("react");
var _presenceContextMjs = require("../../context/PresenceContext.mjs");
/**
 * When a component is the child of `AnimatePresence`, it can use `usePresence`
 * to access information about whether it's still present in the React tree.
 *
 * ```jsx
 * import { usePresence } from "framer-motion"
 *
 * export const Component = () => {
 *   const [isPresent, safeToRemove] = usePresence()
 *
 *   useEffect(() => {
 *     !isPresent && setTimeout(safeToRemove, 1000)
 *   }, [isPresent])
 *
 *   return <div />
 * }
 * ```
 *
 * If `isPresent` is `false`, it means that a component has been removed the tree, but
 * `AnimatePresence` won't really remove it until `safeToRemove` has been called.
 *
 * @public
 */ function usePresence() {
    const context = (0, _react.useContext)((0, _presenceContextMjs.PresenceContext));
    if (context === null) return [
        true,
        null
    ];
    const { isPresent, onExitComplete, register } = context;
    // It's safe to call the following hooks conditionally (after an early return) because the context will always
    // either be null or non-null for the lifespan of the component.
    const id = (0, _react.useId)();
    (0, _react.useEffect)(()=>register(id), []);
    const safeToRemove = ()=>onExitComplete && onExitComplete(id);
    return !isPresent && onExitComplete ? [
        false,
        safeToRemove
    ] : [
        true
    ];
}
/**
 * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.
 * There is no `safeToRemove` function.
 *
 * ```jsx
 * import { useIsPresent } from "framer-motion"
 *
 * export const Component = () => {
 *   const isPresent = useIsPresent()
 *
 *   useEffect(() => {
 *     !isPresent && console.log("I've been removed!")
 *   }, [isPresent])
 *
 *   return <div />
 * }
 * ```
 *
 * @public
 */ function useIsPresent() {
    return isPresent((0, _react.useContext)((0, _presenceContextMjs.PresenceContext)));
}
function isPresent(context) {
    return context === null ? true : context.isPresent;
}

},{"react":"21dqq","../../context/PresenceContext.mjs":"7DzvZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bSdze":[function(require,module,exports) {
/**
 * This should only ever be modified on the client otherwise it'll
 * persist through server requests. If we need instanced states we
 * could lazy-init via root.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "globalProjectionState", ()=>globalProjectionState);
const globalProjectionState = {
    /**
     * Global flag as to whether the tree has animated since the last time
     * we resized the window
     */ hasAnimatedSinceResize: true,
    /**
     * We set this to true once, on the first update. Any nodes added to the tree beyond that
     * update will be given a `data-projection-id` attribute.
     */ hasEverUpdated: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jq5xT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "correctBorderRadius", ()=>correctBorderRadius);
parcelHelpers.export(exports, "pixelsToPercent", ()=>pixelsToPercent);
var _unitsMjs = require("../../value/types/numbers/units.mjs");
function pixelsToPercent(pixels, axis) {
    if (axis.max === axis.min) return 0;
    return pixels / (axis.max - axis.min) * 100;
}
/**
 * We always correct borderRadius as a percentage rather than pixels to reduce paints.
 * For example, if you are projecting a box that is 100px wide with a 10px borderRadius
 * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%
 * borderRadius in both states. If we animate between the two in pixels that will trigger
 * a paint each time. If we animate between the two in percentage we'll avoid a paint.
 */ const correctBorderRadius = {
    correct: (latest, node)=>{
        if (!node.target) return latest;
        /**
         * If latest is a string, if it's a percentage we can return immediately as it's
         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.
         */ if (typeof latest === "string") {
            if ((0, _unitsMjs.px).test(latest)) latest = parseFloat(latest);
            else return latest;
        }
        /**
         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that
         * pixel value as a percentage of each axis
         */ const x = pixelsToPercent(latest, node.target.x);
        const y = pixelsToPercent(latest, node.target.y);
        return `${x}% ${y}%`;
    }
};

},{"../../value/types/numbers/units.mjs":"lGBHA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ib5vk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "correctBoxShadow", ()=>correctBoxShadow);
var _mixMjs = require("../../utils/mix.mjs");
var _indexMjs = require("../../value/types/complex/index.mjs");
const correctBoxShadow = {
    correct: (latest, { treeScale, projectionDelta })=>{
        const original = latest;
        const shadow = (0, _indexMjs.complex).parse(latest);
        // TODO: Doesn't support multiple shadows
        if (shadow.length > 5) return original;
        const template = (0, _indexMjs.complex).createTransformer(latest);
        const offset = typeof shadow[0] !== "number" ? 1 : 0;
        // Calculate the overall context scale
        const xScale = projectionDelta.x.scale * treeScale.x;
        const yScale = projectionDelta.y.scale * treeScale.y;
        shadow[0 + offset] /= xScale;
        shadow[1 + offset] /= yScale;
        /**
         * Ideally we'd correct x and y scales individually, but because blur and
         * spread apply to both we have to take a scale average and apply that instead.
         * We could potentially improve the outcome of this by incorporating the ratio between
         * the two scales.
         */ const averageScale = (0, _mixMjs.mix)(xScale, yScale, 0.5);
        // Blur
        if (typeof shadow[2 + offset] === "number") shadow[2 + offset] /= averageScale;
        // Spread
        if (typeof shadow[3 + offset] === "number") shadow[3 + offset] /= averageScale;
        return template(shadow);
    }
};

},{"../../utils/mix.mjs":"jx86W","../../value/types/complex/index.mjs":"lmoWV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d4eCC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HTMLProjectionNode", ()=>HTMLProjectionNode);
parcelHelpers.export(exports, "rootProjectionNode", ()=>rootProjectionNode);
var _createProjectionNodeMjs = require("./create-projection-node.mjs");
var _documentProjectionNodeMjs = require("./DocumentProjectionNode.mjs");
const rootProjectionNode = {
    current: undefined
};
const HTMLProjectionNode = (0, _createProjectionNodeMjs.createProjectionNode)({
    measureScroll: (instance)=>({
            x: instance.scrollLeft,
            y: instance.scrollTop
        }),
    defaultParent: ()=>{
        if (!rootProjectionNode.current) {
            const documentNode = new (0, _documentProjectionNodeMjs.DocumentProjectionNode)({});
            documentNode.mount(window);
            documentNode.setOptions({
                layoutScroll: true
            });
            rootProjectionNode.current = documentNode;
        }
        return rootProjectionNode.current;
    },
    resetTransform: (instance, value)=>{
        instance.style.transform = value !== undefined ? value : "none";
    },
    checkIsScrollRoot: (instance)=>Boolean(window.getComputedStyle(instance).position === "fixed")
});

},{"./create-projection-node.mjs":"dvkZl","./DocumentProjectionNode.mjs":"hOjWn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dvkZl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cleanDirtyNodes", ()=>cleanDirtyNodes);
parcelHelpers.export(exports, "createProjectionNode", ()=>createProjectionNode);
parcelHelpers.export(exports, "mixAxis", ()=>mixAxis);
parcelHelpers.export(exports, "mixAxisDelta", ()=>mixAxisDelta);
parcelHelpers.export(exports, "mixBox", ()=>mixBox);
parcelHelpers.export(exports, "propagateDirtyNodes", ()=>propagateDirtyNodes);
var _subscriptionManagerMjs = require("../../utils/subscription-manager.mjs");
var _mixValuesMjs = require("../animation/mix-values.mjs");
var _copyMjs = require("../geometry/copy.mjs");
var _deltaApplyMjs = require("../geometry/delta-apply.mjs");
var _deltaCalcMjs = require("../geometry/delta-calc.mjs");
var _deltaRemoveMjs = require("../geometry/delta-remove.mjs");
var _modelsMjs = require("../geometry/models.mjs");
var _transitionsMjs = require("../../animation/utils/transitions.mjs");
var _utilsMjs = require("../geometry/utils.mjs");
var _stackMjs = require("../shared/stack.mjs");
var _scaleCorrectionMjs = require("../styles/scale-correction.mjs");
var _transformMjs = require("../styles/transform.mjs");
var _eachAxisMjs = require("../utils/each-axis.mjs");
var _hasTransformMjs = require("../utils/has-transform.mjs");
var _flatTreeMjs = require("../../render/utils/flat-tree.mjs");
var _resolveMotionValueMjs = require("../../value/utils/resolve-motion-value.mjs");
var _stateMjs = require("./state.mjs");
var _delayMjs = require("../../utils/delay.mjs");
var _mixMjs = require("../../utils/mix.mjs");
var _recordMjs = require("../../debug/record.mjs");
var _isSvgElementMjs = require("../../render/dom/utils/is-svg-element.mjs");
var _singleValueMjs = require("../../animation/interfaces/single-value.mjs");
var _clampMjs = require("../../utils/clamp.mjs");
var _frameMjs = require("../../frameloop/frame.mjs");
var _noopMjs = require("../../utils/noop.mjs");
const transformAxes = [
    "",
    "X",
    "Y",
    "Z"
];
/**
 * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1
 * which has a noticeable difference in spring animations
 */ const animationTarget = 1000;
let id = 0;
/**
 * Use a mutable data object for debug data so as to not create a new
 * object every frame.
 */ const projectionFrameData = {
    type: "projectionFrame",
    totalNodes: 0,
    resolvedTargetDeltas: 0,
    recalculatedProjection: 0
};
function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
    return class ProjectionNode {
        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()){
            /**
             * A unique ID generated for every projection node.
             */ this.id = id++;
            /**
             * An id that represents a unique session instigated by startUpdate.
             */ this.animationId = 0;
            /**
             * A Set containing all this component's children. This is used to iterate
             * through the children.
             *
             * TODO: This could be faster to iterate as a flat array stored on the root node.
             */ this.children = new Set();
            /**
             * Options for the node. We use this to configure what kind of layout animations
             * we should perform (if any).
             */ this.options = {};
            /**
             * We use this to detect when its safe to shut down part of a projection tree.
             * We have to keep projecting children for scale correction and relative projection
             * until all their parents stop performing layout animations.
             */ this.isTreeAnimating = false;
            this.isAnimationBlocked = false;
            /**
             * Flag to true if we think this layout has been changed. We can't always know this,
             * currently we set it to true every time a component renders, or if it has a layoutDependency
             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup
             * and if one node is dirtied, they all are.
             */ this.isLayoutDirty = false;
            /**
             * Flag to true if we think the projection calculations for this node needs
             * recalculating as a result of an updated transform or layout animation.
             */ this.isProjectionDirty = false;
            /**
             * Flag to true if the layout *or* transform has changed. This then gets propagated
             * throughout the projection tree, forcing any element below to recalculate on the next frame.
             */ this.isSharedProjectionDirty = false;
            /**
             * Flag transform dirty. This gets propagated throughout the whole tree but is only
             * respected by shared nodes.
             */ this.isTransformDirty = false;
            /**
             * Block layout updates for instant layout transitions throughout the tree.
             */ this.updateManuallyBlocked = false;
            this.updateBlockedByResize = false;
            /**
             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`
             * call.
             */ this.isUpdating = false;
            /**
             * If this is an SVG element we currently disable projection transforms
             */ this.isSVG = false;
            /**
             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset
             * its projection styles.
             */ this.needsReset = false;
            /**
             * Flags whether this node should have its transform reset prior to measuring.
             */ this.shouldResetTransform = false;
            /**
             * An object representing the calculated contextual/accumulated/tree scale.
             * This will be used to scale calculcated projection transforms, as these are
             * calculated in screen-space but need to be scaled for elements to layoutly
             * make it to their calculated destinations.
             *
             * TODO: Lazy-init
             */ this.treeScale = {
                x: 1,
                y: 1
            };
            /**
             *
             */ this.eventHandlers = new Map();
            this.hasTreeAnimated = false;
            // Note: Currently only running on root node
            this.updateScheduled = false;
            this.checkUpdateFailed = ()=>{
                if (this.isUpdating) {
                    this.isUpdating = false;
                    this.clearAllSnapshots();
                }
            };
            /**
             * This is a multi-step process as shared nodes might be of different depths. Nodes
             * are sorted by depth order, so we need to resolve the entire tree before moving to
             * the next step.
             */ this.updateProjection = ()=>{
                /**
                 * Reset debug counts. Manually resetting rather than creating a new
                 * object each frame.
                 */ projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;
                this.nodes.forEach(propagateDirtyNodes);
                this.nodes.forEach(resolveTargetDelta);
                this.nodes.forEach(calcProjection);
                this.nodes.forEach(cleanDirtyNodes);
                (0, _recordMjs.record)(projectionFrameData);
            };
            this.hasProjected = false;
            this.isVisible = true;
            this.animationProgress = 0;
            /**
             * Shared layout
             */ // TODO Only running on root node
            this.sharedNodes = new Map();
            this.latestValues = latestValues;
            this.root = parent ? parent.root || parent : this;
            this.path = parent ? [
                ...parent.path,
                parent
            ] : [];
            this.parent = parent;
            this.depth = parent ? parent.depth + 1 : 0;
            for(let i = 0; i < this.path.length; i++)this.path[i].shouldResetTransform = true;
            if (this.root === this) this.nodes = new (0, _flatTreeMjs.FlatTree)();
        }
        addEventListener(name, handler) {
            if (!this.eventHandlers.has(name)) this.eventHandlers.set(name, new (0, _subscriptionManagerMjs.SubscriptionManager)());
            return this.eventHandlers.get(name).add(handler);
        }
        notifyListeners(name, ...args) {
            const subscriptionManager = this.eventHandlers.get(name);
            subscriptionManager && subscriptionManager.notify(...args);
        }
        hasListeners(name) {
            return this.eventHandlers.has(name);
        }
        /**
         * Lifecycles
         */ mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
            if (this.instance) return;
            this.isSVG = (0, _isSvgElementMjs.isSVGElement)(instance);
            this.instance = instance;
            const { layoutId, layout, visualElement } = this.options;
            if (visualElement && !visualElement.current) visualElement.mount(instance);
            this.root.nodes.add(this);
            this.parent && this.parent.children.add(this);
            if (isLayoutDirty && (layout || layoutId)) this.isLayoutDirty = true;
            if (attachResizeListener) {
                let cancelDelay;
                const resizeUnblockUpdate = ()=>this.root.updateBlockedByResize = false;
                attachResizeListener(instance, ()=>{
                    this.root.updateBlockedByResize = true;
                    cancelDelay && cancelDelay();
                    cancelDelay = (0, _delayMjs.delay)(resizeUnblockUpdate, 250);
                    if ((0, _stateMjs.globalProjectionState).hasAnimatedSinceResize) {
                        (0, _stateMjs.globalProjectionState).hasAnimatedSinceResize = false;
                        this.nodes.forEach(finishAnimation);
                    }
                });
            }
            if (layoutId) this.root.registerSharedNode(layoutId, this);
            // Only register the handler if it requires layout animation
            if (this.options.animate !== false && visualElement && (layoutId || layout)) this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout })=>{
                if (this.isTreeAnimationBlocked()) {
                    this.target = undefined;
                    this.relativeTarget = undefined;
                    return;
                }
                // TODO: Check here if an animation exists
                const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
                const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();
                /**
                     * The target layout of the element might stay the same,
                     * but its position relative to its parent has changed.
                     */ const targetChanged = !this.targetLayout || !(0, _utilsMjs.boxEqualsRounded)(this.targetLayout, newLayout) || hasRelativeTargetChanged;
                /**
                     * If the layout hasn't seemed to have changed, it might be that the
                     * element is visually in the same place in the document but its position
                     * relative to its parent has indeed changed. So here we check for that.
                     */ const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
                if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
                    if (this.resumeFrom) {
                        this.resumingFrom = this.resumeFrom;
                        this.resumingFrom.resumingFrom = undefined;
                    }
                    this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
                    const animationOptions = {
                        ...(0, _transitionsMjs.getValueTransition)(layoutTransition, "layout"),
                        onPlay: onLayoutAnimationStart,
                        onComplete: onLayoutAnimationComplete
                    };
                    if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
                        animationOptions.delay = 0;
                        animationOptions.type = false;
                    }
                    this.startAnimation(animationOptions);
                } else {
                    /**
                         * If the layout hasn't changed and we have an animation that hasn't started yet,
                         * finish it immediately. Otherwise it will be animating from a location
                         * that was probably never commited to screen and look like a jumpy box.
                         */ if (!hasLayoutChanged) finishAnimation(this);
                    if (this.isLead() && this.options.onExitComplete) this.options.onExitComplete();
                }
                this.targetLayout = newLayout;
            });
        }
        unmount() {
            this.options.layoutId && this.willUpdate();
            this.root.nodes.remove(this);
            const stack = this.getStack();
            stack && stack.remove(this);
            this.parent && this.parent.children.delete(this);
            this.instance = undefined;
            (0, _frameMjs.cancelFrame)(this.updateProjection);
        }
        // only on the root
        blockUpdate() {
            this.updateManuallyBlocked = true;
        }
        unblockUpdate() {
            this.updateManuallyBlocked = false;
        }
        isUpdateBlocked() {
            return this.updateManuallyBlocked || this.updateBlockedByResize;
        }
        isTreeAnimationBlocked() {
            return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
        }
        // Note: currently only running on root node
        startUpdate() {
            if (this.isUpdateBlocked()) return;
            this.isUpdating = true;
            this.nodes && this.nodes.forEach(resetRotation);
            this.animationId++;
        }
        getTransformTemplate() {
            const { visualElement } = this.options;
            return visualElement && visualElement.getProps().transformTemplate;
        }
        willUpdate(shouldNotifyListeners = true) {
            this.root.hasTreeAnimated = true;
            if (this.root.isUpdateBlocked()) {
                this.options.onExitComplete && this.options.onExitComplete();
                return;
            }
            !this.root.isUpdating && this.root.startUpdate();
            if (this.isLayoutDirty) return;
            this.isLayoutDirty = true;
            for(let i = 0; i < this.path.length; i++){
                const node = this.path[i];
                node.shouldResetTransform = true;
                node.updateScroll("snapshot");
                if (node.options.layoutRoot) node.willUpdate(false);
            }
            const { layoutId, layout } = this.options;
            if (layoutId === undefined && !layout) return;
            const transformTemplate = this.getTransformTemplate();
            this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : undefined;
            this.updateSnapshot();
            shouldNotifyListeners && this.notifyListeners("willUpdate");
        }
        update() {
            this.updateScheduled = false;
            const updateWasBlocked = this.isUpdateBlocked();
            // When doing an instant transition, we skip the layout update,
            // but should still clean up the measurements so that the next
            // snapshot could be taken correctly.
            if (updateWasBlocked) {
                this.unblockUpdate();
                this.clearAllSnapshots();
                this.nodes.forEach(clearMeasurements);
                return;
            }
            if (!this.isUpdating) this.nodes.forEach(clearIsLayoutDirty);
            this.isUpdating = false;
            /**
             * Write
             */ this.nodes.forEach(resetTransformStyle);
            /**
             * Read ==================
             */ // Update layout measurements of updated children
            this.nodes.forEach(updateLayout);
            /**
             * Write
             */ // Notify listeners that the layout is updated
            this.nodes.forEach(notifyLayoutUpdate);
            this.clearAllSnapshots();
            /**
             * Manually flush any pending updates. Ideally
             * we could leave this to the following requestAnimationFrame but this seems
             * to leave a flash of incorrectly styled content.
             */ const now = performance.now();
            (0, _frameMjs.frameData).delta = (0, _clampMjs.clamp)(0, 1000 / 60, now - (0, _frameMjs.frameData).timestamp);
            (0, _frameMjs.frameData).timestamp = now;
            (0, _frameMjs.frameData).isProcessing = true;
            (0, _frameMjs.steps).update.process((0, _frameMjs.frameData));
            (0, _frameMjs.steps).preRender.process((0, _frameMjs.frameData));
            (0, _frameMjs.steps).render.process((0, _frameMjs.frameData));
            (0, _frameMjs.frameData).isProcessing = false;
        }
        didUpdate() {
            if (!this.updateScheduled) {
                this.updateScheduled = true;
                queueMicrotask(()=>this.update());
            }
        }
        clearAllSnapshots() {
            this.nodes.forEach(clearSnapshot);
            this.sharedNodes.forEach(removeLeadSnapshots);
        }
        scheduleUpdateProjection() {
            (0, _frameMjs.frame).preRender(this.updateProjection, false, true);
        }
        scheduleCheckAfterUnmount() {
            /**
             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,
             * we manually call didUpdate to give a chance to the siblings to animate.
             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.
             */ (0, _frameMjs.frame).postRender(()=>{
                if (this.isLayoutDirty) this.root.didUpdate();
                else this.root.checkUpdateFailed();
            });
        }
        /**
         * Update measurements
         */ updateSnapshot() {
            if (this.snapshot || !this.instance) return;
            this.snapshot = this.measure();
        }
        updateLayout() {
            if (!this.instance) return;
            // TODO: Incorporate into a forwarded scroll offset
            this.updateScroll();
            if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) return;
            /**
             * When a node is mounted, it simply resumes from the prevLead's
             * snapshot instead of taking a new one, but the ancestors scroll
             * might have updated while the prevLead is unmounted. We need to
             * update the scroll again to make sure the layout we measure is
             * up to date.
             */ if (this.resumeFrom && !this.resumeFrom.instance) for(let i = 0; i < this.path.length; i++){
                const node = this.path[i];
                node.updateScroll();
            }
            const prevLayout = this.layout;
            this.layout = this.measure(false);
            this.layoutCorrected = (0, _modelsMjs.createBox)();
            this.isLayoutDirty = false;
            this.projectionDelta = undefined;
            this.notifyListeners("measure", this.layout.layoutBox);
            const { visualElement } = this.options;
            visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);
        }
        updateScroll(phase = "measure") {
            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
            if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) needsMeasurement = false;
            if (needsMeasurement) this.scroll = {
                animationId: this.root.animationId,
                phase,
                isRoot: checkIsScrollRoot(this.instance),
                offset: measureScroll(this.instance)
            };
        }
        resetTransform() {
            if (!resetTransform) return;
            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
            const hasProjection = this.projectionDelta && !(0, _utilsMjs.isDeltaZero)(this.projectionDelta);
            const transformTemplate = this.getTransformTemplate();
            const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : undefined;
            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
            if (isResetRequested && (hasProjection || (0, _hasTransformMjs.hasTransform)(this.latestValues) || transformTemplateHasChanged)) {
                resetTransform(this.instance, transformTemplateValue);
                this.shouldResetTransform = false;
                this.scheduleRender();
            }
        }
        measure(removeTransform = true) {
            const pageBox = this.measurePageBox();
            let layoutBox = this.removeElementScroll(pageBox);
            /**
             * Measurements taken during the pre-render stage
             * still have transforms applied so we remove them
             * via calculation.
             */ if (removeTransform) layoutBox = this.removeTransform(layoutBox);
            roundBox(layoutBox);
            return {
                animationId: this.root.animationId,
                measuredBox: pageBox,
                layoutBox,
                latestValues: {},
                source: this.id
            };
        }
        measurePageBox() {
            const { visualElement } = this.options;
            if (!visualElement) return (0, _modelsMjs.createBox)();
            const box = visualElement.measureViewportBox();
            // Remove viewport scroll to give page-relative coordinates
            const { scroll } = this.root;
            if (scroll) {
                (0, _deltaApplyMjs.translateAxis)(box.x, scroll.offset.x);
                (0, _deltaApplyMjs.translateAxis)(box.y, scroll.offset.y);
            }
            return box;
        }
        removeElementScroll(box) {
            const boxWithoutScroll = (0, _modelsMjs.createBox)();
            (0, _copyMjs.copyBoxInto)(boxWithoutScroll, box);
            /**
             * Performance TODO: Keep a cumulative scroll offset down the tree
             * rather than loop back up the path.
             */ for(let i = 0; i < this.path.length; i++){
                const node = this.path[i];
                const { scroll, options } = node;
                if (node !== this.root && scroll && options.layoutScroll) {
                    /**
                     * If this is a new scroll root, we want to remove all previous scrolls
                     * from the viewport box.
                     */ if (scroll.isRoot) {
                        (0, _copyMjs.copyBoxInto)(boxWithoutScroll, box);
                        const { scroll: rootScroll } = this.root;
                        /**
                         * Undo the application of page scroll that was originally added
                         * to the measured bounding box.
                         */ if (rootScroll) {
                            (0, _deltaApplyMjs.translateAxis)(boxWithoutScroll.x, -rootScroll.offset.x);
                            (0, _deltaApplyMjs.translateAxis)(boxWithoutScroll.y, -rootScroll.offset.y);
                        }
                    }
                    (0, _deltaApplyMjs.translateAxis)(boxWithoutScroll.x, scroll.offset.x);
                    (0, _deltaApplyMjs.translateAxis)(boxWithoutScroll.y, scroll.offset.y);
                }
            }
            return boxWithoutScroll;
        }
        applyTransform(box, transformOnly = false) {
            const withTransforms = (0, _modelsMjs.createBox)();
            (0, _copyMjs.copyBoxInto)(withTransforms, box);
            for(let i = 0; i < this.path.length; i++){
                const node = this.path[i];
                if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) (0, _deltaApplyMjs.transformBox)(withTransforms, {
                    x: -node.scroll.offset.x,
                    y: -node.scroll.offset.y
                });
                if (!(0, _hasTransformMjs.hasTransform)(node.latestValues)) continue;
                (0, _deltaApplyMjs.transformBox)(withTransforms, node.latestValues);
            }
            if ((0, _hasTransformMjs.hasTransform)(this.latestValues)) (0, _deltaApplyMjs.transformBox)(withTransforms, this.latestValues);
            return withTransforms;
        }
        removeTransform(box) {
            const boxWithoutTransform = (0, _modelsMjs.createBox)();
            (0, _copyMjs.copyBoxInto)(boxWithoutTransform, box);
            for(let i = 0; i < this.path.length; i++){
                const node = this.path[i];
                if (!node.instance) continue;
                if (!(0, _hasTransformMjs.hasTransform)(node.latestValues)) continue;
                (0, _hasTransformMjs.hasScale)(node.latestValues) && node.updateSnapshot();
                const sourceBox = (0, _modelsMjs.createBox)();
                const nodeBox = node.measurePageBox();
                (0, _copyMjs.copyBoxInto)(sourceBox, nodeBox);
                (0, _deltaRemoveMjs.removeBoxTransforms)(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);
            }
            if ((0, _hasTransformMjs.hasTransform)(this.latestValues)) (0, _deltaRemoveMjs.removeBoxTransforms)(boxWithoutTransform, this.latestValues);
            return boxWithoutTransform;
        }
        setTargetDelta(delta) {
            this.targetDelta = delta;
            this.root.scheduleUpdateProjection();
            this.isProjectionDirty = true;
        }
        setOptions(options) {
            this.options = {
                ...this.options,
                ...options,
                crossfade: options.crossfade !== undefined ? options.crossfade : true
            };
        }
        clearMeasurements() {
            this.scroll = undefined;
            this.layout = undefined;
            this.snapshot = undefined;
            this.prevTransformTemplateValue = undefined;
            this.targetDelta = undefined;
            this.target = undefined;
            this.isLayoutDirty = false;
        }
        forceRelativeParentToResolveTarget() {
            if (!this.relativeParent) return;
            /**
             * If the parent target isn't up-to-date, force it to update.
             * This is an unfortunate de-optimisation as it means any updating relative
             * projection will cause all the relative parents to recalculate back
             * up the tree.
             */ if (this.relativeParent.resolvedRelativeTargetAt !== (0, _frameMjs.frameData).timestamp) this.relativeParent.resolveTargetDelta(true);
        }
        resolveTargetDelta(forceRecalculation = false) {
            var _a;
            /**
             * Once the dirty status of nodes has been spread through the tree, we also
             * need to check if we have a shared node of a different depth that has itself
             * been dirtied.
             */ const lead = this.getLead();
            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
            const isShared = Boolean(this.resumingFrom) || this !== lead;
            /**
             * We don't use transform for this step of processing so we don't
             * need to check whether any nodes have changed transform.
             */ const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);
            if (canSkip) return;
            const { layout, layoutId } = this.options;
            /**
             * If we have no layout, we can't perform projection, so early return
             */ if (!this.layout || !(layout || layoutId)) return;
            this.resolvedRelativeTargetAt = (0, _frameMjs.frameData).timestamp;
            /**
             * If we don't have a targetDelta but do have a layout, we can attempt to resolve
             * a relativeParent. This will allow a component to perform scale correction
             * even if no animation has started.
             */ // TODO If this is unsuccessful this currently happens every frame
            if (!this.targetDelta && !this.relativeTarget) {
                // TODO: This is a semi-repetition of further down this function, make DRY
                const relativeParent = this.getClosestProjectingParent();
                if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {
                    this.relativeParent = relativeParent;
                    this.forceRelativeParentToResolveTarget();
                    this.relativeTarget = (0, _modelsMjs.createBox)();
                    this.relativeTargetOrigin = (0, _modelsMjs.createBox)();
                    (0, _deltaCalcMjs.calcRelativePosition)(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
                    (0, _copyMjs.copyBoxInto)(this.relativeTarget, this.relativeTargetOrigin);
                } else this.relativeParent = this.relativeTarget = undefined;
            }
            /**
             * If we have no relative target or no target delta our target isn't valid
             * for this frame.
             */ if (!this.relativeTarget && !this.targetDelta) return;
            /**
             * Lazy-init target data structure
             */ if (!this.target) {
                this.target = (0, _modelsMjs.createBox)();
                this.targetWithTransforms = (0, _modelsMjs.createBox)();
            }
            /**
             * If we've got a relative box for this component, resolve it into a target relative to the parent.
             */ if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
                this.forceRelativeParentToResolveTarget();
                (0, _deltaCalcMjs.calcRelativeBox)(this.target, this.relativeTarget, this.relativeParent.target);
            /**
                 * If we've only got a targetDelta, resolve it into a target
                 */ } else if (this.targetDelta) {
                if (Boolean(this.resumingFrom)) // TODO: This is creating a new object every frame
                this.target = this.applyTransform(this.layout.layoutBox);
                else (0, _copyMjs.copyBoxInto)(this.target, this.layout.layoutBox);
                (0, _deltaApplyMjs.applyBoxDelta)(this.target, this.targetDelta);
            } else /**
                 * If no target, use own layout as target
                 */ (0, _copyMjs.copyBoxInto)(this.target, this.layout.layoutBox);
            /**
             * If we've been told to attempt to resolve a relative target, do so.
             */ if (this.attemptToResolveRelativeTarget) {
                this.attemptToResolveRelativeTarget = false;
                const relativeParent = this.getClosestProjectingParent();
                if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {
                    this.relativeParent = relativeParent;
                    this.forceRelativeParentToResolveTarget();
                    this.relativeTarget = (0, _modelsMjs.createBox)();
                    this.relativeTargetOrigin = (0, _modelsMjs.createBox)();
                    (0, _deltaCalcMjs.calcRelativePosition)(this.relativeTargetOrigin, this.target, relativeParent.target);
                    (0, _copyMjs.copyBoxInto)(this.relativeTarget, this.relativeTargetOrigin);
                } else this.relativeParent = this.relativeTarget = undefined;
            }
            /**
             * Increase debug counter for resolved target deltas
             */ projectionFrameData.resolvedTargetDeltas++;
        }
        getClosestProjectingParent() {
            if (!this.parent || (0, _hasTransformMjs.hasScale)(this.parent.latestValues) || (0, _hasTransformMjs.has2DTranslate)(this.parent.latestValues)) return undefined;
            if (this.parent.isProjecting()) return this.parent;
            else return this.parent.getClosestProjectingParent();
        }
        isProjecting() {
            return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
        }
        calcProjection() {
            var _a;
            const lead = this.getLead();
            const isShared = Boolean(this.resumingFrom) || this !== lead;
            let canSkip = true;
            /**
             * If this is a normal layout animation and neither this node nor its nearest projecting
             * is dirty then we can't skip.
             */ if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) canSkip = false;
            /**
             * If this is a shared layout animation and this node's shared projection is dirty then
             * we can't skip.
             */ if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) canSkip = false;
            /**
             * If we have resolved the target this frame we must recalculate the
             * projection to ensure it visually represents the internal calculations.
             */ if (this.resolvedRelativeTargetAt === (0, _frameMjs.frameData).timestamp) canSkip = false;
            if (canSkip) return;
            const { layout, layoutId } = this.options;
            /**
             * If this section of the tree isn't animating we can
             * delete our target sources for the following frame.
             */ this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
            if (!this.isTreeAnimating) this.targetDelta = this.relativeTarget = undefined;
            if (!this.layout || !(layout || layoutId)) return;
            /**
             * Reset the corrected box with the latest values from box, as we're then going
             * to perform mutative operations on it.
             */ (0, _copyMjs.copyBoxInto)(this.layoutCorrected, this.layout.layoutBox);
            /**
             * Record previous tree scales before updating.
             */ const prevTreeScaleX = this.treeScale.x;
            const prevTreeScaleY = this.treeScale.y;
            /**
             * Apply all the parent deltas to this box to produce the corrected box. This
             * is the layout box, as it will appear on screen as a result of the transforms of its parents.
             */ (0, _deltaApplyMjs.applyTreeDeltas)(this.layoutCorrected, this.treeScale, this.path, isShared);
            /**
             * If this layer needs to perform scale correction but doesn't have a target,
             * use the layout as the target.
             */ if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) lead.target = lead.layout.layoutBox;
            const { target } = lead;
            if (!target) {
                /**
                 * If we don't have a target to project into, but we were previously
                 * projecting, we want to remove the stored transform and schedule
                 * a render to ensure the elements reflect the removed transform.
                 */ if (this.projectionTransform) {
                    this.projectionDelta = (0, _modelsMjs.createDelta)();
                    this.projectionTransform = "none";
                    this.scheduleRender();
                }
                return;
            }
            if (!this.projectionDelta) {
                this.projectionDelta = (0, _modelsMjs.createDelta)();
                this.projectionDeltaWithTransform = (0, _modelsMjs.createDelta)();
            }
            const prevProjectionTransform = this.projectionTransform;
            /**
             * Update the delta between the corrected box and the target box before user-set transforms were applied.
             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate
             * for our layout reprojection, but still allow them to be scaled correctly by the user.
             * It might be that to simplify this we may want to accept that user-set scale is also corrected
             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting
             * to allow people to choose whether these styles are corrected based on just the
             * layout reprojection or the final bounding box.
             */ (0, _deltaCalcMjs.calcBoxDelta)(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
            this.projectionTransform = (0, _transformMjs.buildProjectionTransform)(this.projectionDelta, this.treeScale);
            if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
                this.hasProjected = true;
                this.scheduleRender();
                this.notifyListeners("projectionUpdate", target);
            }
            /**
             * Increase debug counter for recalculated projections
             */ projectionFrameData.recalculatedProjection++;
        }
        hide() {
            this.isVisible = false;
        // TODO: Schedule render
        }
        show() {
            this.isVisible = true;
        // TODO: Schedule render
        }
        scheduleRender(notifyAll = true) {
            this.options.scheduleRender && this.options.scheduleRender();
            if (notifyAll) {
                const stack = this.getStack();
                stack && stack.scheduleRender();
            }
            if (this.resumingFrom && !this.resumingFrom.instance) this.resumingFrom = undefined;
        }
        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
            const snapshot = this.snapshot;
            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
            const mixedValues = {
                ...this.latestValues
            };
            const targetDelta = (0, _modelsMjs.createDelta)();
            if (!this.relativeParent || !this.relativeParent.options.layoutRoot) this.relativeTarget = this.relativeTargetOrigin = undefined;
            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
            const relativeLayout = (0, _modelsMjs.createBox)();
            const snapshotSource = snapshot ? snapshot.source : undefined;
            const layoutSource = this.layout ? this.layout.source : undefined;
            const isSharedLayoutAnimation = snapshotSource !== layoutSource;
            const stack = this.getStack();
            const isOnlyMember = !stack || stack.members.length <= 1;
            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
            this.animationProgress = 0;
            let prevRelativeTarget;
            this.mixTargetDelta = (latest)=>{
                const progress = latest / 1000;
                mixAxisDelta(targetDelta.x, delta.x, progress);
                mixAxisDelta(targetDelta.y, delta.y, progress);
                this.setTargetDelta(targetDelta);
                if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
                    (0, _deltaCalcMjs.calcRelativePosition)(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);
                    /**
                     * If this is an unchanged relative target we can consider the
                     * projection not dirty.
                     */ if (prevRelativeTarget && (0, _utilsMjs.boxEquals)(this.relativeTarget, prevRelativeTarget)) this.isProjectionDirty = false;
                    if (!prevRelativeTarget) prevRelativeTarget = (0, _modelsMjs.createBox)();
                    (0, _copyMjs.copyBoxInto)(prevRelativeTarget, this.relativeTarget);
                }
                if (isSharedLayoutAnimation) {
                    this.animationValues = mixedValues;
                    (0, _mixValuesMjs.mixValues)(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);
                }
                this.root.scheduleUpdateProjection();
                this.scheduleRender();
                this.animationProgress = progress;
            };
            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);
        }
        startAnimation(options) {
            this.notifyListeners("animationStart");
            this.currentAnimation && this.currentAnimation.stop();
            if (this.resumingFrom && this.resumingFrom.currentAnimation) this.resumingFrom.currentAnimation.stop();
            if (this.pendingAnimation) {
                (0, _frameMjs.cancelFrame)(this.pendingAnimation);
                this.pendingAnimation = undefined;
            }
            /**
             * Start the animation in the next frame to have a frame with progress 0,
             * where the target is the same as when the animation started, so we can
             * calculate the relative positions correctly for instant transitions.
             */ this.pendingAnimation = (0, _frameMjs.frame).update(()=>{
                (0, _stateMjs.globalProjectionState).hasAnimatedSinceResize = true;
                this.currentAnimation = (0, _singleValueMjs.animateSingleValue)(0, animationTarget, {
                    ...options,
                    onUpdate: (latest)=>{
                        this.mixTargetDelta(latest);
                        options.onUpdate && options.onUpdate(latest);
                    },
                    onComplete: ()=>{
                        options.onComplete && options.onComplete();
                        this.completeAnimation();
                    }
                });
                if (this.resumingFrom) this.resumingFrom.currentAnimation = this.currentAnimation;
                this.pendingAnimation = undefined;
            });
        }
        completeAnimation() {
            if (this.resumingFrom) {
                this.resumingFrom.currentAnimation = undefined;
                this.resumingFrom.preserveOpacity = undefined;
            }
            const stack = this.getStack();
            stack && stack.exitAnimationComplete();
            this.resumingFrom = this.currentAnimation = this.animationValues = undefined;
            this.notifyListeners("animationComplete");
        }
        finishAnimation() {
            if (this.currentAnimation) {
                this.mixTargetDelta && this.mixTargetDelta(animationTarget);
                this.currentAnimation.stop();
            }
            this.completeAnimation();
        }
        applyTransformsToTarget() {
            const lead = this.getLead();
            let { targetWithTransforms, target, layout, latestValues } = lead;
            if (!targetWithTransforms || !target || !layout) return;
            /**
             * If we're only animating position, and this element isn't the lead element,
             * then instead of projecting into the lead box we instead want to calculate
             * a new target that aligns the two boxes but maintains the layout shape.
             */ if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {
                target = this.target || (0, _modelsMjs.createBox)();
                const xLength = (0, _deltaCalcMjs.calcLength)(this.layout.layoutBox.x);
                target.x.min = lead.target.x.min;
                target.x.max = target.x.min + xLength;
                const yLength = (0, _deltaCalcMjs.calcLength)(this.layout.layoutBox.y);
                target.y.min = lead.target.y.min;
                target.y.max = target.y.min + yLength;
            }
            (0, _copyMjs.copyBoxInto)(targetWithTransforms, target);
            /**
             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.
             * This is the final box that we will then project into by calculating a transform delta and
             * applying it to the corrected box.
             */ (0, _deltaApplyMjs.transformBox)(targetWithTransforms, latestValues);
            /**
             * Update the delta between the corrected box and the final target box, after
             * user-set transforms are applied to it. This will be used by the renderer to
             * create a transform style that will reproject the element from its layout layout
             * into the desired bounding box.
             */ (0, _deltaCalcMjs.calcBoxDelta)(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
        }
        registerSharedNode(layoutId, node) {
            if (!this.sharedNodes.has(layoutId)) this.sharedNodes.set(layoutId, new (0, _stackMjs.NodeStack)());
            const stack = this.sharedNodes.get(layoutId);
            stack.add(node);
            const config = node.options.initialPromotionConfig;
            node.promote({
                transition: config ? config.transition : undefined,
                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined
            });
        }
        isLead() {
            const stack = this.getStack();
            return stack ? stack.lead === this : true;
        }
        getLead() {
            var _a;
            const { layoutId } = this.options;
            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;
        }
        getPrevLead() {
            var _a;
            const { layoutId } = this.options;
            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;
        }
        getStack() {
            const { layoutId } = this.options;
            if (layoutId) return this.root.sharedNodes.get(layoutId);
        }
        promote({ needsReset, transition, preserveFollowOpacity } = {}) {
            const stack = this.getStack();
            if (stack) stack.promote(this, preserveFollowOpacity);
            if (needsReset) {
                this.projectionDelta = undefined;
                this.needsReset = true;
            }
            if (transition) this.setOptions({
                transition
            });
        }
        relegate() {
            const stack = this.getStack();
            if (stack) return stack.relegate(this);
            else return false;
        }
        resetRotation() {
            const { visualElement } = this.options;
            if (!visualElement) return;
            // If there's no detected rotation values, we can early return without a forced render.
            let hasRotate = false;
            /**
             * An unrolled check for rotation values. Most elements don't have any rotation and
             * skipping the nested loop and new object creation is 50% faster.
             */ const { latestValues } = visualElement;
            if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) hasRotate = true;
            // If there's no rotation values, we don't need to do any more.
            if (!hasRotate) return;
            const resetValues = {};
            // Check the rotate value of all axes and reset to 0
            for(let i = 0; i < transformAxes.length; i++){
                const key = "rotate" + transformAxes[i];
                // Record the rotation and then temporarily set it to 0
                if (latestValues[key]) {
                    resetValues[key] = latestValues[key];
                    visualElement.setStaticValue(key, 0);
                }
            }
            // Force a render of this element to apply the transform with all rotations
            // set to 0.
            visualElement.render();
            // Put back all the values we reset
            for(const key in resetValues)visualElement.setStaticValue(key, resetValues[key]);
            // Schedule a render for the next frame. This ensures we won't visually
            // see the element with the reset rotate value applied.
            visualElement.scheduleRender();
        }
        getProjectionStyles(styleProp = {}) {
            var _a, _b;
            // TODO: Return lifecycle-persistent object
            const styles = {};
            if (!this.instance || this.isSVG) return styles;
            if (!this.isVisible) return {
                visibility: "hidden"
            };
            else styles.visibility = "";
            const transformTemplate = this.getTransformTemplate();
            if (this.needsReset) {
                this.needsReset = false;
                styles.opacity = "";
                styles.pointerEvents = (0, _resolveMotionValueMjs.resolveMotionValue)(styleProp.pointerEvents) || "";
                styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
                return styles;
            }
            const lead = this.getLead();
            if (!this.projectionDelta || !this.layout || !lead.target) {
                const emptyStyles = {};
                if (this.options.layoutId) {
                    emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;
                    emptyStyles.pointerEvents = (0, _resolveMotionValueMjs.resolveMotionValue)(styleProp.pointerEvents) || "";
                }
                if (this.hasProjected && !(0, _hasTransformMjs.hasTransform)(this.latestValues)) {
                    emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
                    this.hasProjected = false;
                }
                return emptyStyles;
            }
            const valuesToRender = lead.animationValues || lead.latestValues;
            this.applyTransformsToTarget();
            styles.transform = (0, _transformMjs.buildProjectionTransform)(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
            if (transformTemplate) styles.transform = transformTemplate(valuesToRender, styles.transform);
            const { x, y } = this.projectionDelta;
            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
            if (lead.animationValues) /**
                 * If the lead component is animating, assign this either the entering/leaving
                 * opacity
                 */ styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
            else /**
                 * Or we're not animating at all, set the lead component to its layout
                 * opacity and other components to hidden.
                 */ styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;
            /**
             * Apply scale correction
             */ for(const key in 0, _scaleCorrectionMjs.scaleCorrectors){
                if (valuesToRender[key] === undefined) continue;
                const { correct, applyTo } = (0, _scaleCorrectionMjs.scaleCorrectors)[key];
                /**
                 * Only apply scale correction to the value if we have an
                 * active projection transform. Otherwise these values become
                 * vulnerable to distortion if the element changes size without
                 * a corresponding layout animation.
                 */ const corrected = styles.transform === "none" ? valuesToRender[key] : correct(valuesToRender[key], lead);
                if (applyTo) {
                    const num = applyTo.length;
                    for(let i = 0; i < num; i++)styles[applyTo[i]] = corrected;
                } else styles[key] = corrected;
            }
            /**
             * Disable pointer events on follow components. This is to ensure
             * that if a follow component covers a lead component it doesn't block
             * pointer events on the lead.
             */ if (this.options.layoutId) styles.pointerEvents = lead === this ? (0, _resolveMotionValueMjs.resolveMotionValue)(styleProp.pointerEvents) || "" : "none";
            return styles;
        }
        clearSnapshot() {
            this.resumeFrom = this.snapshot = undefined;
        }
        // Only run on root
        resetTree() {
            this.root.nodes.forEach((node)=>{
                var _a;
                return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();
            });
            this.root.nodes.forEach(clearMeasurements);
            this.root.sharedNodes.clear();
        }
    };
}
function updateLayout(node) {
    node.updateLayout();
}
function notifyLayoutUpdate(node) {
    var _a;
    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;
    if (node.isLead() && node.layout && snapshot && node.hasListeners("didUpdate")) {
        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;
        const { animationType } = node.options;
        const isShared = snapshot.source !== node.layout.source;
        // TODO Maybe we want to also resize the layout snapshot so we don't trigger
        // animations for instance if layout="size" and an element has only changed position
        if (animationType === "size") (0, _eachAxisMjs.eachAxis)((axis)=>{
            const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
            const length = (0, _deltaCalcMjs.calcLength)(axisSnapshot);
            axisSnapshot.min = layout[axis].min;
            axisSnapshot.max = axisSnapshot.min + length;
        });
        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) (0, _eachAxisMjs.eachAxis)((axis)=>{
            const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
            const length = (0, _deltaCalcMjs.calcLength)(layout[axis]);
            axisSnapshot.max = axisSnapshot.min + length;
            /**
                 * Ensure relative target gets resized and rerendererd
                 */ if (node.relativeTarget && !node.currentAnimation) {
                node.isProjectionDirty = true;
                node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;
            }
        });
        const layoutDelta = (0, _modelsMjs.createDelta)();
        (0, _deltaCalcMjs.calcBoxDelta)(layoutDelta, layout, snapshot.layoutBox);
        const visualDelta = (0, _modelsMjs.createDelta)();
        if (isShared) (0, _deltaCalcMjs.calcBoxDelta)(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);
        else (0, _deltaCalcMjs.calcBoxDelta)(visualDelta, layout, snapshot.layoutBox);
        const hasLayoutChanged = !(0, _utilsMjs.isDeltaZero)(layoutDelta);
        let hasRelativeTargetChanged = false;
        if (!node.resumeFrom) {
            const relativeParent = node.getClosestProjectingParent();
            /**
             * If the relativeParent is itself resuming from a different element then
             * the relative snapshot is not relavent
             */ if (relativeParent && !relativeParent.resumeFrom) {
                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
                if (parentSnapshot && parentLayout) {
                    const relativeSnapshot = (0, _modelsMjs.createBox)();
                    (0, _deltaCalcMjs.calcRelativePosition)(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
                    const relativeLayout = (0, _modelsMjs.createBox)();
                    (0, _deltaCalcMjs.calcRelativePosition)(relativeLayout, layout, parentLayout.layoutBox);
                    if (!(0, _utilsMjs.boxEqualsRounded)(relativeSnapshot, relativeLayout)) hasRelativeTargetChanged = true;
                    if (relativeParent.options.layoutRoot) {
                        node.relativeTarget = relativeLayout;
                        node.relativeTargetOrigin = relativeSnapshot;
                        node.relativeParent = relativeParent;
                    }
                }
            }
        }
        node.notifyListeners("didUpdate", {
            layout,
            snapshot,
            delta: visualDelta,
            layoutDelta,
            hasLayoutChanged,
            hasRelativeTargetChanged
        });
    } else if (node.isLead()) {
        const { onExitComplete } = node.options;
        onExitComplete && onExitComplete();
    }
    /**
     * Clearing transition
     * TODO: Investigate why this transition is being passed in as {type: false } from Framer
     * and why we need it at all
     */ node.options.transition = undefined;
}
function propagateDirtyNodes(node) {
    /**
     * Increase debug counter for nodes encountered this frame
     */ projectionFrameData.totalNodes++;
    if (!node.parent) return;
    /**
     * If this node isn't projecting, propagate isProjectionDirty. It will have
     * no performance impact but it will allow the next child that *is* projecting
     * but *isn't* dirty to just check its parent to see if *any* ancestor needs
     * correcting.
     */ if (!node.isProjecting()) node.isProjectionDirty = node.parent.isProjectionDirty;
    /**
     * Propagate isSharedProjectionDirty and isTransformDirty
     * throughout the whole tree. A future revision can take another look at
     * this but for safety we still recalcualte shared nodes.
     */ node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));
    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);
}
function cleanDirtyNodes(node) {
    node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;
}
function clearSnapshot(node) {
    node.clearSnapshot();
}
function clearMeasurements(node) {
    node.clearMeasurements();
}
function clearIsLayoutDirty(node) {
    node.isLayoutDirty = false;
}
function resetTransformStyle(node) {
    const { visualElement } = node.options;
    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) visualElement.notify("BeforeLayoutMeasure");
    node.resetTransform();
}
function finishAnimation(node) {
    node.finishAnimation();
    node.targetDelta = node.relativeTarget = node.target = undefined;
    node.isProjectionDirty = true;
}
function resolveTargetDelta(node) {
    node.resolveTargetDelta();
}
function calcProjection(node) {
    node.calcProjection();
}
function resetRotation(node) {
    node.resetRotation();
}
function removeLeadSnapshots(stack) {
    stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p) {
    output.translate = (0, _mixMjs.mix)(delta.translate, 0, p);
    output.scale = (0, _mixMjs.mix)(delta.scale, 1, p);
    output.origin = delta.origin;
    output.originPoint = delta.originPoint;
}
function mixAxis(output, from, to, p) {
    output.min = (0, _mixMjs.mix)(from.min, to.min, p);
    output.max = (0, _mixMjs.mix)(from.max, to.max, p);
}
function mixBox(output, from, to, p) {
    mixAxis(output.x, from.x, to.x, p);
    mixAxis(output.y, from.y, to.y, p);
}
function hasOpacityCrossfade(node) {
    return node.animationValues && node.animationValues.opacityExit !== undefined;
}
const defaultLayoutTransition = {
    duration: 0.45,
    ease: [
        0.4,
        0,
        0.1,
        1
    ]
};
const userAgentContains = (string)=>typeof navigator !== "undefined" && navigator.userAgent.toLowerCase().includes(string);
/**
 * Measured bounding boxes must be rounded in Safari and
 * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements
 * can appear to jump.
 */ const roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/") ? Math.round : (0, _noopMjs.noop);
function roundAxis(axis) {
    // Round to the nearest .5 pixels to support subpixel layouts
    axis.min = roundPoint(axis.min);
    axis.max = roundPoint(axis.max);
}
function roundBox(box) {
    roundAxis(box.x);
    roundAxis(box.y);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout) {
    return animationType === "position" || animationType === "preserve-aspect" && !(0, _deltaCalcMjs.isNear)((0, _utilsMjs.aspectRatio)(snapshot), (0, _utilsMjs.aspectRatio)(layout), 0.2);
}

},{"../../utils/subscription-manager.mjs":"fxDTo","../animation/mix-values.mjs":"6AWvl","../geometry/copy.mjs":"f206V","../geometry/delta-apply.mjs":"4QsuN","../geometry/delta-calc.mjs":"7r3CU","../geometry/delta-remove.mjs":"dXKkI","../geometry/models.mjs":"8tocy","../../animation/utils/transitions.mjs":"bsOYk","../geometry/utils.mjs":"8NduD","../shared/stack.mjs":"gegN0","../styles/scale-correction.mjs":"4Bydu","../styles/transform.mjs":"g4dqh","../utils/each-axis.mjs":"iO8nE","../utils/has-transform.mjs":"ihgFW","../../render/utils/flat-tree.mjs":"cinYO","../../value/utils/resolve-motion-value.mjs":"2waBq","./state.mjs":"bSdze","../../utils/delay.mjs":"bbpYv","../../utils/mix.mjs":"jx86W","../../debug/record.mjs":"i9CPM","../../render/dom/utils/is-svg-element.mjs":"4r61T","../../animation/interfaces/single-value.mjs":"BcqjY","../../utils/clamp.mjs":"aZOh4","../../frameloop/frame.mjs":"3xPo8","../../utils/noop.mjs":"67SDH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6AWvl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mixValues", ()=>mixValues);
var _circMjs = require("../../easing/circ.mjs");
var _progressMjs = require("../../utils/progress.mjs");
var _mixMjs = require("../../utils/mix.mjs");
var _noopMjs = require("../../utils/noop.mjs");
var _unitsMjs = require("../../value/types/numbers/units.mjs");
const borders = [
    "TopLeft",
    "TopRight",
    "BottomLeft",
    "BottomRight"
];
const numBorders = borders.length;
const asNumber = (value)=>typeof value === "string" ? parseFloat(value) : value;
const isPx = (value)=>typeof value === "number" || (0, _unitsMjs.px).test(value);
function mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {
    if (shouldCrossfadeOpacity) {
        target.opacity = (0, _mixMjs.mix)(0, // TODO Reinstate this if only child
        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));
        target.opacityExit = (0, _mixMjs.mix)(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));
    } else if (isOnlyMember) target.opacity = (0, _mixMjs.mix)(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);
    /**
     * Mix border radius
     */ for(let i = 0; i < numBorders; i++){
        const borderLabel = `border${borders[i]}Radius`;
        let followRadius = getRadius(follow, borderLabel);
        let leadRadius = getRadius(lead, borderLabel);
        if (followRadius === undefined && leadRadius === undefined) continue;
        followRadius || (followRadius = 0);
        leadRadius || (leadRadius = 0);
        const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
        if (canMix) {
            target[borderLabel] = Math.max((0, _mixMjs.mix)(asNumber(followRadius), asNumber(leadRadius), progress), 0);
            if ((0, _unitsMjs.percent).test(leadRadius) || (0, _unitsMjs.percent).test(followRadius)) target[borderLabel] += "%";
        } else target[borderLabel] = leadRadius;
    }
    /**
     * Mix rotation
     */ if (follow.rotate || lead.rotate) target.rotate = (0, _mixMjs.mix)(follow.rotate || 0, lead.rotate || 0, progress);
}
function getRadius(values, radiusName) {
    return values[radiusName] !== undefined ? values[radiusName] : values.borderRadius;
}
// /**
//  * We only want to mix the background color if there's a follow element
//  * that we're not crossfading opacity between. For instance with switch
//  * AnimateSharedLayout animations, this helps the illusion of a continuous
//  * element being animated but also cuts down on the number of paints triggered
//  * for elements where opacity is doing that work for us.
//  */
// if (
//     !hasFollowElement &&
//     latestLeadValues.backgroundColor &&
//     latestFollowValues.backgroundColor
// ) {
//     /**
//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.
//      * We could probably create a mixer that runs at the start of the animation but
//      * the idea behind the crossfader is that it runs dynamically between two potentially
//      * changing targets (ie opacity or borderRadius may be animating independently via variants)
//      */
//     leadState.backgroundColor = followState.backgroundColor = mixColor(
//         latestFollowValues.backgroundColor as string,
//         latestLeadValues.backgroundColor as string
//     )(p)
// }
const easeCrossfadeIn = compress(0, 0.5, (0, _circMjs.circOut));
const easeCrossfadeOut = compress(0.5, 0.95, (0, _noopMjs.noop));
function compress(min, max, easing) {
    return (p)=>{
        // Could replace ifs with clamp
        if (p < min) return 0;
        if (p > max) return 1;
        return easing((0, _progressMjs.progress)(min, max, p));
    };
}

},{"../../easing/circ.mjs":"LdSua","../../utils/progress.mjs":"3vvIn","../../utils/mix.mjs":"jx86W","../../utils/noop.mjs":"67SDH","../../value/types/numbers/units.mjs":"lGBHA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f206V":[function(require,module,exports) {
/**
 * Reset an axis to the provided origin box.
 *
 * This is a mutative operation.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "copyAxisInto", ()=>copyAxisInto);
parcelHelpers.export(exports, "copyBoxInto", ()=>copyBoxInto);
function copyAxisInto(axis, originAxis) {
    axis.min = originAxis.min;
    axis.max = originAxis.max;
}
/**
 * Reset a box to the provided origin box.
 *
 * This is a mutative operation.
 */ function copyBoxInto(box, originBox) {
    copyAxisInto(box.x, originBox.x);
    copyAxisInto(box.y, originBox.y);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dXKkI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "removeAxisDelta", ()=>removeAxisDelta);
parcelHelpers.export(exports, "removeAxisTransforms", ()=>removeAxisTransforms);
parcelHelpers.export(exports, "removeBoxTransforms", ()=>removeBoxTransforms);
parcelHelpers.export(exports, "removePointDelta", ()=>removePointDelta);
var _mixMjs = require("../../utils/mix.mjs");
var _unitsMjs = require("../../value/types/numbers/units.mjs");
var _deltaApplyMjs = require("./delta-apply.mjs");
/**
 * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse
 */ function removePointDelta(point, translate, scale, originPoint, boxScale) {
    point -= translate;
    point = (0, _deltaApplyMjs.scalePoint)(point, 1 / scale, originPoint);
    if (boxScale !== undefined) point = (0, _deltaApplyMjs.scalePoint)(point, 1 / boxScale, originPoint);
    return point;
}
/**
 * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse
 */ function removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
    if ((0, _unitsMjs.percent).test(translate)) {
        translate = parseFloat(translate);
        const relativeProgress = (0, _mixMjs.mix)(sourceAxis.min, sourceAxis.max, translate / 100);
        translate = relativeProgress - sourceAxis.min;
    }
    if (typeof translate !== "number") return;
    let originPoint = (0, _mixMjs.mix)(originAxis.min, originAxis.max, origin);
    if (axis === originAxis) originPoint -= translate;
    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);
    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);
}
/**
 * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse
 * and acts as a bridge between motion values and removeAxisDelta
 */ function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {
    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
}
/**
 * The names of the motion values we want to apply as translation, scale and origin.
 */ const xKeys = [
    "x",
    "scaleX",
    "originX"
];
const yKeys = [
    "y",
    "scaleY",
    "originY"
];
/**
 * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse
 * and acts as a bridge between motion values and removeAxisDelta
 */ function removeBoxTransforms(box, transforms, originBox, sourceBox) {
    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);
    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);
}

},{"../../utils/mix.mjs":"jx86W","../../value/types/numbers/units.mjs":"lGBHA","./delta-apply.mjs":"4QsuN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8NduD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "aspectRatio", ()=>aspectRatio);
parcelHelpers.export(exports, "boxEquals", ()=>boxEquals);
parcelHelpers.export(exports, "boxEqualsRounded", ()=>boxEqualsRounded);
parcelHelpers.export(exports, "isDeltaZero", ()=>isDeltaZero);
var _deltaCalcMjs = require("./delta-calc.mjs");
function isAxisDeltaZero(delta) {
    return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function boxEquals(a, b) {
    return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;
}
function boxEqualsRounded(a, b) {
    return Math.round(a.x.min) === Math.round(b.x.min) && Math.round(a.x.max) === Math.round(b.x.max) && Math.round(a.y.min) === Math.round(b.y.min) && Math.round(a.y.max) === Math.round(b.y.max);
}
function aspectRatio(box) {
    return (0, _deltaCalcMjs.calcLength)(box.x) / (0, _deltaCalcMjs.calcLength)(box.y);
}

},{"./delta-calc.mjs":"7r3CU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gegN0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NodeStack", ()=>NodeStack);
var _arrayMjs = require("../../utils/array.mjs");
class NodeStack {
    constructor(){
        this.members = [];
    }
    add(node) {
        (0, _arrayMjs.addUniqueItem)(this.members, node);
        node.scheduleRender();
    }
    remove(node) {
        (0, _arrayMjs.removeItem)(this.members, node);
        if (node === this.prevLead) this.prevLead = undefined;
        if (node === this.lead) {
            const prevLead = this.members[this.members.length - 1];
            if (prevLead) this.promote(prevLead);
        }
    }
    relegate(node) {
        const indexOfNode = this.members.findIndex((member)=>node === member);
        if (indexOfNode === 0) return false;
        /**
         * Find the next projection node that is present
         */ let prevLead;
        for(let i = indexOfNode; i >= 0; i--){
            const member = this.members[i];
            if (member.isPresent !== false) {
                prevLead = member;
                break;
            }
        }
        if (prevLead) {
            this.promote(prevLead);
            return true;
        } else return false;
    }
    promote(node, preserveFollowOpacity) {
        const prevLead = this.lead;
        if (node === prevLead) return;
        this.prevLead = prevLead;
        this.lead = node;
        node.show();
        if (prevLead) {
            prevLead.instance && prevLead.scheduleRender();
            node.scheduleRender();
            node.resumeFrom = prevLead;
            if (preserveFollowOpacity) node.resumeFrom.preserveOpacity = true;
            if (prevLead.snapshot) {
                node.snapshot = prevLead.snapshot;
                node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
            }
            if (node.root && node.root.isUpdating) node.isLayoutDirty = true;
            const { crossfade } = node.options;
            if (crossfade === false) prevLead.hide();
        /**
             * TODO:
             *   - Test border radius when previous node was deleted
             *   - boxShadow mixing
             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)
             *   - Shared between element A in transformed container and element B (transform stays the same or changes)
             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)
             * ---
             *   - Crossfade opacity of root nodes
             *   - layoutId changes after animation
             *   - layoutId changes mid animation
             */ }
    }
    exitAnimationComplete() {
        this.members.forEach((node)=>{
            const { options, resumingFrom } = node;
            options.onExitComplete && options.onExitComplete();
            if (resumingFrom) resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
        });
    }
    scheduleRender() {
        this.members.forEach((node)=>{
            node.instance && node.scheduleRender(false);
        });
    }
    /**
     * Clear any leads that have been removed this render to prevent them from being
     * used in future animations and to prevent memory leaks
     */ removeLeadSnapshot() {
        if (this.lead && this.lead.snapshot) this.lead.snapshot = undefined;
    }
}

},{"../../utils/array.mjs":"fpJYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4dqh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildProjectionTransform", ()=>buildProjectionTransform);
function buildProjectionTransform(delta, treeScale, latestTransform) {
    let transform = "";
    /**
     * The translations we use to calculate are always relative to the viewport coordinate space.
     * But when we apply scales, we also scale the coordinate space of an element and its children.
     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need
     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.
     */ const xTranslate = delta.x.translate / treeScale.x;
    const yTranslate = delta.y.translate / treeScale.y;
    if (xTranslate || yTranslate) transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;
    /**
     * Apply scale correction for the tree transform.
     * This will apply scale to the screen-orientated axes.
     */ if (treeScale.x !== 1 || treeScale.y !== 1) transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
    if (latestTransform) {
        const { rotate, rotateX, rotateY } = latestTransform;
        if (rotate) transform += `rotate(${rotate}deg) `;
        if (rotateX) transform += `rotateX(${rotateX}deg) `;
        if (rotateY) transform += `rotateY(${rotateY}deg) `;
    }
    /**
     * Apply scale to match the size of the element to the size we want it.
     * This will apply scale to the element-orientated axes.
     */ const elementScaleX = delta.x.scale * treeScale.x;
    const elementScaleY = delta.y.scale * treeScale.y;
    if (elementScaleX !== 1 || elementScaleY !== 1) transform += `scale(${elementScaleX}, ${elementScaleY})`;
    return transform || "none";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cinYO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FlatTree", ()=>FlatTree);
var _arrayMjs = require("../../utils/array.mjs");
var _compareByDepthMjs = require("./compare-by-depth.mjs");
class FlatTree {
    constructor(){
        this.children = [];
        this.isDirty = false;
    }
    add(child) {
        (0, _arrayMjs.addUniqueItem)(this.children, child);
        this.isDirty = true;
    }
    remove(child) {
        (0, _arrayMjs.removeItem)(this.children, child);
        this.isDirty = true;
    }
    forEach(callback) {
        this.isDirty && this.children.sort((0, _compareByDepthMjs.compareByDepth));
        this.isDirty = false;
        this.children.forEach(callback);
    }
}

},{"../../utils/array.mjs":"fpJYa","./compare-by-depth.mjs":"ju6Jl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ju6Jl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareByDepth", ()=>compareByDepth);
const compareByDepth = (a, b)=>a.depth - b.depth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bbpYv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "delay", ()=>delay);
var _frameMjs = require("../frameloop/frame.mjs");
/**
 * Timeout defined in ms
 */ function delay(callback, timeout) {
    const start = performance.now();
    const checkElapsed = ({ timestamp })=>{
        const elapsed = timestamp - start;
        if (elapsed >= timeout) {
            (0, _frameMjs.cancelFrame)(checkElapsed);
            callback(elapsed - timeout);
        }
    };
    (0, _frameMjs.frame).read(checkElapsed, true);
    return ()=>(0, _frameMjs.cancelFrame)(checkElapsed);
}

},{"../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i9CPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "record", ()=>record);
function record(data) {
    if (window.MotionDebug) window.MotionDebug.record(data);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4r61T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isSVGElement", ()=>isSVGElement);
function isSVGElement(element) {
    return element instanceof SVGElement && element.tagName !== "svg";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"BcqjY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animateSingleValue", ()=>animateSingleValue);
var _motionValueMjs = require("./motion-value.mjs");
var _indexMjs = require("../../value/index.mjs");
var _isMotionValueMjs = require("../../value/utils/is-motion-value.mjs");
function animateSingleValue(value, keyframes, options) {
    const motionValue$1 = (0, _isMotionValueMjs.isMotionValue)(value) ? value : (0, _indexMjs.motionValue)(value);
    motionValue$1.start((0, _motionValueMjs.animateMotionValue)("", motionValue$1, keyframes, options));
    return motionValue$1.animation;
}

},{"./motion-value.mjs":"gQYlj","../../value/index.mjs":"he8bY","../../value/utils/is-motion-value.mjs":"94AYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hOjWn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DocumentProjectionNode", ()=>DocumentProjectionNode);
var _createProjectionNodeMjs = require("./create-projection-node.mjs");
var _addDomEventMjs = require("../../events/add-dom-event.mjs");
const DocumentProjectionNode = (0, _createProjectionNodeMjs.createProjectionNode)({
    attachResizeListener: (ref, notify)=>(0, _addDomEventMjs.addDomEvent)(ref, "resize", notify),
    measureScroll: ()=>({
            x: document.documentElement.scrollLeft || document.body.scrollLeft,
            y: document.documentElement.scrollTop || document.body.scrollTop
        }),
    checkIsScrollRoot: ()=>true
});

},{"./create-projection-node.mjs":"dvkZl","../../events/add-dom-event.mjs":"jAgCf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"WHCBp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDomVisualElement", ()=>createDomVisualElement);
var _htmlvisualElementMjs = require("../html/HTMLVisualElement.mjs");
var _svgvisualElementMjs = require("../svg/SVGVisualElement.mjs");
var _isSvgComponentMjs = require("./utils/is-svg-component.mjs");
const createDomVisualElement = (Component, options)=>{
    return (0, _isSvgComponentMjs.isSVGComponent)(Component) ? new (0, _svgvisualElementMjs.SVGVisualElement)(options, {
        enableHardwareAcceleration: false
    }) : new (0, _htmlvisualElementMjs.HTMLVisualElement)(options, {
        enableHardwareAcceleration: true
    });
};

},{"../html/HTMLVisualElement.mjs":"3a21f","../svg/SVGVisualElement.mjs":"7bI6y","./utils/is-svg-component.mjs":"hnK2P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3a21f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HTMLVisualElement", ()=>HTMLVisualElement);
parcelHelpers.export(exports, "getComputedStyle", ()=>getComputedStyle);
var _buildStylesMjs = require("./utils/build-styles.mjs");
var _isCssVariableMjs = require("../dom/utils/is-css-variable.mjs");
var _transformMjs = require("./utils/transform.mjs");
var _scrapeMotionValuesMjs = require("./utils/scrape-motion-values.mjs");
var _renderMjs = require("./utils/render.mjs");
var _defaultsMjs = require("../dom/value-types/defaults.mjs");
var _measureMjs = require("../../projection/utils/measure.mjs");
var _domvisualElementMjs = require("../dom/DOMVisualElement.mjs");
var _isMotionValueMjs = require("../../value/utils/is-motion-value.mjs");
function getComputedStyle(element) {
    return window.getComputedStyle(element);
}
class HTMLVisualElement extends (0, _domvisualElementMjs.DOMVisualElement) {
    readValueFromInstance(instance, key) {
        if ((0, _transformMjs.transformProps).has(key)) {
            const defaultType = (0, _defaultsMjs.getDefaultValueType)(key);
            return defaultType ? defaultType.default || 0 : 0;
        } else {
            const computedStyle = getComputedStyle(instance);
            const value = ((0, _isCssVariableMjs.isCSSVariableName)(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
            return typeof value === "string" ? value.trim() : value;
        }
    }
    measureInstanceViewportBox(instance, { transformPagePoint }) {
        return (0, _measureMjs.measureViewportBox)(instance, transformPagePoint);
    }
    build(renderState, latestValues, options, props) {
        (0, _buildStylesMjs.buildHTMLStyles)(renderState, latestValues, options, props.transformTemplate);
    }
    scrapeMotionValuesFromProps(props, prevProps) {
        return (0, _scrapeMotionValuesMjs.scrapeMotionValuesFromProps)(props, prevProps);
    }
    handleChildMotionValue() {
        if (this.childSubscription) {
            this.childSubscription();
            delete this.childSubscription;
        }
        const { children } = this.props;
        if ((0, _isMotionValueMjs.isMotionValue)(children)) this.childSubscription = children.on("change", (latest)=>{
            if (this.current) this.current.textContent = `${latest}`;
        });
    }
    renderInstance(instance, renderState, styleProp, projection) {
        (0, _renderMjs.renderHTML)(instance, renderState, styleProp, projection);
    }
}

},{"./utils/build-styles.mjs":"2ABzU","../dom/utils/is-css-variable.mjs":"8qZz5","./utils/transform.mjs":"iSy8E","./utils/scrape-motion-values.mjs":"fCzyn","./utils/render.mjs":"jRfU5","../dom/value-types/defaults.mjs":"1Ajoh","../../projection/utils/measure.mjs":"dfpR2","../dom/DOMVisualElement.mjs":"lT6ej","../../value/utils/is-motion-value.mjs":"94AYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lT6ej":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DOMVisualElement", ()=>DOMVisualElement);
var _settersMjs = require("../utils/setters.mjs");
var _parseDomVariantMjs = require("./utils/parse-dom-variant.mjs");
var _visualElementMjs = require("../VisualElement.mjs");
class DOMVisualElement extends (0, _visualElementMjs.VisualElement) {
    sortInstanceNodePosition(a, b) {
        /**
         * compareDocumentPosition returns a bitmask, by using the bitwise &
         * we're returning true if 2 in that bitmask is set to true. 2 is set
         * to true if b preceeds a.
         */ return a.compareDocumentPosition(b) & 2 ? 1 : -1;
    }
    getBaseTargetFromProps(props, key) {
        return props.style ? props.style[key] : undefined;
    }
    removeValueFromRenderState(key, { vars, style }) {
        delete vars[key];
        delete style[key];
    }
    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {
        let origin = (0, _settersMjs.getOrigin)(target, transition || {}, this);
        /**
         * If Framer has provided a function to convert `Color` etc value types, convert them
         */ if (transformValues) {
            if (transitionEnd) transitionEnd = transformValues(transitionEnd);
            if (target) target = transformValues(target);
            if (origin) origin = transformValues(origin);
        }
        if (isMounted) {
            (0, _settersMjs.checkTargetForNewValues)(this, target, origin);
            const parsed = (0, _parseDomVariantMjs.parseDomVariant)(this, target, origin, transitionEnd);
            transitionEnd = parsed.transitionEnd;
            target = parsed.target;
        }
        return {
            transition,
            transitionEnd,
            ...target
        };
    }
}

},{"../utils/setters.mjs":"5AEB8","./utils/parse-dom-variant.mjs":"baBt4","../VisualElement.mjs":"3YJr4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"baBt4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseDomVariant", ()=>parseDomVariant);
var _cssVariablesConversionMjs = require("./css-variables-conversion.mjs");
var _unitConversionMjs = require("./unit-conversion.mjs");
/**
 * Parse a DOM variant to make it animatable. This involves resolving CSS variables
 * and ensuring animations like "20%" => "calc(50vw)" are performed in pixels.
 */ const parseDomVariant = (visualElement, target, origin, transitionEnd)=>{
    const resolved = (0, _cssVariablesConversionMjs.resolveCSSVariables)(visualElement, target, transitionEnd);
    target = resolved.target;
    transitionEnd = resolved.transitionEnd;
    return (0, _unitConversionMjs.unitConversion)(visualElement, target, origin, transitionEnd);
};

},{"./css-variables-conversion.mjs":"d2XUy","./unit-conversion.mjs":"fhnP2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d2XUy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseCSSVariable", ()=>parseCSSVariable);
parcelHelpers.export(exports, "resolveCSSVariables", ()=>resolveCSSVariables);
var _errorsMjs = require("../../../utils/errors.mjs");
var _isNumericalStringMjs = require("../../../utils/is-numerical-string.mjs");
var _isCssVariableMjs = require("./is-css-variable.mjs");
/**
 * Parse Framer's special CSS variable format into a CSS token and a fallback.
 *
 * ```
 * `var(--foo, #fff)` => [`--foo`, '#fff']
 * ```
 *
 * @param current
 */ const splitCSSVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
    const match = splitCSSVariableRegex.exec(current);
    if (!match) return [
        , 
    ];
    const [, token, fallback] = match;
    return [
        token,
        fallback
    ];
}
const maxDepth = 4;
function getVariableValue(current, element, depth = 1) {
    (0, _errorsMjs.invariant)(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
    const [token, fallback] = parseCSSVariable(current);
    // No CSS variable detected
    if (!token) return;
    // Attempt to read this CSS variable off the element
    const resolved = window.getComputedStyle(element).getPropertyValue(token);
    if (resolved) {
        const trimmed = resolved.trim();
        return (0, _isNumericalStringMjs.isNumericalString)(trimmed) ? parseFloat(trimmed) : trimmed;
    } else if ((0, _isCssVariableMjs.isCSSVariableToken)(fallback)) // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.
    return getVariableValue(fallback, element, depth + 1);
    else return fallback;
}
/**
 * Resolve CSS variables from
 *
 * @internal
 */ function resolveCSSVariables(visualElement, { ...target }, transitionEnd) {
    const element = visualElement.current;
    if (!(element instanceof Element)) return {
        target,
        transitionEnd
    };
    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`
    // only if they change but I think this reads clearer and this isn't a performance-critical path.
    if (transitionEnd) transitionEnd = {
        ...transitionEnd
    };
    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved
    visualElement.values.forEach((value)=>{
        const current = value.get();
        if (!(0, _isCssVariableMjs.isCSSVariableToken)(current)) return;
        const resolved = getVariableValue(current, element);
        if (resolved) value.set(resolved);
    });
    // Cycle through every target property and resolve CSS variables. Currently
    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`
    for(const key in target){
        const current = target[key];
        if (!(0, _isCssVariableMjs.isCSSVariableToken)(current)) continue;
        const resolved = getVariableValue(current, element);
        if (!resolved) continue;
        // Clone target if it hasn't already been
        target[key] = resolved;
        if (!transitionEnd) transitionEnd = {};
        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved
        // CSS variable. This will ensure that after the animation the component will reflect
        // changes in the value of the CSS variable.
        if (transitionEnd[key] === undefined) transitionEnd[key] = current;
    }
    return {
        target,
        transitionEnd
    };
}

},{"../../../utils/errors.mjs":"drRZ6","../../../utils/is-numerical-string.mjs":"c9b9u","./is-css-variable.mjs":"8qZz5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fhnP2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "positionalValues", ()=>positionalValues);
parcelHelpers.export(exports, "unitConversion", ()=>unitConversion);
var _isKeyframesTargetMjs = require("../../../animation/utils/is-keyframes-target.mjs");
var _errorsMjs = require("../../../utils/errors.mjs");
var _transformMjs = require("../../html/utils/transform.mjs");
var _dimensionsMjs = require("../value-types/dimensions.mjs");
var _isBrowserMjs = require("../../../utils/is-browser.mjs");
var _indexMjs = require("../../../value/types/numbers/index.mjs");
var _unitsMjs = require("../../../value/types/numbers/units.mjs");
const positionalKeys = new Set([
    "width",
    "height",
    "top",
    "left",
    "right",
    "bottom",
    "x",
    "y",
    "translateX",
    "translateY"
]);
const isPositionalKey = (key)=>positionalKeys.has(key);
const hasPositionalKey = (target)=>{
    return Object.keys(target).some(isPositionalKey);
};
const isNumOrPxType = (v)=>v === (0, _indexMjs.number) || v === (0, _unitsMjs.px);
const getPosFromMatrix = (matrix, pos)=>parseFloat(matrix.split(", ")[pos]);
const getTranslateFromMatrix = (pos2, pos3)=>(_bbox, { transform })=>{
        if (transform === "none" || !transform) return 0;
        const matrix3d = transform.match(/^matrix3d\((.+)\)$/);
        if (matrix3d) return getPosFromMatrix(matrix3d[1], pos3);
        else {
            const matrix = transform.match(/^matrix\((.+)\)$/);
            if (matrix) return getPosFromMatrix(matrix[1], pos2);
            else return 0;
        }
    };
const transformKeys = new Set([
    "x",
    "y",
    "z"
]);
const nonTranslationalTransformKeys = (0, _transformMjs.transformPropOrder).filter((key)=>!transformKeys.has(key));
function removeNonTranslationalTransform(visualElement) {
    const removedTransforms = [];
    nonTranslationalTransformKeys.forEach((key)=>{
        const value = visualElement.getValue(key);
        if (value !== undefined) {
            removedTransforms.push([
                key,
                value.get()
            ]);
            value.set(key.startsWith("scale") ? 1 : 0);
        }
    });
    // Apply changes to element before measurement
    if (removedTransforms.length) visualElement.render();
    return removedTransforms;
}
const positionalValues = {
    // Dimensions
    width: ({ x }, { paddingLeft = "0", paddingRight = "0" })=>x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
    height: ({ y }, { paddingTop = "0", paddingBottom = "0" })=>y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
    top: (_bbox, { top })=>parseFloat(top),
    left: (_bbox, { left })=>parseFloat(left),
    bottom: ({ y }, { top })=>parseFloat(top) + (y.max - y.min),
    right: ({ x }, { left })=>parseFloat(left) + (x.max - x.min),
    // Transform
    x: getTranslateFromMatrix(4, 13),
    y: getTranslateFromMatrix(5, 14)
};
// Alias translate longform names
positionalValues.translateX = positionalValues.x;
positionalValues.translateY = positionalValues.y;
const convertChangedValueTypes = (target, visualElement, changedKeys)=>{
    const originBbox = visualElement.measureViewportBox();
    const element = visualElement.current;
    const elementComputedStyle = getComputedStyle(element);
    const { display } = elementComputedStyle;
    const origin = {};
    // If the element is currently set to display: "none", make it visible before
    // measuring the target bounding box
    if (display === "none") visualElement.setStaticValue("display", target.display || "block");
    /**
     * Record origins before we render and update styles
     */ changedKeys.forEach((key)=>{
        origin[key] = positionalValues[key](originBbox, elementComputedStyle);
    });
    // Apply the latest values (as set in checkAndConvertChangedValueTypes)
    visualElement.render();
    const targetBbox = visualElement.measureViewportBox();
    changedKeys.forEach((key)=>{
        // Restore styles to their **calculated computed style**, not their actual
        // originally set style. This allows us to animate between equivalent pixel units.
        const value = visualElement.getValue(key);
        value && value.jump(origin[key]);
        target[key] = positionalValues[key](targetBbox, elementComputedStyle);
    });
    return target;
};
const checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {})=>{
    target = {
        ...target
    };
    transitionEnd = {
        ...transitionEnd
    };
    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
    // We want to remove any transform values that could affect the element's bounding box before
    // it's measured. We'll reapply these later.
    let removedTransformValues = [];
    let hasAttemptedToRemoveTransformValues = false;
    const changedValueTypeKeys = [];
    targetPositionalKeys.forEach((key)=>{
        const value = visualElement.getValue(key);
        if (!visualElement.hasValue(key)) return;
        let from = origin[key];
        let fromType = (0, _dimensionsMjs.findDimensionValueType)(from);
        const to = target[key];
        let toType;
        // TODO: The current implementation of this basically throws an error
        // if you try and do value conversion via keyframes. There's probably
        // a way of doing this but the performance implications would need greater scrutiny,
        // as it'd be doing multiple resize-remeasure operations.
        if ((0, _isKeyframesTargetMjs.isKeyframesTarget)(to)) {
            const numKeyframes = to.length;
            const fromIndex = to[0] === null ? 1 : 0;
            from = to[fromIndex];
            fromType = (0, _dimensionsMjs.findDimensionValueType)(from);
            for(let i = fromIndex; i < numKeyframes; i++){
                /**
                 * Don't allow wildcard keyframes to be used to detect
                 * a difference in value types.
                 */ if (to[i] === null) break;
                if (!toType) {
                    toType = (0, _dimensionsMjs.findDimensionValueType)(to[i]);
                    (0, _errorsMjs.invariant)(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
                } else (0, _errorsMjs.invariant)((0, _dimensionsMjs.findDimensionValueType)(to[i]) === toType, "All keyframes must be of the same type");
            }
        } else toType = (0, _dimensionsMjs.findDimensionValueType)(to);
        if (fromType !== toType) {
            // If they're both just number or px, convert them both to numbers rather than
            // relying on resize/remeasure to convert (which is wasteful in this situation)
            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
                const current = value.get();
                if (typeof current === "string") value.set(parseFloat(current));
                if (typeof to === "string") target[key] = parseFloat(to);
                else if (Array.isArray(to) && toType === (0, _unitsMjs.px)) target[key] = to.map(parseFloat);
            } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
                // If one or the other value is 0, it's safe to coerce it to the
                // type of the other without measurement
                if (from === 0) value.set(toType.transform(from));
                else target[key] = fromType.transform(to);
            } else {
                // If we're going to do value conversion via DOM measurements, we first
                // need to remove non-positional transform values that could affect the bbox measurements.
                if (!hasAttemptedToRemoveTransformValues) {
                    removedTransformValues = removeNonTranslationalTransform(visualElement);
                    hasAttemptedToRemoveTransformValues = true;
                }
                changedValueTypeKeys.push(key);
                transitionEnd[key] = transitionEnd[key] !== undefined ? transitionEnd[key] : target[key];
                value.jump(to);
            }
        }
    });
    if (changedValueTypeKeys.length) {
        const scrollY = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
        // If we removed transform values, reapply them before the next render
        if (removedTransformValues.length) removedTransformValues.forEach(([key, value])=>{
            visualElement.getValue(key).set(value);
        });
        // Reapply original values
        visualElement.render();
        // Restore scroll position
        if ((0, _isBrowserMjs.isBrowser) && scrollY !== null) window.scrollTo({
            top: scrollY
        });
        return {
            target: convertedTarget,
            transitionEnd
        };
    } else return {
        target,
        transitionEnd
    };
};
/**
 * Convert value types for x/y/width/height/top/left/bottom/right
 *
 * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`
 *
 * @internal
 */ function unitConversion(visualElement, target, origin, transitionEnd) {
    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : {
        target,
        transitionEnd
    };
}

},{"../../../animation/utils/is-keyframes-target.mjs":"sPTPk","../../../utils/errors.mjs":"drRZ6","../../html/utils/transform.mjs":"iSy8E","../value-types/dimensions.mjs":"3Yt0V","../../../utils/is-browser.mjs":"1XAMO","../../../value/types/numbers/index.mjs":"bI9mf","../../../value/types/numbers/units.mjs":"lGBHA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3YJr4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VisualElement", ()=>VisualElement);
var _errorsMjs = require("../utils/errors.mjs");
var _modelsMjs = require("../projection/geometry/models.mjs");
var _isRefObjectMjs = require("../utils/is-ref-object.mjs");
var _indexMjs = require("../utils/reduced-motion/index.mjs");
var _stateMjs = require("../utils/reduced-motion/state.mjs");
var _subscriptionManagerMjs = require("../utils/subscription-manager.mjs");
var _indexMjs1 = require("../value/index.mjs");
var _isMjs = require("../value/use-will-change/is.mjs");
var _isMotionValueMjs = require("../value/utils/is-motion-value.mjs");
var _transformMjs = require("./html/utils/transform.mjs");
var _isControllingVariantsMjs = require("./utils/is-controlling-variants.mjs");
var _isVariantLabelMjs = require("./utils/is-variant-label.mjs");
var _motionValuesMjs = require("./utils/motion-values.mjs");
var _resolveVariantsMjs = require("./utils/resolve-variants.mjs");
var _warnOnceMjs = require("../utils/warn-once.mjs");
var _definitionsMjs = require("../motion/features/definitions.mjs");
var _variantPropsMjs = require("./utils/variant-props.mjs");
var _storeMjs = require("./store.mjs");
var _frameMjs = require("../frameloop/frame.mjs");
const featureNames = Object.keys((0, _definitionsMjs.featureDefinitions));
const numFeatures = featureNames.length;
const propEventHandlers = [
    "AnimationStart",
    "AnimationComplete",
    "Update",
    "BeforeLayoutMeasure",
    "LayoutMeasure",
    "LayoutAnimationStart",
    "LayoutAnimationComplete"
];
const numVariantProps = (0, _variantPropsMjs.variantProps).length;
/**
 * A VisualElement is an imperative abstraction around UI elements such as
 * HTMLElement, SVGElement, Three.Object3D etc.
 */ class VisualElement {
    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}){
        /**
         * A reference to the current underlying Instance, e.g. a HTMLElement
         * or Three.Mesh etc.
         */ this.current = null;
        /**
         * A set containing references to this VisualElement's children.
         */ this.children = new Set();
        /**
         * Determine what role this visual element should take in the variant tree.
         */ this.isVariantNode = false;
        this.isControllingVariants = false;
        /**
         * Decides whether this VisualElement should animate in reduced motion
         * mode.
         *
         * TODO: This is currently set on every individual VisualElement but feels
         * like it could be set globally.
         */ this.shouldReduceMotion = null;
        /**
         * A map of all motion values attached to this visual element. Motion
         * values are source of truth for any given animated value. A motion
         * value might be provided externally by the component via props.
         */ this.values = new Map();
        /**
         * Cleanup functions for active features (hover/tap/exit etc)
         */ this.features = {};
        /**
         * A map of every subscription that binds the provided or generated
         * motion values onChange listeners to this visual element.
         */ this.valueSubscriptions = new Map();
        /**
         * A reference to the previously-provided motion values as returned
         * from scrapeMotionValuesFromProps. We use the keys in here to determine
         * if any motion values need to be removed after props are updated.
         */ this.prevMotionValues = {};
        /**
         * An object containing a SubscriptionManager for each active event.
         */ this.events = {};
        /**
         * An object containing an unsubscribe function for each prop event subscription.
         * For example, every "Update" event can have multiple subscribers via
         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.
         */ this.propEventSubscriptions = {};
        this.notifyUpdate = ()=>this.notify("Update", this.latestValues);
        this.render = ()=>{
            if (!this.current) return;
            this.triggerBuild();
            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
        };
        this.scheduleRender = ()=>(0, _frameMjs.frame).render(this.render, false, true);
        const { latestValues, renderState } = visualState;
        this.latestValues = latestValues;
        this.baseTarget = {
            ...latestValues
        };
        this.initialValues = props.initial ? {
            ...latestValues
        } : {};
        this.renderState = renderState;
        this.parent = parent;
        this.props = props;
        this.presenceContext = presenceContext;
        this.depth = parent ? parent.depth + 1 : 0;
        this.reducedMotionConfig = reducedMotionConfig;
        this.options = options;
        this.isControllingVariants = (0, _isControllingVariantsMjs.isControllingVariants)(props);
        this.isVariantNode = (0, _isControllingVariantsMjs.isVariantNode)(props);
        if (this.isVariantNode) this.variantChildren = new Set();
        this.manuallyAnimateOnMount = Boolean(parent && parent.current);
        /**
         * Any motion values that are provided to the element when created
         * aren't yet bound to the element, as this would technically be impure.
         * However, we iterate through the motion values and set them to the
         * initial values for this component.
         *
         * TODO: This is impure and we should look at changing this to run on mount.
         * Doing so will break some tests but this isn't neccessarily a breaking change,
         * more a reflection of the test.
         */ const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});
        for(const key in initialMotionValues){
            const value = initialMotionValues[key];
            if (latestValues[key] !== undefined && (0, _isMotionValueMjs.isMotionValue)(value)) {
                value.set(latestValues[key], false);
                if ((0, _isMjs.isWillChangeMotionValue)(willChange)) willChange.add(key);
            }
        }
    }
    /**
     * This method takes React props and returns found MotionValues. For example, HTML
     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
     *
     * This isn't an abstract method as it needs calling in the constructor, but it is
     * intended to be one.
     */ scrapeMotionValuesFromProps(_props, _prevProps) {
        return {};
    }
    mount(instance) {
        this.current = instance;
        (0, _storeMjs.visualElementStore).set(instance, this);
        if (this.projection && !this.projection.instance) this.projection.mount(instance);
        if (this.parent && this.isVariantNode && !this.isControllingVariants) this.removeFromVariantTree = this.parent.addVariantChild(this);
        this.values.forEach((value, key)=>this.bindToMotionValue(key, value));
        if (!(0, _stateMjs.hasReducedMotionListener).current) (0, _indexMjs.initPrefersReducedMotion)();
        this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : (0, _stateMjs.prefersReducedMotion).current;
        (0, _warnOnceMjs.warnOnce)(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
        if (this.parent) this.parent.children.add(this);
        this.update(this.props, this.presenceContext);
    }
    unmount() {
        (0, _storeMjs.visualElementStore).delete(this.current);
        this.projection && this.projection.unmount();
        (0, _frameMjs.cancelFrame)(this.notifyUpdate);
        (0, _frameMjs.cancelFrame)(this.render);
        this.valueSubscriptions.forEach((remove)=>remove());
        this.removeFromVariantTree && this.removeFromVariantTree();
        this.parent && this.parent.children.delete(this);
        for(const key in this.events)this.events[key].clear();
        for(const key in this.features)this.features[key].unmount();
        this.current = null;
    }
    bindToMotionValue(key, value) {
        const valueIsTransform = (0, _transformMjs.transformProps).has(key);
        const removeOnChange = value.on("change", (latestValue)=>{
            this.latestValues[key] = latestValue;
            this.props.onUpdate && (0, _frameMjs.frame).update(this.notifyUpdate, false, true);
            if (valueIsTransform && this.projection) this.projection.isTransformDirty = true;
        });
        const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
        this.valueSubscriptions.set(key, ()=>{
            removeOnChange();
            removeOnRenderRequest();
        });
    }
    sortNodePosition(other) {
        /**
         * If these nodes aren't even of the same type we can't compare their depth.
         */ if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) return 0;
        return this.sortInstanceNodePosition(this.current, other.current);
    }
    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {
        let ProjectionNodeConstructor;
        let MeasureLayout;
        /**
         * If we're in development mode, check to make sure we're not rendering a motion component
         * as a child of LazyMotion, as this will break the file-size benefits of using it.
         */ if (preloadedFeatures && isStrict) {
            const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
            renderedProps.ignoreStrict ? (0, _errorsMjs.warning)(false, strictMessage) : (0, _errorsMjs.invariant)(false, strictMessage);
        }
        for(let i = 0; i < numFeatures; i++){
            const name = featureNames[i];
            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = (0, _definitionsMjs.featureDefinitions)[name];
            if (ProjectionNode) ProjectionNodeConstructor = ProjectionNode;
            if (isEnabled(renderedProps)) {
                if (!this.features[name] && FeatureConstructor) this.features[name] = new FeatureConstructor(this);
                if (MeasureLayoutComponent) MeasureLayout = MeasureLayoutComponent;
            }
        }
        if (!this.projection && ProjectionNodeConstructor) {
            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);
            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
            this.projection.setOptions({
                layoutId,
                layout,
                alwaysMeasureLayout: Boolean(drag) || dragConstraints && (0, _isRefObjectMjs.isRefObject)(dragConstraints),
                visualElement: this,
                scheduleRender: ()=>this.scheduleRender(),
                /**
                 * TODO: Update options in an effect. This could be tricky as it'll be too late
                 * to update by the time layout animations run.
                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
                 * ensuring it gets called if there's no potential layout animations.
                 *
                 */ animationType: typeof layout === "string" ? layout : "both",
                initialPromotionConfig: initialLayoutGroupConfig,
                layoutScroll,
                layoutRoot
            });
        }
        return MeasureLayout;
    }
    updateFeatures() {
        for(const key in this.features){
            const feature = this.features[key];
            if (feature.isMounted) feature.update();
            else {
                feature.mount();
                feature.isMounted = true;
            }
        }
    }
    triggerBuild() {
        this.build(this.renderState, this.latestValues, this.options, this.props);
    }
    /**
     * Measure the current viewport box with or without transforms.
     * Only measures axis-aligned boxes, rotate and skew must be manually
     * removed with a re-render to work.
     */ measureViewportBox() {
        return this.current ? this.measureInstanceViewportBox(this.current, this.props) : (0, _modelsMjs.createBox)();
    }
    getStaticValue(key) {
        return this.latestValues[key];
    }
    setStaticValue(key, value) {
        this.latestValues[key] = value;
    }
    /**
     * Make a target animatable by Popmotion. For instance, if we're
     * trying to animate width from 100px to 100vw we need to measure 100vw
     * in pixels to determine what we really need to animate to. This is also
     * pluggable to support Framer's custom value types like Color,
     * and CSS variables.
     */ makeTargetAnimatable(target, canMutate = true) {
        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);
    }
    /**
     * Update the provided props. Ensure any newly-added motion values are
     * added to our map, old ones removed, and listeners updated.
     */ update(props, presenceContext) {
        if (props.transformTemplate || this.props.transformTemplate) this.scheduleRender();
        this.prevProps = this.props;
        this.props = props;
        this.prevPresenceContext = this.presenceContext;
        this.presenceContext = presenceContext;
        /**
         * Update prop event handlers ie onAnimationStart, onAnimationComplete
         */ for(let i = 0; i < propEventHandlers.length; i++){
            const key = propEventHandlers[i];
            if (this.propEventSubscriptions[key]) {
                this.propEventSubscriptions[key]();
                delete this.propEventSubscriptions[key];
            }
            const listener = props["on" + key];
            if (listener) this.propEventSubscriptions[key] = this.on(key, listener);
        }
        this.prevMotionValues = (0, _motionValuesMjs.updateMotionValuesFromProps)(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);
        if (this.handleChildMotionValue) this.handleChildMotionValue();
    }
    getProps() {
        return this.props;
    }
    /**
     * Returns the variant definition with a given name.
     */ getVariant(name) {
        return this.props.variants ? this.props.variants[name] : undefined;
    }
    /**
     * Returns the defined default transition on this component.
     */ getDefaultTransition() {
        return this.props.transition;
    }
    getTransformPagePoint() {
        return this.props.transformPagePoint;
    }
    getClosestVariantNode() {
        return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;
    }
    getVariantContext(startAtParent = false) {
        if (startAtParent) return this.parent ? this.parent.getVariantContext() : undefined;
        if (!this.isControllingVariants) {
            const context = this.parent ? this.parent.getVariantContext() || {} : {};
            if (this.props.initial !== undefined) context.initial = this.props.initial;
            return context;
        }
        const context = {};
        for(let i = 0; i < numVariantProps; i++){
            const name = (0, _variantPropsMjs.variantProps)[i];
            const prop = this.props[name];
            if ((0, _isVariantLabelMjs.isVariantLabel)(prop) || prop === false) context[name] = prop;
        }
        return context;
    }
    /**
     * Add a child visual element to our set of children.
     */ addVariantChild(child) {
        const closestVariantNode = this.getClosestVariantNode();
        if (closestVariantNode) {
            closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
            return ()=>closestVariantNode.variantChildren.delete(child);
        }
    }
    /**
     * Add a motion value and bind it to this visual element.
     */ addValue(key, value) {
        // Remove existing value if it exists
        if (value !== this.values.get(key)) {
            this.removeValue(key);
            this.bindToMotionValue(key, value);
        }
        this.values.set(key, value);
        this.latestValues[key] = value.get();
    }
    /**
     * Remove a motion value and unbind any active subscriptions.
     */ removeValue(key) {
        this.values.delete(key);
        const unsubscribe = this.valueSubscriptions.get(key);
        if (unsubscribe) {
            unsubscribe();
            this.valueSubscriptions.delete(key);
        }
        delete this.latestValues[key];
        this.removeValueFromRenderState(key, this.renderState);
    }
    /**
     * Check whether we have a motion value for this key
     */ hasValue(key) {
        return this.values.has(key);
    }
    getValue(key, defaultValue) {
        if (this.props.values && this.props.values[key]) return this.props.values[key];
        let value = this.values.get(key);
        if (value === undefined && defaultValue !== undefined) {
            value = (0, _indexMjs1.motionValue)(defaultValue, {
                owner: this
            });
            this.addValue(key, value);
        }
        return value;
    }
    /**
     * If we're trying to animate to a previously unencountered value,
     * we need to check for it in our state and as a last resort read it
     * directly from the instance (which might have performance implications).
     */ readValue(key) {
        var _a;
        return this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);
    }
    /**
     * Set the base target to later animate back to. This is currently
     * only hydrated on creation and when we first read a value.
     */ setBaseTarget(key, value) {
        this.baseTarget[key] = value;
    }
    /**
     * Find the base target for a value thats been removed from all animation
     * props.
     */ getBaseTarget(key) {
        var _a;
        const { initial } = this.props;
        const valueFromInitial = typeof initial === "string" || typeof initial === "object" ? (_a = (0, _resolveVariantsMjs.resolveVariantFromProps)(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;
        /**
         * If this value still exists in the current initial variant, read that.
         */ if (initial && valueFromInitial !== undefined) return valueFromInitial;
        /**
         * Alternatively, if this VisualElement config has defined a getBaseTarget
         * so we can read the value from an alternative source, try that.
         */ const target = this.getBaseTargetFromProps(this.props, key);
        if (target !== undefined && !(0, _isMotionValueMjs.isMotionValue)(target)) return target;
        /**
         * If the value was initially defined on initial, but it doesn't any more,
         * return undefined. Otherwise return the value as initially read from the DOM.
         */ return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];
    }
    on(eventName, callback) {
        if (!this.events[eventName]) this.events[eventName] = new (0, _subscriptionManagerMjs.SubscriptionManager)();
        return this.events[eventName].add(callback);
    }
    notify(eventName, ...args) {
        if (this.events[eventName]) this.events[eventName].notify(...args);
    }
}

},{"../utils/errors.mjs":"drRZ6","../projection/geometry/models.mjs":"8tocy","../utils/is-ref-object.mjs":"hA3DA","../utils/reduced-motion/index.mjs":"6cOfX","../utils/reduced-motion/state.mjs":"bxW6Y","../utils/subscription-manager.mjs":"fxDTo","../value/index.mjs":"he8bY","../value/use-will-change/is.mjs":"6vOmr","../value/utils/is-motion-value.mjs":"94AYa","./html/utils/transform.mjs":"iSy8E","./utils/is-controlling-variants.mjs":"i9jG9","./utils/is-variant-label.mjs":"erxli","./utils/motion-values.mjs":"kyRQN","./utils/resolve-variants.mjs":"8MzkH","../utils/warn-once.mjs":"JIiQV","../motion/features/definitions.mjs":"2lmsj","./utils/variant-props.mjs":"huf2R","./store.mjs":"aGZeB","../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6cOfX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initPrefersReducedMotion", ()=>initPrefersReducedMotion);
var _isBrowserMjs = require("../is-browser.mjs");
var _stateMjs = require("./state.mjs");
function initPrefersReducedMotion() {
    (0, _stateMjs.hasReducedMotionListener).current = true;
    if (!(0, _isBrowserMjs.isBrowser)) return;
    if (window.matchMedia) {
        const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
        const setReducedMotionPreferences = ()=>(0, _stateMjs.prefersReducedMotion).current = motionMediaQuery.matches;
        motionMediaQuery.addListener(setReducedMotionPreferences);
        setReducedMotionPreferences();
    } else (0, _stateMjs.prefersReducedMotion).current = false;
}

},{"../is-browser.mjs":"1XAMO","./state.mjs":"bxW6Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bxW6Y":[function(require,module,exports) {
// Does this device prefer reduced motion? Returns `null` server-side.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasReducedMotionListener", ()=>hasReducedMotionListener);
parcelHelpers.export(exports, "prefersReducedMotion", ()=>prefersReducedMotion);
const prefersReducedMotion = {
    current: null
};
const hasReducedMotionListener = {
    current: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kyRQN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateMotionValuesFromProps", ()=>updateMotionValuesFromProps);
var _isMjs = require("../../value/use-will-change/is.mjs");
var _warnOnceMjs = require("../../utils/warn-once.mjs");
var _indexMjs = require("../../value/index.mjs");
var _isMotionValueMjs = require("../../value/utils/is-motion-value.mjs");
function updateMotionValuesFromProps(element, next, prev) {
    const { willChange } = next;
    for(const key in next){
        const nextValue = next[key];
        const prevValue = prev[key];
        if ((0, _isMotionValueMjs.isMotionValue)(nextValue)) {
            /**
             * If this is a motion value found in props or style, we want to add it
             * to our visual element's motion value map.
             */ element.addValue(key, nextValue);
            if ((0, _isMjs.isWillChangeMotionValue)(willChange)) willChange.add(key);
            (0, _warnOnceMjs.warnOnce)(nextValue.version === "10.16.4", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.16.4 may not work as expected.`);
        } else if ((0, _isMotionValueMjs.isMotionValue)(prevValue)) {
            /**
             * If we're swapping from a motion value to a static value,
             * create a new motion value from that
             */ element.addValue(key, (0, _indexMjs.motionValue)(nextValue, {
                owner: element
            }));
            if ((0, _isMjs.isWillChangeMotionValue)(willChange)) willChange.remove(key);
        } else if (prevValue !== nextValue) {
            /**
             * If this is a flat value that has changed, update the motion value
             * or create one if it doesn't exist. We only want to do this if we're
             * not handling the value with our animation state.
             */ if (element.hasValue(key)) {
                const existingValue = element.getValue(key);
                // TODO: Only update values that aren't being animated or even looked at
                !existingValue.hasAnimated && existingValue.set(nextValue);
            } else {
                const latestValue = element.getStaticValue(key);
                element.addValue(key, (0, _indexMjs.motionValue)(latestValue !== undefined ? latestValue : nextValue, {
                    owner: element
                }));
            }
        }
    }
    // Handle removed values
    for(const key in prev)if (next[key] === undefined) element.removeValue(key);
    return next;
}

},{"../../value/use-will-change/is.mjs":"6vOmr","../../utils/warn-once.mjs":"JIiQV","../../value/index.mjs":"he8bY","../../value/utils/is-motion-value.mjs":"94AYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aGZeB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "visualElementStore", ()=>visualElementStore);
const visualElementStore = new WeakMap();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7bI6y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SVGVisualElement", ()=>SVGVisualElement);
var _scrapeMotionValuesMjs = require("./utils/scrape-motion-values.mjs");
var _domvisualElementMjs = require("../dom/DOMVisualElement.mjs");
var _buildAttrsMjs = require("./utils/build-attrs.mjs");
var _camelToDashMjs = require("../dom/utils/camel-to-dash.mjs");
var _camelCaseAttrsMjs = require("./utils/camel-case-attrs.mjs");
var _transformMjs = require("../html/utils/transform.mjs");
var _renderMjs = require("./utils/render.mjs");
var _defaultsMjs = require("../dom/value-types/defaults.mjs");
var _modelsMjs = require("../../projection/geometry/models.mjs");
var _isSvgTagMjs = require("./utils/is-svg-tag.mjs");
class SVGVisualElement extends (0, _domvisualElementMjs.DOMVisualElement) {
    constructor(){
        super(...arguments);
        this.isSVGTag = false;
    }
    getBaseTargetFromProps(props, key) {
        return props[key];
    }
    readValueFromInstance(instance, key) {
        if ((0, _transformMjs.transformProps).has(key)) {
            const defaultType = (0, _defaultsMjs.getDefaultValueType)(key);
            return defaultType ? defaultType.default || 0 : 0;
        }
        key = !(0, _camelCaseAttrsMjs.camelCaseAttributes).has(key) ? (0, _camelToDashMjs.camelToDash)(key) : key;
        return instance.getAttribute(key);
    }
    measureInstanceViewportBox() {
        return (0, _modelsMjs.createBox)();
    }
    scrapeMotionValuesFromProps(props, prevProps) {
        return (0, _scrapeMotionValuesMjs.scrapeMotionValuesFromProps)(props, prevProps);
    }
    build(renderState, latestValues, options, props) {
        (0, _buildAttrsMjs.buildSVGAttrs)(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);
    }
    renderInstance(instance, renderState, styleProp, projection) {
        (0, _renderMjs.renderSVG)(instance, renderState, styleProp, projection);
    }
    mount(instance) {
        this.isSVGTag = (0, _isSvgTagMjs.isSVGTag)(instance.tagName);
        super.mount(instance);
    }
}

},{"./utils/scrape-motion-values.mjs":"bGUYu","../dom/DOMVisualElement.mjs":"lT6ej","./utils/build-attrs.mjs":"lDaMj","../dom/utils/camel-to-dash.mjs":"eUOx7","./utils/camel-case-attrs.mjs":"aH7Xw","../html/utils/transform.mjs":"iSy8E","./utils/render.mjs":"iuDSF","../dom/value-types/defaults.mjs":"1Ajoh","../../projection/geometry/models.mjs":"8tocy","./utils/is-svg-tag.mjs":"iLrl0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6XGhA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "layout", ()=>layout);
var _htmlprojectionNodeMjs = require("../../projection/node/HTMLProjectionNode.mjs");
var _measureLayoutMjs = require("./layout/MeasureLayout.mjs");
const layout = {
    layout: {
        ProjectionNode: (0, _htmlprojectionNodeMjs.HTMLProjectionNode),
        MeasureLayout: (0, _measureLayoutMjs.MeasureLayout)
    }
};

},{"../../projection/node/HTMLProjectionNode.mjs":"d4eCC","./layout/MeasureLayout.mjs":"kA9rP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fBuY4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AnimatePresence", ()=>AnimatePresence);
var _react = require("react");
var _useForceUpdateMjs = require("../../utils/use-force-update.mjs");
var _useIsMountedMjs = require("../../utils/use-is-mounted.mjs");
var _presenceChildMjs = require("./PresenceChild.mjs");
var _layoutGroupContextMjs = require("../../context/LayoutGroupContext.mjs");
var _useIsomorphicEffectMjs = require("../../utils/use-isomorphic-effect.mjs");
var _useUnmountEffectMjs = require("../../utils/use-unmount-effect.mjs");
var _errorsMjs = require("../../utils/errors.mjs");
const getChildKey = (child)=>child.key || "";
function updateChildLookup(children, allChildren) {
    children.forEach((child)=>{
        const key = getChildKey(child);
        allChildren.set(key, child);
    });
}
function onlyElements(children) {
    const filtered = [];
    // We use forEach here instead of map as map mutates the component key by preprending `.$`
    (0, _react.Children).forEach(children, (child)=>{
        if ((0, _react.isValidElement)(child)) filtered.push(child);
    });
    return filtered;
}
/**
 * `AnimatePresence` enables the animation of components that have been removed from the tree.
 *
 * When adding/removing more than a single child, every child **must** be given a unique `key` prop.
 *
 * Any `motion` components that have an `exit` property defined will animate out when removed from
 * the tree.
 *
 * ```jsx
 * import { motion, AnimatePresence } from 'framer-motion'
 *
 * export const Items = ({ items }) => (
 *   <AnimatePresence>
 *     {items.map(item => (
 *       <motion.div
 *         key={item.id}
 *         initial={{ opacity: 0 }}
 *         animate={{ opacity: 1 }}
 *         exit={{ opacity: 0 }}
 *       />
 *     ))}
 *   </AnimatePresence>
 * )
 * ```
 *
 * You can sequence exit animations throughout a tree using variants.
 *
 * If a child contains multiple `motion` components with `exit` props, it will only unmount the child
 * once all `motion` components have finished animating out. Likewise, any components using
 * `usePresence` all need to call `safeToRemove`.
 *
 * @public
 */ const AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = "sync" })=>{
    (0, _errorsMjs.invariant)(!exitBeforeEnter, "Replace exitBeforeEnter with mode='wait'");
    // We want to force a re-render once all exiting animations have finished. We
    // either use a local forceRender function, or one from a parent context if it exists.
    const forceRender = (0, _react.useContext)((0, _layoutGroupContextMjs.LayoutGroupContext)).forceRender || (0, _useForceUpdateMjs.useForceUpdate)()[0];
    const isMounted = (0, _useIsMountedMjs.useIsMounted)();
    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key
    const filteredChildren = onlyElements(children);
    let childrenToRender = filteredChildren;
    const exitingChildren = (0, _react.useRef)(new Map()).current;
    // Keep a living record of the children we're actually rendering so we
    // can diff to figure out which are entering and exiting
    const presentChildren = (0, _react.useRef)(childrenToRender);
    // A lookup table to quickly reference components by key
    const allChildren = (0, _react.useRef)(new Map()).current;
    // If this is the initial component render, just deal with logic surrounding whether
    // we play onMount animations or not.
    const isInitialRender = (0, _react.useRef)(true);
    (0, _useIsomorphicEffectMjs.useIsomorphicLayoutEffect)(()=>{
        isInitialRender.current = false;
        updateChildLookup(filteredChildren, allChildren);
        presentChildren.current = childrenToRender;
    });
    (0, _useUnmountEffectMjs.useUnmountEffect)(()=>{
        isInitialRender.current = true;
        allChildren.clear();
        exitingChildren.clear();
    });
    if (isInitialRender.current) return _react.createElement(_react.Fragment, null, childrenToRender.map((child)=>_react.createElement((0, _presenceChildMjs.PresenceChild), {
            key: getChildKey(child),
            isPresent: true,
            initial: initial ? undefined : false,
            presenceAffectsLayout: presenceAffectsLayout,
            mode: mode
        }, child)));
    // If this is a subsequent render, deal with entering and exiting children
    childrenToRender = [
        ...childrenToRender
    ];
    // Diff the keys of the currently-present and target children to update our
    // exiting list.
    const presentKeys = presentChildren.current.map(getChildKey);
    const targetKeys = filteredChildren.map(getChildKey);
    // Diff the present children with our target children and mark those that are exiting
    const numPresent = presentKeys.length;
    for(let i = 0; i < numPresent; i++){
        const key = presentKeys[i];
        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) exitingChildren.set(key, undefined);
    }
    // If we currently have exiting children, and we're deferring rendering incoming children
    // until after all current children have exiting, empty the childrenToRender array
    if (mode === "wait" && exitingChildren.size) childrenToRender = [];
    // Loop through all currently exiting components and clone them to overwrite `animate`
    // with any `exit` prop they might have defined.
    exitingChildren.forEach((component, key)=>{
        // If this component is actually entering again, early return
        if (targetKeys.indexOf(key) !== -1) return;
        const child = allChildren.get(key);
        if (!child) return;
        const insertionIndex = presentKeys.indexOf(key);
        let exitingComponent = component;
        if (!exitingComponent) {
            const onExit = ()=>{
                allChildren.delete(key);
                exitingChildren.delete(key);
                // Remove this child from the present children
                const removeIndex = presentChildren.current.findIndex((presentChild)=>presentChild.key === key);
                presentChildren.current.splice(removeIndex, 1);
                // Defer re-rendering until all exiting children have indeed left
                if (!exitingChildren.size) {
                    presentChildren.current = filteredChildren;
                    if (isMounted.current === false) return;
                    forceRender();
                    onExitComplete && onExitComplete();
                }
            };
            exitingComponent = _react.createElement((0, _presenceChildMjs.PresenceChild), {
                key: getChildKey(child),
                isPresent: false,
                onExitComplete: onExit,
                custom: custom,
                presenceAffectsLayout: presenceAffectsLayout,
                mode: mode
            }, child);
            exitingChildren.set(key, exitingComponent);
        }
        childrenToRender.splice(insertionIndex, 0, exitingComponent);
    });
    // Add `MotionContext` even to children that don't need it to ensure we're rendering
    // the same tree between renders
    childrenToRender = childrenToRender.map((child)=>{
        const key = child.key;
        return exitingChildren.has(key) ? child : _react.createElement((0, _presenceChildMjs.PresenceChild), {
            key: getChildKey(child),
            isPresent: true,
            presenceAffectsLayout: presenceAffectsLayout,
            mode: mode
        }, child);
    });
    if (mode === "wait" && childrenToRender.length > 1) console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
    return _react.createElement(_react.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map((child)=>(0, _react.cloneElement)(child)));
};

},{"react":"21dqq","../../utils/use-force-update.mjs":"58SRa","../../utils/use-is-mounted.mjs":"6UT6v","./PresenceChild.mjs":"giuAL","../../context/LayoutGroupContext.mjs":"dEA1W","../../utils/use-isomorphic-effect.mjs":"5Yog2","../../utils/use-unmount-effect.mjs":"gNrSX","../../utils/errors.mjs":"drRZ6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"58SRa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useForceUpdate", ()=>useForceUpdate);
var _react = require("react");
var _useIsMountedMjs = require("./use-is-mounted.mjs");
var _frameMjs = require("../frameloop/frame.mjs");
function useForceUpdate() {
    const isMounted = (0, _useIsMountedMjs.useIsMounted)();
    const [forcedRenderCount, setForcedRenderCount] = (0, _react.useState)(0);
    const forceRender = (0, _react.useCallback)(()=>{
        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
    }, [
        forcedRenderCount
    ]);
    /**
     * Defer this to the end of the next animation frame in case there are multiple
     * synchronous calls.
     */ const deferredForceRender = (0, _react.useCallback)(()=>(0, _frameMjs.frame).postRender(forceRender), [
        forceRender
    ]);
    return [
        deferredForceRender,
        forcedRenderCount
    ];
}

},{"react":"21dqq","./use-is-mounted.mjs":"6UT6v","../frameloop/frame.mjs":"3xPo8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6UT6v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useIsMounted", ()=>useIsMounted);
var _react = require("react");
var _useIsomorphicEffectMjs = require("./use-isomorphic-effect.mjs");
function useIsMounted() {
    const isMounted = (0, _react.useRef)(false);
    (0, _useIsomorphicEffectMjs.useIsomorphicLayoutEffect)(()=>{
        isMounted.current = true;
        return ()=>{
            isMounted.current = false;
        };
    }, []);
    return isMounted;
}

},{"react":"21dqq","./use-isomorphic-effect.mjs":"5Yog2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"giuAL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PresenceChild", ()=>PresenceChild);
var _react = require("react");
var _presenceContextMjs = require("../../context/PresenceContext.mjs");
var _useConstantMjs = require("../../utils/use-constant.mjs");
var _popChildMjs = require("./PopChild.mjs");
const PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode })=>{
    const presenceChildren = (0, _useConstantMjs.useConstant)(newChildrenMap);
    const id = (0, _react.useId)();
    const context = (0, _react.useMemo)(()=>({
            id,
            initial,
            isPresent,
            custom,
            onExitComplete: (childId)=>{
                presenceChildren.set(childId, true);
                for (const isComplete of presenceChildren.values()){
                    if (!isComplete) return; // can stop searching when any is incomplete
                }
                onExitComplete && onExitComplete();
            },
            register: (childId)=>{
                presenceChildren.set(childId, false);
                return ()=>presenceChildren.delete(childId);
            }
        }), /**
     * If the presence of a child affects the layout of the components around it,
     * we want to make a new context value to ensure they get re-rendered
     * so they can detect that layout change.
     */ presenceAffectsLayout ? undefined : [
        isPresent
    ]);
    (0, _react.useMemo)(()=>{
        presenceChildren.forEach((_, key)=>presenceChildren.set(key, false));
    }, [
        isPresent
    ]);
    /**
     * If there's no `motion` components to fire exit animations, we want to remove this
     * component immediately.
     */ _react.useEffect(()=>{
        !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();
    }, [
        isPresent
    ]);
    if (mode === "popLayout") children = _react.createElement((0, _popChildMjs.PopChild), {
        isPresent: isPresent
    }, children);
    return _react.createElement((0, _presenceContextMjs.PresenceContext).Provider, {
        value: context
    }, children);
};
function newChildrenMap() {
    return new Map();
}

},{"react":"21dqq","../../context/PresenceContext.mjs":"7DzvZ","../../utils/use-constant.mjs":"gAAJI","./PopChild.mjs":"6MlqJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6MlqJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopChild", ()=>PopChild);
var _react = require("react");
/**
 * Measurement functionality has to be within a separate component
 * to leverage snapshot lifecycle.
 */ class PopChildMeasure extends _react.Component {
    getSnapshotBeforeUpdate(prevProps) {
        const element = this.props.childRef.current;
        if (element && prevProps.isPresent && !this.props.isPresent) {
            const size = this.props.sizeRef.current;
            size.height = element.offsetHeight || 0;
            size.width = element.offsetWidth || 0;
            size.top = element.offsetTop;
            size.left = element.offsetLeft;
        }
        return null;
    }
    /**
     * Required with getSnapshotBeforeUpdate to stop React complaining.
     */ componentDidUpdate() {}
    render() {
        return this.props.children;
    }
}
function PopChild({ children, isPresent }) {
    const id = (0, _react.useId)();
    const ref = (0, _react.useRef)(null);
    const size = (0, _react.useRef)({
        width: 0,
        height: 0,
        top: 0,
        left: 0
    });
    /**
     * We create and inject a style block so we can apply this explicit
     * sizing in a non-destructive manner by just deleting the style block.
     *
     * We can't apply size via render as the measurement happens
     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the
     * styles directly on the DOM node, we might be overwriting
     * styles set via the style prop.
     */ (0, _react.useInsertionEffect)(()=>{
        const { width, height, top, left } = size.current;
        if (isPresent || !ref.current || !width || !height) return;
        ref.current.dataset.motionPopId = id;
        const style = document.createElement("style");
        document.head.appendChild(style);
        if (style.sheet) style.sheet.insertRule(`
          [data-motion-pop-id="${id}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top}px !important;
            left: ${left}px !important;
          }
        `);
        return ()=>{
            document.head.removeChild(style);
        };
    }, [
        isPresent
    ]);
    return _react.createElement(PopChildMeasure, {
        isPresent: isPresent,
        childRef: ref,
        sizeRef: size
    }, _react.cloneElement(children, {
        ref
    }));
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gNrSX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useUnmountEffect", ()=>useUnmountEffect);
var _react = require("react");
function useUnmountEffect(callback) {
    return (0, _react.useEffect)(()=>()=>callback(), []);
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"PF5k3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Toast", ()=>Toast);
parcelHelpers.export(exports, "createRenderToast", ()=>createRenderToast);
parcelHelpers.export(exports, "createToastFn", ()=>createToastFn);
parcelHelpers.export(exports, "toastStore", ()=>toastStore);
var _chunkLDADOVIMMjs = require("./chunk-LDADOVIM.mjs");
var _chunkLHPMGMGTMjs = require("./chunk-LHPMGMGT.mjs");
// src/toast.tsx
var _alert = require("@chakra-ui/alert");
var _system = require("@chakra-ui/system");
var _closeButton = require("@chakra-ui/close-button");
var _sharedUtils = require("@chakra-ui/shared-utils");
// src/toast.tsx
var _jsxRuntime = require("react/jsx-runtime");
"use client";
// src/toast.store.ts
var initialState = {
    top: [],
    "top-left": [],
    "top-right": [],
    "bottom-left": [],
    bottom: [],
    "bottom-right": []
};
var toastStore = createStore(initialState);
function createStore(initialState2) {
    let state = initialState2;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (setStateFn)=>{
        state = setStateFn(state);
        listeners.forEach((l)=>l());
    };
    return {
        getState: ()=>state,
        subscribe: (listener)=>{
            listeners.add(listener);
            return ()=>{
                setState(()=>initialState2);
                listeners.delete(listener);
            };
        },
        /**
     * Delete a toast record at its position
     */ removeToast: (id, position)=>{
            setState((prevState)=>({
                    ...prevState,
                    // id may be string or number
                    // eslint-disable-next-line eqeqeq
                    [position]: prevState[position].filter((toast)=>toast.id != id)
                }));
        },
        notify: (message, options)=>{
            const toast = createToast(message, options);
            const { position, id } = toast;
            setState((prevToasts)=>{
                var _a, _b;
                const isTop = position.includes("top");
                const toasts = isTop ? [
                    toast,
                    ...(_a = prevToasts[position]) != null ? _a : []
                ] : [
                    ...(_b = prevToasts[position]) != null ? _b : [],
                    toast
                ];
                return {
                    ...prevToasts,
                    [position]: toasts
                };
            });
            return id;
        },
        update: (id, options)=>{
            if (!id) return;
            setState((prevState)=>{
                const nextState = {
                    ...prevState
                };
                const { position, index } = (0, _chunkLDADOVIMMjs.findToast)(nextState, id);
                if (position && index !== -1) nextState[position][index] = {
                    ...nextState[position][index],
                    ...options,
                    message: createRenderToast(options)
                };
                return nextState;
            });
        },
        closeAll: ({ positions } = {})=>{
            setState((prev)=>{
                const allPositions = [
                    "bottom",
                    "bottom-right",
                    "bottom-left",
                    "top",
                    "top-left",
                    "top-right"
                ];
                const positionsToClose = positions != null ? positions : allPositions;
                return positionsToClose.reduce((acc, position)=>{
                    acc[position] = prev[position].map((toast)=>({
                            ...toast,
                            requestClose: true
                        }));
                    return acc;
                }, {
                    ...prev
                });
            });
        },
        close: (id)=>{
            setState((prevState)=>{
                const position = (0, _chunkLDADOVIMMjs.getToastPosition)(prevState, id);
                if (!position) return prevState;
                return {
                    ...prevState,
                    [position]: prevState[position].map((toast)=>{
                        if (toast.id == id) return {
                            ...toast,
                            requestClose: true
                        };
                        return toast;
                    })
                };
            });
        },
        isActive: (id)=>Boolean((0, _chunkLDADOVIMMjs.findToast)(toastStore.getState(), id).position)
    };
}
var counter = 0;
function createToast(message, options = {}) {
    var _a, _b;
    counter += 1;
    const id = (_a = options.id) != null ? _a : counter;
    const position = (_b = options.position) != null ? _b : "bottom";
    return {
        id,
        message,
        position,
        duration: options.duration,
        onCloseComplete: options.onCloseComplete,
        onRequestRemove: ()=>toastStore.removeToast(String(id), position),
        status: options.status,
        requestClose: false,
        containerStyle: options.containerStyle
    };
}
var Toast = (props)=>{
    const { status, variant = "solid", id, title, isClosable, onClose, description, colorScheme, icon } = props;
    const ids = id ? {
        root: `toast-${id}`,
        title: `toast-${id}-title`,
        description: `toast-${id}-description`
    } : void 0;
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _alert.Alert), {
        addRole: false,
        status,
        variant,
        id: ids == null ? void 0 : ids.root,
        alignItems: "start",
        borderRadius: "md",
        boxShadow: "lg",
        paddingEnd: 8,
        textAlign: "start",
        width: "auto",
        colorScheme,
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _alert.AlertIcon), {
                children: icon
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).div, {
                flex: "1",
                maxWidth: "100%",
                children: [
                    title && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _alert.AlertTitle), {
                        id: ids == null ? void 0 : ids.title,
                        children: title
                    }),
                    description && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _alert.AlertDescription), {
                        id: ids == null ? void 0 : ids.description,
                        display: "block",
                        children: description
                    })
                ]
            }),
            isClosable && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _closeButton.CloseButton), {
                size: "sm",
                onClick: onClose,
                position: "absolute",
                insetEnd: 1,
                top: 1
            })
        ]
    });
};
function createRenderToast(options = {}) {
    const { render, toastComponent: ToastComponent = Toast } = options;
    const renderToast = (props)=>{
        if (typeof render === "function") return render({
            ...props,
            ...options
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ToastComponent, {
            ...props,
            ...options
        });
    };
    return renderToast;
}
function createToastFn(dir, defaultOptions) {
    const normalizeToastOptions = (options)=>{
        var _a;
        return {
            ...defaultOptions,
            ...options,
            position: (0, _chunkLHPMGMGTMjs.getToastPlacement)((_a = options == null ? void 0 : options.position) != null ? _a : defaultOptions == null ? void 0 : defaultOptions.position, dir)
        };
    };
    const toast = (options)=>{
        const normalizedToastOptions = normalizeToastOptions(options);
        const Message = createRenderToast(normalizedToastOptions);
        return toastStore.notify(Message, normalizedToastOptions);
    };
    toast.update = (id, options)=>{
        toastStore.update(id, normalizeToastOptions(options));
    };
    toast.promise = (promise, options)=>{
        const id = toast({
            ...options.loading,
            status: "loading",
            duration: null
        });
        promise.then((data)=>toast.update(id, {
                status: "success",
                duration: 5e3,
                ...(0, _sharedUtils.runIfFn)(options.success, data)
            })).catch((error)=>toast.update(id, {
                status: "error",
                duration: 5e3,
                ...(0, _sharedUtils.runIfFn)(options.error, error)
            }));
    };
    toast.closeAll = toastStore.closeAll;
    toast.close = toastStore.close;
    toast.isActive = toastStore.isActive;
    return toast;
}

},{"./chunk-LDADOVIM.mjs":"3Cb7X","./chunk-LHPMGMGT.mjs":"6G7eL","@chakra-ui/alert":"jwJbG","@chakra-ui/system":"jpRoG","@chakra-ui/close-button":"gSDF2","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6G7eL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getToastPlacement", ()=>getToastPlacement);
"use client";
// src/toast.placement.ts
function getToastPlacement(position, dir) {
    var _a;
    const computedPosition = position != null ? position : "bottom";
    const logicals = {
        "top-start": {
            ltr: "top-left",
            rtl: "top-right"
        },
        "top-end": {
            ltr: "top-right",
            rtl: "top-left"
        },
        "bottom-start": {
            ltr: "bottom-left",
            rtl: "bottom-right"
        },
        "bottom-end": {
            ltr: "bottom-right",
            rtl: "bottom-left"
        }
    };
    const logical = logicals[computedPosition];
    return (_a = logical == null ? void 0 : logical[dir]) != null ? _a : computedPosition;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jwJbG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Alert", ()=>(0, _chunk3KCBMPN5Mjs.Alert));
parcelHelpers.export(exports, "AlertDescription", ()=>(0, _chunkCUKBNH6UMjs.AlertDescription));
parcelHelpers.export(exports, "AlertIcon", ()=>(0, _chunkALC6QPCIMjs.AlertIcon));
parcelHelpers.export(exports, "AlertTitle", ()=>(0, _chunkQURMB2UJMjs.AlertTitle));
parcelHelpers.export(exports, "useAlertStyles", ()=>(0, _chunkXCES3W5VMjs.useAlertStyles));
var _chunkCUKBNH6UMjs = require("./chunk-CUKBNH6U.mjs");
var _chunkALC6QPCIMjs = require("./chunk-ALC6QPCI.mjs");
var _chunkQURMB2UJMjs = require("./chunk-QURMB2UJ.mjs");
var _chunk3KCBMPN5Mjs = require("./chunk-3KCBMPN5.mjs");
var _chunkXCES3W5VMjs = require("./chunk-XCES3W5V.mjs");
var _chunkNEDBTDT2Mjs = require("./chunk-NEDBTDT2.mjs");
"use client";

},{"./chunk-CUKBNH6U.mjs":"aGE87","./chunk-ALC6QPCI.mjs":"5vbXD","./chunk-QURMB2UJ.mjs":"1ECyn","./chunk-3KCBMPN5.mjs":"1xCOh","./chunk-XCES3W5V.mjs":"duMne","./chunk-NEDBTDT2.mjs":"j3SIB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aGE87":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AlertDescription", ()=>AlertDescription);
var _chunkXCES3W5VMjs = require("./chunk-XCES3W5V.mjs");
// src/alert-description.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var AlertDescription = (0, _system.forwardRef)(function AlertDescription2(props, ref) {
    const styles = (0, _chunkXCES3W5VMjs.useAlertStyles)();
    const { status } = (0, _chunkXCES3W5VMjs.useAlertContext)();
    const descriptionStyles = {
        display: "inline",
        ...styles.description
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        "data-status": status,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-alert__desc", props.className),
        __css: descriptionStyles
    });
});
AlertDescription.displayName = "AlertDescription";

},{"./chunk-XCES3W5V.mjs":"duMne","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"duMne":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AlertProvider", ()=>AlertProvider);
parcelHelpers.export(exports, "useAlertContext", ()=>useAlertContext);
parcelHelpers.export(exports, "AlertStylesProvider", ()=>AlertStylesProvider);
parcelHelpers.export(exports, "useAlertStyles", ()=>useAlertStyles);
parcelHelpers.export(exports, "getStatusColorScheme", ()=>getStatusColorScheme);
parcelHelpers.export(exports, "getStatusIcon", ()=>getStatusIcon);
var _chunkNEDBTDT2Mjs = require("./chunk-NEDBTDT2.mjs");
// src/alert-context.ts
var _reactContext = require("@chakra-ui/react-context");
var _spinner = require("@chakra-ui/spinner");
"use client";
var [AlertProvider, useAlertContext] = (0, _reactContext.createContext)({
    name: "AlertContext",
    hookName: "useAlertContext",
    providerName: "<Alert />"
});
var [AlertStylesProvider, useAlertStyles] = (0, _reactContext.createContext)({
    name: `AlertStylesContext`,
    hookName: `useAlertStyles`,
    providerName: "<Alert />"
});
var STATUSES = {
    info: {
        icon: (0, _chunkNEDBTDT2Mjs.InfoIcon),
        colorScheme: "blue"
    },
    warning: {
        icon: (0, _chunkNEDBTDT2Mjs.WarningIcon),
        colorScheme: "orange"
    },
    success: {
        icon: (0, _chunkNEDBTDT2Mjs.CheckIcon),
        colorScheme: "green"
    },
    error: {
        icon: (0, _chunkNEDBTDT2Mjs.WarningIcon),
        colorScheme: "red"
    },
    loading: {
        icon: (0, _spinner.Spinner),
        colorScheme: "blue"
    }
};
function getStatusColorScheme(status) {
    return STATUSES[status].colorScheme;
}
function getStatusIcon(status) {
    return STATUSES[status].icon;
}

},{"./chunk-NEDBTDT2.mjs":"j3SIB","@chakra-ui/react-context":"7RVZP","@chakra-ui/spinner":"lDqj1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j3SIB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CheckIcon", ()=>CheckIcon);
parcelHelpers.export(exports, "InfoIcon", ()=>InfoIcon);
parcelHelpers.export(exports, "WarningIcon", ()=>WarningIcon);
// src/icons.tsx
var _icon = require("@chakra-ui/icon");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function CheckIcon(props) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        viewBox: "0 0 24 24",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
        })
    });
}
function InfoIcon(props) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        viewBox: "0 0 24 24",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
        })
    });
}
function WarningIcon(props) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        viewBox: "0 0 24 24",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        })
    });
}

},{"@chakra-ui/icon":"jW1nH","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jW1nH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Icon", ()=>(0, _chunk2GBDXOMAMjs.Icon));
parcelHelpers.export(exports, "createIcon", ()=>(0, _chunkDEQZ7DVAMjs.createIcon));
var _chunkDEQZ7DVAMjs = require("./chunk-DEQZ7DVA.mjs");
var _chunk2GBDXOMAMjs = require("./chunk-2GBDXOMA.mjs");
"use client";

},{"./chunk-DEQZ7DVA.mjs":"2lCEt","./chunk-2GBDXOMA.mjs":"4sW9g","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2lCEt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIcon", ()=>createIcon);
var _chunk2GBDXOMAMjs = require("./chunk-2GBDXOMA.mjs");
// src/create-icon.tsx
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function createIcon(options) {
    const { viewBox = "0 0 24 24", d: pathDefinition, displayName, defaultProps = {} } = options;
    const path = (0, _react.Children).toArray(options.path);
    const Comp = (0, _system.forwardRef)((props, ref)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk2GBDXOMAMjs.Icon), {
            ref,
            viewBox,
            ...defaultProps,
            ...props,
            children: path.length ? path : /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
                fill: "currentColor",
                d: pathDefinition
            })
        }));
    Comp.displayName = displayName;
    return Comp;
}

},{"./chunk-2GBDXOMA.mjs":"4sW9g","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4sW9g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Icon", ()=>Icon);
parcelHelpers.export(exports, "icon_default", ()=>icon_default);
// src/icon.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var fallbackIcon = {
    path: /* @__PURE__ */ (0, _jsxRuntime.jsxs)("g", {
        stroke: "currentColor",
        strokeWidth: "1.5",
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
                strokeLinecap: "round",
                fill: "none",
                d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
                fill: "currentColor",
                strokeLinecap: "round",
                d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsx)("circle", {
                fill: "none",
                strokeMiterlimit: "10",
                cx: "12",
                cy: "12",
                r: "11.25"
            })
        ]
    }),
    viewBox: "0 0 24 24"
};
var Icon = (0, _system.forwardRef)((props, ref)=>{
    const { as: element, viewBox, color = "currentColor", focusable = false, children, className, __css, ...rest } = props;
    const _className = (0, _sharedUtils.cx)("chakra-icon", className);
    const customStyles = (0, _system.useStyleConfig)("Icon", props);
    const styles = {
        w: "1em",
        h: "1em",
        display: "inline-block",
        lineHeight: "1em",
        flexShrink: 0,
        color,
        ...__css,
        ...customStyles
    };
    const shared = {
        ref,
        focusable,
        className: _className,
        __css: styles
    };
    const _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;
    if (element && typeof element !== "string") return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).svg, {
        as: element,
        ...shared,
        ...rest
    });
    const _path = children != null ? children : fallbackIcon.path;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).svg, {
        verticalAlign: "middle",
        viewBox: _viewBox,
        ...shared,
        ...rest,
        children: _path
    });
});
Icon.displayName = "Icon";
var icon_default = Icon;

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lDqj1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Spinner", ()=>(0, _chunk5PH6ULNPMjs.Spinner));
var _chunk5PH6ULNPMjs = require("./chunk-5PH6ULNP.mjs");
"use client";

},{"./chunk-5PH6ULNP.mjs":"5HnhF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5HnhF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Spinner", ()=>Spinner);
// src/spinner.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var spin = (0, _system.keyframes)({
    "0%": {
        transform: "rotate(0deg)"
    },
    "100%": {
        transform: "rotate(360deg)"
    }
});
var Spinner = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _system.useStyleConfig)("Spinner", props);
    const { label = "Loading...", thickness = "2px", speed = "0.45s", emptyColor = "transparent", className, ...rest } = (0, _system.omitThemingProps)(props);
    const _className = (0, _sharedUtils.cx)("chakra-spinner", className);
    const spinnerStyles = {
        display: "inline-block",
        borderColor: "currentColor",
        borderStyle: "solid",
        borderRadius: "99999px",
        borderWidth: thickness,
        borderBottomColor: emptyColor,
        borderLeftColor: emptyColor,
        animation: `${spin} ${speed} linear infinite`,
        ...styles
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        __css: spinnerStyles,
        className: _className,
        ...rest,
        children: label && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
            srOnly: true,
            children: label
        })
    });
});
Spinner.displayName = "Spinner";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5vbXD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AlertIcon", ()=>AlertIcon);
var _chunkXCES3W5VMjs = require("./chunk-XCES3W5V.mjs");
// src/alert-icon.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function AlertIcon(props) {
    const { status } = (0, _chunkXCES3W5VMjs.useAlertContext)();
    const BaseIcon = (0, _chunkXCES3W5VMjs.getStatusIcon)(status);
    const styles = (0, _chunkXCES3W5VMjs.useAlertStyles)();
    const css = status === "loading" ? styles.spinner : styles.icon;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        display: "inherit",
        "data-status": status,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-alert__icon", props.className),
        __css: css,
        children: props.children || /* @__PURE__ */ (0, _jsxRuntime.jsx)(BaseIcon, {
            h: "100%",
            w: "100%"
        })
    });
}
AlertIcon.displayName = "AlertIcon";

},{"./chunk-XCES3W5V.mjs":"duMne","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ECyn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AlertTitle", ()=>AlertTitle);
var _chunkXCES3W5VMjs = require("./chunk-XCES3W5V.mjs");
// src/alert-title.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var AlertTitle = (0, _system.forwardRef)(function AlertTitle2(props, ref) {
    const styles = (0, _chunkXCES3W5VMjs.useAlertStyles)();
    const { status } = (0, _chunkXCES3W5VMjs.useAlertContext)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        "data-status": status,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-alert__title", props.className),
        __css: styles.title
    });
});
AlertTitle.displayName = "AlertTitle";

},{"./chunk-XCES3W5V.mjs":"duMne","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1xCOh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Alert", ()=>Alert);
var _chunkXCES3W5VMjs = require("./chunk-XCES3W5V.mjs");
// src/alert.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Alert = (0, _system.forwardRef)(function Alert2(props, ref) {
    var _a;
    const { status = "info", addRole = true, ...rest } = (0, _system.omitThemingProps)(props);
    const colorScheme = (_a = props.colorScheme) != null ? _a : (0, _chunkXCES3W5VMjs.getStatusColorScheme)(status);
    const styles = (0, _system.useMultiStyleConfig)("Alert", {
        ...props,
        colorScheme
    });
    const alertStyles = {
        width: "100%",
        display: "flex",
        alignItems: "center",
        position: "relative",
        overflow: "hidden",
        ...styles.container
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkXCES3W5VMjs.AlertProvider), {
        value: {
            status
        },
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkXCES3W5VMjs.AlertStylesProvider), {
            value: styles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                "data-status": status,
                role: addRole ? "alert" : void 0,
                ref,
                ...rest,
                className: (0, _sharedUtils.cx)("chakra-alert", props.className),
                __css: alertStyles
            })
        })
    });
});
Alert.displayName = "Alert";

},{"./chunk-XCES3W5V.mjs":"duMne","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gSDF2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CloseButton", ()=>(0, _chunk37N6GCLAMjs.CloseButton));
var _chunk37N6GCLAMjs = require("./chunk-37N6GCLA.mjs");
"use client";

},{"./chunk-37N6GCLA.mjs":"lzN02","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lzN02":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CloseButton", ()=>CloseButton);
// src/close-button.tsx
var _icon = require("@chakra-ui/icon");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function CloseIcon(props) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        focusable: "false",
        "aria-hidden": true,
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
        })
    });
}
var CloseButton = (0, _system.forwardRef)(function CloseButton2(props, ref) {
    const styles = (0, _system.useStyleConfig)("CloseButton", props);
    const { children, isDisabled, __css, ...rest } = (0, _system.omitThemingProps)(props);
    const baseStyle = {
        outline: 0,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: 0
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).button, {
        type: "button",
        "aria-label": "Close",
        ref,
        disabled: isDisabled,
        __css: {
            ...baseStyle,
            ...styles,
            ...__css
        },
        ...rest,
        children: children || /* @__PURE__ */ (0, _jsxRuntime.jsx)(CloseIcon, {
            width: "1em",
            height: "1em"
        })
    });
});
CloseButton.displayName = "CloseButton";

},{"@chakra-ui/icon":"jW1nH","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fPqDy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultStandaloneParam", ()=>defaultStandaloneParam);
parcelHelpers.export(exports, "createStandaloneToast", ()=>createStandaloneToast);
var _chunk5LZ7WDUFMjs = require("./chunk-5LZ7WDUF.mjs");
var _chunkHYCJNCPEMjs = require("./chunk-HYCJNCPE.mjs");
// src/create-standalone-toast.tsx
var _system = require("@chakra-ui/system");
var _theme = require("@chakra-ui/theme");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var defaults = {
    duration: 5e3,
    variant: "solid"
};
var defaultStandaloneParam = {
    theme: (0, _theme.theme),
    colorMode: "light",
    toggleColorMode: ()=>{},
    setColorMode: ()=>{},
    defaultOptions: defaults,
    forced: false
};
function createStandaloneToast({ theme = defaultStandaloneParam.theme, colorMode = defaultStandaloneParam.colorMode, toggleColorMode = defaultStandaloneParam.toggleColorMode, setColorMode = defaultStandaloneParam.setColorMode, defaultOptions = defaultStandaloneParam.defaultOptions, motionVariants, toastSpacing, component, forced } = defaultStandaloneParam) {
    const colorModeContextValue = {
        colorMode,
        setColorMode,
        toggleColorMode,
        forced
    };
    const ToastContainer = ()=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.ThemeProvider), {
            theme,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.ColorModeContext).Provider, {
                value: colorModeContextValue,
                children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk5LZ7WDUFMjs.ToastProvider), {
                    defaultOptions,
                    motionVariants,
                    toastSpacing,
                    component
                })
            })
        });
    return {
        ToastContainer,
        toast: (0, _chunkHYCJNCPEMjs.createToastFn)(theme.direction, defaultOptions)
    };
}

},{"./chunk-5LZ7WDUF.mjs":"gp5WX","./chunk-HYCJNCPE.mjs":"PF5k3","@chakra-ui/system":"jpRoG","@chakra-ui/theme":"b2xd8","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43mGV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Accordion", ()=>(0, _chunkCRBMUVJAMjs.Accordion));
parcelHelpers.export(exports, "AccordionButton", ()=>(0, _chunkQCAXGLVHMjs.AccordionButton));
parcelHelpers.export(exports, "AccordionIcon", ()=>(0, _chunkYI3ICT2TMjs.AccordionIcon));
parcelHelpers.export(exports, "AccordionItem", ()=>(0, _chunkJQ2DNXQ3Mjs.AccordionItem));
parcelHelpers.export(exports, "AccordionPanel", ()=>(0, _chunk5VAIMVHTMjs.AccordionPanel));
parcelHelpers.export(exports, "AccordionProvider", ()=>(0, _chunk74QY6M57Mjs.AccordionProvider));
parcelHelpers.export(exports, "useAccordion", ()=>(0, _chunk74QY6M57Mjs.useAccordion));
parcelHelpers.export(exports, "useAccordionContext", ()=>(0, _chunk74QY6M57Mjs.useAccordionContext));
parcelHelpers.export(exports, "useAccordionItem", ()=>(0, _chunk74QY6M57Mjs.useAccordionItem));
parcelHelpers.export(exports, "useAccordionItemState", ()=>(0, _chunk3OO6EZWZMjs.useAccordionItemState));
parcelHelpers.export(exports, "useAccordionStyles", ()=>(0, _chunkRUEU7BLRMjs.useAccordionStyles));
var _chunkQCAXGLVHMjs = require("./chunk-QCAXGLVH.mjs");
var _chunkYI3ICT2TMjs = require("./chunk-YI3ICT2T.mjs");
var _chunkJQ2DNXQ3Mjs = require("./chunk-JQ2DNXQ3.mjs");
var _chunk5VAIMVHTMjs = require("./chunk-5VAIMVHT.mjs");
var _chunkCRBMUVJAMjs = require("./chunk-CRBMUVJA.mjs");
var _chunk74QY6M57Mjs = require("./chunk-74QY6M57.mjs");
var _chunk3OO6EZWZMjs = require("./chunk-3OO6EZWZ.mjs");
var _chunkRUEU7BLRMjs = require("./chunk-RUEU7BLR.mjs");
"use client";

},{"./chunk-QCAXGLVH.mjs":"gcn18","./chunk-YI3ICT2T.mjs":"9iMwX","./chunk-JQ2DNXQ3.mjs":"2BLm2","./chunk-5VAIMVHT.mjs":"46Vu0","./chunk-CRBMUVJA.mjs":"8Od1e","./chunk-74QY6M57.mjs":"a4HFC","./chunk-3OO6EZWZ.mjs":"dLOp7","./chunk-RUEU7BLR.mjs":"lpkv5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gcn18":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AccordionButton", ()=>AccordionButton);
var _chunkRUEU7BLRMjs = require("./chunk-RUEU7BLR.mjs");
// src/accordion-button.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var AccordionButton = (0, _system.forwardRef)(function AccordionButton2(props, ref) {
    const { getButtonProps } = (0, _chunkRUEU7BLRMjs.useAccordionItemContext)();
    const buttonProps = getButtonProps(props, ref);
    const styles = (0, _chunkRUEU7BLRMjs.useAccordionStyles)();
    const buttonStyles = {
        display: "flex",
        alignItems: "center",
        width: "100%",
        outline: 0,
        ...styles.button
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).button, {
        ...buttonProps,
        className: (0, _sharedUtils.cx)("chakra-accordion__button", props.className),
        __css: buttonStyles
    });
});
AccordionButton.displayName = "AccordionButton";

},{"./chunk-RUEU7BLR.mjs":"lpkv5","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lpkv5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AccordionStylesProvider", ()=>AccordionStylesProvider);
parcelHelpers.export(exports, "useAccordionStyles", ()=>useAccordionStyles);
parcelHelpers.export(exports, "AccordionItemProvider", ()=>AccordionItemProvider);
parcelHelpers.export(exports, "useAccordionItemContext", ()=>useAccordionItemContext);
parcelHelpers.export(exports, "AccordionDescendantsProvider", ()=>AccordionDescendantsProvider);
parcelHelpers.export(exports, "useAccordionDescendantsContext", ()=>useAccordionDescendantsContext);
parcelHelpers.export(exports, "useAccordionDescendants", ()=>useAccordionDescendants);
parcelHelpers.export(exports, "useAccordionDescendant", ()=>useAccordionDescendant);
// src/accordion-context.ts
var _descendant = require("@chakra-ui/descendant");
var _reactContext = require("@chakra-ui/react-context");
"use client";
var [AccordionStylesProvider, useAccordionStyles] = (0, _reactContext.createContext)({
    name: "AccordionStylesContext",
    hookName: "useAccordionStyles",
    providerName: "<Accordion />"
});
var [AccordionItemProvider, useAccordionItemContext] = (0, _reactContext.createContext)({
    name: "AccordionItemContext",
    hookName: "useAccordionItemContext",
    providerName: "<AccordionItem />"
});
var [AccordionDescendantsProvider, useAccordionDescendantsContext, useAccordionDescendants, useAccordionDescendant] = (0, _descendant.createDescendantContext)();

},{"@chakra-ui/descendant":"4UCVd","@chakra-ui/react-context":"7RVZP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4UCVd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDescendantContext", ()=>(0, _chunkOCNORRQUMjs.createDescendantContext));
parcelHelpers.export(exports, "default", ()=>(0, _chunkOCNORRQUMjs.createDescendantContext));
var _chunkOCNORRQUMjs = require("./chunk-OCNORRQU.mjs");
var _chunkFT3H4P66Mjs = require("./chunk-FT3H4P66.mjs");
var _chunk3A5YOZDUMjs = require("./chunk-3A5YOZDU.mjs");
"use client";

},{"./chunk-OCNORRQU.mjs":"fXpXE","./chunk-FT3H4P66.mjs":false,"./chunk-3A5YOZDU.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fXpXE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDescendantContext", ()=>createDescendantContext);
var _chunkFT3H4P66Mjs = require("./chunk-FT3H4P66.mjs");
var _chunk3A5YOZDUMjs = require("./chunk-3A5YOZDU.mjs");
// src/use-descendant.ts
var _reactContext = require("@chakra-ui/react-context");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _react = require("react");
"use client";
function useDescendants() {
    const descendants = (0, _react.useRef)(new (0, _chunkFT3H4P66Mjs.DescendantsManager)());
    (0, _chunk3A5YOZDUMjs.useSafeLayoutEffect)(()=>{
        return ()=>descendants.current.destroy();
    });
    return descendants.current;
}
var [DescendantsContextProvider, useDescendantsContext] = (0, _reactContext.createContext)({
    name: "DescendantsProvider",
    errorMessage: "useDescendantsContext must be used within DescendantsProvider"
});
function useDescendant(options) {
    const descendants = useDescendantsContext();
    const [index, setIndex] = (0, _react.useState)(-1);
    const ref = (0, _react.useRef)(null);
    (0, _chunk3A5YOZDUMjs.useSafeLayoutEffect)(()=>{
        return ()=>{
            if (!ref.current) return;
            descendants.unregister(ref.current);
        };
    }, []);
    (0, _chunk3A5YOZDUMjs.useSafeLayoutEffect)(()=>{
        if (!ref.current) return;
        const dataIndex = Number(ref.current.dataset["index"]);
        if (index != dataIndex && !Number.isNaN(dataIndex)) setIndex(dataIndex);
    });
    const refCallback = options ? (0, _chunk3A5YOZDUMjs.cast)(descendants.register(options)) : (0, _chunk3A5YOZDUMjs.cast)(descendants.register);
    return {
        descendants,
        index,
        enabledIndex: descendants.enabledIndexOf(ref.current),
        register: (0, _reactUseMergeRefs.mergeRefs)(refCallback, ref)
    };
}
function createDescendantContext() {
    const ContextProvider = (0, _chunk3A5YOZDUMjs.cast)(DescendantsContextProvider);
    const _useDescendantsContext = ()=>(0, _chunk3A5YOZDUMjs.cast)(useDescendantsContext());
    const _useDescendant = (options)=>useDescendant(options);
    const _useDescendants = ()=>useDescendants();
    return [
        // context provider
        ContextProvider,
        // call this when you need to read from context
        _useDescendantsContext,
        // descendants state information, to be called and passed to `ContextProvider`
        _useDescendants,
        // descendant index information
        _useDescendant
    ];
}

},{"./chunk-FT3H4P66.mjs":"eRByi","./chunk-3A5YOZDU.mjs":"3eWTD","@chakra-ui/react-context":"7RVZP","@chakra-ui/react-use-merge-refs":"9E5Ql","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eRByi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescendantsManager", ()=>DescendantsManager);
var _chunk3A5YOZDUMjs = require("./chunk-3A5YOZDU.mjs");
"use client";
// src/descendant.ts
var DescendantsManager = class {
    constructor(){
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "descendants", /* @__PURE__ */ new Map());
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "register", (nodeOrOptions)=>{
            if (nodeOrOptions == null) return;
            if ((0, _chunk3A5YOZDUMjs.isElement)(nodeOrOptions)) return this.registerNode(nodeOrOptions);
            return (node)=>{
                this.registerNode(node, nodeOrOptions);
            };
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "unregister", (node)=>{
            this.descendants.delete(node);
            const sorted = (0, _chunk3A5YOZDUMjs.sortNodes)(Array.from(this.descendants.keys()));
            this.assignIndex(sorted);
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "destroy", ()=>{
            this.descendants.clear();
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "assignIndex", (descendants)=>{
            this.descendants.forEach((descendant)=>{
                const index = descendants.indexOf(descendant.node);
                descendant.index = index;
                descendant.node.dataset["index"] = descendant.index.toString();
            });
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "count", ()=>this.descendants.size);
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "enabledCount", ()=>this.enabledValues().length);
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "values", ()=>{
            const values = Array.from(this.descendants.values());
            return values.sort((a, b)=>a.index - b.index);
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "enabledValues", ()=>{
            return this.values().filter((descendant)=>!descendant.disabled);
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "item", (index)=>{
            if (this.count() === 0) return void 0;
            return this.values()[index];
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "enabledItem", (index)=>{
            if (this.enabledCount() === 0) return void 0;
            return this.enabledValues()[index];
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "first", ()=>this.item(0));
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "firstEnabled", ()=>this.enabledItem(0));
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "last", ()=>this.item(this.descendants.size - 1));
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "lastEnabled", ()=>{
            const lastIndex = this.enabledValues().length - 1;
            return this.enabledItem(lastIndex);
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "indexOf", (node)=>{
            var _a, _b;
            if (!node) return -1;
            return (_b = (_a = this.descendants.get(node)) == null ? void 0 : _a.index) != null ? _b : -1;
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "enabledIndexOf", (node)=>{
            if (node == null) return -1;
            return this.enabledValues().findIndex((i)=>i.node.isSameNode(node));
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "next", (index, loop = true)=>{
            const next = (0, _chunk3A5YOZDUMjs.getNextIndex)(index, this.count(), loop);
            return this.item(next);
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "nextEnabled", (index, loop = true)=>{
            const item = this.item(index);
            if (!item) return;
            const enabledIndex = this.enabledIndexOf(item.node);
            const nextEnabledIndex = (0, _chunk3A5YOZDUMjs.getNextIndex)(enabledIndex, this.enabledCount(), loop);
            return this.enabledItem(nextEnabledIndex);
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "prev", (index, loop = true)=>{
            const prev = (0, _chunk3A5YOZDUMjs.getPrevIndex)(index, this.count() - 1, loop);
            return this.item(prev);
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "prevEnabled", (index, loop = true)=>{
            const item = this.item(index);
            if (!item) return;
            const enabledIndex = this.enabledIndexOf(item.node);
            const prevEnabledIndex = (0, _chunk3A5YOZDUMjs.getPrevIndex)(enabledIndex, this.enabledCount() - 1, loop);
            return this.enabledItem(prevEnabledIndex);
        });
        (0, _chunk3A5YOZDUMjs.__publicField)(this, "registerNode", (node, options)=>{
            if (!node || this.descendants.has(node)) return;
            const keys = Array.from(this.descendants.keys()).concat(node);
            const sorted = (0, _chunk3A5YOZDUMjs.sortNodes)(keys);
            if (options == null ? void 0 : options.disabled) options.disabled = !!options.disabled;
            const descendant = {
                node,
                index: -1,
                ...options
            };
            this.descendants.set(node, descendant);
            this.assignIndex(sorted);
        });
    }
};

},{"./chunk-3A5YOZDU.mjs":"3eWTD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3eWTD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__publicField", ()=>__publicField);
parcelHelpers.export(exports, "sortNodes", ()=>sortNodes);
parcelHelpers.export(exports, "isElement", ()=>isElement);
parcelHelpers.export(exports, "getNextIndex", ()=>getNextIndex);
parcelHelpers.export(exports, "getPrevIndex", ()=>getPrevIndex);
parcelHelpers.export(exports, "useSafeLayoutEffect", ()=>useSafeLayoutEffect);
parcelHelpers.export(exports, "cast", ()=>cast);
// src/utils.ts
var _react = require("react");
"use client";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>{
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
};
function sortNodes(nodes) {
    return nodes.sort((a, b)=>{
        const compare = a.compareDocumentPosition(b);
        if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) return -1;
        if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) return 1;
        if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) throw Error("Cannot sort the given nodes.");
        else return 0;
    });
}
var isElement = (el)=>typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
function getNextIndex(current, max, loop) {
    let next = current + 1;
    if (loop && next >= max) next = 0;
    return next;
}
function getPrevIndex(current, max, loop) {
    let next = current - 1;
    if (loop && next < 0) next = max;
    return next;
}
var useSafeLayoutEffect = typeof window !== "undefined" ? (0, _react.useLayoutEffect) : (0, _react.useEffect);
var cast = (value)=>value;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9E5Ql":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignRef", ()=>assignRef);
parcelHelpers.export(exports, "mergeRefs", ()=>mergeRefs);
parcelHelpers.export(exports, "useMergeRefs", ()=>useMergeRefs);
// src/index.ts
var _react = require("react");
"use client";
function assignRef(ref, value) {
    if (ref == null) return;
    if (typeof ref === "function") {
        ref(value);
        return;
    }
    try {
        ref.current = value;
    } catch (error) {
        throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
    }
}
function mergeRefs(...refs) {
    return (node)=>{
        refs.forEach((ref)=>{
            assignRef(ref, node);
        });
    };
}
function useMergeRefs(...refs) {
    return (0, _react.useMemo)(()=>mergeRefs(...refs), refs);
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9iMwX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AccordionIcon", ()=>AccordionIcon);
var _chunk74QY6M57Mjs = require("./chunk-74QY6M57.mjs");
var _chunkRUEU7BLRMjs = require("./chunk-RUEU7BLR.mjs");
// src/accordion-icon.tsx
var _icon = require("@chakra-ui/icon");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function AccordionIcon(props) {
    const { isOpen, isDisabled } = (0, _chunkRUEU7BLRMjs.useAccordionItemContext)();
    const { reduceMotion } = (0, _chunk74QY6M57Mjs.useAccordionContext)();
    const _className = (0, _sharedUtils.cx)("chakra-accordion__icon", props.className);
    const styles = (0, _chunkRUEU7BLRMjs.useAccordionStyles)();
    const iconStyles = {
        opacity: isDisabled ? 0.4 : 1,
        transform: isOpen ? "rotate(-180deg)" : void 0,
        transition: reduceMotion ? void 0 : "transform 0.2s",
        transformOrigin: "center",
        ...styles.icon
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        viewBox: "0 0 24 24",
        "aria-hidden": true,
        className: _className,
        __css: iconStyles,
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
        })
    });
}
AccordionIcon.displayName = "AccordionIcon";

},{"./chunk-74QY6M57.mjs":"a4HFC","./chunk-RUEU7BLR.mjs":"lpkv5","@chakra-ui/icon":"jW1nH","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a4HFC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useAccordion", ()=>useAccordion);
parcelHelpers.export(exports, "AccordionProvider", ()=>AccordionProvider);
parcelHelpers.export(exports, "useAccordionContext", ()=>useAccordionContext);
parcelHelpers.export(exports, "useAccordionItem", ()=>useAccordionItem);
var _chunkRUEU7BLRMjs = require("./chunk-RUEU7BLR.mjs");
// src/use-accordion.ts
var _reactContext = require("@chakra-ui/react-context");
var _reactUseControllableState = require("@chakra-ui/react-use-controllable-state");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
"use client";
function useAccordion(props) {
    const { onChange, defaultIndex, index: indexProp, allowMultiple, allowToggle, ...htmlProps } = props;
    allowMultipleWarning(props);
    allowMultipleAndAllowToggleWarning(props);
    const descendants = (0, _chunkRUEU7BLRMjs.useAccordionDescendants)();
    const [focusedIndex, setFocusedIndex] = (0, _react.useState)(-1);
    (0, _react.useEffect)(()=>{
        return ()=>{
            setFocusedIndex(-1);
        };
    }, []);
    const [index, setIndex] = (0, _reactUseControllableState.useControllableState)({
        value: indexProp,
        defaultValue () {
            if (allowMultiple) return defaultIndex != null ? defaultIndex : [];
            return defaultIndex != null ? defaultIndex : -1;
        },
        onChange
    });
    const getAccordionItemProps = (idx)=>{
        let isOpen = false;
        if (idx !== null) isOpen = Array.isArray(index) ? index.includes(idx) : index === idx;
        const onChange2 = (isOpen2)=>{
            if (idx === null) return;
            if (allowMultiple && Array.isArray(index)) {
                const nextState = isOpen2 ? index.concat(idx) : index.filter((i)=>i !== idx);
                setIndex(nextState);
            } else if (isOpen2) setIndex(idx);
            else if (allowToggle) setIndex(-1);
        };
        return {
            isOpen,
            onChange: onChange2
        };
    };
    return {
        index,
        setIndex,
        htmlProps,
        getAccordionItemProps,
        focusedIndex,
        setFocusedIndex,
        descendants
    };
}
var [AccordionProvider, useAccordionContext] = (0, _reactContext.createContext)({
    name: "AccordionContext",
    hookName: "useAccordionContext",
    providerName: "Accordion"
});
function useAccordionItem(props) {
    const { isDisabled, isFocusable, id, ...htmlProps } = props;
    const { getAccordionItemProps, setFocusedIndex } = useAccordionContext();
    const buttonRef = (0, _react.useRef)(null);
    const reactId = (0, _react.useId)();
    const uid = id != null ? id : reactId;
    const buttonId = `accordion-button-${uid}`;
    const panelId = `accordion-panel-${uid}`;
    focusableNotDisabledWarning(props);
    const { register, index, descendants } = (0, _chunkRUEU7BLRMjs.useAccordionDescendant)({
        disabled: isDisabled && !isFocusable
    });
    const { isOpen, onChange } = getAccordionItemProps(index === -1 ? null : index);
    warnIfOpenAndDisabled({
        isOpen,
        isDisabled
    });
    const onOpen = ()=>{
        onChange == null || onChange(true);
    };
    const onClose = ()=>{
        onChange == null || onChange(false);
    };
    const onClick = (0, _react.useCallback)(()=>{
        onChange == null || onChange(!isOpen);
        setFocusedIndex(index);
    }, [
        index,
        setFocusedIndex,
        isOpen,
        onChange
    ]);
    const onKeyDown = (0, _react.useCallback)((event)=>{
        const keyMap = {
            ArrowDown: ()=>{
                const next = descendants.nextEnabled(index);
                next == null || next.node.focus();
            },
            ArrowUp: ()=>{
                const prev = descendants.prevEnabled(index);
                prev == null || prev.node.focus();
            },
            Home: ()=>{
                const first = descendants.firstEnabled();
                first == null || first.node.focus();
            },
            End: ()=>{
                const last = descendants.lastEnabled();
                last == null || last.node.focus();
            }
        };
        const action = keyMap[event.key];
        if (action) {
            event.preventDefault();
            action(event);
        }
    }, [
        descendants,
        index
    ]);
    const onFocus = (0, _react.useCallback)(()=>{
        setFocusedIndex(index);
    }, [
        setFocusedIndex,
        index
    ]);
    const getButtonProps = (0, _react.useCallback)(function getButtonProps2(props2 = {}, ref = null) {
        return {
            ...props2,
            type: "button",
            ref: (0, _reactUseMergeRefs.mergeRefs)(register, buttonRef, ref),
            id: buttonId,
            disabled: !!isDisabled,
            "aria-expanded": !!isOpen,
            "aria-controls": panelId,
            onClick: (0, _sharedUtils.callAllHandlers)(props2.onClick, onClick),
            onFocus: (0, _sharedUtils.callAllHandlers)(props2.onFocus, onFocus),
            onKeyDown: (0, _sharedUtils.callAllHandlers)(props2.onKeyDown, onKeyDown)
        };
    }, [
        buttonId,
        isDisabled,
        isOpen,
        onClick,
        onFocus,
        onKeyDown,
        panelId,
        register
    ]);
    const getPanelProps = (0, _react.useCallback)(function getPanelProps2(props2 = {}, ref = null) {
        return {
            ...props2,
            ref,
            role: "region",
            id: panelId,
            "aria-labelledby": buttonId,
            hidden: !isOpen
        };
    }, [
        buttonId,
        isOpen,
        panelId
    ]);
    return {
        isOpen,
        isDisabled,
        isFocusable,
        onOpen,
        onClose,
        getButtonProps,
        getPanelProps,
        htmlProps
    };
}
function allowMultipleWarning(props) {
    const index = props.index || props.defaultIndex;
    const condition = index != null && !Array.isArray(index) && props.allowMultiple;
    (0, _sharedUtils.warn)({
        condition: !!condition,
        message: `If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof index},`
    });
}
function allowMultipleAndAllowToggleWarning(props) {
    (0, _sharedUtils.warn)({
        condition: !!(props.allowMultiple && props.allowToggle),
        message: `If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not`
    });
}
function focusableNotDisabledWarning(props) {
    (0, _sharedUtils.warn)({
        condition: !!(props.isFocusable && !props.isDisabled),
        message: `Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.
    `
    });
}
function warnIfOpenAndDisabled(props) {
    (0, _sharedUtils.warn)({
        condition: props.isOpen && !!props.isDisabled,
        message: "Cannot open a disabled accordion item"
    });
}

},{"./chunk-RUEU7BLR.mjs":"lpkv5","@chakra-ui/react-context":"7RVZP","@chakra-ui/react-use-controllable-state":"ghlge","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ghlge":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useControllableProp", ()=>useControllableProp);
parcelHelpers.export(exports, "useControllableState", ()=>useControllableState);
// src/index.ts
var _react = require("react");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
"use client";
function useControllableProp(prop, state) {
    const controlled = typeof prop !== "undefined";
    const value = controlled ? prop : state;
    return (0, _react.useMemo)(()=>[
            controlled,
            value
        ], [
        controlled,
        value
    ]);
}
function useControllableState(props) {
    const { value: valueProp, defaultValue, onChange, shouldUpdate = (prev, next)=>prev !== next } = props;
    const onChangeProp = (0, _reactUseCallbackRef.useCallbackRef)(onChange);
    const shouldUpdateProp = (0, _reactUseCallbackRef.useCallbackRef)(shouldUpdate);
    const [uncontrolledState, setUncontrolledState] = (0, _react.useState)(defaultValue);
    const controlled = valueProp !== void 0;
    const value = controlled ? valueProp : uncontrolledState;
    const setValue = (0, _reactUseCallbackRef.useCallbackRef)((next)=>{
        const setter = next;
        const nextValue = typeof next === "function" ? setter(value) : next;
        if (!shouldUpdateProp(value, nextValue)) return;
        if (!controlled) setUncontrolledState(nextValue);
        onChangeProp(nextValue);
    }, [
        controlled,
        onChangeProp,
        value,
        shouldUpdateProp
    ]);
    return [
        value,
        setValue
    ];
}

},{"react":"21dqq","@chakra-ui/react-use-callback-ref":"dbPJ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2BLm2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AccordionItem", ()=>AccordionItem);
var _chunk74QY6M57Mjs = require("./chunk-74QY6M57.mjs");
var _chunkRUEU7BLRMjs = require("./chunk-RUEU7BLR.mjs");
// src/accordion-item.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var AccordionItem = (0, _system.forwardRef)(function AccordionItem2(props, ref) {
    const { children, className } = props;
    const { htmlProps, ...context } = (0, _chunk74QY6M57Mjs.useAccordionItem)(props);
    const styles = (0, _chunkRUEU7BLRMjs.useAccordionStyles)();
    const containerStyles = {
        ...styles.container,
        overflowAnchor: "none"
    };
    const ctx = (0, _react.useMemo)(()=>context, [
        context
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkRUEU7BLRMjs.AccordionItemProvider), {
        value: ctx,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            ref,
            ...htmlProps,
            className: (0, _sharedUtils.cx)("chakra-accordion__item", className),
            __css: containerStyles,
            children: typeof children === "function" ? children({
                isExpanded: !!context.isOpen,
                isDisabled: !!context.isDisabled
            }) : children
        })
    });
});
AccordionItem.displayName = "AccordionItem";

},{"./chunk-74QY6M57.mjs":"a4HFC","./chunk-RUEU7BLR.mjs":"lpkv5","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"46Vu0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AccordionPanel", ()=>AccordionPanel);
var _chunk74QY6M57Mjs = require("./chunk-74QY6M57.mjs");
var _chunkRUEU7BLRMjs = require("./chunk-RUEU7BLR.mjs");
// src/accordion-panel.tsx
var _system = require("@chakra-ui/system");
var _transition = require("@chakra-ui/transition");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var AccordionPanel = (0, _system.forwardRef)(function AccordionPanel2(props, ref) {
    const { className, motionProps, ...rest } = props;
    const { reduceMotion } = (0, _chunk74QY6M57Mjs.useAccordionContext)();
    const { getPanelProps, isOpen } = (0, _chunkRUEU7BLRMjs.useAccordionItemContext)();
    const panelProps = getPanelProps(rest, ref);
    const _className = (0, _sharedUtils.cx)("chakra-accordion__panel", className);
    const styles = (0, _chunkRUEU7BLRMjs.useAccordionStyles)();
    if (!reduceMotion) delete panelProps.hidden;
    const child = /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...panelProps,
        __css: styles.panel,
        className: _className
    });
    if (!reduceMotion) return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _transition.Collapse), {
        in: isOpen,
        ...motionProps,
        children: child
    });
    return child;
});
AccordionPanel.displayName = "AccordionPanel";

},{"./chunk-74QY6M57.mjs":"a4HFC","./chunk-RUEU7BLR.mjs":"lpkv5","@chakra-ui/system":"jpRoG","@chakra-ui/transition":"igsIe","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"igsIe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Collapse", ()=>(0, _chunkRKXMPHPIMjs.Collapse));
parcelHelpers.export(exports, "EASINGS", ()=>(0, _chunk6NHXDBFOMjs.TRANSITION_EASINGS));
parcelHelpers.export(exports, "Fade", ()=>(0, _chunkTR226DUXMjs.Fade));
parcelHelpers.export(exports, "ScaleFade", ()=>(0, _chunkSR4VX3RFMjs.ScaleFade));
parcelHelpers.export(exports, "Slide", ()=>(0, _chunkCYUETFQEMjs.Slide));
parcelHelpers.export(exports, "SlideFade", ()=>(0, _chunk7254PCTDMjs.SlideFade));
parcelHelpers.export(exports, "fadeConfig", ()=>(0, _chunkTR226DUXMjs.fadeConfig));
parcelHelpers.export(exports, "getSlideTransition", ()=>(0, _chunk6NHXDBFOMjs.getSlideTransition));
parcelHelpers.export(exports, "scaleFadeConfig", ()=>(0, _chunkSR4VX3RFMjs.scaleFadeConfig));
parcelHelpers.export(exports, "slideFadeConfig", ()=>(0, _chunk7254PCTDMjs.slideFadeConfig));
parcelHelpers.export(exports, "withDelay", ()=>(0, _chunk6NHXDBFOMjs.withDelay));
var _chunkRKXMPHPIMjs = require("./chunk-RKXMPHPI.mjs");
var _chunkTR226DUXMjs = require("./chunk-TR226DUX.mjs");
var _chunkSR4VX3RFMjs = require("./chunk-SR4VX3RF.mjs");
var _chunk7254PCTDMjs = require("./chunk-7254PCTD.mjs");
var _chunkCYUETFQEMjs = require("./chunk-CYUETFQE.mjs");
var _chunk6NHXDBFOMjs = require("./chunk-6NHXDBFO.mjs");
"use client";

},{"./chunk-RKXMPHPI.mjs":"9Fdm3","./chunk-TR226DUX.mjs":"8nPOK","./chunk-SR4VX3RF.mjs":"g5KBK","./chunk-7254PCTD.mjs":"dSAbc","./chunk-CYUETFQE.mjs":"02POx","./chunk-6NHXDBFO.mjs":"2yi0E","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Fdm3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Collapse", ()=>Collapse);
var _chunk6NHXDBFOMjs = require("./chunk-6NHXDBFO.mjs");
// src/collapse.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _framerMotion = require("framer-motion");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var isNumeric = (value)=>value != null && parseInt(value.toString(), 10) > 0;
var defaultTransitions = {
    exit: {
        height: {
            duration: 0.2,
            ease: (0, _chunk6NHXDBFOMjs.TRANSITION_EASINGS).ease
        },
        opacity: {
            duration: 0.3,
            ease: (0, _chunk6NHXDBFOMjs.TRANSITION_EASINGS).ease
        }
    },
    enter: {
        height: {
            duration: 0.3,
            ease: (0, _chunk6NHXDBFOMjs.TRANSITION_EASINGS).ease
        },
        opacity: {
            duration: 0.4,
            ease: (0, _chunk6NHXDBFOMjs.TRANSITION_EASINGS).ease
        }
    }
};
var variants = {
    exit: ({ animateOpacity, startingHeight, transition, transitionEnd, delay })=>{
        var _a;
        return {
            ...animateOpacity && {
                opacity: isNumeric(startingHeight) ? 1 : 0
            },
            height: startingHeight,
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
            transition: (_a = transition == null ? void 0 : transition.exit) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).exit(defaultTransitions.exit, delay)
        };
    },
    enter: ({ animateOpacity, endingHeight, transition, transitionEnd, delay })=>{
        var _a;
        return {
            ...animateOpacity && {
                opacity: 1
            },
            height: endingHeight,
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
            transition: (_a = transition == null ? void 0 : transition.enter) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).enter(defaultTransitions.enter, delay)
        };
    }
};
var Collapse = (0, _react.forwardRef)((props, ref)=>{
    const { in: isOpen, unmountOnExit, animateOpacity = true, startingHeight = 0, endingHeight = "auto", style, className, transition, transitionEnd, ...rest } = props;
    const [mounted, setMounted] = (0, _react.useState)(false);
    (0, _react.useEffect)(()=>{
        const timeout = setTimeout(()=>{
            setMounted(true);
        });
        return ()=>clearTimeout(timeout);
    }, []);
    (0, _sharedUtils.warn)({
        condition: Number(startingHeight) > 0 && !!unmountOnExit,
        message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`
    });
    const hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
    const custom = {
        startingHeight,
        endingHeight,
        animateOpacity,
        transition: !mounted ? {
            enter: {
                duration: 0
            }
        } : transition,
        transitionEnd: {
            enter: transitionEnd == null ? void 0 : transitionEnd.enter,
            exit: unmountOnExit ? transitionEnd == null ? void 0 : transitionEnd.exit : {
                ...transitionEnd == null ? void 0 : transitionEnd.exit,
                display: hasStartingHeight ? "block" : "none"
            }
        }
    };
    const show = unmountOnExit ? isOpen : true;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.AnimatePresence), {
        initial: false,
        custom,
        children: show && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.motion).div, {
            ref,
            ...rest,
            className: (0, _sharedUtils.cx)("chakra-collapse", className),
            style: {
                overflow: "hidden",
                display: "block",
                ...style
            },
            custom,
            variants,
            initial: unmountOnExit ? "exit" : false,
            animate,
            exit: "exit"
        })
    });
});
Collapse.displayName = "Collapse";

},{"./chunk-6NHXDBFO.mjs":"2yi0E","@chakra-ui/shared-utils":"h33Zu","framer-motion":"5bZBB","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2yi0E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TRANSITION_EASINGS", ()=>TRANSITION_EASINGS);
parcelHelpers.export(exports, "TRANSITION_VARIANTS", ()=>TRANSITION_VARIANTS);
parcelHelpers.export(exports, "getSlideTransition", ()=>getSlideTransition);
parcelHelpers.export(exports, "TRANSITION_DEFAULTS", ()=>TRANSITION_DEFAULTS);
parcelHelpers.export(exports, "withDelay", ()=>withDelay);
"use client";
// src/transition-utils.ts
var TRANSITION_EASINGS = {
    ease: [
        0.25,
        0.1,
        0.25,
        1
    ],
    easeIn: [
        0.4,
        0,
        1,
        1
    ],
    easeOut: [
        0,
        0,
        0.2,
        1
    ],
    easeInOut: [
        0.4,
        0,
        0.2,
        1
    ]
};
var TRANSITION_VARIANTS = {
    scale: {
        enter: {
            scale: 1
        },
        exit: {
            scale: 0.95
        }
    },
    fade: {
        enter: {
            opacity: 1
        },
        exit: {
            opacity: 0
        }
    },
    pushLeft: {
        enter: {
            x: "100%"
        },
        exit: {
            x: "-30%"
        }
    },
    pushRight: {
        enter: {
            x: "-100%"
        },
        exit: {
            x: "30%"
        }
    },
    pushUp: {
        enter: {
            y: "100%"
        },
        exit: {
            y: "-30%"
        }
    },
    pushDown: {
        enter: {
            y: "-100%"
        },
        exit: {
            y: "30%"
        }
    },
    slideLeft: {
        position: {
            left: 0,
            top: 0,
            bottom: 0,
            width: "100%"
        },
        enter: {
            x: 0,
            y: 0
        },
        exit: {
            x: "-100%",
            y: 0
        }
    },
    slideRight: {
        position: {
            right: 0,
            top: 0,
            bottom: 0,
            width: "100%"
        },
        enter: {
            x: 0,
            y: 0
        },
        exit: {
            x: "100%",
            y: 0
        }
    },
    slideUp: {
        position: {
            top: 0,
            left: 0,
            right: 0,
            maxWidth: "100vw"
        },
        enter: {
            x: 0,
            y: 0
        },
        exit: {
            x: 0,
            y: "-100%"
        }
    },
    slideDown: {
        position: {
            bottom: 0,
            left: 0,
            right: 0,
            maxWidth: "100vw"
        },
        enter: {
            x: 0,
            y: 0
        },
        exit: {
            x: 0,
            y: "100%"
        }
    }
};
function getSlideTransition(options) {
    var _a;
    const side = (_a = options == null ? void 0 : options.direction) != null ? _a : "right";
    switch(side){
        case "right":
            return TRANSITION_VARIANTS.slideRight;
        case "left":
            return TRANSITION_VARIANTS.slideLeft;
        case "bottom":
            return TRANSITION_VARIANTS.slideDown;
        case "top":
            return TRANSITION_VARIANTS.slideUp;
        default:
            return TRANSITION_VARIANTS.slideRight;
    }
}
var TRANSITION_DEFAULTS = {
    enter: {
        duration: 0.2,
        ease: TRANSITION_EASINGS.easeOut
    },
    exit: {
        duration: 0.1,
        ease: TRANSITION_EASINGS.easeIn
    }
};
var withDelay = {
    enter: (transition, delay)=>({
            ...transition,
            delay: typeof delay === "number" ? delay : delay == null ? void 0 : delay["enter"]
        }),
    exit: (transition, delay)=>({
            ...transition,
            delay: typeof delay === "number" ? delay : delay == null ? void 0 : delay["exit"]
        })
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8nPOK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fadeConfig", ()=>fadeConfig);
parcelHelpers.export(exports, "Fade", ()=>Fade);
var _chunk6NHXDBFOMjs = require("./chunk-6NHXDBFO.mjs");
// src/fade.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _framerMotion = require("framer-motion");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var variants = {
    enter: ({ transition, transitionEnd, delay } = {})=>{
        var _a;
        return {
            opacity: 1,
            transition: (_a = transition == null ? void 0 : transition.enter) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).enter((0, _chunk6NHXDBFOMjs.TRANSITION_DEFAULTS).enter, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
        };
    },
    exit: ({ transition, transitionEnd, delay } = {})=>{
        var _a;
        return {
            opacity: 0,
            transition: (_a = transition == null ? void 0 : transition.exit) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).exit((0, _chunk6NHXDBFOMjs.TRANSITION_DEFAULTS).exit, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
        };
    }
};
var fadeConfig = {
    initial: "exit",
    animate: "enter",
    exit: "exit",
    variants
};
var Fade = (0, _react.forwardRef)(function Fade2(props, ref) {
    const { unmountOnExit, in: isOpen, className, transition, transitionEnd, delay, ...rest } = props;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const custom = {
        transition,
        transitionEnd,
        delay
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.AnimatePresence), {
        custom,
        children: show && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.motion).div, {
            ref,
            className: (0, _sharedUtils.cx)("chakra-fade", className),
            custom,
            ...fadeConfig,
            animate,
            ...rest
        })
    });
});
Fade.displayName = "Fade";

},{"./chunk-6NHXDBFO.mjs":"2yi0E","@chakra-ui/shared-utils":"h33Zu","framer-motion":"5bZBB","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g5KBK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scaleFadeConfig", ()=>scaleFadeConfig);
parcelHelpers.export(exports, "ScaleFade", ()=>ScaleFade);
var _chunk6NHXDBFOMjs = require("./chunk-6NHXDBFO.mjs");
// src/scale-fade.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _framerMotion = require("framer-motion");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var variants = {
    exit: ({ reverse, initialScale, transition, transitionEnd, delay })=>{
        var _a;
        return {
            opacity: 0,
            ...reverse ? {
                scale: initialScale,
                transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
            } : {
                transitionEnd: {
                    scale: initialScale,
                    ...transitionEnd == null ? void 0 : transitionEnd.exit
                }
            },
            transition: (_a = transition == null ? void 0 : transition.exit) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).exit((0, _chunk6NHXDBFOMjs.TRANSITION_DEFAULTS).exit, delay)
        };
    },
    enter: ({ transitionEnd, transition, delay })=>{
        var _a;
        return {
            opacity: 1,
            scale: 1,
            transition: (_a = transition == null ? void 0 : transition.enter) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).enter((0, _chunk6NHXDBFOMjs.TRANSITION_DEFAULTS).enter, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
        };
    }
};
var scaleFadeConfig = {
    initial: "exit",
    animate: "enter",
    exit: "exit",
    variants
};
var ScaleFade = (0, _react.forwardRef)(function ScaleFade2(props, ref) {
    const { unmountOnExit, in: isOpen, reverse = true, initialScale = 0.95, className, transition, transitionEnd, delay, ...rest } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = {
        initialScale,
        reverse,
        transition,
        transitionEnd,
        delay
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.AnimatePresence), {
        custom,
        children: show && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.motion).div, {
            ref,
            className: (0, _sharedUtils.cx)("chakra-offset-slide", className),
            ...scaleFadeConfig,
            animate,
            custom,
            ...rest
        })
    });
});
ScaleFade.displayName = "ScaleFade";

},{"./chunk-6NHXDBFO.mjs":"2yi0E","@chakra-ui/shared-utils":"h33Zu","framer-motion":"5bZBB","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dSAbc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slideFadeConfig", ()=>slideFadeConfig);
parcelHelpers.export(exports, "SlideFade", ()=>SlideFade);
var _chunk6NHXDBFOMjs = require("./chunk-6NHXDBFO.mjs");
// src/slide-fade.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _framerMotion = require("framer-motion");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var variants = {
    initial: ({ offsetX, offsetY, transition, transitionEnd, delay })=>{
        var _a;
        return {
            opacity: 0,
            x: offsetX,
            y: offsetY,
            transition: (_a = transition == null ? void 0 : transition.exit) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).exit((0, _chunk6NHXDBFOMjs.TRANSITION_DEFAULTS).exit, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
        };
    },
    enter: ({ transition, transitionEnd, delay })=>{
        var _a;
        return {
            opacity: 1,
            x: 0,
            y: 0,
            transition: (_a = transition == null ? void 0 : transition.enter) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).enter((0, _chunk6NHXDBFOMjs.TRANSITION_DEFAULTS).enter, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
        };
    },
    exit: ({ offsetY, offsetX, transition, transitionEnd, reverse, delay })=>{
        var _a;
        const offset = {
            x: offsetX,
            y: offsetY
        };
        return {
            opacity: 0,
            transition: (_a = transition == null ? void 0 : transition.exit) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).exit((0, _chunk6NHXDBFOMjs.TRANSITION_DEFAULTS).exit, delay),
            ...reverse ? {
                ...offset,
                transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
            } : {
                transitionEnd: {
                    ...offset,
                    ...transitionEnd == null ? void 0 : transitionEnd.exit
                }
            }
        };
    }
};
var slideFadeConfig = {
    initial: "initial",
    animate: "enter",
    exit: "exit",
    variants
};
var SlideFade = (0, _react.forwardRef)(function SlideFade2(props, ref) {
    const { unmountOnExit, in: isOpen, reverse = true, className, offsetX = 0, offsetY = 8, transition, transitionEnd, delay, ...rest } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = {
        offsetX,
        offsetY,
        reverse,
        transition,
        transitionEnd,
        delay
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.AnimatePresence), {
        custom,
        children: show && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.motion).div, {
            ref,
            className: (0, _sharedUtils.cx)("chakra-offset-slide", className),
            custom,
            ...slideFadeConfig,
            animate,
            ...rest
        })
    });
});
SlideFade.displayName = "SlideFade";

},{"./chunk-6NHXDBFO.mjs":"2yi0E","@chakra-ui/shared-utils":"h33Zu","framer-motion":"5bZBB","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"02POx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Slide", ()=>Slide);
var _chunk6NHXDBFOMjs = require("./chunk-6NHXDBFO.mjs");
// src/slide.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _framerMotion = require("framer-motion");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var defaultTransition = {
    exit: {
        duration: 0.15,
        ease: (0, _chunk6NHXDBFOMjs.TRANSITION_EASINGS).easeInOut
    },
    enter: {
        type: "spring",
        damping: 25,
        stiffness: 180
    }
};
var variants = {
    exit: ({ direction, transition, transitionEnd, delay })=>{
        var _a;
        const { exit: exitStyles } = (0, _chunk6NHXDBFOMjs.getSlideTransition)({
            direction
        });
        return {
            ...exitStyles,
            transition: (_a = transition == null ? void 0 : transition.exit) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).exit(defaultTransition.exit, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
        };
    },
    enter: ({ direction, transitionEnd, transition, delay })=>{
        var _a;
        const { enter: enterStyles } = (0, _chunk6NHXDBFOMjs.getSlideTransition)({
            direction
        });
        return {
            ...enterStyles,
            transition: (_a = transition == null ? void 0 : transition.enter) != null ? _a : (0, _chunk6NHXDBFOMjs.withDelay).enter(defaultTransition.enter, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
        };
    }
};
var Slide = (0, _react.forwardRef)(function Slide2(props, ref) {
    const { direction = "right", style, unmountOnExit, in: isOpen, className, transition, transitionEnd, delay, motionProps, ...rest } = props;
    const transitionStyles = (0, _chunk6NHXDBFOMjs.getSlideTransition)({
        direction
    });
    const computedStyle = Object.assign({
        position: "fixed"
    }, transitionStyles.position, style);
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = {
        transitionEnd,
        transition,
        direction,
        delay
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.AnimatePresence), {
        custom,
        children: show && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.motion).div, {
            ...rest,
            ref,
            initial: "exit",
            className: (0, _sharedUtils.cx)("chakra-slide", className),
            animate,
            exit: "exit",
            custom,
            variants,
            style: computedStyle,
            ...motionProps
        })
    });
});
Slide.displayName = "Slide";

},{"./chunk-6NHXDBFO.mjs":"2yi0E","@chakra-ui/shared-utils":"h33Zu","framer-motion":"5bZBB","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Od1e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Accordion", ()=>Accordion);
var _chunk74QY6M57Mjs = require("./chunk-74QY6M57.mjs");
var _chunkRUEU7BLRMjs = require("./chunk-RUEU7BLR.mjs");
// src/accordion.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Accordion = (0, _system.forwardRef)(function Accordion2({ children, reduceMotion, ...props }, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Accordion", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    const { htmlProps, descendants, ...context } = (0, _chunk74QY6M57Mjs.useAccordion)(ownProps);
    const ctx = (0, _react.useMemo)(()=>({
            ...context,
            reduceMotion: !!reduceMotion
        }), [
        context,
        reduceMotion
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkRUEU7BLRMjs.AccordionDescendantsProvider), {
        value: descendants,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk74QY6M57Mjs.AccordionProvider), {
            value: ctx,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkRUEU7BLRMjs.AccordionStylesProvider), {
                value: styles,
                children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                    ref,
                    ...htmlProps,
                    className: (0, _sharedUtils.cx)("chakra-accordion", props.className),
                    __css: styles.root,
                    children
                })
            })
        })
    });
});
Accordion.displayName = "Accordion";

},{"./chunk-74QY6M57.mjs":"a4HFC","./chunk-RUEU7BLR.mjs":"lpkv5","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dLOp7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useAccordionItemState", ()=>useAccordionItemState);
var _chunkRUEU7BLRMjs = require("./chunk-RUEU7BLR.mjs");
"use client";
// src/use-accordion-item-state.ts
function useAccordionItemState() {
    const { isOpen, isDisabled, onClose, onOpen } = (0, _chunkRUEU7BLRMjs.useAccordionItemContext)();
    return {
        isOpen,
        onClose,
        isDisabled,
        onOpen
    };
}

},{"./chunk-RUEU7BLR.mjs":"lpkv5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"343iv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Avatar", ()=>(0, _chunkV7PAE35ZMjs.Avatar));
parcelHelpers.export(exports, "AvatarBadge", ()=>(0, _chunkBVSSY3BLMjs.AvatarBadge));
parcelHelpers.export(exports, "AvatarGroup", ()=>(0, _chunkA4TTV745Mjs.AvatarGroup));
parcelHelpers.export(exports, "GenericAvatarIcon", ()=>(0, _chunkCXYPMOCLMjs.GenericAvatarIcon));
parcelHelpers.export(exports, "useAvatarStyles", ()=>(0, _chunkRD3LQCU3Mjs.useAvatarStyles));
var _chunkBVSSY3BLMjs = require("./chunk-BVSSY3BL.mjs");
var _chunkA4TTV745Mjs = require("./chunk-A4TTV745.mjs");
var _chunkV7PAE35ZMjs = require("./chunk-V7PAE35Z.mjs");
var _chunkV2ATFO44Mjs = require("./chunk-V2ATFO44.mjs");
var _chunkO25PJXSDMjs = require("./chunk-O25PJXSD.mjs");
var _chunkRD3LQCU3Mjs = require("./chunk-RD3LQCU3.mjs");
var _chunkCXYPMOCLMjs = require("./chunk-CXYPMOCL.mjs");
"use client";

},{"./chunk-BVSSY3BL.mjs":"igE49","./chunk-A4TTV745.mjs":"k5Ncb","./chunk-V7PAE35Z.mjs":"brl4U","./chunk-V2ATFO44.mjs":"9OJTX","./chunk-O25PJXSD.mjs":"8BNK9","./chunk-RD3LQCU3.mjs":"3ZJ75","./chunk-CXYPMOCL.mjs":"aHzwh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"igE49":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AvatarBadge", ()=>AvatarBadge);
var _chunkRD3LQCU3Mjs = require("./chunk-RD3LQCU3.mjs");
// src/avatar-badge.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var placementMap = {
    "top-start": {
        top: "0",
        insetStart: "0",
        transform: "translate(-25%, -25%)"
    },
    "top-end": {
        top: "0",
        insetEnd: "0",
        transform: "translate(25%, -25%)"
    },
    "bottom-start": {
        bottom: "0",
        insetStart: "0",
        transform: "translate(-25%, 25%)"
    },
    "bottom-end": {
        bottom: "0",
        insetEnd: "0",
        transform: "translate(25%, 25%)"
    }
};
var AvatarBadge = (0, _system.forwardRef)(function AvatarBadge2(props, ref) {
    const { placement = "bottom-end", className, ...rest } = props;
    const styles = (0, _chunkRD3LQCU3Mjs.useAvatarStyles)();
    const placementStyles = placementMap[placement];
    const badgeStyles = {
        position: "absolute",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        ...placementStyles,
        ...styles.badge
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        ...rest,
        className: (0, _sharedUtils.cx)("chakra-avatar__badge", className),
        __css: badgeStyles
    });
});
AvatarBadge.displayName = "AvatarBadge";

},{"./chunk-RD3LQCU3.mjs":"3ZJ75","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ZJ75":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AvatarStylesProvider", ()=>AvatarStylesProvider);
parcelHelpers.export(exports, "useAvatarStyles", ()=>useAvatarStyles);
// src/avatar-context.tsx
var _reactContext = require("@chakra-ui/react-context");
"use client";
var [AvatarStylesProvider, useAvatarStyles] = (0, _reactContext.createContext)({
    name: `AvatarStylesContext`,
    hookName: `useAvatarStyles`,
    providerName: "<Avatar/>"
});

},{"@chakra-ui/react-context":"7RVZP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k5Ncb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AvatarGroup", ()=>AvatarGroup);
var _chunkV7PAE35ZMjs = require("./chunk-V7PAE35Z.mjs");
// src/avatar-group.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _reactChildrenUtils = require("@chakra-ui/react-children-utils");
// src/avatar-group.tsx
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
// ../../utilities/object-utils/src/compact.ts
function compact(object) {
    const clone = Object.assign({}, object);
    for(let key in clone)if (clone[key] === void 0) delete clone[key];
    return clone;
}
var AvatarGroup = (0, _system.forwardRef)(function AvatarGroup2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Avatar", props);
    const { children, borderColor, max, spacing = "-0.75rem", borderRadius = "full", ...rest } = (0, _system.omitThemingProps)(props);
    const validChildren = (0, _reactChildrenUtils.getValidChildren)(children);
    const childrenWithinMax = max != null ? validChildren.slice(0, max) : validChildren;
    const excess = max != null ? validChildren.length - max : 0;
    const reversedChildren = childrenWithinMax.reverse();
    const clones = reversedChildren.map((child, index)=>{
        var _a;
        const isFirstAvatar = index === 0;
        const childProps = {
            marginEnd: isFirstAvatar ? 0 : spacing,
            size: props.size,
            borderColor: (_a = child.props.borderColor) != null ? _a : borderColor,
            showBorder: true
        };
        return (0, _react.cloneElement)(child, compact(childProps));
    });
    const groupStyles = {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-end",
        flexDirection: "row-reverse",
        ...styles.group
    };
    const excessStyles = {
        borderRadius,
        marginStart: spacing,
        ...(0, _chunkV7PAE35ZMjs.baseStyle),
        ...styles.excessLabel
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).div, {
        ref,
        role: "group",
        __css: groupStyles,
        ...rest,
        className: (0, _sharedUtils.cx)("chakra-avatar__group", props.className),
        children: [
            excess > 0 && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                className: "chakra-avatar__excess",
                __css: excessStyles,
                children: `+${excess}`
            }),
            clones
        ]
    });
});
AvatarGroup.displayName = "AvatarGroup";

},{"./chunk-V7PAE35Z.mjs":"brl4U","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/react-children-utils":"49v95","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"brl4U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "baseStyle", ()=>baseStyle);
parcelHelpers.export(exports, "Avatar", ()=>Avatar);
var _chunkV2ATFO44Mjs = require("./chunk-V2ATFO44.mjs");
var _chunkO25PJXSDMjs = require("./chunk-O25PJXSD.mjs");
var _chunkRD3LQCU3Mjs = require("./chunk-RD3LQCU3.mjs");
var _chunkCXYPMOCLMjs = require("./chunk-CXYPMOCL.mjs");
// src/avatar.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var baseStyle = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    textTransform: "uppercase",
    fontWeight: "medium",
    position: "relative",
    flexShrink: 0
};
var Avatar = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _system.useMultiStyleConfig)("Avatar", props);
    const [isLoaded, setIsLoaded] = (0, _react.useState)(false);
    const { src, srcSet, name, showBorder, borderRadius = "full", onError, onLoad: onLoadProp, getInitials = (0, _chunkO25PJXSDMjs.initials), icon = /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkCXYPMOCLMjs.GenericAvatarIcon), {}), iconLabel = " avatar", loading, children, borderColor, ignoreFallback, crossOrigin, referrerPolicy, ...rest } = (0, _system.omitThemingProps)(props);
    const avatarStyles = {
        borderRadius,
        borderWidth: showBorder ? "2px" : void 0,
        ...baseStyle,
        ...styles.container
    };
    if (borderColor) avatarStyles.borderColor = borderColor;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        ref,
        ...rest,
        className: (0, _sharedUtils.cx)("chakra-avatar", props.className),
        "data-loaded": (0, _sharedUtils.dataAttr)(isLoaded),
        __css: avatarStyles,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _chunkRD3LQCU3Mjs.AvatarStylesProvider), {
            value: styles,
            children: [
                /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkV2ATFO44Mjs.AvatarImage), {
                    src,
                    srcSet,
                    loading,
                    onLoad: (0, _sharedUtils.callAllHandlers)(onLoadProp, ()=>{
                        setIsLoaded(true);
                    }),
                    onError,
                    getInitials,
                    name,
                    borderRadius,
                    icon,
                    iconLabel,
                    ignoreFallback,
                    crossOrigin,
                    referrerPolicy
                }),
                children
            ]
        })
    });
});
Avatar.displayName = "Avatar";

},{"./chunk-V2ATFO44.mjs":"9OJTX","./chunk-O25PJXSD.mjs":"8BNK9","./chunk-RD3LQCU3.mjs":"3ZJ75","./chunk-CXYPMOCL.mjs":"aHzwh","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9OJTX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AvatarImage", ()=>AvatarImage);
var _chunkO25PJXSDMjs = require("./chunk-O25PJXSD.mjs");
var _chunkCXYPMOCLMjs = require("./chunk-CXYPMOCL.mjs");
// src/avatar-image.tsx
var _image = require("@chakra-ui/image");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function AvatarImage(props) {
    const { src, srcSet, onError, onLoad, getInitials, name, borderRadius, loading, iconLabel, icon = /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkCXYPMOCLMjs.GenericAvatarIcon), {}), ignoreFallback, referrerPolicy, crossOrigin } = props;
    const status = (0, _image.useImage)({
        src,
        onError,
        crossOrigin,
        ignoreFallback
    });
    const hasLoaded = status === "loaded";
    const showFallback = !src || !hasLoaded;
    if (showFallback) return name ? /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkO25PJXSDMjs.AvatarName), {
        className: "chakra-avatar__initials",
        getInitials,
        name
    }) : (0, _react.cloneElement)(icon, {
        role: "img",
        "aria-label": iconLabel
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).img, {
        src,
        srcSet,
        alt: name,
        onLoad,
        referrerPolicy,
        crossOrigin: crossOrigin != null ? crossOrigin : void 0,
        className: "chakra-avatar__img",
        loading,
        __css: {
            width: "100%",
            height: "100%",
            objectFit: "cover",
            borderRadius
        }
    });
}
AvatarImage.displayName = "AvatarImage";

},{"./chunk-O25PJXSD.mjs":"8BNK9","./chunk-CXYPMOCL.mjs":"aHzwh","@chakra-ui/image":"iFNr0","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8BNK9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initials", ()=>initials);
parcelHelpers.export(exports, "AvatarName", ()=>AvatarName);
var _chunkRD3LQCU3Mjs = require("./chunk-RD3LQCU3.mjs");
// src/avatar-name.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function initials(name) {
    var _a;
    const names = name.split(" ");
    const firstName = (_a = names[0]) != null ? _a : "";
    const lastName = names.length > 1 ? names[names.length - 1] : "";
    return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);
}
function AvatarName(props) {
    const { name, getInitials, ...rest } = props;
    const styles = (0, _chunkRD3LQCU3Mjs.useAvatarStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        role: "img",
        "aria-label": name,
        ...rest,
        __css: styles.label,
        children: name ? getInitials == null ? void 0 : getInitials(name) : null
    });
}
AvatarName.displayName = "AvatarName";

},{"./chunk-RD3LQCU3.mjs":"3ZJ75","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aHzwh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GenericAvatarIcon", ()=>GenericAvatarIcon);
// src/generic-avatar-icon.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var GenericAvatarIcon = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).svg, {
        viewBox: "0 0 128 128",
        color: "#fff",
        width: "100%",
        height: "100%",
        className: "chakra-avatar__svg",
        ...props,
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
                fill: "currentColor",
                d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
                fill: "currentColor",
                d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
            })
        ]
    });

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iFNr0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Image", ()=>(0, _chunkQINAG4RGMjs.Image));
parcelHelpers.export(exports, "Img", ()=>(0, _chunkYF5BD7DNMjs.Img));
parcelHelpers.export(exports, "useImage", ()=>(0, _chunkSPIKMR6IMjs.useImage));
var _chunkQINAG4RGMjs = require("./chunk-QINAG4RG.mjs");
var _chunkYF5BD7DNMjs = require("./chunk-YF5BD7DN.mjs");
var _chunkX3PS6RUFMjs = require("./chunk-X3PS6RUF.mjs");
var _chunkSPIKMR6IMjs = require("./chunk-SPIKMR6I.mjs");
"use client";

},{"./chunk-QINAG4RG.mjs":"kPbtg","./chunk-YF5BD7DN.mjs":"2Zp4s","./chunk-X3PS6RUF.mjs":"jmvRy","./chunk-SPIKMR6I.mjs":"g3r6c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kPbtg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Image", ()=>Image);
var _chunkX3PS6RUFMjs = require("./chunk-X3PS6RUF.mjs");
var _chunkSPIKMR6IMjs = require("./chunk-SPIKMR6I.mjs");
// src/image.tsx
var _system = require("@chakra-ui/system");
// src/image.tsx
var _jsxRuntime = require("react/jsx-runtime");
"use client";
// ../../utilities/object-utils/src/omit.ts
function omit(object, keysToOmit = []) {
    const clone = Object.assign({}, object);
    for (const key of keysToOmit)if (key in clone) delete clone[key];
    return clone;
}
var Image = (0, _system.forwardRef)(function Image2(props, ref) {
    const { fallbackSrc, fallback, src, srcSet, align, fit, loading, ignoreFallback, crossOrigin, fallbackStrategy = "beforeLoadOrError", referrerPolicy, ...rest } = props;
    const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;
    const shouldIgnoreFallbackImage = loading != null || // use can opt out of fallback image
    ignoreFallback || // if the user doesn't provide any kind of fallback we should ignore it
    !providedFallback;
    const status = (0, _chunkSPIKMR6IMjs.useImage)({
        ...props,
        crossOrigin,
        ignoreFallback: shouldIgnoreFallbackImage
    });
    const showFallbackImage = (0, _chunkSPIKMR6IMjs.shouldShowFallbackImage)(status, fallbackStrategy);
    const shared = {
        ref,
        objectFit: fit,
        objectPosition: align,
        ...shouldIgnoreFallbackImage ? rest : omit(rest, [
            "onError",
            "onLoad"
        ])
    };
    if (showFallbackImage) {
        if (fallback) return fallback;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).img, {
            as: (0, _chunkX3PS6RUFMjs.NativeImage),
            className: "chakra-image__placeholder",
            src: fallbackSrc,
            ...shared
        });
    }
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).img, {
        as: (0, _chunkX3PS6RUFMjs.NativeImage),
        src,
        srcSet,
        crossOrigin,
        loading,
        referrerPolicy,
        className: "chakra-image",
        ...shared
    });
});
Image.displayName = "Image";

},{"./chunk-X3PS6RUF.mjs":"jmvRy","./chunk-SPIKMR6I.mjs":"g3r6c","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jmvRy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NativeImage", ()=>NativeImage);
// src/native-image.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var NativeImage = (0, _system.forwardRef)(function NativeImage2(props, ref) {
    const { htmlWidth, htmlHeight, alt, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)("img", {
        width: htmlWidth,
        height: htmlHeight,
        ref,
        alt,
        ...rest
    });
});
NativeImage.displayName = "NativeImage";

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g3r6c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useImage", ()=>useImage);
parcelHelpers.export(exports, "shouldShowFallbackImage", ()=>shouldShowFallbackImage);
// src/use-image.ts
var _reactUseSafeLayoutEffect = require("@chakra-ui/react-use-safe-layout-effect");
var _react = require("react");
"use client";
function useImage(props) {
    const { loading, src, srcSet, onLoad, onError, crossOrigin, sizes, ignoreFallback } = props;
    const [status, setStatus] = (0, _react.useState)("pending");
    (0, _react.useEffect)(()=>{
        setStatus(src ? "loading" : "pending");
    }, [
        src
    ]);
    const imageRef = (0, _react.useRef)();
    const load = (0, _react.useCallback)(()=>{
        if (!src) return;
        flush();
        const img = new Image();
        img.src = src;
        if (crossOrigin) img.crossOrigin = crossOrigin;
        if (srcSet) img.srcset = srcSet;
        if (sizes) img.sizes = sizes;
        if (loading) img.loading = loading;
        img.onload = (event)=>{
            flush();
            setStatus("loaded");
            onLoad == null || onLoad(event);
        };
        img.onerror = (error)=>{
            flush();
            setStatus("failed");
            onError == null || onError(error);
        };
        imageRef.current = img;
    }, [
        src,
        crossOrigin,
        srcSet,
        sizes,
        onLoad,
        onError,
        loading
    ]);
    const flush = ()=>{
        if (imageRef.current) {
            imageRef.current.onload = null;
            imageRef.current.onerror = null;
            imageRef.current = null;
        }
    };
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (ignoreFallback) return void 0;
        if (status === "loading") load();
        return ()=>{
            flush();
        };
    }, [
        status,
        load,
        ignoreFallback
    ]);
    return ignoreFallback ? "loaded" : status;
}
var shouldShowFallbackImage = (status, fallbackStrategy)=>status !== "loaded" && fallbackStrategy === "beforeLoadOrError" || status === "failed" && fallbackStrategy === "onError";

},{"@chakra-ui/react-use-safe-layout-effect":"eJbER","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Zp4s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Img", ()=>Img);
var _chunkX3PS6RUFMjs = require("./chunk-X3PS6RUF.mjs");
// src/img.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Img = (0, _system.forwardRef)((props, ref)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).img, {
        ref,
        as: (0, _chunkX3PS6RUFMjs.NativeImage),
        className: "chakra-image",
        ...props
    }));

},{"./chunk-X3PS6RUF.mjs":"jmvRy","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"49v95":[function(require,module,exports) {
// src/index.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getValidChildren", ()=>getValidChildren);
var _react = require("react");
function getValidChildren(children) {
    return (0, _react.Children).toArray(children).filter((child)=>(0, _react.isValidElement)(child));
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kDJj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Breadcrumb", ()=>(0, _chunkQOOL75FNMjs.Breadcrumb));
parcelHelpers.export(exports, "BreadcrumbItem", ()=>(0, _chunkU7EUQI2IMjs.BreadcrumbItem));
parcelHelpers.export(exports, "BreadcrumbLink", ()=>(0, _chunkUIZJRKRTMjs.BreadcrumbLink));
parcelHelpers.export(exports, "BreadcrumbSeparator", ()=>(0, _chunkI4SEDIQDMjs.BreadcrumbSeparator));
parcelHelpers.export(exports, "useBreadcrumbStyles", ()=>(0, _chunk24NX3CURMjs.useBreadcrumbStyles));
var _chunkU7EUQI2IMjs = require("./chunk-U7EUQI2I.mjs");
var _chunkUIZJRKRTMjs = require("./chunk-UIZJRKRT.mjs");
var _chunkI4SEDIQDMjs = require("./chunk-I4SEDIQD.mjs");
var _chunkQOOL75FNMjs = require("./chunk-QOOL75FN.mjs");
var _chunk24NX3CURMjs = require("./chunk-24NX3CUR.mjs");
"use client";

},{"./chunk-U7EUQI2I.mjs":"99xEN","./chunk-UIZJRKRT.mjs":"jdy74","./chunk-I4SEDIQD.mjs":"fXgCc","./chunk-QOOL75FN.mjs":"hjcWO","./chunk-24NX3CUR.mjs":"7Avz1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99xEN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BreadcrumbItem", ()=>BreadcrumbItem);
var _chunkUIZJRKRTMjs = require("./chunk-UIZJRKRT.mjs");
var _chunkI4SEDIQDMjs = require("./chunk-I4SEDIQD.mjs");
var _chunk24NX3CURMjs = require("./chunk-24NX3CUR.mjs");
// src/breadcrumb-item.tsx
var _system = require("@chakra-ui/system");
var _reactChildrenUtils = require("@chakra-ui/react-children-utils");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var BreadcrumbItem = (0, _system.forwardRef)(function BreadcrumbItem2(props, ref) {
    const { isCurrentPage, separator, isLastChild, spacing, children, className, ...rest } = props;
    const validChildren = (0, _reactChildrenUtils.getValidChildren)(children);
    const clones = validChildren.map((child)=>{
        if (child.type === (0, _chunkUIZJRKRTMjs.BreadcrumbLink)) return (0, _react.cloneElement)(child, {
            isCurrentPage
        });
        if (child.type === (0, _chunkI4SEDIQDMjs.BreadcrumbSeparator)) return (0, _react.cloneElement)(child, {
            spacing,
            children: child.props.children || separator
        });
        return child;
    });
    const styles = (0, _chunk24NX3CURMjs.useBreadcrumbStyles)();
    const itemStyles = {
        display: "inline-flex",
        alignItems: "center",
        ...styles.item
    };
    const _className = (0, _sharedUtils.cx)("chakra-breadcrumb__list-item", className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).li, {
        ref,
        className: _className,
        ...rest,
        __css: itemStyles,
        children: [
            clones,
            !isLastChild && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkI4SEDIQDMjs.BreadcrumbSeparator), {
                spacing,
                children: separator
            })
        ]
    });
});
BreadcrumbItem.displayName = "BreadcrumbItem";

},{"./chunk-UIZJRKRT.mjs":"jdy74","./chunk-I4SEDIQD.mjs":"fXgCc","./chunk-24NX3CUR.mjs":"7Avz1","@chakra-ui/system":"jpRoG","@chakra-ui/react-children-utils":"49v95","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jdy74":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BreadcrumbLink", ()=>BreadcrumbLink);
var _chunk24NX3CURMjs = require("./chunk-24NX3CUR.mjs");
// src/breadcrumb-link.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var BreadcrumbLink = (0, _system.forwardRef)(function BreadcrumbLink2(props, ref) {
    const { isCurrentPage, as, className, href, ...rest } = props;
    const styles = (0, _chunk24NX3CURMjs.useBreadcrumbStyles)();
    const sharedProps = {
        ref,
        as,
        className: (0, _sharedUtils.cx)("chakra-breadcrumb__link", className),
        ...rest
    };
    if (isCurrentPage) return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        "aria-current": "page",
        __css: styles.link,
        ...sharedProps
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).a, {
        __css: styles.link,
        href,
        ...sharedProps
    });
});
BreadcrumbLink.displayName = "BreadcrumbLink";

},{"./chunk-24NX3CUR.mjs":"7Avz1","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Avz1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BreadcrumbStylesProvider", ()=>BreadcrumbStylesProvider);
parcelHelpers.export(exports, "useBreadcrumbStyles", ()=>useBreadcrumbStyles);
// src/breadcrumb-context.ts
var _reactContext = require("@chakra-ui/react-context");
"use client";
var [BreadcrumbStylesProvider, useBreadcrumbStyles] = (0, _reactContext.createContext)({
    name: `BreadcrumbStylesContext`,
    errorMessage: `useBreadcrumbStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Breadcrumb />" `
});

},{"@chakra-ui/react-context":"7RVZP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fXgCc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BreadcrumbSeparator", ()=>BreadcrumbSeparator);
var _chunk24NX3CURMjs = require("./chunk-24NX3CUR.mjs");
// src/breadcrumb-separator.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var BreadcrumbSeparator = (0, _system.forwardRef)(function BreadcrumbSeparator2(props, ref) {
    const { spacing, ...rest } = props;
    const styles = (0, _chunk24NX3CURMjs.useBreadcrumbStyles)();
    const separatorStyles = {
        mx: spacing,
        ...styles.separator
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        ref,
        role: "presentation",
        ...rest,
        __css: separatorStyles
    });
});
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

},{"./chunk-24NX3CUR.mjs":"7Avz1","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hjcWO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Breadcrumb", ()=>Breadcrumb);
var _chunk24NX3CURMjs = require("./chunk-24NX3CUR.mjs");
// src/breadcrumb.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _reactChildrenUtils = require("@chakra-ui/react-children-utils");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Breadcrumb = (0, _system.forwardRef)(function Breadcrumb2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Breadcrumb", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    const { children, spacing = "0.5rem", separator = "/", className, listProps, ...rest } = ownProps;
    const validChildren = (0, _reactChildrenUtils.getValidChildren)(children);
    const count = validChildren.length;
    const clones = validChildren.map((child, index)=>(0, _react.cloneElement)(child, {
            separator,
            spacing,
            isLastChild: count === index + 1
        }));
    const _className = (0, _sharedUtils.cx)("chakra-breadcrumb", className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).nav, {
        ref,
        "aria-label": "breadcrumb",
        className: _className,
        __css: styles.container,
        ...rest,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk24NX3CURMjs.BreadcrumbStylesProvider), {
            value: styles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).ol, {
                className: "chakra-breadcrumb__list",
                ...listProps,
                __css: {
                    display: "flex",
                    alignItems: "center",
                    ...styles.list
                },
                children: clones
            })
        })
    });
});
Breadcrumb.displayName = "Breadcrumb";

},{"./chunk-24NX3CUR.mjs":"7Avz1","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/react-children-utils":"49v95","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8qtNy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Button", ()=>(0, _chunkUVUR7MCUMjs.Button));
parcelHelpers.export(exports, "ButtonGroup", ()=>(0, _chunkDA7QIPTJMjs.ButtonGroup));
parcelHelpers.export(exports, "ButtonSpinner", ()=>(0, _chunkQB2Y5VKHMjs.ButtonSpinner));
parcelHelpers.export(exports, "IconButton", ()=>(0, _chunk6QYXN73VMjs.IconButton));
parcelHelpers.export(exports, "useButtonGroup", ()=>(0, _chunkT6ZDZOLOMjs.useButtonGroup));
var _chunkDA7QIPTJMjs = require("./chunk-DA7QIPTJ.mjs");
var _chunk6QYXN73VMjs = require("./chunk-6QYXN73V.mjs");
var _chunkUVUR7MCUMjs = require("./chunk-UVUR7MCU.mjs");
var _chunkJ37R6SZEMjs = require("./chunk-J37R6SZE.mjs");
var _chunkT6ZDZOLOMjs = require("./chunk-T6ZDZOLO.mjs");
var _chunk3RENZ2UOMjs = require("./chunk-3RENZ2UO.mjs");
var _chunkQB2Y5VKHMjs = require("./chunk-QB2Y5VKH.mjs");
"use client";

},{"./chunk-DA7QIPTJ.mjs":"d52o9","./chunk-6QYXN73V.mjs":"fLl2R","./chunk-UVUR7MCU.mjs":"hlySl","./chunk-J37R6SZE.mjs":"jmYqq","./chunk-T6ZDZOLO.mjs":"1o3fS","./chunk-3RENZ2UO.mjs":"hjRpQ","./chunk-QB2Y5VKH.mjs":"jTN1u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d52o9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ButtonGroup", ()=>ButtonGroup);
var _chunkT6ZDZOLOMjs = require("./chunk-T6ZDZOLO.mjs");
// src/button-group.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var attachedStyles = {
    horizontal: {
        "> *:first-of-type:not(:last-of-type)": {
            borderEndRadius: 0
        },
        "> *:not(:first-of-type):not(:last-of-type)": {
            borderRadius: 0
        },
        "> *:not(:first-of-type):last-of-type": {
            borderStartRadius: 0
        }
    },
    vertical: {
        "> *:first-of-type:not(:last-of-type)": {
            borderBottomRadius: 0
        },
        "> *:not(:first-of-type):not(:last-of-type)": {
            borderRadius: 0
        },
        "> *:not(:first-of-type):last-of-type": {
            borderTopRadius: 0
        }
    }
};
var gapStyles = {
    horizontal: (spacing)=>({
            "& > *:not(style) ~ *:not(style)": {
                marginStart: spacing
            }
        }),
    vertical: (spacing)=>({
            "& > *:not(style) ~ *:not(style)": {
                marginTop: spacing
            }
        })
};
var ButtonGroup = (0, _system.forwardRef)(function ButtonGroup2(props, ref) {
    const { size, colorScheme, variant, className, spacing = "0.5rem", isAttached, isDisabled, orientation = "horizontal", ...rest } = props;
    const _className = (0, _sharedUtils.cx)("chakra-button__group", className);
    const context = (0, _react.useMemo)(()=>({
            size,
            colorScheme,
            variant,
            isDisabled
        }), [
        size,
        colorScheme,
        variant,
        isDisabled
    ]);
    let groupStyles = {
        display: "inline-flex",
        ...isAttached ? attachedStyles[orientation] : gapStyles[orientation](spacing)
    };
    const isVertical = orientation === "vertical";
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkT6ZDZOLOMjs.ButtonGroupProvider), {
        value: context,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            ref,
            role: "group",
            __css: groupStyles,
            className: _className,
            "data-attached": isAttached ? "" : void 0,
            "data-orientation": orientation,
            flexDir: isVertical ? "column" : void 0,
            ...rest
        })
    });
});
ButtonGroup.displayName = "ButtonGroup";

},{"./chunk-T6ZDZOLO.mjs":"1o3fS","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1o3fS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ButtonGroupProvider", ()=>ButtonGroupProvider);
parcelHelpers.export(exports, "useButtonGroup", ()=>useButtonGroup);
// src/button-context.ts
var _reactContext = require("@chakra-ui/react-context");
"use client";
var [ButtonGroupProvider, useButtonGroup] = (0, _reactContext.createContext)({
    strict: false,
    name: "ButtonGroupContext"
});

},{"@chakra-ui/react-context":"7RVZP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fLl2R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IconButton", ()=>IconButton);
var _chunkUVUR7MCUMjs = require("./chunk-UVUR7MCU.mjs");
// src/icon-button.tsx
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var IconButton = (0, _system.forwardRef)((props, ref)=>{
    const { icon, children, isRound, "aria-label": ariaLabel, ...rest } = props;
    const element = icon || children;
    const _children = (0, _react.isValidElement)(element) ? (0, _react.cloneElement)(element, {
        "aria-hidden": true,
        focusable: false
    }) : null;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkUVUR7MCUMjs.Button), {
        padding: "0",
        borderRadius: isRound ? "full" : void 0,
        ref,
        "aria-label": ariaLabel,
        ...rest,
        children: _children
    });
});
IconButton.displayName = "IconButton";

},{"./chunk-UVUR7MCU.mjs":"hlySl","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hlySl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Button", ()=>Button);
var _chunkJ37R6SZEMjs = require("./chunk-J37R6SZE.mjs");
var _chunkT6ZDZOLOMjs = require("./chunk-T6ZDZOLO.mjs");
var _chunk3RENZ2UOMjs = require("./chunk-3RENZ2UO.mjs");
var _chunkQB2Y5VKHMjs = require("./chunk-QB2Y5VKH.mjs");
// src/button.tsx
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Button = (0, _system.forwardRef)((props, ref)=>{
    const group = (0, _chunkT6ZDZOLOMjs.useButtonGroup)();
    const styles = (0, _system.useStyleConfig)("Button", {
        ...group,
        ...props
    });
    const { isDisabled = group == null ? void 0 : group.isDisabled, isLoading, isActive, children, leftIcon, rightIcon, loadingText, iconSpacing = "0.5rem", type, spinner, spinnerPlacement = "start", className, as, ...rest } = (0, _system.omitThemingProps)(props);
    const buttonStyles = (0, _react.useMemo)(()=>{
        const _focus = {
            ...styles == null ? void 0 : styles["_focus"],
            zIndex: 1
        };
        return {
            display: "inline-flex",
            appearance: "none",
            alignItems: "center",
            justifyContent: "center",
            userSelect: "none",
            position: "relative",
            whiteSpace: "nowrap",
            verticalAlign: "middle",
            outline: "none",
            ...styles,
            ...!!group && {
                _focus
            }
        };
    }, [
        styles,
        group
    ]);
    const { ref: _ref, type: defaultType } = (0, _chunkJ37R6SZEMjs.useButtonType)(as);
    const contentProps = {
        rightIcon,
        leftIcon,
        iconSpacing,
        children
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).button, {
        ref: (0, _reactUseMergeRefs.useMergeRefs)(ref, _ref),
        as,
        type: type != null ? type : defaultType,
        "data-active": (0, _sharedUtils.dataAttr)(isActive),
        "data-loading": (0, _sharedUtils.dataAttr)(isLoading),
        __css: buttonStyles,
        className: (0, _sharedUtils.cx)("chakra-button", className),
        ...rest,
        disabled: isDisabled || isLoading,
        children: [
            isLoading && spinnerPlacement === "start" && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkQB2Y5VKHMjs.ButtonSpinner), {
                className: "chakra-button__spinner--start",
                label: loadingText,
                placement: "start",
                spacing: iconSpacing,
                children: spinner
            }),
            isLoading ? loadingText || /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                opacity: 0,
                children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(ButtonContent, {
                    ...contentProps
                })
            }) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(ButtonContent, {
                ...contentProps
            }),
            isLoading && spinnerPlacement === "end" && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkQB2Y5VKHMjs.ButtonSpinner), {
                className: "chakra-button__spinner--end",
                label: loadingText,
                placement: "end",
                spacing: iconSpacing,
                children: spinner
            })
        ]
    });
});
Button.displayName = "Button";
function ButtonContent(props) {
    const { leftIcon, rightIcon, children, iconSpacing } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {
        children: [
            leftIcon && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk3RENZ2UOMjs.ButtonIcon), {
                marginEnd: iconSpacing,
                children: leftIcon
            }),
            children,
            rightIcon && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk3RENZ2UOMjs.ButtonIcon), {
                marginStart: iconSpacing,
                children: rightIcon
            })
        ]
    });
}

},{"./chunk-J37R6SZE.mjs":"jmYqq","./chunk-T6ZDZOLO.mjs":"1o3fS","./chunk-3RENZ2UO.mjs":"hjRpQ","./chunk-QB2Y5VKH.mjs":"jTN1u","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jmYqq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useButtonType", ()=>useButtonType);
// src/use-button-type.tsx
var _react = require("react");
"use client";
function useButtonType(value) {
    const [isButton, setIsButton] = (0, _react.useState)(!value);
    const refCallback = (0, _react.useCallback)((node)=>{
        if (!node) return;
        setIsButton(node.tagName === "BUTTON");
    }, []);
    const type = isButton ? "button" : void 0;
    return {
        ref: refCallback,
        type
    };
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hjRpQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ButtonIcon", ()=>ButtonIcon);
// src/button-icon.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function ButtonIcon(props) {
    const { children, className, ...rest } = props;
    const _children = (0, _react.isValidElement)(children) ? (0, _react.cloneElement)(children, {
        "aria-hidden": true,
        focusable: false
    }) : children;
    const _className = (0, _sharedUtils.cx)("chakra-button__icon", className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        display: "inline-flex",
        alignSelf: "center",
        flexShrink: 0,
        ...rest,
        className: _className,
        children: _children
    });
}
ButtonIcon.displayName = "ButtonIcon";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jTN1u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ButtonSpinner", ()=>ButtonSpinner);
// src/button-spinner.tsx
var _spinner = require("@chakra-ui/spinner");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function ButtonSpinner(props) {
    const { label, placement, spacing = "0.5rem", children = /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _spinner.Spinner), {
        color: "currentColor",
        width: "1em",
        height: "1em"
    }), className, __css, ...rest } = props;
    const _className = (0, _sharedUtils.cx)("chakra-button__spinner", className);
    const marginProp = placement === "start" ? "marginEnd" : "marginStart";
    const spinnerStyles = (0, _react.useMemo)(()=>({
            display: "flex",
            alignItems: "center",
            position: label ? "relative" : "absolute",
            [marginProp]: label ? spacing : 0,
            fontSize: "1em",
            lineHeight: "normal",
            ...__css
        }), [
        __css,
        label,
        marginProp,
        spacing
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        className: _className,
        ...rest,
        __css: spinnerStyles,
        children
    });
}
ButtonSpinner.displayName = "ButtonSpinner";

},{"@chakra-ui/spinner":"lDqj1","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fagRm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Card", ()=>(0, _chunkYQO7BFFXMjs.Card));
parcelHelpers.export(exports, "CardBody", ()=>(0, _chunkFHHZMTWRMjs.CardBody));
parcelHelpers.export(exports, "CardFooter", ()=>(0, _chunkBDSTZZXDMjs.CardFooter));
parcelHelpers.export(exports, "CardHeader", ()=>(0, _chunk2EW3JUUDMjs.CardHeader));
parcelHelpers.export(exports, "useCardStyles", ()=>(0, _chunkHAZMUPV3Mjs.useCardStyles));
var _chunkFHHZMTWRMjs = require("./chunk-FHHZMTWR.mjs");
var _chunkBDSTZZXDMjs = require("./chunk-BDSTZZXD.mjs");
var _chunk2EW3JUUDMjs = require("./chunk-2EW3JUUD.mjs");
var _chunkYQO7BFFXMjs = require("./chunk-YQO7BFFX.mjs");
var _chunkHAZMUPV3Mjs = require("./chunk-HAZMUPV3.mjs");
"use client";

},{"./chunk-FHHZMTWR.mjs":"fUocR","./chunk-BDSTZZXD.mjs":"jPP4B","./chunk-2EW3JUUD.mjs":"kYS8z","./chunk-YQO7BFFX.mjs":"ckNGJ","./chunk-HAZMUPV3.mjs":"6AhAt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fUocR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardBody", ()=>CardBody);
var _chunkHAZMUPV3Mjs = require("./chunk-HAZMUPV3.mjs");
// src/card-body.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var CardBody = (0, _system.forwardRef)(function CardBody2(props, ref) {
    const { className, ...rest } = props;
    const styles = (0, _chunkHAZMUPV3Mjs.useCardStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-card__body", className),
        __css: styles.body,
        ...rest
    });
});

},{"./chunk-HAZMUPV3.mjs":"6AhAt","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6AhAt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardStylesProvider", ()=>CardStylesProvider);
parcelHelpers.export(exports, "useCardStyles", ()=>useCardStyles);
// src/card-context.tsx
var _system = require("@chakra-ui/system");
"use client";
var [CardStylesProvider, useCardStyles] = (0, _system.createStylesContext)("Card");

},{"@chakra-ui/system":"jpRoG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jPP4B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardFooter", ()=>CardFooter);
var _chunkHAZMUPV3Mjs = require("./chunk-HAZMUPV3.mjs");
// src/card-footer.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var CardFooter = (0, _system.forwardRef)(function CardFooter2(props, ref) {
    const { className, justify, ...rest } = props;
    const styles = (0, _chunkHAZMUPV3Mjs.useCardStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-card__footer", className),
        __css: {
            display: "flex",
            justifyContent: justify,
            ...styles.footer
        },
        ...rest
    });
});

},{"./chunk-HAZMUPV3.mjs":"6AhAt","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kYS8z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardHeader", ()=>CardHeader);
var _chunkHAZMUPV3Mjs = require("./chunk-HAZMUPV3.mjs");
// src/card-header.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var CardHeader = (0, _system.forwardRef)(function CardHeader2(props, ref) {
    const { className, ...rest } = props;
    const styles = (0, _chunkHAZMUPV3Mjs.useCardStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-card__header", className),
        __css: styles.header,
        ...rest
    });
});

},{"./chunk-HAZMUPV3.mjs":"6AhAt","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ckNGJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Card", ()=>Card);
var _chunkHAZMUPV3Mjs = require("./chunk-HAZMUPV3.mjs");
// src/card.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Card = (0, _system.forwardRef)(function Card2(props, ref) {
    const { className, children, direction = "column", justify, align, ...rest } = (0, _system.omitThemingProps)(props);
    const styles = (0, _system.useMultiStyleConfig)("Card", props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-card", className),
        __css: {
            display: "flex",
            flexDirection: direction,
            justifyContent: justify,
            alignItems: align,
            position: "relative",
            minWidth: 0,
            wordWrap: "break-word",
            ...styles.container
        },
        ...rest,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkHAZMUPV3Mjs.CardStylesProvider), {
            value: styles,
            children
        })
    });
});

},{"./chunk-HAZMUPV3.mjs":"6AhAt","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"irZ7S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Checkbox", ()=>(0, _chunkCWVAJCXJMjs.Checkbox));
parcelHelpers.export(exports, "CheckboxGroup", ()=>(0, _chunkCKJ5T3MXMjs.CheckboxGroup));
parcelHelpers.export(exports, "CheckboxIcon", ()=>(0, _chunkULEC7HZUMjs.CheckboxIcon));
parcelHelpers.export(exports, "useCheckbox", ()=>(0, _chunk7D6N5TE5Mjs.useCheckbox));
parcelHelpers.export(exports, "useCheckboxGroup", ()=>(0, _chunkTOQK4WO2Mjs.useCheckboxGroup));
var _chunkCKJ5T3MXMjs = require("./chunk-CKJ5T3MX.mjs");
var _chunkCWVAJCXJMjs = require("./chunk-CWVAJCXJ.mjs");
var _chunk2TOCDA5NMjs = require("./chunk-2TOCDA5N.mjs");
var _chunkLYGBQ47XMjs = require("./chunk-LYGBQ47X.mjs");
var _chunkULEC7HZUMjs = require("./chunk-ULEC7HZU.mjs");
var _chunkTOQK4WO2Mjs = require("./chunk-TOQK4WO2.mjs");
var _chunk7D6N5TE5Mjs = require("./chunk-7D6N5TE5.mjs");
"use client";

},{"./chunk-CKJ5T3MX.mjs":"LXRdq","./chunk-CWVAJCXJ.mjs":"1oT41","./chunk-2TOCDA5N.mjs":"fokyP","./chunk-LYGBQ47X.mjs":"9TaWn","./chunk-ULEC7HZU.mjs":"heINA","./chunk-TOQK4WO2.mjs":"eDxY5","./chunk-7D6N5TE5.mjs":"aHzgY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"LXRdq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CheckboxGroup", ()=>CheckboxGroup);
var _chunkLYGBQ47XMjs = require("./chunk-LYGBQ47X.mjs");
var _chunkTOQK4WO2Mjs = require("./chunk-TOQK4WO2.mjs");
// src/checkbox-group.tsx
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function CheckboxGroup(props) {
    const { colorScheme, size, variant, children, isDisabled } = props;
    const { value, onChange } = (0, _chunkTOQK4WO2Mjs.useCheckboxGroup)(props);
    const group = (0, _react.useMemo)(()=>({
            size,
            onChange,
            colorScheme,
            value,
            variant,
            isDisabled
        }), [
        size,
        onChange,
        colorScheme,
        value,
        variant,
        isDisabled
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkLYGBQ47XMjs.CheckboxGroupProvider), {
        value: group,
        children
    });
}
CheckboxGroup.displayName = "CheckboxGroup";

},{"./chunk-LYGBQ47X.mjs":"9TaWn","./chunk-TOQK4WO2.mjs":"eDxY5","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9TaWn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CheckboxGroupProvider", ()=>CheckboxGroupProvider);
parcelHelpers.export(exports, "useCheckboxGroupContext", ()=>useCheckboxGroupContext);
// src/checkbox-context.ts
var _reactContext = require("@chakra-ui/react-context");
"use client";
var [CheckboxGroupProvider, useCheckboxGroupContext] = (0, _reactContext.createContext)({
    name: "CheckboxGroupContext",
    strict: false
});

},{"@chakra-ui/react-context":"7RVZP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eDxY5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCheckboxGroup", ()=>useCheckboxGroup);
// src/use-checkbox-group.ts
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
var _reactUseControllableState = require("@chakra-ui/react-use-controllable-state");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
"use client";
function isInputEvent(value) {
    return value && (0, _sharedUtils.isObject)(value) && (0, _sharedUtils.isObject)(value.target);
}
function useCheckboxGroup(props = {}) {
    const { defaultValue, value: valueProp, onChange, isDisabled, isNative } = props;
    const onChangeProp = (0, _reactUseCallbackRef.useCallbackRef)(onChange);
    const [value, setValue] = (0, _reactUseControllableState.useControllableState)({
        value: valueProp,
        defaultValue: defaultValue || [],
        onChange: onChangeProp
    });
    const handleChange = (0, _react.useCallback)((eventOrValue)=>{
        if (!value) return;
        const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);
        const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
        const nextValue = isChecked ? [
            ...value,
            selectedValue
        ] : value.filter((v)=>String(v) !== String(selectedValue));
        setValue(nextValue);
    }, [
        setValue,
        value
    ]);
    const getCheckboxProps = (0, _react.useCallback)((props2 = {})=>{
        const checkedKey = isNative ? "checked" : "isChecked";
        return {
            ...props2,
            [checkedKey]: value.some((val)=>String(props2.value) === String(val)),
            onChange: handleChange
        };
    }, [
        handleChange,
        isNative,
        value
    ]);
    return {
        value,
        isDisabled,
        onChange: handleChange,
        setValue,
        getCheckboxProps
    };
}

},{"@chakra-ui/react-use-callback-ref":"dbPJ9","@chakra-ui/react-use-controllable-state":"ghlge","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1oT41":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Checkbox", ()=>Checkbox);
var _chunk2TOCDA5NMjs = require("./chunk-2TOCDA5N.mjs");
var _chunkLYGBQ47XMjs = require("./chunk-LYGBQ47X.mjs");
var _chunkULEC7HZUMjs = require("./chunk-ULEC7HZU.mjs");
var _chunk7D6N5TE5Mjs = require("./chunk-7D6N5TE5.mjs");
// src/checkbox.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var controlStyles = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    verticalAlign: "top",
    userSelect: "none",
    flexShrink: 0
};
var rootStyles = {
    cursor: "pointer",
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    position: "relative"
};
var checkAnim = (0, _system.keyframes)({
    from: {
        opacity: 0,
        strokeDashoffset: 16,
        transform: "scale(0.95)"
    },
    to: {
        opacity: 1,
        strokeDashoffset: 0,
        transform: "scale(1)"
    }
});
var indeterminateOpacityAnim = (0, _system.keyframes)({
    from: {
        opacity: 0
    },
    to: {
        opacity: 1
    }
});
var indeterminateScaleAnim = (0, _system.keyframes)({
    from: {
        transform: "scaleX(0.65)"
    },
    to: {
        transform: "scaleX(1)"
    }
});
var Checkbox = (0, _system.forwardRef)(function Checkbox2(props, ref) {
    const group = (0, _chunkLYGBQ47XMjs.useCheckboxGroupContext)();
    const mergedProps = {
        ...group,
        ...props
    };
    const styles = (0, _system.useMultiStyleConfig)("Checkbox", mergedProps);
    const ownProps = (0, _system.omitThemingProps)(props);
    const { spacing = "0.5rem", className, children, iconColor, iconSize, icon = /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkULEC7HZUMjs.CheckboxIcon), {}), isChecked: isCheckedProp, isDisabled = group == null ? void 0 : group.isDisabled, onChange: onChangeProp, inputProps, ...rest } = ownProps;
    let isChecked = isCheckedProp;
    if ((group == null ? void 0 : group.value) && ownProps.value) isChecked = group.value.includes(ownProps.value);
    let onChange = onChangeProp;
    if ((group == null ? void 0 : group.onChange) && ownProps.value) onChange = (0, _sharedUtils.callAll)(group.onChange, onChangeProp);
    const { state, getInputProps, getCheckboxProps, getLabelProps, getRootProps } = (0, _chunk7D6N5TE5Mjs.useCheckbox)({
        ...rest,
        isDisabled,
        isChecked,
        onChange
    });
    const shouldAnimate = (0, _chunk2TOCDA5NMjs.useInitialAnimationState)(state.isChecked);
    const iconStyles = (0, _react.useMemo)(()=>({
            animation: !shouldAnimate ? void 0 : state.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,
            fontSize: iconSize,
            color: iconColor,
            ...styles.icon
        }), [
        iconColor,
        iconSize,
        shouldAnimate,
        state.isIndeterminate,
        styles.icon
    ]);
    const clonedIcon = (0, _react.cloneElement)(icon, {
        __css: iconStyles,
        isIndeterminate: state.isIndeterminate,
        isChecked: state.isChecked
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).label, {
        __css: {
            ...rootStyles,
            ...styles.container
        },
        className: (0, _sharedUtils.cx)("chakra-checkbox", className),
        ...getRootProps(),
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsx)("input", {
                className: "chakra-checkbox__input",
                ...getInputProps(inputProps, ref)
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                __css: {
                    ...controlStyles,
                    ...styles.control
                },
                className: "chakra-checkbox__control",
                ...getCheckboxProps(),
                children: clonedIcon
            }),
            children && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                className: "chakra-checkbox__label",
                ...getLabelProps(),
                __css: {
                    marginStart: spacing,
                    ...styles.label
                },
                children
            })
        ]
    });
});
Checkbox.displayName = "Checkbox";

},{"./chunk-2TOCDA5N.mjs":"fokyP","./chunk-LYGBQ47X.mjs":"9TaWn","./chunk-ULEC7HZU.mjs":"heINA","./chunk-7D6N5TE5.mjs":"aHzgY","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fokyP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useInitialAnimationState", ()=>useInitialAnimationState);
// src/use-initial-animation-state.tsx
var _react = require("react");
"use client";
function useInitialAnimationState(isChecked) {
    const [previousIsChecked, setPreviousIsChecked] = (0, _react.useState)(isChecked);
    const [shouldAnimate, setShouldAnimate] = (0, _react.useState)(false);
    if (isChecked !== previousIsChecked) {
        setShouldAnimate(true);
        setPreviousIsChecked(isChecked);
    }
    return shouldAnimate;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"heINA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CheckboxIcon", ()=>CheckboxIcon);
// src/checkbox-icon.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function CheckIcon(props) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).svg, {
        width: "1.2em",
        viewBox: "0 0 12 10",
        style: {
            fill: "none",
            strokeWidth: 2,
            stroke: "currentColor",
            strokeDasharray: 16
        },
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("polyline", {
            points: "1.5 6 4.5 9 10.5 1"
        })
    });
}
function IndeterminateIcon(props) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).svg, {
        width: "1.2em",
        viewBox: "0 0 24 24",
        style: {
            stroke: "currentColor",
            strokeWidth: 4
        },
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("line", {
            x1: "21",
            x2: "3",
            y1: "12",
            y2: "12"
        })
    });
}
function CheckboxIcon(props) {
    const { isIndeterminate, isChecked, ...rest } = props;
    const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon;
    return isChecked || isIndeterminate ? /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        style: {
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            height: "100%"
        },
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(BaseIcon, {
            ...rest
        })
    }) : null;
}

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aHzgY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCheckbox", ()=>useCheckbox);
// src/use-checkbox.ts
var _formControl = require("@chakra-ui/form-control");
var _reactUseSafeLayoutEffect = require("@chakra-ui/react-use-safe-layout-effect");
var _reactUseUpdateEffect = require("@chakra-ui/react-use-update-effect");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _sharedUtils = require("@chakra-ui/shared-utils");
// src/use-checkbox.ts
var _visuallyHidden = require("@chakra-ui/visually-hidden");
var _focusVisible = require("@zag-js/focus-visible");
var _react = require("react");
"use client";
// ../../utilities/object-utils/src/omit.ts
function omit(object, keysToOmit = []) {
    const clone = Object.assign({}, object);
    for (const key of keysToOmit)if (key in clone) delete clone[key];
    return clone;
}
function useCheckbox(props = {}) {
    const formControlProps = (0, _formControl.useFormControlProps)(props);
    const { isDisabled, isReadOnly, isRequired, isInvalid, id, onBlur, onFocus, "aria-describedby": ariaDescribedBy } = formControlProps;
    const { defaultChecked, isChecked: checkedProp, isFocusable, onChange, isIndeterminate, name, value, tabIndex, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-invalid": ariaInvalid, ...rest } = props;
    const htmlProps = omit(rest, [
        "isDisabled",
        "isReadOnly",
        "isRequired",
        "isInvalid",
        "id",
        "onBlur",
        "onFocus",
        "aria-describedby"
    ]);
    const onChangeProp = (0, _reactUseCallbackRef.useCallbackRef)(onChange);
    const onBlurProp = (0, _reactUseCallbackRef.useCallbackRef)(onBlur);
    const onFocusProp = (0, _reactUseCallbackRef.useCallbackRef)(onFocus);
    const [isFocusVisible, setIsFocusVisible] = (0, _react.useState)(false);
    const [isFocused, setFocused] = (0, _react.useState)(false);
    const [isHovered, setHovered] = (0, _react.useState)(false);
    const [isActive, setActive] = (0, _react.useState)(false);
    (0, _react.useEffect)(()=>{
        return (0, _focusVisible.trackFocusVisible)(setIsFocusVisible);
    }, []);
    const inputRef = (0, _react.useRef)(null);
    const [rootIsLabelElement, setRootIsLabelElement] = (0, _react.useState)(true);
    const [checkedState, setCheckedState] = (0, _react.useState)(!!defaultChecked);
    const isControlled = checkedProp !== void 0;
    const isChecked = isControlled ? checkedProp : checkedState;
    const handleChange = (0, _react.useCallback)((event)=>{
        if (isReadOnly || isDisabled) {
            event.preventDefault();
            return;
        }
        if (!isControlled) {
            if (isChecked) setCheckedState(event.target.checked);
            else setCheckedState(isIndeterminate ? true : event.target.checked);
        }
        onChangeProp == null || onChangeProp(event);
    }, [
        isReadOnly,
        isDisabled,
        isChecked,
        isControlled,
        isIndeterminate,
        onChangeProp
    ]);
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (inputRef.current) inputRef.current.indeterminate = Boolean(isIndeterminate);
    }, [
        isIndeterminate
    ]);
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        if (isDisabled) setFocused(false);
    }, [
        isDisabled,
        setFocused
    ]);
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        const el = inputRef.current;
        if (!(el == null ? void 0 : el.form)) return;
        const formResetListener = ()=>{
            setCheckedState(!!defaultChecked);
        };
        el.form.addEventListener("reset", formResetListener);
        return ()=>{
            var _a;
            return (_a = el.form) == null ? void 0 : _a.removeEventListener("reset", formResetListener);
        };
    }, []);
    const trulyDisabled = isDisabled && !isFocusable;
    const onKeyDown = (0, _react.useCallback)((event)=>{
        if (event.key === " ") setActive(true);
    }, [
        setActive
    ]);
    const onKeyUp = (0, _react.useCallback)((event)=>{
        if (event.key === " ") setActive(false);
    }, [
        setActive
    ]);
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (!inputRef.current) return;
        const notInSync = inputRef.current.checked !== isChecked;
        if (notInSync) setCheckedState(inputRef.current.checked);
    }, [
        inputRef.current
    ]);
    const getCheckboxProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>{
        const onPressDown = (event)=>{
            if (isFocused) event.preventDefault();
            setActive(true);
        };
        return {
            ...props2,
            ref: forwardedRef,
            "data-active": (0, _sharedUtils.dataAttr)(isActive),
            "data-hover": (0, _sharedUtils.dataAttr)(isHovered),
            "data-checked": (0, _sharedUtils.dataAttr)(isChecked),
            "data-focus": (0, _sharedUtils.dataAttr)(isFocused),
            "data-focus-visible": (0, _sharedUtils.dataAttr)(isFocused && isFocusVisible),
            "data-indeterminate": (0, _sharedUtils.dataAttr)(isIndeterminate),
            "data-disabled": (0, _sharedUtils.dataAttr)(isDisabled),
            "data-invalid": (0, _sharedUtils.dataAttr)(isInvalid),
            "data-readonly": (0, _sharedUtils.dataAttr)(isReadOnly),
            "aria-hidden": true,
            onMouseDown: (0, _sharedUtils.callAllHandlers)(props2.onMouseDown, onPressDown),
            onMouseUp: (0, _sharedUtils.callAllHandlers)(props2.onMouseUp, ()=>setActive(false)),
            onMouseEnter: (0, _sharedUtils.callAllHandlers)(props2.onMouseEnter, ()=>setHovered(true)),
            onMouseLeave: (0, _sharedUtils.callAllHandlers)(props2.onMouseLeave, ()=>setHovered(false))
        };
    }, [
        isActive,
        isChecked,
        isDisabled,
        isFocused,
        isFocusVisible,
        isHovered,
        isIndeterminate,
        isInvalid,
        isReadOnly
    ]);
    const getIndicatorProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>({
            ...props2,
            ref: forwardedRef,
            "data-active": (0, _sharedUtils.dataAttr)(isActive),
            "data-hover": (0, _sharedUtils.dataAttr)(isHovered),
            "data-checked": (0, _sharedUtils.dataAttr)(isChecked),
            "data-focus": (0, _sharedUtils.dataAttr)(isFocused),
            "data-focus-visible": (0, _sharedUtils.dataAttr)(isFocused && isFocusVisible),
            "data-indeterminate": (0, _sharedUtils.dataAttr)(isIndeterminate),
            "data-disabled": (0, _sharedUtils.dataAttr)(isDisabled),
            "data-invalid": (0, _sharedUtils.dataAttr)(isInvalid),
            "data-readonly": (0, _sharedUtils.dataAttr)(isReadOnly)
        }), [
        isActive,
        isChecked,
        isDisabled,
        isFocused,
        isFocusVisible,
        isHovered,
        isIndeterminate,
        isInvalid,
        isReadOnly
    ]);
    const getRootProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>({
            ...htmlProps,
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(forwardedRef, (node)=>{
                if (!node) return;
                setRootIsLabelElement(node.tagName === "LABEL");
            }),
            onClick: (0, _sharedUtils.callAllHandlers)(props2.onClick, ()=>{
                var _a;
                if (!rootIsLabelElement) {
                    (_a = inputRef.current) == null || _a.click();
                    requestAnimationFrame(()=>{
                        var _a2;
                        (_a2 = inputRef.current) == null || _a2.focus({
                            preventScroll: true
                        });
                    });
                }
            }),
            "data-disabled": (0, _sharedUtils.dataAttr)(isDisabled),
            "data-checked": (0, _sharedUtils.dataAttr)(isChecked),
            "data-invalid": (0, _sharedUtils.dataAttr)(isInvalid)
        }), [
        htmlProps,
        isDisabled,
        isChecked,
        isInvalid,
        rootIsLabelElement
    ]);
    const getInputProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>{
        return {
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(inputRef, forwardedRef),
            type: "checkbox",
            name,
            value,
            id,
            tabIndex,
            onChange: (0, _sharedUtils.callAllHandlers)(props2.onChange, handleChange),
            onBlur: (0, _sharedUtils.callAllHandlers)(props2.onBlur, onBlurProp, ()=>setFocused(false)),
            onFocus: (0, _sharedUtils.callAllHandlers)(props2.onFocus, onFocusProp, ()=>setFocused(true)),
            onKeyDown: (0, _sharedUtils.callAllHandlers)(props2.onKeyDown, onKeyDown),
            onKeyUp: (0, _sharedUtils.callAllHandlers)(props2.onKeyUp, onKeyUp),
            required: isRequired,
            checked: isChecked,
            disabled: trulyDisabled,
            readOnly: isReadOnly,
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledBy,
            "aria-invalid": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,
            "aria-describedby": ariaDescribedBy,
            "aria-disabled": isDisabled,
            style: (0, _visuallyHidden.visuallyHiddenStyle)
        };
    }, [
        name,
        value,
        id,
        handleChange,
        onBlurProp,
        onFocusProp,
        onKeyDown,
        onKeyUp,
        isRequired,
        isChecked,
        trulyDisabled,
        isReadOnly,
        ariaLabel,
        ariaLabelledBy,
        ariaInvalid,
        isInvalid,
        ariaDescribedBy,
        isDisabled,
        tabIndex
    ]);
    const getLabelProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>({
            ...props2,
            ref: forwardedRef,
            onMouseDown: (0, _sharedUtils.callAllHandlers)(props2.onMouseDown, stopEvent),
            "data-disabled": (0, _sharedUtils.dataAttr)(isDisabled),
            "data-checked": (0, _sharedUtils.dataAttr)(isChecked),
            "data-invalid": (0, _sharedUtils.dataAttr)(isInvalid)
        }), [
        isChecked,
        isDisabled,
        isInvalid
    ]);
    const state = {
        isInvalid,
        isFocused,
        isChecked,
        isActive,
        isHovered,
        isIndeterminate,
        isDisabled,
        isReadOnly,
        isRequired
    };
    return {
        state,
        getRootProps,
        getCheckboxProps,
        getIndicatorProps,
        getInputProps,
        getLabelProps,
        htmlProps
    };
}
function stopEvent(event) {
    event.preventDefault();
    event.stopPropagation();
}

},{"@chakra-ui/form-control":"5Ic17","@chakra-ui/react-use-safe-layout-effect":"eJbER","@chakra-ui/react-use-update-effect":"kfB4Y","@chakra-ui/react-use-callback-ref":"dbPJ9","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/visually-hidden":"bGqMm","@zag-js/focus-visible":"8j8VG","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Ic17":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormControl", ()=>(0, _chunkOSN4JR34Mjs.FormControl));
parcelHelpers.export(exports, "FormErrorIcon", ()=>(0, _chunk5ZQ6B3SWMjs.FormErrorIcon));
parcelHelpers.export(exports, "FormErrorMessage", ()=>(0, _chunk5ZQ6B3SWMjs.FormErrorMessage));
parcelHelpers.export(exports, "FormHelperText", ()=>(0, _chunkOSN4JR34Mjs.FormHelperText));
parcelHelpers.export(exports, "FormLabel", ()=>(0, _chunkGCOAS5YCMjs.FormLabel));
parcelHelpers.export(exports, "RequiredIndicator", ()=>(0, _chunkGCOAS5YCMjs.RequiredIndicator));
parcelHelpers.export(exports, "useFormControl", ()=>(0, _chunkVLMMX64RMjs.useFormControl));
parcelHelpers.export(exports, "useFormControlContext", ()=>(0, _chunkOSN4JR34Mjs.useFormControlContext));
parcelHelpers.export(exports, "useFormControlProps", ()=>(0, _chunkVLMMX64RMjs.useFormControlProps));
parcelHelpers.export(exports, "useFormControlStyles", ()=>(0, _chunkOSN4JR34Mjs.useFormControlStyles));
parcelHelpers.export(exports, "useFormErrorStyles", ()=>(0, _chunk5ZQ6B3SWMjs.useFormErrorStyles));
var _chunk5ZQ6B3SWMjs = require("./chunk-5ZQ6B3SW.mjs");
var _chunkGCOAS5YCMjs = require("./chunk-GCOAS5YC.mjs");
var _chunkVLMMX64RMjs = require("./chunk-VLMMX64R.mjs");
var _chunkOSN4JR34Mjs = require("./chunk-OSN4JR34.mjs");
"use client";

},{"./chunk-5ZQ6B3SW.mjs":"hnLTF","./chunk-GCOAS5YC.mjs":"eIeyK","./chunk-VLMMX64R.mjs":"37Qej","./chunk-OSN4JR34.mjs":"g5gPt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hnLTF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useFormErrorStyles", ()=>useFormErrorStyles);
parcelHelpers.export(exports, "FormErrorMessage", ()=>FormErrorMessage);
parcelHelpers.export(exports, "FormErrorIcon", ()=>FormErrorIcon);
var _chunkOSN4JR34Mjs = require("./chunk-OSN4JR34.mjs");
// src/form-error.tsx
var _icon = require("@chakra-ui/icon");
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [FormErrorStylesProvider, useFormErrorStyles] = (0, _reactContext.createContext)({
    name: `FormErrorStylesContext`,
    errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormError />" `
});
var FormErrorMessage = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _system.useMultiStyleConfig)("FormError", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    const field = (0, _chunkOSN4JR34Mjs.useFormControlContext)();
    if (!(field == null ? void 0 : field.isInvalid)) return null;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(FormErrorStylesProvider, {
        value: styles,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),
            className: (0, _sharedUtils.cx)("chakra-form__error-message", props.className),
            __css: {
                display: "flex",
                alignItems: "center",
                ...styles.text
            }
        })
    });
});
FormErrorMessage.displayName = "FormErrorMessage";
var FormErrorIcon = (0, _system.forwardRef)((props, ref)=>{
    const styles = useFormErrorStyles();
    const field = (0, _chunkOSN4JR34Mjs.useFormControlContext)();
    if (!(field == null ? void 0 : field.isInvalid)) return null;
    const _className = (0, _sharedUtils.cx)("chakra-form__error-icon", props.className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        ref,
        "aria-hidden": true,
        ...props,
        __css: styles.icon,
        className: _className,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        })
    });
});
FormErrorIcon.displayName = "FormErrorIcon";

},{"./chunk-OSN4JR34.mjs":"g5gPt","@chakra-ui/icon":"jW1nH","@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g5gPt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useFormControlStyles", ()=>useFormControlStyles);
parcelHelpers.export(exports, "useFormControlContext", ()=>useFormControlContext);
parcelHelpers.export(exports, "FormControl", ()=>FormControl);
parcelHelpers.export(exports, "FormHelperText", ()=>FormHelperText);
// src/form-control.tsx
var _reactContext = require("@chakra-ui/react-context");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [FormControlStylesProvider, useFormControlStyles] = (0, _reactContext.createContext)({
    name: `FormControlStylesContext`,
    errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
});
var [FormControlProvider, useFormControlContext] = (0, _reactContext.createContext)({
    strict: false,
    name: "FormControlContext"
});
function useFormControlProvider(props) {
    const { id: idProp, isRequired, isInvalid, isDisabled, isReadOnly, ...htmlProps } = props;
    const uuid = (0, _react.useId)();
    const id = idProp || `field-${uuid}`;
    const labelId = `${id}-label`;
    const feedbackId = `${id}-feedback`;
    const helpTextId = `${id}-helptext`;
    const [hasFeedbackText, setHasFeedbackText] = (0, _react.useState)(false);
    const [hasHelpText, setHasHelpText] = (0, _react.useState)(false);
    const [isFocused, setFocus] = (0, _react.useState)(false);
    const getHelpTextProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>({
            id: helpTextId,
            ...props2,
            /**
       * Notify the field context when the help text is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */ ref: (0, _reactUseMergeRefs.mergeRefs)(forwardedRef, (node)=>{
                if (!node) return;
                setHasHelpText(true);
            })
        }), [
        helpTextId
    ]);
    const getLabelProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>({
            ...props2,
            ref: forwardedRef,
            "data-focus": (0, _sharedUtils.dataAttr)(isFocused),
            "data-disabled": (0, _sharedUtils.dataAttr)(isDisabled),
            "data-invalid": (0, _sharedUtils.dataAttr)(isInvalid),
            "data-readonly": (0, _sharedUtils.dataAttr)(isReadOnly),
            id: props2.id !== void 0 ? props2.id : labelId,
            htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id
        }), [
        id,
        isDisabled,
        isFocused,
        isInvalid,
        isReadOnly,
        labelId
    ]);
    const getErrorMessageProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>({
            id: feedbackId,
            ...props2,
            /**
       * Notify the field context when the error message is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */ ref: (0, _reactUseMergeRefs.mergeRefs)(forwardedRef, (node)=>{
                if (!node) return;
                setHasFeedbackText(true);
            }),
            "aria-live": "polite"
        }), [
        feedbackId
    ]);
    const getRootProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>({
            ...props2,
            ...htmlProps,
            ref: forwardedRef,
            role: "group"
        }), [
        htmlProps
    ]);
    const getRequiredIndicatorProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>({
            ...props2,
            ref: forwardedRef,
            role: "presentation",
            "aria-hidden": true,
            children: props2.children || "*"
        }), []);
    return {
        isRequired: !!isRequired,
        isInvalid: !!isInvalid,
        isReadOnly: !!isReadOnly,
        isDisabled: !!isDisabled,
        isFocused: !!isFocused,
        onFocus: ()=>setFocus(true),
        onBlur: ()=>setFocus(false),
        hasFeedbackText,
        setHasFeedbackText,
        hasHelpText,
        setHasHelpText,
        id,
        labelId,
        feedbackId,
        helpTextId,
        htmlProps,
        getHelpTextProps,
        getErrorMessageProps,
        getRootProps,
        getLabelProps,
        getRequiredIndicatorProps
    };
}
var FormControl = (0, _system.forwardRef)(function FormControl2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Form", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    const { getRootProps, htmlProps: _, ...context } = useFormControlProvider(ownProps);
    const className = (0, _sharedUtils.cx)("chakra-form-control", props.className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(FormControlProvider, {
        value: context,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(FormControlStylesProvider, {
            value: styles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                ...getRootProps({}, ref),
                className,
                __css: styles["container"]
            })
        })
    });
});
FormControl.displayName = "FormControl";
var FormHelperText = (0, _system.forwardRef)(function FormHelperText2(props, ref) {
    const field = useFormControlContext();
    const styles = useFormControlStyles();
    const className = (0, _sharedUtils.cx)("chakra-form__helper-text", props.className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...field == null ? void 0 : field.getHelpTextProps(props, ref),
        __css: styles.helperText,
        className
    });
});
FormHelperText.displayName = "FormHelperText";

},{"@chakra-ui/react-context":"7RVZP","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eIeyK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormLabel", ()=>FormLabel);
parcelHelpers.export(exports, "RequiredIndicator", ()=>RequiredIndicator);
var _chunkOSN4JR34Mjs = require("./chunk-OSN4JR34.mjs");
// src/form-label.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var FormLabel = (0, _system.forwardRef)(function FormLabel2(passedProps, ref) {
    var _a;
    const styles = (0, _system.useStyleConfig)("FormLabel", passedProps);
    const props = (0, _system.omitThemingProps)(passedProps);
    const { className, children, requiredIndicator = /* @__PURE__ */ (0, _jsxRuntime.jsx)(RequiredIndicator, {}), optionalIndicator = null, ...rest } = props;
    const field = (0, _chunkOSN4JR34Mjs.useFormControlContext)();
    const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : {
        ref,
        ...rest
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).label, {
        ...ownProps,
        className: (0, _sharedUtils.cx)("chakra-form__label", props.className),
        __css: {
            display: "block",
            textAlign: "start",
            ...styles
        },
        children: [
            children,
            (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator
        ]
    });
});
FormLabel.displayName = "FormLabel";
var RequiredIndicator = (0, _system.forwardRef)(function RequiredIndicator2(props, ref) {
    const field = (0, _chunkOSN4JR34Mjs.useFormControlContext)();
    const styles = (0, _chunkOSN4JR34Mjs.useFormControlStyles)();
    if (!(field == null ? void 0 : field.isRequired)) return null;
    const className = (0, _sharedUtils.cx)("chakra-form__required-indicator", props.className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),
        __css: styles.requiredIndicator,
        className
    });
});
RequiredIndicator.displayName = "RequiredIndicator";

},{"./chunk-OSN4JR34.mjs":"g5gPt","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"37Qej":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useFormControl", ()=>useFormControl);
parcelHelpers.export(exports, "useFormControlProps", ()=>useFormControlProps);
var _chunkOSN4JR34Mjs = require("./chunk-OSN4JR34.mjs");
// src/use-form-control.ts
var _sharedUtils = require("@chakra-ui/shared-utils");
"use client";
function useFormControl(props) {
    const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps(props);
    return {
        ...rest,
        disabled: isDisabled,
        readOnly: isReadOnly,
        required: isRequired,
        "aria-invalid": (0, _sharedUtils.ariaAttr)(isInvalid),
        "aria-required": (0, _sharedUtils.ariaAttr)(isRequired),
        "aria-readonly": (0, _sharedUtils.ariaAttr)(isReadOnly)
    };
}
function useFormControlProps(props) {
    var _a, _b, _c;
    const field = (0, _chunkOSN4JR34Mjs.useFormControlContext)();
    const { id, disabled, readOnly, required, isRequired, isInvalid, isReadOnly, isDisabled, onFocus, onBlur, ...rest } = props;
    const labelIds = props["aria-describedby"] ? [
        props["aria-describedby"]
    ] : [];
    if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) labelIds.push(field.feedbackId);
    if (field == null ? void 0 : field.hasHelpText) labelIds.push(field.helpTextId);
    return {
        ...rest,
        "aria-describedby": labelIds.join(" ") || void 0,
        id: id != null ? id : field == null ? void 0 : field.id,
        isDisabled: (_a = disabled != null ? disabled : isDisabled) != null ? _a : field == null ? void 0 : field.isDisabled,
        isReadOnly: (_b = readOnly != null ? readOnly : isReadOnly) != null ? _b : field == null ? void 0 : field.isReadOnly,
        isRequired: (_c = required != null ? required : isRequired) != null ? _c : field == null ? void 0 : field.isRequired,
        isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
        onFocus: (0, _sharedUtils.callAllHandlers)(field == null ? void 0 : field.onFocus, onFocus),
        onBlur: (0, _sharedUtils.callAllHandlers)(field == null ? void 0 : field.onBlur, onBlur)
    };
}

},{"./chunk-OSN4JR34.mjs":"g5gPt","@chakra-ui/shared-utils":"h33Zu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGqMm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VisuallyHidden", ()=>(0, _chunkKO6Q73APMjs.VisuallyHidden));
parcelHelpers.export(exports, "VisuallyHiddenInput", ()=>(0, _chunkKO6Q73APMjs.VisuallyHiddenInput));
parcelHelpers.export(exports, "visuallyHiddenStyle", ()=>(0, _chunk3JHDQ75OMjs.visuallyHiddenStyle));
var _chunkKO6Q73APMjs = require("./chunk-KO6Q73AP.mjs");
var _chunk3JHDQ75OMjs = require("./chunk-3JHDQ75O.mjs");
"use client";

},{"./chunk-KO6Q73AP.mjs":"5JNEM","./chunk-3JHDQ75O.mjs":"18C8t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5JNEM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VisuallyHidden", ()=>VisuallyHidden);
parcelHelpers.export(exports, "VisuallyHiddenInput", ()=>VisuallyHiddenInput);
parcelHelpers.export(exports, "visually_hidden_default", ()=>visually_hidden_default);
var _chunk3JHDQ75OMjs = require("./chunk-3JHDQ75O.mjs");
// src/visually-hidden.tsx
var _system = require("@chakra-ui/system");
"use client";
var VisuallyHidden = (0, _system.chakra)("span", {
    baseStyle: (0, _chunk3JHDQ75OMjs.visuallyHiddenStyle)
});
VisuallyHidden.displayName = "VisuallyHidden";
var VisuallyHiddenInput = (0, _system.chakra)("input", {
    baseStyle: (0, _chunk3JHDQ75OMjs.visuallyHiddenStyle)
});
VisuallyHiddenInput.displayName = "VisuallyHiddenInput";
var visually_hidden_default = VisuallyHidden;

},{"./chunk-3JHDQ75O.mjs":"18C8t","@chakra-ui/system":"jpRoG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"18C8t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "visuallyHiddenStyle", ()=>visuallyHiddenStyle);
"use client";
// src/visually-hidden.style.ts
var visuallyHiddenStyle = {
    border: "0",
    clip: "rect(0, 0, 0, 0)",
    height: "1px",
    width: "1px",
    margin: "-1px",
    padding: "0",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8j8VG":[function(require,module,exports) {
// src/index.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInteractionModality", ()=>getInteractionModality);
parcelHelpers.export(exports, "setInteractionModality", ()=>setInteractionModality);
parcelHelpers.export(exports, "trackFocusVisible", ()=>trackFocusVisible);
parcelHelpers.export(exports, "trackInteractionModality", ()=>trackInteractionModality);
var _domQuery = require("@zag-js/dom-query");
var hasSetup = false;
var modality = null;
var hasEventBeforeFocus = false;
var hasBlurredWindowRecently = false;
var handlers = /* @__PURE__ */ new Set();
function trigger(modality2, event) {
    handlers.forEach((handler)=>handler(modality2, event));
}
var isMac = typeof window !== "undefined" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;
function isValidKey(e) {
    return !(e.metaKey || !isMac && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function onKeyboardEvent(event) {
    hasEventBeforeFocus = true;
    if (isValidKey(event)) {
        modality = "keyboard";
        trigger("keyboard", event);
    }
}
function onPointerEvent(event) {
    modality = "pointer";
    if (event.type === "mousedown" || event.type === "pointerdown") {
        hasEventBeforeFocus = true;
        const target = event.composedPath ? event.composedPath()[0] : event.target;
        let matches = false;
        try {
            matches = target.matches(":focus-visible");
        } catch  {}
        if (matches) return;
        trigger("pointer", event);
    }
}
function isVirtualClick(event) {
    if (event.mozInputSource === 0 && event.isTrusted) return true;
    return event.detail === 0 && !event.pointerType;
}
function onClickEvent(e) {
    if (isVirtualClick(e)) {
        hasEventBeforeFocus = true;
        modality = "virtual";
    }
}
function onWindowFocus(event) {
    if (event.target === window || event.target === document) return;
    if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {
        modality = "virtual";
        trigger("virtual", event);
    }
    hasEventBeforeFocus = false;
    hasBlurredWindowRecently = false;
}
function onWindowBlur() {
    hasEventBeforeFocus = false;
    hasBlurredWindowRecently = true;
}
function isFocusVisible() {
    return modality !== "pointer";
}
function setupGlobalFocusEvents() {
    if (!(0, _domQuery.isDom)() || hasSetup) return;
    const { focus } = HTMLElement.prototype;
    HTMLElement.prototype.focus = function focusElement(...args) {
        hasEventBeforeFocus = true;
        focus.apply(this, args);
    };
    document.addEventListener("keydown", onKeyboardEvent, true);
    document.addEventListener("keyup", onKeyboardEvent, true);
    document.addEventListener("click", onClickEvent, true);
    window.addEventListener("focus", onWindowFocus, true);
    window.addEventListener("blur", onWindowBlur, false);
    if (typeof PointerEvent !== "undefined") {
        document.addEventListener("pointerdown", onPointerEvent, true);
        document.addEventListener("pointermove", onPointerEvent, true);
        document.addEventListener("pointerup", onPointerEvent, true);
    } else {
        document.addEventListener("mousedown", onPointerEvent, true);
        document.addEventListener("mousemove", onPointerEvent, true);
        document.addEventListener("mouseup", onPointerEvent, true);
    }
    hasSetup = true;
}
function trackFocusVisible(fn) {
    setupGlobalFocusEvents();
    fn(isFocusVisible());
    const handler = ()=>fn(isFocusVisible());
    handlers.add(handler);
    return ()=>{
        handlers.delete(handler);
    };
}
function trackInteractionModality(fn) {
    setupGlobalFocusEvents();
    fn(modality);
    const handler = ()=>fn(modality);
    handlers.add(handler);
    return ()=>{
        handlers.delete(handler);
    };
}
function setInteractionModality(value) {
    modality = value;
    trigger(value, null);
}
function getInteractionModality() {
    return modality;
}

},{"@zag-js/dom-query":"lHOGf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lHOGf":[function(require,module,exports) {
// src/attrs.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MAX_Z_INDEX", ()=>MAX_Z_INDEX);
parcelHelpers.export(exports, "ariaAttr", ()=>ariaAttr);
parcelHelpers.export(exports, "contains", ()=>contains);
parcelHelpers.export(exports, "createScope", ()=>createScope);
parcelHelpers.export(exports, "dataAttr", ()=>dataAttr);
parcelHelpers.export(exports, "getActiveElement", ()=>getActiveElement);
parcelHelpers.export(exports, "getByText", ()=>getByText);
parcelHelpers.export(exports, "getByTypeahead", ()=>getByTypeahead);
parcelHelpers.export(exports, "getComputedStyle", ()=>getComputedStyle);
parcelHelpers.export(exports, "getDocument", ()=>getDocument2);
parcelHelpers.export(exports, "getEventTarget", ()=>getEventTarget);
parcelHelpers.export(exports, "getParent", ()=>getParent);
parcelHelpers.export(exports, "getPlatform", ()=>getPlatform);
parcelHelpers.export(exports, "getScrollParent", ()=>getScrollParent);
parcelHelpers.export(exports, "getScrollParents", ()=>getScrollParents);
parcelHelpers.export(exports, "getWindow", ()=>getWindow);
parcelHelpers.export(exports, "indexOfId", ()=>indexOfId);
parcelHelpers.export(exports, "isApple", ()=>isApple);
parcelHelpers.export(exports, "isDom", ()=>isDom);
parcelHelpers.export(exports, "isEditableElement", ()=>isEditableElement);
parcelHelpers.export(exports, "isFirefox", ()=>isFirefox);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement);
parcelHelpers.export(exports, "isIPhone", ()=>isIPhone);
parcelHelpers.export(exports, "isIos", ()=>isIos);
parcelHelpers.export(exports, "isMac", ()=>isMac);
parcelHelpers.export(exports, "isSafari", ()=>isSafari);
parcelHelpers.export(exports, "isSelfEvent", ()=>isSelfEvent);
parcelHelpers.export(exports, "isTouchDevice", ()=>isTouchDevice);
parcelHelpers.export(exports, "itemById", ()=>itemById);
parcelHelpers.export(exports, "nextById", ()=>nextById);
parcelHelpers.export(exports, "nextTick", ()=>nextTick);
parcelHelpers.export(exports, "prevById", ()=>prevById);
parcelHelpers.export(exports, "query", ()=>query);
parcelHelpers.export(exports, "queryAll", ()=>queryAll);
parcelHelpers.export(exports, "raf", ()=>raf);
var dataAttr = (guard)=>{
    return guard ? "" : void 0;
};
var ariaAttr = (guard)=>{
    return guard ? "true" : void 0;
};
// src/is-html-element.ts
function isHTMLElement(value) {
    return typeof value === "object" && value?.nodeType === Node.ELEMENT_NODE && typeof value?.nodeName === "string";
}
// src/contains.ts
function contains(parent, child) {
    if (!parent || !child) return false;
    if (!isHTMLElement(parent) || !isHTMLElement(child)) return false;
    return parent === child || parent.contains(child);
}
var isSelfEvent = (event)=>contains(event.currentTarget, event.target);
// src/create-scope.ts
var getDocument = (node)=>{
    if (node.nodeType === Node.DOCUMENT_NODE) return node;
    return node.ownerDocument ?? document;
};
function createScope(methods) {
    const screen = {
        getRootNode: (ctx)=>ctx.getRootNode?.() ?? document,
        getDoc: (ctx)=>getDocument(screen.getRootNode(ctx)),
        getWin: (ctx)=>screen.getDoc(ctx).defaultView ?? window,
        getActiveElement: (ctx)=>screen.getDoc(ctx).activeElement,
        getById: (ctx, id)=>screen.getRootNode(ctx).getElementById(id)
    };
    return {
        ...screen,
        ...methods
    };
}
// src/env.ts
var isDocument = (el)=>el.nodeType === Node.DOCUMENT_NODE;
function getDocument2(el) {
    if (isDocument(el)) return el;
    return el?.ownerDocument ?? document;
}
function getWindow(el) {
    return el?.ownerDocument.defaultView ?? window;
}
// src/get-active-element.ts
function getActiveElement(el) {
    let activeElement = el.ownerDocument.activeElement;
    while(activeElement?.shadowRoot){
        const el2 = activeElement.shadowRoot.activeElement;
        if (el2 === activeElement) break;
        else activeElement = el2;
    }
    return activeElement;
}
// src/get-by-id.ts
function itemById(v, id) {
    return v.find((node)=>node.id === id);
}
function indexOfId(v, id) {
    const item = itemById(v, id);
    return item ? v.indexOf(item) : -1;
}
function nextById(v, id, loop = true) {
    let idx = indexOfId(v, id);
    idx = loop ? (idx + 1) % v.length : Math.min(idx + 1, v.length - 1);
    return v[idx];
}
function prevById(v, id, loop = true) {
    let idx = indexOfId(v, id);
    if (idx === -1) return loop ? v[v.length - 1] : null;
    idx = loop ? (idx - 1 + v.length) % v.length : Math.max(0, idx - 1);
    return v[idx];
}
// src/get-by-text.ts
var getValueText = (item)=>item.dataset.valuetext ?? item.textContent ?? "";
var match = (valueText, query2)=>valueText.toLowerCase().startsWith(query2.toLowerCase());
var wrap = (v, idx)=>{
    return v.map((_, index)=>v[(Math.max(idx, 0) + index) % v.length]);
};
function getByText(v, text, currentId) {
    const index = currentId ? indexOfId(v, currentId) : -1;
    let items = currentId ? wrap(v, index) : v;
    const isSingleKey = text.length === 1;
    if (isSingleKey) items = items.filter((item)=>item.id !== currentId);
    return items.find((item)=>match(getValueText(item), text));
}
// src/get-by-typeahead.ts
function getByTypeaheadImpl(_items, options) {
    const { state, activeId, key, timeout = 350 } = options;
    const search = state.keysSoFar + key;
    const isRepeated = search.length > 1 && Array.from(search).every((char)=>char === search[0]);
    const query2 = isRepeated ? search[0] : search;
    let items = _items.slice();
    const next = getByText(items, query2, activeId);
    function cleanup() {
        clearTimeout(state.timer);
        state.timer = -1;
    }
    function update(value) {
        state.keysSoFar = value;
        cleanup();
        if (value !== "") state.timer = +setTimeout(()=>{
            update("");
            cleanup();
        }, timeout);
    }
    update(search);
    return next;
}
var getByTypeahead = /* @__PURE__ */ Object.assign(getByTypeaheadImpl, {
    defaultOptions: {
        keysSoFar: "",
        timer: -1
    },
    isValidEvent: isValidTypeaheadEvent
});
function isValidTypeaheadEvent(event) {
    return event.key.length === 1 && !event.ctrlKey && !event.metaKey;
}
// src/get-computed-style.ts
var styleCache = /* @__PURE__ */ new WeakMap();
function getComputedStyle(el) {
    if (!styleCache.has(el)) {
        const win = el.ownerDocument.defaultView || window;
        styleCache.set(el, win.getComputedStyle(el));
    }
    return styleCache.get(el);
}
// src/get-event-target.ts
function getEventTarget(event) {
    return event.composedPath?.()[0] ?? event.target;
}
// src/get-scroll-parent.ts
function isScrollParent(el) {
    const win = el.ownerDocument.defaultView || window;
    const { overflow, overflowX, overflowY } = win.getComputedStyle(el);
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getParent(el) {
    if (el.localName === "html") return el;
    return el.assignedSlot || el.parentElement || el.ownerDocument.documentElement;
}
function getScrollParent(el) {
    if ([
        "html",
        "body",
        "#document"
    ].includes(el.localName)) return el.ownerDocument.body;
    if (isHTMLElement(el) && isScrollParent(el)) return el;
    return getScrollParent(getParent(el));
}
function getScrollParents(el, list = []) {
    const parent = getScrollParent(el);
    const isBody = parent === el.ownerDocument.body;
    const win = parent.ownerDocument.defaultView || window;
    const target = isBody ? [
        win
    ].concat(win.visualViewport || [], isScrollParent(parent) ? parent : []) : parent;
    const parents = list.concat(target);
    return isBody ? parents : parents.concat(getScrollParents(getParent(target)));
}
// src/is-editable-element.ts
function isEditableElement(el) {
    if (el == null || !isHTMLElement(el)) return false;
    try {
        const win = el.ownerDocument.defaultView || window;
        return el instanceof win.HTMLInputElement && el.selectionStart != null || /(textarea|select)/.test(el.localName) || el.isContentEditable;
    } catch  {
        return false;
    }
}
// src/platform.ts
var isDom = ()=>typeof document !== "undefined";
function getPlatform() {
    const agent = navigator.userAgentData;
    return agent?.platform ?? navigator.platform;
}
var pt = (v)=>isDom() && v.test(getPlatform());
var ua = (v)=>isDom() && v.test(navigator.userAgent);
var vn = (v)=>isDom() && v.test(navigator.vendor);
var isTouchDevice = ()=>isDom() && !!navigator.maxTouchPoints;
var isMac = ()=>pt(/^Mac/) && !isTouchDevice();
var isIPhone = ()=>pt(/^iPhone/);
var isSafari = ()=>isApple() && vn(/apple/i);
var isFirefox = ()=>ua(/firefox\//i);
var isApple = ()=>pt(/mac|iphone|ipad|ipod/i);
var isIos = ()=>isApple() && !isMac();
// src/query.ts
function queryAll(root, selector) {
    return Array.from(root?.querySelectorAll(selector) ?? []);
}
function query(root, selector) {
    return root?.querySelector(selector);
}
// src/raf.ts
function nextTick(fn) {
    const set = /* @__PURE__ */ new Set();
    function raf2(fn2) {
        const id = globalThis.requestAnimationFrame(fn2);
        set.add(()=>globalThis.cancelAnimationFrame(id));
    }
    raf2(()=>raf2(fn));
    return function cleanup() {
        set.forEach((fn2)=>fn2());
    };
}
function raf(fn) {
    const id = globalThis.requestAnimationFrame(fn);
    return ()=>{
        globalThis.cancelAnimationFrame(id);
    };
}
// src/index.ts
var MAX_Z_INDEX = 2147483647;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ktVGX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ControlBox", ()=>(0, _chunkP2CZ2AGBMjs.ControlBox));
var _chunkP2CZ2AGBMjs = require("./chunk-P2CZ2AGB.mjs");
"use client";

},{"./chunk-P2CZ2AGB.mjs":"cfFs3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cfFs3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ControlBox", ()=>ControlBox);
parcelHelpers.export(exports, "control_box_default", ()=>control_box_default);
// src/control-box.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var ControlBox = (props)=>{
    const { type = "checkbox", _hover, _invalid, _disabled, _focus, _checked, _child = {
        opacity: 0
    }, _checkedAndChild = {
        opacity: 1
    }, _checkedAndDisabled, _checkedAndFocus, _checkedAndHover, children, ...rest } = props;
    const checkedAndDisabled = `input[type=${type}]:checked:disabled + &`;
    const checkedAndHover = `input[type=${type}]:checked:hover:not(:disabled) + &`;
    const checkedAndFocus = `input[type=${type}]:checked:focus + &`;
    const disabled = `input[type=${type}]:disabled + &`;
    const focus = `input[type=${type}]:focus + &`;
    const hover = `input[type=${type}]:hover:not(:disabled):not(:checked) + &`;
    const checked = `input[type=${type}]:checked + &, input[type=${type}][aria-checked=mixed] + &`;
    const invalid = `input[type=${type}][aria-invalid=true] + &`;
    const child = `& > *`;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...rest,
        "aria-hidden": true,
        __css: {
            display: "inline-flex",
            alignItems: "center",
            justifyContent: "center",
            transitionProperty: "common",
            transitionDuration: "fast",
            flexShrink: 0,
            [focus]: _focus,
            [hover]: _hover,
            [disabled]: _disabled,
            [invalid]: _invalid,
            [checkedAndDisabled]: _checkedAndDisabled,
            [checkedAndFocus]: _checkedAndFocus,
            [checkedAndHover]: _checkedAndHover,
            [child]: _child,
            [checked]: {
                ..._checked,
                [child]: _checkedAndChild
            }
        },
        children
    });
};
ControlBox.displayName = "ControlBox";
var control_box_default = ControlBox;

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"m7Jg5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCounter", ()=>(0, _chunkAB3TPYVSMjs.useCounter));
var _chunkAB3TPYVSMjs = require("./chunk-AB3TPYVS.mjs");
"use client";

},{"./chunk-AB3TPYVS.mjs":"dJbsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dJbsn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCounter", ()=>useCounter);
// src/use-counter.ts
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
var _numberUtils = require("@chakra-ui/number-utils");
var _react = require("react");
"use client";
function useCounter(props = {}) {
    const { onChange, precision: precisionProp, defaultValue, value: valueProp, step: stepProp = 1, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER, keepWithinRange = true } = props;
    const onChangeProp = (0, _reactUseCallbackRef.useCallbackRef)(onChange);
    const [valueState, setValue] = (0, _react.useState)(()=>{
        var _a;
        if (defaultValue == null) return "";
        return (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : "";
    });
    const isControlled = typeof valueProp !== "undefined";
    const value = isControlled ? valueProp : valueState;
    const decimalPlaces = getDecimalPlaces(parse(value), stepProp);
    const precision = precisionProp != null ? precisionProp : decimalPlaces;
    const update = (0, _react.useCallback)((next)=>{
        if (next === value) return;
        if (!isControlled) setValue(next.toString());
        onChangeProp == null || onChangeProp(next.toString(), parse(next));
    }, [
        onChangeProp,
        isControlled,
        value
    ]);
    const clamp = (0, _react.useCallback)((value2)=>{
        let nextValue = value2;
        if (keepWithinRange) nextValue = (0, _numberUtils.clampValue)(nextValue, min, max);
        return (0, _numberUtils.toPrecision)(nextValue, precision);
    }, [
        precision,
        keepWithinRange,
        max,
        min
    ]);
    const increment = (0, _react.useCallback)((step = stepProp)=>{
        let next;
        if (value === "") next = parse(step);
        else next = parse(value) + step;
        next = clamp(next);
        update(next);
    }, [
        clamp,
        stepProp,
        update,
        value
    ]);
    const decrement = (0, _react.useCallback)((step = stepProp)=>{
        let next;
        if (value === "") next = parse(-step);
        else next = parse(value) - step;
        next = clamp(next);
        update(next);
    }, [
        clamp,
        stepProp,
        update,
        value
    ]);
    const reset = (0, _react.useCallback)(()=>{
        var _a;
        let next;
        if (defaultValue == null) next = "";
        else next = (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : min;
        update(next);
    }, [
        defaultValue,
        precisionProp,
        stepProp,
        update,
        min
    ]);
    const castValue = (0, _react.useCallback)((value2)=>{
        var _a;
        const nextValue = (_a = cast(value2, stepProp, precision)) != null ? _a : min;
        update(nextValue);
    }, [
        precision,
        stepProp,
        update,
        min
    ]);
    const valueAsNumber = parse(value);
    const isOutOfRange = valueAsNumber > max || valueAsNumber < min;
    const isAtMax = valueAsNumber === max;
    const isAtMin = valueAsNumber === min;
    return {
        isOutOfRange,
        isAtMax,
        isAtMin,
        precision,
        value,
        valueAsNumber,
        update,
        reset,
        increment,
        decrement,
        clamp,
        cast: castValue,
        setValue
    };
}
function parse(value) {
    return parseFloat(value.toString().replace(/[^\w.-]+/g, ""));
}
function getDecimalPlaces(value, step) {
    return Math.max((0, _numberUtils.countDecimalPlaces)(step), (0, _numberUtils.countDecimalPlaces)(value));
}
function cast(value, step, precision) {
    const parsedValue = parse(value);
    if (Number.isNaN(parsedValue)) return void 0;
    const decimalPlaces = getDecimalPlaces(parsedValue, step);
    return (0, _numberUtils.toPrecision)(parsedValue, precision != null ? precision : decimalPlaces);
}

},{"@chakra-ui/react-use-callback-ref":"dbPJ9","@chakra-ui/number-utils":"kC5H9","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kC5H9":[function(require,module,exports) {
// src/index.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clampValue", ()=>clampValue);
parcelHelpers.export(exports, "countDecimalPlaces", ()=>countDecimalPlaces);
parcelHelpers.export(exports, "percentToValue", ()=>percentToValue);
parcelHelpers.export(exports, "roundValueToStep", ()=>roundValueToStep);
parcelHelpers.export(exports, "toPrecision", ()=>toPrecision);
parcelHelpers.export(exports, "valueToPercent", ()=>valueToPercent);
function toNumber(value) {
    const num = parseFloat(value);
    return typeof num !== "number" || Number.isNaN(num) ? 0 : num;
}
function toPrecision(value, precision) {
    let nextValue = toNumber(value);
    const scaleFactor = 10 ** (precision != null ? precision : 10);
    nextValue = Math.round(nextValue * scaleFactor) / scaleFactor;
    return precision ? nextValue.toFixed(precision) : nextValue.toString();
}
function countDecimalPlaces(value) {
    if (!Number.isFinite(value)) return 0;
    let e = 1;
    let p = 0;
    while(Math.round(value * e) / e !== value){
        e *= 10;
        p += 1;
    }
    return p;
}
function valueToPercent(value, min, max) {
    return (value - min) * 100 / (max - min);
}
function percentToValue(percent, min, max) {
    return (max - min) * percent + min;
}
function roundValueToStep(value, from, step) {
    const nextValue = Math.round((value - from) / step) * step + from;
    const precision = countDecimalPlaces(step);
    return toPrecision(nextValue, precision);
}
function clampValue(value, min, max) {
    if (value == null) return value;
    if (max < min) console.warn("clamp: max cannot be less than min");
    return Math.min(Math.max(value, min), max);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a5SfN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Editable", ()=>(0, _chunkROCN3PRTMjs.Editable));
parcelHelpers.export(exports, "EditableInput", ()=>(0, _chunk7XO4TBDNMjs.EditableInput));
parcelHelpers.export(exports, "EditablePreview", ()=>(0, _chunkUSE7AZZJMjs.EditablePreview));
parcelHelpers.export(exports, "EditableTextarea", ()=>(0, _chunkKE6CZM3PMjs.EditableTextarea));
parcelHelpers.export(exports, "useEditable", ()=>(0, _chunkTXN5ELBNMjs.useEditable));
parcelHelpers.export(exports, "useEditableContext", ()=>(0, _chunkWYY72ITEMjs.useEditableContext));
parcelHelpers.export(exports, "useEditableControls", ()=>(0, _chunkOKWGAP7RMjs.useEditableControls));
parcelHelpers.export(exports, "useEditableState", ()=>(0, _chunk47M7OZ3UMjs.useEditableState));
parcelHelpers.export(exports, "useEditableStyles", ()=>(0, _chunkWYY72ITEMjs.useEditableStyles));
var _chunk47M7OZ3UMjs = require("./chunk-47M7OZ3U.mjs");
var _chunk7XO4TBDNMjs = require("./chunk-7XO4TBDN.mjs");
var _chunkUSE7AZZJMjs = require("./chunk-USE7AZZJ.mjs");
var _chunkKE6CZM3PMjs = require("./chunk-KE6CZM3P.mjs");
var _chunkROCN3PRTMjs = require("./chunk-ROCN3PRT.mjs");
var _chunkTXN5ELBNMjs = require("./chunk-TXN5ELBN.mjs");
var _chunk6XCKNNTKMjs = require("./chunk-6XCKNNTK.mjs");
var _chunkOKWGAP7RMjs = require("./chunk-OKWGAP7R.mjs");
var _chunkWYY72ITEMjs = require("./chunk-WYY72ITE.mjs");
"use client";

},{"./chunk-47M7OZ3U.mjs":"80ULu","./chunk-7XO4TBDN.mjs":"4c9oS","./chunk-USE7AZZJ.mjs":"5850r","./chunk-KE6CZM3P.mjs":"12CCL","./chunk-ROCN3PRT.mjs":"ltRdz","./chunk-TXN5ELBN.mjs":"iMpMu","./chunk-6XCKNNTK.mjs":"isAAu","./chunk-OKWGAP7R.mjs":"iFmPO","./chunk-WYY72ITE.mjs":"h5rN0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80ULu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEditableState", ()=>useEditableState);
var _chunkWYY72ITEMjs = require("./chunk-WYY72ITE.mjs");
"use client";
// src/use-editable-state.tsx
function useEditableState() {
    const { isEditing, onSubmit, onCancel, onEdit, isDisabled } = (0, _chunkWYY72ITEMjs.useEditableContext)();
    return {
        isEditing,
        onSubmit,
        onCancel,
        onEdit,
        isDisabled
    };
}

},{"./chunk-WYY72ITE.mjs":"h5rN0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h5rN0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EditableStylesProvider", ()=>EditableStylesProvider);
parcelHelpers.export(exports, "useEditableStyles", ()=>useEditableStyles);
parcelHelpers.export(exports, "EditableProvider", ()=>EditableProvider);
parcelHelpers.export(exports, "useEditableContext", ()=>useEditableContext);
// src/editable-context.ts
var _reactContext = require("@chakra-ui/react-context");
"use client";
var [EditableStylesProvider, useEditableStyles] = (0, _reactContext.createContext)({
    name: `EditableStylesContext`,
    errorMessage: `useEditableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Editable />" `
});
var [EditableProvider, useEditableContext] = (0, _reactContext.createContext)({
    name: "EditableContext",
    errorMessage: "useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`"
});

},{"@chakra-ui/react-context":"7RVZP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4c9oS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EditableInput", ()=>EditableInput);
var _chunk6XCKNNTKMjs = require("./chunk-6XCKNNTK.mjs");
var _chunkWYY72ITEMjs = require("./chunk-WYY72ITE.mjs");
// src/editable-input.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var EditableInput = (0, _system.forwardRef)(function EditableInput2(props, ref) {
    const { getInputProps } = (0, _chunkWYY72ITEMjs.useEditableContext)();
    const styles = (0, _chunkWYY72ITEMjs.useEditableStyles)();
    const inputProps = getInputProps(props, ref);
    const _className = (0, _sharedUtils.cx)("chakra-editable__input", props.className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).input, {
        ...inputProps,
        __css: {
            outline: 0,
            ...(0, _chunk6XCKNNTKMjs.commonStyles),
            ...styles.input
        },
        className: _className
    });
});
EditableInput.displayName = "EditableInput";

},{"./chunk-6XCKNNTK.mjs":"isAAu","./chunk-WYY72ITE.mjs":"h5rN0","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"isAAu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "commonStyles", ()=>commonStyles);
"use client";
// src/shared.ts
var commonStyles = {
    fontSize: "inherit",
    fontWeight: "inherit",
    textAlign: "inherit",
    bg: "transparent"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5850r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EditablePreview", ()=>EditablePreview);
var _chunk6XCKNNTKMjs = require("./chunk-6XCKNNTK.mjs");
var _chunkWYY72ITEMjs = require("./chunk-WYY72ITE.mjs");
// src/editable-preview.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var EditablePreview = (0, _system.forwardRef)(function EditablePreview2(props, ref) {
    const { getPreviewProps } = (0, _chunkWYY72ITEMjs.useEditableContext)();
    const styles = (0, _chunkWYY72ITEMjs.useEditableStyles)();
    const previewProps = getPreviewProps(props, ref);
    const _className = (0, _sharedUtils.cx)("chakra-editable__preview", props.className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        ...previewProps,
        __css: {
            cursor: "text",
            display: "inline-block",
            ...(0, _chunk6XCKNNTKMjs.commonStyles),
            ...styles.preview
        },
        className: _className
    });
});
EditablePreview.displayName = "EditablePreview";

},{"./chunk-6XCKNNTK.mjs":"isAAu","./chunk-WYY72ITE.mjs":"h5rN0","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"12CCL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EditableTextarea", ()=>EditableTextarea);
var _chunk6XCKNNTKMjs = require("./chunk-6XCKNNTK.mjs");
var _chunkWYY72ITEMjs = require("./chunk-WYY72ITE.mjs");
// src/editable-textarea.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var EditableTextarea = (0, _system.forwardRef)(function EditableTextarea2(props, ref) {
    const { getTextareaProps } = (0, _chunkWYY72ITEMjs.useEditableContext)();
    const styles = (0, _chunkWYY72ITEMjs.useEditableStyles)();
    const textareaProps = getTextareaProps(props, ref);
    const _className = (0, _sharedUtils.cx)("chakra-editable__textarea", props.className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).textarea, {
        ...textareaProps,
        __css: {
            outline: 0,
            ...(0, _chunk6XCKNNTKMjs.commonStyles),
            ...styles.textarea
        },
        className: _className
    });
});
EditableTextarea.displayName = "EditableTextarea";

},{"./chunk-6XCKNNTK.mjs":"isAAu","./chunk-WYY72ITE.mjs":"h5rN0","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltRdz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Editable", ()=>Editable);
var _chunkTXN5ELBNMjs = require("./chunk-TXN5ELBN.mjs");
var _chunkWYY72ITEMjs = require("./chunk-WYY72ITE.mjs");
// src/editable.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Editable = (0, _system.forwardRef)(function Editable2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Editable", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    const { htmlProps, ...context } = (0, _chunkTXN5ELBNMjs.useEditable)(ownProps);
    const { isEditing, onSubmit, onCancel, onEdit } = context;
    const _className = (0, _sharedUtils.cx)("chakra-editable", props.className);
    const children = (0, _sharedUtils.runIfFn)(props.children, {
        isEditing,
        onSubmit,
        onCancel,
        onEdit
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkWYY72ITEMjs.EditableProvider), {
        value: context,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkWYY72ITEMjs.EditableStylesProvider), {
            value: styles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                ref,
                ...htmlProps,
                className: _className,
                children
            })
        })
    });
});
Editable.displayName = "Editable";

},{"./chunk-TXN5ELBN.mjs":"iMpMu","./chunk-WYY72ITE.mjs":"h5rN0","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iMpMu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEditable", ()=>useEditable);
// src/use-editable.ts
var _reactUseFocusOnPointerDown = require("@chakra-ui/react-use-focus-on-pointer-down");
var _reactUseSafeLayoutEffect = require("@chakra-ui/react-use-safe-layout-effect");
var _reactUseUpdateEffect = require("@chakra-ui/react-use-update-effect");
var _reactUseControllableState = require("@chakra-ui/react-use-controllable-state");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
"use client";
function contains(parent, child) {
    if (!parent) return false;
    return parent === child || parent.contains(child);
}
function useEditable(props = {}) {
    const { onChange: onChangeProp, onCancel: onCancelProp, onSubmit: onSubmitProp, onBlur: onBlurProp, value: valueProp, isDisabled, defaultValue, startWithEditView, isPreviewFocusable = true, submitOnBlur = true, selectAllOnFocus = true, placeholder, onEdit: onEditCallback, finalFocusRef, ...htmlProps } = props;
    const onEditProp = (0, _reactUseCallbackRef.useCallbackRef)(onEditCallback);
    const defaultIsEditing = Boolean(startWithEditView && !isDisabled);
    const [isEditing, setIsEditing] = (0, _react.useState)(defaultIsEditing);
    const [value, setValue] = (0, _reactUseControllableState.useControllableState)({
        defaultValue: defaultValue || "",
        value: valueProp,
        onChange: onChangeProp
    });
    const [prevValue, setPrevValue] = (0, _react.useState)(value);
    const inputRef = (0, _react.useRef)(null);
    const previewRef = (0, _react.useRef)(null);
    const editButtonRef = (0, _react.useRef)(null);
    const cancelButtonRef = (0, _react.useRef)(null);
    const submitButtonRef = (0, _react.useRef)(null);
    (0, _reactUseFocusOnPointerDown.useFocusOnPointerDown)({
        ref: inputRef,
        enabled: isEditing,
        elements: [
            cancelButtonRef,
            submitButtonRef
        ]
    });
    const isInteractive = !isEditing && !isDisabled;
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        var _a, _b;
        if (isEditing) {
            (_a = inputRef.current) == null || _a.focus();
            if (selectAllOnFocus) (_b = inputRef.current) == null || _b.select();
        }
    }, []);
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        var _a, _b, _c, _d;
        if (!isEditing) {
            if (finalFocusRef) (_a = finalFocusRef.current) == null || _a.focus();
            else (_b = editButtonRef.current) == null || _b.focus();
            return;
        }
        (_c = inputRef.current) == null || _c.focus();
        if (selectAllOnFocus) (_d = inputRef.current) == null || _d.select();
        onEditProp == null || onEditProp();
    }, [
        isEditing,
        onEditProp,
        selectAllOnFocus
    ]);
    const onEdit = (0, _react.useCallback)(()=>{
        if (isInteractive) setIsEditing(true);
    }, [
        isInteractive
    ]);
    const onUpdatePrevValue = (0, _react.useCallback)(()=>{
        setPrevValue(value);
    }, [
        value
    ]);
    const onCancel = (0, _react.useCallback)(()=>{
        setIsEditing(false);
        setValue(prevValue);
        onCancelProp == null || onCancelProp(prevValue);
        onBlurProp == null || onBlurProp(prevValue);
    }, [
        onCancelProp,
        onBlurProp,
        setValue,
        prevValue
    ]);
    const onSubmit = (0, _react.useCallback)(()=>{
        setIsEditing(false);
        setPrevValue(value);
        onSubmitProp == null || onSubmitProp(value);
        onBlurProp == null || onBlurProp(prevValue);
    }, [
        value,
        onSubmitProp,
        onBlurProp,
        prevValue
    ]);
    (0, _react.useEffect)(()=>{
        if (isEditing) return;
        const inputEl = inputRef.current;
        if ((inputEl == null ? void 0 : inputEl.ownerDocument.activeElement) === inputEl) inputEl == null || inputEl.blur();
    }, [
        isEditing
    ]);
    const onChange = (0, _react.useCallback)((event)=>{
        setValue(event.currentTarget.value);
    }, [
        setValue
    ]);
    const onKeyDown = (0, _react.useCallback)((event)=>{
        const eventKey = event.key;
        const keyMap = {
            Escape: onCancel,
            Enter: (event2)=>{
                if (!event2.shiftKey && !event2.metaKey) onSubmit();
            }
        };
        const action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            action(event);
        }
    }, [
        onCancel,
        onSubmit
    ]);
    const onKeyDownWithoutSubmit = (0, _react.useCallback)((event)=>{
        const eventKey = event.key;
        const keyMap = {
            Escape: onCancel
        };
        const action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            action(event);
        }
    }, [
        onCancel
    ]);
    const isValueEmpty = value.length === 0;
    const onBlur = (0, _react.useCallback)((event)=>{
        var _a;
        if (!isEditing) return;
        const doc = event.currentTarget.ownerDocument;
        const relatedTarget = (_a = event.relatedTarget) != null ? _a : doc.activeElement;
        const targetIsCancel = contains(cancelButtonRef.current, relatedTarget);
        const targetIsSubmit = contains(submitButtonRef.current, relatedTarget);
        const isValidBlur = !targetIsCancel && !targetIsSubmit;
        if (isValidBlur) {
            if (submitOnBlur) onSubmit();
            else onCancel();
        }
    }, [
        submitOnBlur,
        onSubmit,
        onCancel,
        isEditing
    ]);
    const getPreviewProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        const tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;
        return {
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, previewRef),
            children: isValueEmpty ? placeholder : value,
            hidden: isEditing,
            "aria-disabled": (0, _sharedUtils.ariaAttr)(isDisabled),
            tabIndex,
            onFocus: (0, _sharedUtils.callAllHandlers)(props2.onFocus, onEdit, onUpdatePrevValue)
        };
    }, [
        isDisabled,
        isEditing,
        isInteractive,
        isPreviewFocusable,
        isValueEmpty,
        onEdit,
        onUpdatePrevValue,
        placeholder,
        value
    ]);
    const getInputProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            hidden: !isEditing,
            placeholder,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, inputRef),
            disabled: isDisabled,
            "aria-disabled": (0, _sharedUtils.ariaAttr)(isDisabled),
            value,
            onBlur: (0, _sharedUtils.callAllHandlers)(props2.onBlur, onBlur),
            onChange: (0, _sharedUtils.callAllHandlers)(props2.onChange, onChange),
            onKeyDown: (0, _sharedUtils.callAllHandlers)(props2.onKeyDown, onKeyDown),
            onFocus: (0, _sharedUtils.callAllHandlers)(props2.onFocus, onUpdatePrevValue)
        }), [
        isDisabled,
        isEditing,
        onBlur,
        onChange,
        onKeyDown,
        onUpdatePrevValue,
        placeholder,
        value
    ]);
    const getTextareaProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            hidden: !isEditing,
            placeholder,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, inputRef),
            disabled: isDisabled,
            "aria-disabled": (0, _sharedUtils.ariaAttr)(isDisabled),
            value,
            onBlur: (0, _sharedUtils.callAllHandlers)(props2.onBlur, onBlur),
            onChange: (0, _sharedUtils.callAllHandlers)(props2.onChange, onChange),
            onKeyDown: (0, _sharedUtils.callAllHandlers)(props2.onKeyDown, onKeyDownWithoutSubmit),
            onFocus: (0, _sharedUtils.callAllHandlers)(props2.onFocus, onUpdatePrevValue)
        }), [
        isDisabled,
        isEditing,
        onBlur,
        onChange,
        onKeyDownWithoutSubmit,
        onUpdatePrevValue,
        placeholder,
        value
    ]);
    const getEditButtonProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            "aria-label": "Edit",
            ...props2,
            type: "button",
            onClick: (0, _sharedUtils.callAllHandlers)(props2.onClick, onEdit),
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, editButtonRef),
            disabled: isDisabled
        }), [
        onEdit,
        isDisabled
    ]);
    const getSubmitButtonProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            "aria-label": "Submit",
            ref: (0, _reactUseMergeRefs.mergeRefs)(submitButtonRef, ref),
            type: "button",
            onClick: (0, _sharedUtils.callAllHandlers)(props2.onClick, onSubmit),
            disabled: isDisabled
        }), [
        onSubmit,
        isDisabled
    ]);
    const getCancelButtonProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            "aria-label": "Cancel",
            id: "cancel",
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(cancelButtonRef, ref),
            type: "button",
            onClick: (0, _sharedUtils.callAllHandlers)(props2.onClick, onCancel),
            disabled: isDisabled
        }), [
        onCancel,
        isDisabled
    ]);
    return {
        isEditing,
        isDisabled,
        isValueEmpty,
        value,
        onEdit,
        onCancel,
        onSubmit,
        getPreviewProps,
        getInputProps,
        getTextareaProps,
        getEditButtonProps,
        getSubmitButtonProps,
        getCancelButtonProps,
        htmlProps
    };
}

},{"@chakra-ui/react-use-focus-on-pointer-down":"gZxmY","@chakra-ui/react-use-safe-layout-effect":"eJbER","@chakra-ui/react-use-update-effect":"kfB4Y","@chakra-ui/react-use-controllable-state":"ghlge","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/react-use-callback-ref":"dbPJ9","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZxmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useFocusOnPointerDown", ()=>useFocusOnPointerDown);
// src/index.ts
var _reactUseEventListener = require("@chakra-ui/react-use-event-listener");
"use client";
function isRefObject(val) {
    return "current" in val;
}
var isDom = ()=>typeof window !== "undefined";
function getPlatform() {
    var _a;
    const agent = navigator.userAgentData;
    return (_a = agent == null ? void 0 : agent.platform) != null ? _a : navigator.platform;
}
var vn = (v)=>isDom() && v.test(navigator.vendor);
var pt = (v)=>isDom() && v.test(getPlatform());
var isApple = ()=>pt(/mac|iphone|ipad|ipod/i);
var isSafari = ()=>isApple() && vn(/apple/i);
function useFocusOnPointerDown(props) {
    const { ref, elements, enabled } = props;
    const doc = ()=>{
        var _a, _b;
        return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;
    };
    (0, _reactUseEventListener.useEventListener)(doc, "pointerdown", (event)=>{
        if (!isSafari() || !enabled) return;
        const target = event.target;
        const els = elements != null ? elements : [
            ref
        ];
        const isValidTarget = els.some((elementOrRef)=>{
            const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;
            return (el == null ? void 0 : el.contains(target)) || el === target;
        });
        if (doc().activeElement !== target && isValidTarget) {
            event.preventDefault();
            target.focus();
        }
    });
}

},{"@chakra-ui/react-use-event-listener":"lQUDe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lQUDe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEventListener", ()=>useEventListener);
// src/index.ts
var _react = require("react");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
"use client";
function useEventListener(target, event, handler, options) {
    const listener = (0, _reactUseCallbackRef.useCallbackRef)(handler);
    (0, _react.useEffect)(()=>{
        const node = typeof target === "function" ? target() : target != null ? target : document;
        if (!handler || !node) return;
        node.addEventListener(event, listener, options);
        return ()=>{
            node.removeEventListener(event, listener, options);
        };
    }, [
        event,
        target,
        options,
        listener,
        handler
    ]);
    return ()=>{
        const node = typeof target === "function" ? target() : target != null ? target : document;
        node == null || node.removeEventListener(event, listener, options);
    };
}

},{"react":"21dqq","@chakra-ui/react-use-callback-ref":"dbPJ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iFmPO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEditableControls", ()=>useEditableControls);
var _chunkWYY72ITEMjs = require("./chunk-WYY72ITE.mjs");
"use client";
// src/use-editable-controls.tsx
function useEditableControls() {
    const { isEditing, getEditButtonProps, getCancelButtonProps, getSubmitButtonProps } = (0, _chunkWYY72ITEMjs.useEditableContext)();
    return {
        isEditing,
        getEditButtonProps,
        getCancelButtonProps,
        getSubmitButtonProps
    };
}

},{"./chunk-WYY72ITE.mjs":"h5rN0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cRbMA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FocusLock", ()=>(0, _chunkUU5OHSNFMjs.FocusLock));
var _chunkUU5OHSNFMjs = require("./chunk-UU5OHSNF.mjs");
"use client";

},{"./chunk-UU5OHSNF.mjs":"a1ljn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a1ljn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FocusLock", ()=>FocusLock);
parcelHelpers.export(exports, "focus_lock_default", ()=>focus_lock_default);
// src/focus-lock.tsx
var _reactFocusLock = require("react-focus-lock");
var _reactFocusLockDefault = parcelHelpers.interopDefault(_reactFocusLock);
var _domUtils = require("@chakra-ui/dom-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var _a;
var FocusTrap = (_a = (0, _reactFocusLockDefault.default).default) != null ? _a : (0, _reactFocusLockDefault.default);
var FocusLock = (props)=>{
    const { initialFocusRef, finalFocusRef, contentRef, restoreFocus, children, isDisabled, autoFocus, persistentFocus, lockFocusAcrossFrames } = props;
    const onActivation = (0, _react.useCallback)(()=>{
        if (initialFocusRef == null ? void 0 : initialFocusRef.current) initialFocusRef.current.focus();
        else if (contentRef == null ? void 0 : contentRef.current) {
            const focusables = (0, _domUtils.getAllFocusable)(contentRef.current);
            if (focusables.length === 0) requestAnimationFrame(()=>{
                var _a2;
                (_a2 = contentRef.current) == null || _a2.focus();
            });
        }
    }, [
        initialFocusRef,
        contentRef
    ]);
    const onDeactivation = (0, _react.useCallback)(()=>{
        var _a2;
        (_a2 = finalFocusRef == null ? void 0 : finalFocusRef.current) == null || _a2.focus();
    }, [
        finalFocusRef
    ]);
    const returnFocus = restoreFocus && !finalFocusRef;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(FocusTrap, {
        crossFrame: lockFocusAcrossFrames,
        persistentFocus,
        autoFocus,
        disabled: isDisabled,
        onActivation,
        onDeactivation,
        returnFocus,
        children
    });
};
FocusLock.displayName = "FocusLock";
var focus_lock_default = FocusLock;

},{"react-focus-lock":"bNxnt","@chakra-ui/dom-utils":"cWgfO","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bNxnt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _combination = require("./Combination");
var _combinationDefault = parcelHelpers.interopDefault(_combination);
var _ui = require("./UI");
parcelHelpers.exportAll(_ui, exports);
exports.default = (0, _combinationDefault.default);

},{"./Combination":"4pAOJ","./UI":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4pAOJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _lock = require("./Lock");
var _lockDefault = parcelHelpers.interopDefault(_lock);
var _trap = require("./Trap");
var _trapDefault = parcelHelpers.interopDefault(_trap);
/* that would be a BREAKING CHANGE!
// delaying sidecar execution till the first usage
const RequireSideCar = (props) => {
  // eslint-disable-next-line global-require
  const SideCar = require('./Trap').default;
  return <SideCar {...props} />;
};
*/ var FocusLockCombination = /*#__PURE__*/ _react.forwardRef(function FocusLockUICombination(props, ref) {
    return /*#__PURE__*/ _react.createElement((0, _lockDefault.default), (0, _extendsDefault.default)({
        sideCar: (0, _trapDefault.default),
        ref: ref
    }, props));
});
var _ref = (0, _lockDefault.default).propTypes || {}, sideCar = _ref.sideCar, propTypes = (0, _objectWithoutPropertiesLooseDefault.default)(_ref, [
    "sideCar"
]);
FocusLockCombination.propTypes = propTypes;
exports.default = FocusLockCombination;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","./Lock":"5ChtI","./Trap":"3RrHK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"adHgr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_objectWithoutPropertiesLoose);
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ChtI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _constants = require("focus-lock/constants");
var _useCallbackRef = require("use-callback-ref");
var _focusGuard = require("./FocusGuard");
var _medium = require("./medium");
var emptyArray = [];
var FocusLock = /*#__PURE__*/ _react.forwardRef(function FocusLockUI(props, parentRef) {
    var _extends2;
    var _React$useState = _react.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
    var observed = _react.useRef();
    var isActive = _react.useRef(false);
    var originalFocusedElement = _react.useRef(null);
    var children = props.children, disabled = props.disabled, noFocusGuards = props.noFocusGuards, persistentFocus = props.persistentFocus, crossFrame = props.crossFrame, autoFocus = props.autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, hasPositiveIndices = props.hasPositiveIndices, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar = props.sideCar, shouldReturnFocus = props.returnFocus, focusOptions = props.focusOptions, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
    var _React$useState2 = _react.useState({}), id = _React$useState2[0]; // SIDE EFFECT CALLBACKS
    var onActivation = _react.useCallback(function() {
        originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
        if (observed.current && onActivationCallback) onActivationCallback(observed.current);
        isActive.current = true;
    }, [
        onActivationCallback
    ]);
    var onDeactivation = _react.useCallback(function() {
        isActive.current = false;
        if (onDeactivationCallback) onDeactivationCallback(observed.current);
    }, [
        onDeactivationCallback
    ]);
    (0, _react.useEffect)(function() {
        if (!disabled) // cleanup return focus on trap deactivation
        // sideEffect/returnFocus should happen by this time
        originalFocusedElement.current = null;
    }, []);
    var returnFocus = _react.useCallback(function(allowDefer) {
        var returnFocusTo = originalFocusedElement.current;
        if (returnFocusTo && returnFocusTo.focus) {
            var howToReturnFocus = typeof shouldReturnFocus === "function" ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
            if (howToReturnFocus) {
                var returnFocusOptions = typeof howToReturnFocus === "object" ? howToReturnFocus : undefined;
                originalFocusedElement.current = null;
                if (allowDefer) // React might return focus after update
                // it's safer to defer the action
                Promise.resolve().then(function() {
                    return returnFocusTo.focus(returnFocusOptions);
                });
                else returnFocusTo.focus(returnFocusOptions);
            }
        }
    }, [
        shouldReturnFocus
    ]); // MEDIUM CALLBACKS
    var onFocus = _react.useCallback(function(event) {
        if (isActive.current) (0, _medium.mediumFocus).useMedium(event);
    }, []);
    var onBlur = (0, _medium.mediumBlur).useMedium; // REF PROPAGATION
    // not using real refs due to race conditions
    var setObserveNode = _react.useCallback(function(newObserved) {
        if (observed.current !== newObserved) {
            observed.current = newObserved;
            setObserved(newObserved);
        }
    }, []);
    if (typeof allowTextSelection !== "undefined") // eslint-disable-next-line no-console
    console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
    _react.useEffect(function() {
        // report incorrect integration - https://github.com/theKashey/react-focus-lock/issues/123
        if (!observed.current && typeof Container !== "string") // eslint-disable-next-line no-console
        console.error("FocusLock: could not obtain ref to internal node");
    }, []);
    var lockProps = (0, _extendsDefault.default)((_extends2 = {}, _extends2[_constants.FOCUS_DISABLED] = disabled && "disabled", _extends2[_constants.FOCUS_GROUP] = group, _extends2), containerProps);
    var hasLeadingGuards = noFocusGuards !== true;
    var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
    var mergedRef = (0, _useCallbackRef.useMergeRefs)([
        parentRef,
        setObserveNode
    ]);
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, hasLeadingGuards && [
        /*#__PURE__*/ // nearest focus guard
        _react.createElement("div", {
            key: "guard-first",
            "data-focus-guard": true,
            tabIndex: disabled ? -1 : 0,
            style: (0, _focusGuard.hiddenGuard)
        }),
        hasPositiveIndices ? /*#__PURE__*/ _react.createElement("div", {
            key: "guard-nearest",
            "data-focus-guard": true,
            tabIndex: disabled ? -1 : 1,
            style: (0, _focusGuard.hiddenGuard)
        }) : null
    ], !disabled && /*#__PURE__*/ _react.createElement(SideCar, {
        id: id,
        sideCar: (0, _medium.mediumSidecar),
        observed: realObserved,
        disabled: disabled,
        persistentFocus: persistentFocus,
        crossFrame: crossFrame,
        autoFocus: autoFocus,
        whiteList: whiteList,
        shards: shards,
        onActivation: onActivation,
        onDeactivation: onDeactivation,
        returnFocus: returnFocus,
        focusOptions: focusOptions
    }), /*#__PURE__*/ _react.createElement(Container, (0, _extendsDefault.default)({
        ref: mergedRef
    }, lockProps, {
        className: className,
        onBlur: onBlur,
        onFocus: onFocus
    }), children), hasTailingGuards && /*#__PURE__*/ _react.createElement("div", {
        "data-focus-guard": true,
        tabIndex: disabled ? -1 : 0,
        style: (0, _focusGuard.hiddenGuard)
    }));
});
FocusLock.propTypes = {
    children: (0, _propTypes.node),
    disabled: (0, _propTypes.bool),
    returnFocus: (0, _propTypes.oneOfType)([
        (0, _propTypes.bool),
        (0, _propTypes.object),
        (0, _propTypes.func)
    ]),
    focusOptions: (0, _propTypes.object),
    noFocusGuards: (0, _propTypes.bool),
    hasPositiveIndices: (0, _propTypes.bool),
    allowTextSelection: (0, _propTypes.bool),
    autoFocus: (0, _propTypes.bool),
    persistentFocus: (0, _propTypes.bool),
    crossFrame: (0, _propTypes.bool),
    group: (0, _propTypes.string),
    className: (0, _propTypes.string),
    whiteList: (0, _propTypes.func),
    shards: (0, _propTypes.arrayOf)((0, _propTypes.any)),
    as: (0, _propTypes.oneOfType)([
        (0, _propTypes.string),
        (0, _propTypes.func),
        (0, _propTypes.object)
    ]),
    lockProps: (0, _propTypes.object),
    onActivation: (0, _propTypes.func),
    onDeactivation: (0, _propTypes.func),
    sideCar: (0, _propTypes.any).isRequired
};
FocusLock.defaultProps = {
    children: undefined,
    disabled: false,
    returnFocus: false,
    focusOptions: undefined,
    noFocusGuards: false,
    autoFocus: true,
    persistentFocus: false,
    crossFrame: true,
    hasPositiveIndices: undefined,
    allowTextSelection: undefined,
    group: undefined,
    className: undefined,
    whiteList: undefined,
    shards: undefined,
    as: "div",
    lockProps: {},
    onActivation: undefined,
    onDeactivation: undefined
};
exports.default = FocusLock;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","focus-lock/constants":"lGd0U","use-callback-ref":"J09ED","./FocusGuard":"2WVW8","./medium":"7lfII","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7wKI2":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var ReactIs = require("96e34ae03f5a2631");
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require("cb216452e2171041")(ReactIs.isElement, throwOnDirectAccess);

},{"96e34ae03f5a2631":"7EuwB","cb216452e2171041":"bBUgD"}],"bBUgD":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
var ReactIs = require("c437388b089702c3");
var assign = require("c067a60101d8520c");
var ReactPropTypesSecret = require("74a0f89a70b9f3c2");
var has = require("18441b11647bc78");
var checkPropTypes = require("bec3f6ff89f0b072");
var printWarning = function() {};
printWarning = function(text) {
    var message = "Warning: " + text;
    if (typeof console !== "undefined") console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {}
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator"; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = "<<anonymous>>";
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = "Invariant Violation";
                    throw err;
                } else if (typeof console !== "undefined") {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ":" + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated " + "and will throw in the standalone `prop-types` package. " + "You may be seeing this warning due to a third-party PropTypes " + "library. See https://fb.me/react-warning-dont-call-proptypes " + "for details.");
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                    return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), {
                    expectedType: expectedType
                });
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. " + "A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
                else printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === "symbol") return String(value);
                return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
            return emptyFunctionThatReturnsNull;
        }
        for(var i = 0; i < arrayOfTypeCheckers.length; i++){
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for(var i = 0; i < arrayOfTypeCheckers.length; i++){
                var checker = arrayOfTypeCheckers[i];
                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                if (checkerResult == null) return null;
                if (checkerResult.data && has(checkerResult.data, "expectedType")) expectedTypes.push(checkerResult.data.expectedType);
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (typeof checker !== "function") return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            // We need to check all keys in case some are required but missing from props.
            var allKeys = assign({}, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (has(shapeTypes, key) && typeof checker !== "function") return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                if (!checker) return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`." + "\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
                var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case "number":
            case "string":
            case "undefined":
                return true;
            case "boolean":
                return !propValue;
            case "object":
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === "symbol") return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue["@@toStringTag"] === "Symbol") return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === "function" && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return "array";
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return "object";
        if (isSymbol(propType, propValue)) return "symbol";
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) return "" + propValue;
        var propType = getPropType(propValue);
        if (propType === "object") {
            if (propValue instanceof Date) return "date";
            else if (propValue instanceof RegExp) return "regexp";
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case "array":
            case "object":
                return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
                return "a " + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"c437388b089702c3":"7EuwB","c067a60101d8520c":"7OXxh","74a0f89a70b9f3c2":"jZTZJ","18441b11647bc78":"fqKuf","bec3f6ff89f0b072":"5VwyJ"}],"7OXxh":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ "use strict";
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for(var i = 0; i < 10; i++)test2["_" + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join("") !== "0123456789") return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"jZTZJ":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
module.exports = ReactPropTypesSecret;

},{}],"fqKuf":[function(require,module,exports) {
module.exports = Function.call.bind(Object.prototype.hasOwnProperty);

},{}],"5VwyJ":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
var printWarning = function() {};
var ReactPropTypesSecret = require("24ba1e58d167a82c");
var loggedTypeFailures = {};
var has = require("898bc82f39d83f7c");
printWarning = function(text) {
    var message = "Warning: " + text;
    if (typeof console !== "undefined") console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {}
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker " + "function must return `null` or an `Error` but returned a " + typeof error + ". " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).");
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : "";
            printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {};
};
module.exports = checkPropTypes;

},{"24ba1e58d167a82c":"jZTZJ","898bc82f39d83f7c":"fqKuf"}],"lGd0U":[function(require,module,exports) {
/**
 * defines a focus group
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FOCUS_GROUP", ()=>FOCUS_GROUP);
parcelHelpers.export(exports, "FOCUS_DISABLED", ()=>FOCUS_DISABLED);
parcelHelpers.export(exports, "FOCUS_ALLOW", ()=>FOCUS_ALLOW);
parcelHelpers.export(exports, "FOCUS_AUTO", ()=>FOCUS_AUTO);
parcelHelpers.export(exports, "FOCUS_NO_AUTOFOCUS", ()=>FOCUS_NO_AUTOFOCUS);
var FOCUS_GROUP = "data-focus-lock";
var FOCUS_DISABLED = "data-focus-lock-disabled";
var FOCUS_ALLOW = "data-no-focus-lock";
var FOCUS_AUTO = "data-autofocus-inside";
var FOCUS_NO_AUTOFOCUS = "data-no-autofocus";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"J09ED":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignRef", ()=>(0, _assignRef.assignRef));
// callback ref
parcelHelpers.export(exports, "useCallbackRef", ()=>(0, _useRef.useCallbackRef));
parcelHelpers.export(exports, "createCallbackRef", ()=>(0, _createRef.createCallbackRef));
// merge ref
parcelHelpers.export(exports, "mergeRefs", ()=>(0, _mergeRef.mergeRefs));
parcelHelpers.export(exports, "useMergeRefs", ()=>(0, _useMergeRef.useMergeRefs));
// transform ref
parcelHelpers.export(exports, "useTransformRef", ()=>(0, _useTransformRef.useTransformRef));
parcelHelpers.export(exports, "transformRef", ()=>(0, _transformRef.transformRef));
// refToCallback
parcelHelpers.export(exports, "refToCallback", ()=>(0, _refToCallback.refToCallback));
parcelHelpers.export(exports, "useRefToCallback", ()=>(0, _refToCallback.useRefToCallback));
var _assignRef = require("./assignRef");
var _useRef = require("./useRef");
var _createRef = require("./createRef");
var _mergeRef = require("./mergeRef");
var _useMergeRef = require("./useMergeRef");
var _useTransformRef = require("./useTransformRef");
var _transformRef = require("./transformRef");
var _refToCallback = require("./refToCallback");

},{"./assignRef":false,"./useRef":false,"./createRef":false,"./mergeRef":false,"./useMergeRef":"kRk49","./useTransformRef":false,"./transformRef":false,"./refToCallback":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jYvzu":[function(require,module,exports) {
/**
 * Assigns a value for a given ref, no matter of the ref format
 * @param {RefObject} ref - a callback function or ref object
 * @param value - a new value
 *
 * @see https://github.com/theKashey/use-callback-ref#assignref
 * @example
 * const refObject = useRef();
 * const refFn = (ref) => {....}
 *
 * assignRef(refObject, "refValue");
 * assignRef(refFn, "refValue");
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignRef", ()=>assignRef);
function assignRef(ref, value) {
    if (typeof ref === "function") ref(value);
    else if (ref) ref.current = value;
    return ref;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dYsoU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * creates a MutableRef with ref change callback
 * @param initialValue - initial ref value
 * @param {Function} callback - a callback to run when value changes
 *
 * @example
 * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);
 * ref.current = 1;
 * // prints 0 -> 1
 *
 * @see https://reactjs.org/docs/hooks-reference.html#useref
 * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref
 * @returns {MutableRefObject}
 */ parcelHelpers.export(exports, "useCallbackRef", ()=>useCallbackRef);
var _react = require("react");
function useCallbackRef(initialValue, callback) {
    var ref = (0, _react.useState)(function() {
        return {
            // value
            value: initialValue,
            // last callback
            callback: callback,
            // "memoized" public interface
            facade: {
                get current () {
                    return ref.value;
                },
                set current (value){
                    var last = ref.value;
                    if (last !== value) {
                        ref.value = value;
                        ref.callback(value, last);
                    }
                }
            }
        };
    })[0];
    // update callback
    ref.callback = callback;
    return ref.facade;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kRk49":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Merges two or more refs together providing a single interface to set their value
 * @param {RefObject|Ref} refs
 * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}
 *
 * @see {@link mergeRefs} a version without buit-in memoization
 * @see https://github.com/theKashey/use-callback-ref#usemergerefs
 * @example
 * const Component = React.forwardRef((props, ref) => {
 *   const ownRef = useRef();
 *   const domRef = useMergeRefs([ref, ownRef]); // 👈 merge together
 *   return <div ref={domRef}>...</div>
 * }
 */ parcelHelpers.export(exports, "useMergeRefs", ()=>useMergeRefs);
var _assignRef = require("./assignRef");
var _useRef = require("./useRef");
function useMergeRefs(refs, defaultValue) {
    return (0, _useRef.useCallbackRef)(defaultValue || null, function(newValue) {
        return refs.forEach(function(ref) {
            return (0, _assignRef.assignRef)(ref, newValue);
        });
    });
}

},{"./assignRef":"jYvzu","./useRef":"dYsoU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2WVW8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hiddenGuard", ()=>hiddenGuard);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var hiddenGuard = {
    width: "1px",
    height: "0px",
    padding: 0,
    overflow: "hidden",
    position: "fixed",
    top: "1px",
    left: "1px"
};
var InFocusGuard = function InFocusGuard(_ref) {
    var children = _ref.children;
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement("div", {
        key: "guard-first",
        "data-focus-guard": true,
        "data-focus-auto-guard": true,
        style: hiddenGuard
    }), children, children && /*#__PURE__*/ _react.createElement("div", {
        key: "guard-last",
        "data-focus-guard": true,
        "data-focus-auto-guard": true,
        style: hiddenGuard
    }));
};
InFocusGuard.propTypes = {
    children: (0, _propTypesDefault.default).node
};
InFocusGuard.defaultProps = {
    children: null
};
exports.default = InFocusGuard;

},{"react":"21dqq","prop-types":"7wKI2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7lfII":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mediumFocus", ()=>mediumFocus);
parcelHelpers.export(exports, "mediumBlur", ()=>mediumBlur);
parcelHelpers.export(exports, "mediumEffect", ()=>mediumEffect);
parcelHelpers.export(exports, "mediumSidecar", ()=>mediumSidecar);
var _useSidecar = require("use-sidecar");
var mediumFocus = (0, _useSidecar.createMedium)({}, function(_ref) {
    var target = _ref.target, currentTarget = _ref.currentTarget;
    return {
        target: target,
        currentTarget: currentTarget
    };
});
var mediumBlur = (0, _useSidecar.createMedium)();
var mediumEffect = (0, _useSidecar.createMedium)();
var mediumSidecar = (0, _useSidecar.createSidecarMedium)({
    async: true // focus-lock sidecar is not required on the server
});

},{"use-sidecar":"lj6LD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lj6LD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sidecar", ()=>(0, _hoc.sidecar));
parcelHelpers.export(exports, "useSidecar", ()=>(0, _hook.useSidecar));
parcelHelpers.export(exports, "setConfig", ()=>(0, _config.setConfig));
parcelHelpers.export(exports, "createMedium", ()=>(0, _medium.createMedium));
parcelHelpers.export(exports, "createSidecarMedium", ()=>(0, _medium.createSidecarMedium));
parcelHelpers.export(exports, "renderCar", ()=>(0, _renderProp.renderCar));
parcelHelpers.export(exports, "exportSidecar", ()=>(0, _exports.exportSidecar));
var _hoc = require("./hoc");
var _hook = require("./hook");
var _config = require("./config");
var _medium = require("./medium");
var _renderProp = require("./renderProp");
var _exports = require("./exports");

},{"./hoc":false,"./hook":false,"./config":false,"./medium":"1OFDj","./renderProp":false,"./exports":"36bfj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1OFDj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMedium", ()=>createMedium);
// eslint-disable-next-line @typescript-eslint/ban-types
parcelHelpers.export(exports, "createSidecarMedium", ()=>createSidecarMedium);
var _tslib = require("tslib");
function ItoI(a) {
    return a;
}
function innerCreateMedium(defaults, middleware) {
    if (middleware === void 0) middleware = ItoI;
    var buffer = [];
    var assigned = false;
    var medium = {
        read: function() {
            if (assigned) throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
            if (buffer.length) return buffer[buffer.length - 1];
            return defaults;
        },
        useMedium: function(data) {
            var item = middleware(data, assigned);
            buffer.push(item);
            return function() {
                buffer = buffer.filter(function(x) {
                    return x !== item;
                });
            };
        },
        assignSyncMedium: function(cb) {
            assigned = true;
            while(buffer.length){
                var cbs = buffer;
                buffer = [];
                cbs.forEach(cb);
            }
            buffer = {
                push: function(x) {
                    return cb(x);
                },
                filter: function() {
                    return buffer;
                }
            };
        },
        assignMedium: function(cb) {
            assigned = true;
            var pendingQueue = [];
            if (buffer.length) {
                var cbs = buffer;
                buffer = [];
                cbs.forEach(cb);
                pendingQueue = buffer;
            }
            var executeQueue = function() {
                var cbs = pendingQueue;
                pendingQueue = [];
                cbs.forEach(cb);
            };
            var cycle = function() {
                return Promise.resolve().then(executeQueue);
            };
            cycle();
            buffer = {
                push: function(x) {
                    pendingQueue.push(x);
                    cycle();
                },
                filter: function(filter) {
                    pendingQueue = pendingQueue.filter(filter);
                    return buffer;
                }
            };
        }
    };
    return medium;
}
function createMedium(defaults, middleware) {
    if (middleware === void 0) middleware = ItoI;
    return innerCreateMedium(defaults, middleware);
}
function createSidecarMedium(options) {
    if (options === void 0) options = {};
    var medium = innerCreateMedium(null);
    medium.options = (0, _tslib.__assign)({
        async: true,
        ssr: false
    }, options);
    return medium;
}

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__esDecorate", ()=>__esDecorate);
parcelHelpers.export(exports, "__runInitializers", ()=>__runInitializers);
parcelHelpers.export(exports, "__propKey", ()=>__propKey);
parcelHelpers.export(exports, "__setFunctionName", ()=>__setFunctionName);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
parcelHelpers.export(exports, "__classPrivateFieldIn", ()=>__classPrivateFieldIn);
parcelHelpers.export(exports, "__addDisposableResource", ()=>__addDisposableResource);
parcelHelpers.export(exports, "__disposeResources", ()=>__disposeResources);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
    function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    function next() {
        while(env.stack.length){
            var rec = env.stack.pop();
            try {
                var result = rec.dispose && rec.dispose.call(rec.value);
                if (rec.async) return Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                });
            } catch (e) {
                fail(e);
            }
        }
        if (env.hasError) throw env.error;
    }
    return next();
}
exports.default = {
    __extends: __extends,
    __assign: __assign,
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __addDisposableResource: __addDisposableResource,
    __disposeResources: __disposeResources
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"36bfj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "exportSidecar", ()=>exportSidecar);
var _tslib = require("tslib");
var _react = require("react");
var SideCar = function(_a) {
    var sideCar = _a.sideCar, rest = (0, _tslib.__rest)(_a, [
        "sideCar"
    ]);
    if (!sideCar) throw new Error("Sidecar: please provide `sideCar` property to import the right car");
    var Target = sideCar.read();
    if (!Target) throw new Error("Sidecar medium not found");
    return _react.createElement(Target, (0, _tslib.__assign)({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
    medium.useMedium(exported);
    return SideCar;
}

},{"tslib":"lRdW5","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3RrHK":[function(require,module,exports) {
/* eslint-disable no-mixed-operators */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactClientsideEffect = require("react-clientside-effect");
var _reactClientsideEffectDefault = parcelHelpers.interopDefault(_reactClientsideEffect);
var _focusLock = require("focus-lock");
var _focusLockDefault = parcelHelpers.interopDefault(_focusLock);
var _util = require("./util");
var _medium = require("./medium");
var focusOnBody = function focusOnBody() {
    return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus() {
    return focusOnBody() || (0, _focusLock.focusIsHidden)();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var defaultWhitelist = function defaultWhitelist() {
    return true;
};
var focusWhitelisted = function focusWhitelisted(activeElement) {
    return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal(observerNode, portaledElement) {
    lastPortaledElement = {
        observerNode: observerNode,
        portaledElement: portaledElement
    };
};
var focusIsPortaledPair = function focusIsPortaledPair(element) {
    return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end, step, allNodes) {
    var lastGuard = null;
    var i = startIndex;
    do {
        var item = allNodes[i];
        if (item.guard) {
            if (item.node.dataset.focusAutoGuard) lastGuard = item;
        } else if (item.lockItem) {
            if (i !== startIndex) // we will tab to the next element
            return;
            lastGuard = null;
        } else break;
    }while ((i += step) !== end);
    if (lastGuard) lastGuard.node.tabIndex = 0;
}
var extractRef = function extractRef(ref) {
    return ref && "current" in ref ? ref.current : ref;
};
var focusWasOutside = function focusWasOutside(crossFrameOption) {
    if (crossFrameOption) // with cross frame return true for any value
    return Boolean(focusWasOutsideWindow);
     // in other case return only of focus went a while aho
    return focusWasOutsideWindow === "meanwhile";
};
var checkInHost = function checkInHost(check, el, boundary) {
    return el && (el.host === check && (!el.activeElement || boundary.contains(el.activeElement) // dive up
    ) || el.parentNode && checkInHost(check, el.parentNode, boundary));
};
var withinHost = function withinHost(activeElement, workingArea) {
    return workingArea.some(function(area) {
        return checkInHost(activeElement, area, area);
    });
};
var activateTrap = function activateTrap() {
    var result = false;
    if (lastActiveTrap) {
        var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame, focusOptions = _lastActiveTrap.focusOptions;
        var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
        var activeElement = document && document.activeElement;
        if (workingNode) {
            var workingArea = [
                workingNode
            ].concat(shards.map(extractRef).filter(Boolean));
            if (!activeElement || focusWhitelisted(activeElement)) {
                if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
                    if (workingNode && !((0, _focusLock.focusInside)(workingArea) || // check for shadow-dom contained elements
                    activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
                        if (document && !lastActiveFocus && activeElement && !autoFocus) {
                            // Check if blur() exists, which is missing on certain elements on IE
                            if (activeElement.blur) activeElement.blur();
                            document.body.focus();
                        } else {
                            result = (0, _focusLockDefault.default)(workingArea, lastActiveFocus, {
                                focusOptions: focusOptions
                            });
                            lastPortaledElement = {};
                        }
                    }
                    focusWasOutsideWindow = false;
                    lastActiveFocus = document && document.activeElement;
                }
            }
            if (document) {
                var newActiveElement = document && document.activeElement;
                var allNodes = (0, _focusLock.getFocusabledIn)(workingArea);
                var focusedIndex = allNodes.map(function(_ref) {
                    var node = _ref.node;
                    return node;
                }).indexOf(newActiveElement);
                if (focusedIndex > -1) {
                    // remove old focus
                    allNodes.filter(function(_ref2) {
                        var guard = _ref2.guard, node = _ref2.node;
                        return guard && node.dataset.focusAutoGuard;
                    }).forEach(function(_ref3) {
                        var node = _ref3.node;
                        return node.removeAttribute("tabIndex");
                    });
                    autoGuard(focusedIndex, allNodes.length, 1, allNodes);
                    autoGuard(focusedIndex, -1, -1, allNodes);
                }
            }
        }
    }
    return result;
};
var onTrap = function onTrap(event) {
    if (activateTrap() && event) {
        // prevent scroll jump
        event.stopPropagation();
        event.preventDefault();
    }
};
var onBlur = function onBlur() {
    return (0, _util.deferAction)(activateTrap);
};
var onFocus = function onFocus(event) {
    // detect portal
    var source = event.target;
    var currentNode = event.currentTarget;
    if (!currentNode.contains(source)) recordPortal(currentNode, source);
};
var FocusWatcher = function FocusWatcher() {
    return null;
};
var FocusTrap = function FocusTrap(_ref4) {
    var children = _ref4.children;
    return /*#__PURE__*/ _react.createElement("div", {
        onBlur: onBlur,
        onFocus: onFocus
    }, children);
};
FocusTrap.propTypes = {
    children: (0, _propTypesDefault.default).node.isRequired
};
var onWindowBlur = function onWindowBlur() {
    focusWasOutsideWindow = "just"; // using setTimeout to set  this variable after React/sidecar reaction
    (0, _util.deferAction)(function() {
        focusWasOutsideWindow = "meanwhile";
    });
};
var attachHandler = function attachHandler() {
    document.addEventListener("focusin", onTrap);
    document.addEventListener("focusout", onBlur);
    window.addEventListener("blur", onWindowBlur);
};
var detachHandler = function detachHandler() {
    document.removeEventListener("focusin", onTrap);
    document.removeEventListener("focusout", onBlur);
    window.removeEventListener("blur", onWindowBlur);
};
function reducePropsToState(propsList) {
    return propsList.filter(function(_ref5) {
        var disabled = _ref5.disabled;
        return !disabled;
    });
}
function handleStateChangeOnClient(traps) {
    var trap = traps.slice(-1)[0];
    if (trap && !lastActiveTrap) attachHandler();
    var lastTrap = lastActiveTrap;
    var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
    lastActiveTrap = trap;
    if (lastTrap && !sameTrap) {
        lastTrap.onDeactivation(); // return focus only of last trap was removed
        if (!traps.filter(function(_ref6) {
            var id = _ref6.id;
            return id === lastTrap.id;
        }).length) // allow defer is no other trap is awaiting restore
        lastTrap.returnFocus(!trap);
    }
    if (trap) {
        lastActiveFocus = null;
        if (!sameTrap || lastTrap.observed !== trap.observed) trap.onActivation();
        activateTrap(true);
        (0, _util.deferAction)(activateTrap);
    } else {
        detachHandler();
        lastActiveFocus = null;
    }
} // bind medium
(0, _medium.mediumFocus).assignSyncMedium(onFocus);
(0, _medium.mediumBlur).assignMedium(onBlur);
(0, _medium.mediumEffect).assignMedium(function(cb) {
    return cb({
        moveFocusInside: (0, _focusLockDefault.default),
        focusInside: (0, _focusLock.focusInside)
    });
});
exports.default = (0, _reactClientsideEffectDefault.default)(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

},{"react":"21dqq","prop-types":"7wKI2","react-clientside-effect":"e7DNT","focus-lock":"1kNjN","./util":"kCG0y","./medium":"7lfII","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e7DNT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
function withSideEffect(reducePropsToState, handleStateChangeOnClient) {
    if (typeof reducePropsToState !== "function") throw new Error("Expected reducePropsToState to be a function.");
    if (typeof handleStateChangeOnClient !== "function") throw new Error("Expected handleStateChangeOnClient to be a function.");
    function getDisplayName(WrappedComponent) {
        return WrappedComponent.displayName || WrappedComponent.name || "Component";
    }
    return function wrap(WrappedComponent) {
        if (typeof WrappedComponent !== "function") throw new Error("Expected WrappedComponent to be a React component.");
        var mountedInstances = [];
        var state;
        function emitChange() {
            state = reducePropsToState(mountedInstances.map(function(instance) {
                return instance.props;
            }));
            handleStateChangeOnClient(state);
        }
        var SideEffect = /*#__PURE__*/ function(_PureComponent) {
            (0, _inheritsLooseDefault.default)(SideEffect, _PureComponent);
            function SideEffect() {
                return _PureComponent.apply(this, arguments) || this;
            }
            // Try to use displayName of wrapped component
            SideEffect.peek = function peek() {
                return state;
            };
            var _proto = SideEffect.prototype;
            _proto.componentDidMount = function componentDidMount() {
                mountedInstances.push(this);
                emitChange();
            };
            _proto.componentDidUpdate = function componentDidUpdate() {
                emitChange();
            };
            _proto.componentWillUnmount = function componentWillUnmount() {
                var index = mountedInstances.indexOf(this);
                mountedInstances.splice(index, 1);
                emitChange();
            };
            _proto.render = function render() {
                return /*#__PURE__*/ (0, _reactDefault.default).createElement(WrappedComponent, this.props);
            };
            return SideEffect;
        }((0, _react.PureComponent));
        (0, _definePropertyDefault.default)(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
        return SideEffect;
    };
}
exports.default = withSideEffect;

},{"@babel/runtime/helpers/esm/inheritsLoose":"9u2Z8","@babel/runtime/helpers/esm/defineProperty":"hbmCA","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9u2Z8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_inheritsLoose);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    (0, _setPrototypeOfJsDefault.default)(subClass, superClass);
}

},{"./setPrototypeOf.js":"3XDFA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3XDFA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_setPrototypeOf);
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hbmCA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_defineProperty);
var _toPropertyKeyJs = require("./toPropertyKey.js");
var _toPropertyKeyJsDefault = parcelHelpers.interopDefault(_toPropertyKeyJs);
function _defineProperty(obj, key, value) {
    key = (0, _toPropertyKeyJsDefault.default)(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

},{"./toPropertyKey.js":"cviYI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cviYI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_toPropertyKey);
var _typeofJs = require("./typeof.js");
var _typeofJsDefault = parcelHelpers.interopDefault(_typeofJs);
var _toPrimitiveJs = require("./toPrimitive.js");
var _toPrimitiveJsDefault = parcelHelpers.interopDefault(_toPrimitiveJs);
function _toPropertyKey(arg) {
    var key = (0, _toPrimitiveJsDefault.default)(arg, "string");
    return (0, _typeofJsDefault.default)(key) === "symbol" ? key : String(key);
}

},{"./typeof.js":"i7HWY","./toPrimitive.js":"497Dv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i7HWY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_typeof);
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"497Dv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_toPrimitive);
var _typeofJs = require("./typeof.js");
var _typeofJsDefault = parcelHelpers.interopDefault(_typeofJs);
function _toPrimitive(input, hint) {
    if ((0, _typeofJsDefault.default)(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if ((0, _typeofJsDefault.default)(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

},{"./typeof.js":"i7HWY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1kNjN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tabHook", ()=>(0, _tabHookDefault.default));
parcelHelpers.export(exports, "focusInside", ()=>(0, _focusInside.focusInside));
parcelHelpers.export(exports, "focusIsHidden", ()=>(0, _focusIsHidden.focusIsHidden));
parcelHelpers.export(exports, "focusMerge", ()=>(0, _focusMerge.getFocusMerge));
parcelHelpers.export(exports, "getFocusableIn", ()=>(0, _focusables.getFocusableIn));
parcelHelpers.export(exports, "getFocusabledIn", ()=>(0, _focusables.getFocusabledIn));
parcelHelpers.export(exports, "constants", ()=>_constants);
parcelHelpers.export(exports, "getAllAffectedNodes", ()=>(0, _allAffected.getAllAffectedNodes));
parcelHelpers.export(exports, "focusNextElement", ()=>(0, _sibling.focusNextElement));
parcelHelpers.export(exports, "focusPrevElement", ()=>(0, _sibling.focusPrevElement));
parcelHelpers.export(exports, "getActiveElement", ()=>(0, _getActiveElement.getActiveElement));
var _constants = require("./constants");
var _focusInside = require("./focusInside");
var _focusIsHidden = require("./focusIsHidden");
var _focusMerge = require("./focusMerge");
var _focusables = require("./focusables");
var _setFocus = require("./setFocus");
var _sibling = require("./sibling");
var _tabHook = require("./tabHook");
var _tabHookDefault = parcelHelpers.interopDefault(_tabHook);
var _allAffected = require("./utils/all-affected");
var _getActiveElement = require("./utils/getActiveElement");
exports.default = (0, _setFocus.setFocus); //

},{"./constants":false,"./focusInside":"k8iwt","./focusIsHidden":"9uZea","./focusMerge":false,"./focusables":"bywfM","./setFocus":"5Xoeo","./sibling":false,"./tabHook":false,"./utils/all-affected":false,"./utils/getActiveElement":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8iwt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "focusInside", ()=>focusInside);
var _domutils = require("./utils/DOMutils");
var _allAffected = require("./utils/all-affected");
var _array = require("./utils/array");
var _getActiveElement = require("./utils/getActiveElement");
var focusInFrame = function(frame, activeElement) {
    return frame === activeElement;
};
var focusInsideIframe = function(topNode, activeElement) {
    return Boolean((0, _array.toArray)(topNode.querySelectorAll("iframe")).some(function(node) {
        return focusInFrame(node, activeElement);
    }));
};
var focusInside = function(topNode, activeElement) {
    // const activeElement = document && getActiveElement();
    if (activeElement === void 0) activeElement = (0, _getActiveElement.getActiveElement)((0, _array.getFirst)(topNode).ownerDocument);
    if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) return false;
    return (0, _allAffected.getAllAffectedNodes)(topNode).some(function(node) {
        return (0, _domutils.contains)(node, activeElement) || focusInsideIframe(node, activeElement);
    });
};

},{"./utils/DOMutils":"5Nm8f","./utils/all-affected":"lwgNK","./utils/array":"4X20H","./utils/getActiveElement":"aTXU1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Nm8f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterFocusable", ()=>filterFocusable);
parcelHelpers.export(exports, "filterAutoFocusable", ()=>filterAutoFocusable);
parcelHelpers.export(exports, "getTabbableNodes", ()=>getTabbableNodes);
parcelHelpers.export(exports, "getAllTabbableNodes", ()=>getAllTabbableNodes);
parcelHelpers.export(exports, "parentAutofocusables", ()=>parentAutofocusables);
parcelHelpers.export(exports, "contains", ()=>contains);
var _array = require("./array");
var _is = require("./is");
var _tabOrder = require("./tabOrder");
var _tabUtils = require("./tabUtils");
var filterFocusable = function(nodes, visibilityCache) {
    return (0, _array.toArray)(nodes).filter(function(node) {
        return (0, _is.isVisibleCached)(visibilityCache, node);
    }).filter(function(node) {
        return (0, _is.notHiddenInput)(node);
    });
};
var filterAutoFocusable = function(nodes, cache) {
    if (cache === void 0) cache = new Map();
    return (0, _array.toArray)(nodes).filter(function(node) {
        return (0, _is.isAutoFocusAllowedCached)(cache, node);
    });
};
var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
    return (0, _tabOrder.orderByTabIndex)(filterFocusable((0, _tabUtils.getFocusables)(topNodes, withGuards), visibilityCache), true, withGuards);
};
var getAllTabbableNodes = function(topNodes, visibilityCache) {
    return (0, _tabOrder.orderByTabIndex)(filterFocusable((0, _tabUtils.getFocusables)(topNodes), visibilityCache), false);
};
var parentAutofocusables = function(topNode, visibilityCache) {
    return filterFocusable((0, _tabUtils.getParentAutofocusables)(topNode), visibilityCache);
};
var contains = function(scope, element) {
    if (scope.shadowRoot) return contains(scope.shadowRoot, element);
    else {
        if (Object.getPrototypeOf(scope).contains !== undefined && Object.getPrototypeOf(scope).contains.call(scope, element)) return true;
        return (0, _array.toArray)(scope.children).some(function(child) {
            var _a;
            if (child instanceof HTMLIFrameElement) {
                var iframeBody = (_a = child.contentDocument) === null || _a === void 0 ? void 0 : _a.body;
                if (iframeBody) return contains(iframeBody, element);
                return false;
            }
            return contains(child, element);
        });
    }
};

},{"./array":"4X20H","./is":"jEK2O","./tabOrder":"bCv7t","./tabUtils":"8Dbor","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4X20H":[function(require,module,exports) {
/*
IE11 support
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toArray", ()=>toArray);
parcelHelpers.export(exports, "asArray", ()=>asArray);
parcelHelpers.export(exports, "getFirst", ()=>getFirst);
var toArray = function(a) {
    var ret = Array(a.length);
    for(var i = 0; i < a.length; ++i)ret[i] = a[i];
    return ret;
};
var asArray = function(a) {
    return Array.isArray(a) ? a : [
        a
    ];
};
var getFirst = function(a) {
    return Array.isArray(a) ? a[0] : a;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jEK2O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isVisibleCached", ()=>isVisibleCached);
parcelHelpers.export(exports, "isAutoFocusAllowedCached", ()=>isAutoFocusAllowedCached);
parcelHelpers.export(exports, "getDataset", ()=>getDataset);
parcelHelpers.export(exports, "isHTMLButtonElement", ()=>isHTMLButtonElement);
parcelHelpers.export(exports, "isHTMLInputElement", ()=>isHTMLInputElement);
parcelHelpers.export(exports, "isRadioElement", ()=>isRadioElement);
parcelHelpers.export(exports, "notHiddenInput", ()=>notHiddenInput);
parcelHelpers.export(exports, "isAutoFocusAllowed", ()=>isAutoFocusAllowed);
parcelHelpers.export(exports, "isGuard", ()=>isGuard);
parcelHelpers.export(exports, "isNotAGuard", ()=>isNotAGuard);
parcelHelpers.export(exports, "isDefined", ()=>isDefined);
var _constants = require("../constants");
var isElementHidden = function(node) {
    // we can measure only "elements"
    // consider others as "visible"
    if (node.nodeType !== Node.ELEMENT_NODE) return false;
    var computedStyle = window.getComputedStyle(node, null);
    if (!computedStyle || !computedStyle.getPropertyValue) return false;
    return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
};
var getParentNode = function(node) {
    // DOCUMENT_FRAGMENT_NODE can also point on ShadowRoot. In this case .host will point on the next node
    return node.parentNode && node.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? node.parentNode.host : node.parentNode;
};
var isTopNode = function(node) {
    // @ts-ignore
    return node === document || node && node.nodeType === Node.DOCUMENT_NODE;
};
var isVisibleUncached = function(node, checkParent) {
    return !node || isTopNode(node) || !isElementHidden(node) && checkParent(getParentNode(node));
};
var isVisibleCached = function(visibilityCache, node) {
    var cached = visibilityCache.get(node);
    if (cached !== undefined) return cached;
    var result = isVisibleUncached(node, isVisibleCached.bind(undefined, visibilityCache));
    visibilityCache.set(node, result);
    return result;
};
var isAutoFocusAllowedUncached = function(node, checkParent) {
    return node && !isTopNode(node) ? isAutoFocusAllowed(node) ? checkParent(getParentNode(node)) : false : true;
};
var isAutoFocusAllowedCached = function(cache, node) {
    var cached = cache.get(node);
    if (cached !== undefined) return cached;
    var result = isAutoFocusAllowedUncached(node, isAutoFocusAllowedCached.bind(undefined, cache));
    cache.set(node, result);
    return result;
};
var getDataset = function(node) {
    // @ts-ignore
    return node.dataset;
};
var isHTMLButtonElement = function(node) {
    return node.tagName === "BUTTON";
};
var isHTMLInputElement = function(node) {
    return node.tagName === "INPUT";
};
var isRadioElement = function(node) {
    return isHTMLInputElement(node) && node.type === "radio";
};
var notHiddenInput = function(node) {
    return !((isHTMLInputElement(node) || isHTMLButtonElement(node)) && (node.type === "hidden" || node.disabled));
};
var isAutoFocusAllowed = function(node) {
    var attribute = node.getAttribute((0, _constants.FOCUS_NO_AUTOFOCUS));
    return ![
        true,
        "true",
        ""
    ].includes(attribute);
};
var isGuard = function(node) {
    var _a;
    return Boolean(node && ((_a = getDataset(node)) === null || _a === void 0 ? void 0 : _a.focusGuard));
};
var isNotAGuard = function(node) {
    return !isGuard(node);
};
var isDefined = function(x) {
    return Boolean(x);
};

},{"../constants":"lGd0U","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bCv7t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tabSort", ()=>tabSort);
parcelHelpers.export(exports, "orderByTabIndex", ()=>orderByTabIndex);
var _array = require("./array");
var tabSort = function(a, b) {
    var tabDiff = a.tabIndex - b.tabIndex;
    var indexDiff = a.index - b.index;
    if (tabDiff) {
        if (!a.tabIndex) return 1;
        if (!b.tabIndex) return -1;
    }
    return tabDiff || indexDiff;
};
var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
    return (0, _array.toArray)(nodes).map(function(node, index) {
        return {
            node: node,
            index: index,
            tabIndex: keepGuards && node.tabIndex === -1 ? (node.dataset || {}).focusGuard ? 0 : -1 : node.tabIndex
        };
    }).filter(function(data) {
        return !filterNegative || data.tabIndex >= 0;
    }).sort(tabSort);
};

},{"./array":"4X20H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Dbor":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFocusables", ()=>getFocusables);
parcelHelpers.export(exports, "getParentAutofocusables", ()=>getParentAutofocusables);
var _constants = require("../constants");
var _array = require("./array");
var _tabbables = require("./tabbables");
var queryTabbables = (0, _tabbables.tabbables).join(",");
var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
var getFocusablesWithShadowDom = function(parent, withGuards) {
    return (0, _array.toArray)((parent.shadowRoot || parent).children).reduce(function(acc, child) {
        return acc.concat(child.matches(withGuards ? queryGuardTabbables : queryTabbables) ? [
            child
        ] : [], getFocusablesWithShadowDom(child));
    }, []);
};
var getFocusablesWithIFrame = function(parent, withGuards) {
    var _a;
    // contentDocument of iframe will be null if current origin cannot access it
    if (parent instanceof HTMLIFrameElement && ((_a = parent.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) return getFocusables([
        parent.contentDocument.body
    ], withGuards);
    return [
        parent
    ];
};
var getFocusables = function(parents, withGuards) {
    return parents.reduce(function(acc, parent) {
        var _a;
        var focusableWithShadowDom = getFocusablesWithShadowDom(parent, withGuards);
        var focusableWithIframes = (_a = []).concat.apply(_a, focusableWithShadowDom.map(function(node) {
            return getFocusablesWithIFrame(node, withGuards);
        }));
        return acc.concat(// add all tabbables inside and within shadow DOMs in DOM order
        focusableWithIframes, // add if node is tabbable itself
        parent.parentNode ? (0, _array.toArray)(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node) {
            return node === parent;
        }) : []);
    }, []);
};
var getParentAutofocusables = function(parent) {
    var parentFocus = parent.querySelectorAll("[".concat((0, _constants.FOCUS_AUTO), "]"));
    return (0, _array.toArray)(parentFocus).map(function(node) {
        return getFocusables([
            node
        ]);
    }).reduce(function(acc, nodes) {
        return acc.concat(nodes);
    }, []);
};

},{"../constants":"lGd0U","./array":"4X20H","./tabbables":"gL4hJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gL4hJ":[function(require,module,exports) {
/**
 * list of the object to be considered as focusable
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tabbables", ()=>tabbables);
var tabbables = [
    "button:enabled",
    "select:enabled",
    "textarea:enabled",
    "input:enabled",
    // elements with explicit roles will also use explicit tabindex
    // '[role="button"]',
    "a[href]",
    "area[href]",
    "summary",
    "iframe",
    "object",
    "embed",
    "audio[controls]",
    "video[controls]",
    "[tabindex]",
    "[contenteditable]",
    "[autofocus]"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lwgNK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAllAffectedNodes", ()=>getAllAffectedNodes);
var _constants = require("../constants");
var _array = require("./array");
/**
 * in case of multiple nodes nested inside each other
 * keeps only top ones
 * this is O(nlogn)
 * @param nodes
 * @returns {*}
 */ var filterNested = function(nodes) {
    var contained = new Set();
    var l = nodes.length;
    for(var i = 0; i < l; i += 1)for(var j = i + 1; j < l; j += 1){
        var position = nodes[i].compareDocumentPosition(nodes[j]);
        /* eslint-disable no-bitwise */ if ((position & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) contained.add(j);
        if ((position & Node.DOCUMENT_POSITION_CONTAINS) > 0) contained.add(i);
    /* eslint-enable */ }
    return nodes.filter(function(_, index) {
        return !contained.has(index);
    });
};
/**
 * finds top most parent for a node
 * @param node
 * @returns {*}
 */ var getTopParent = function(node) {
    return node.parentNode ? getTopParent(node.parentNode) : node;
};
var getAllAffectedNodes = function(node) {
    var nodes = (0, _array.asArray)(node);
    return nodes.filter(Boolean).reduce(function(acc, currentNode) {
        var group = currentNode.getAttribute((0, _constants.FOCUS_GROUP));
        acc.push.apply(acc, group ? filterNested((0, _array.toArray)(getTopParent(currentNode).querySelectorAll("[".concat((0, _constants.FOCUS_GROUP), '="').concat(group, '"]:not([').concat((0, _constants.FOCUS_DISABLED), '="disabled"])')))) : [
            currentNode
        ]);
        return acc;
    }, []);
};

},{"../constants":"lGd0U","./array":"4X20H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aTXU1":[function(require,module,exports) {
/**
 * returns active element from document or from nested shadowdoms
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getActiveElement", ()=>getActiveElement);
var _safe = require("./safe");
var getActiveElement = function(inDocument) {
    if (inDocument === void 0) inDocument = document;
    if (!inDocument || !inDocument.activeElement) return undefined;
    var activeElement = inDocument.activeElement;
    return activeElement.shadowRoot ? getActiveElement(activeElement.shadowRoot) : activeElement instanceof HTMLIFrameElement && (0, _safe.safeProbe)(function() {
        return activeElement.contentWindow.document;
    }) ? getActiveElement(activeElement.contentWindow.document) : activeElement;
};

},{"./safe":"3lBmS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3lBmS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "safeProbe", ()=>safeProbe);
var safeProbe = function(cb) {
    try {
        return cb();
    } catch (e) {
        return undefined;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9uZea":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "focusIsHidden", ()=>focusIsHidden);
var _constants = require("./constants");
var _domutils = require("./utils/DOMutils");
var _array = require("./utils/array");
var _getActiveElement = require("./utils/getActiveElement");
var focusIsHidden = function(inDocument) {
    if (inDocument === void 0) inDocument = document;
    var activeElement = (0, _getActiveElement.getActiveElement)(inDocument);
    if (!activeElement) return false;
    // this does not support setting FOCUS_ALLOW within shadow dom
    return (0, _array.toArray)(inDocument.querySelectorAll("[".concat((0, _constants.FOCUS_ALLOW), "]"))).some(function(node) {
        return (0, _domutils.contains)(node, activeElement);
    });
};

},{"./constants":"lGd0U","./utils/DOMutils":"5Nm8f","./utils/array":"4X20H","./utils/getActiveElement":"aTXU1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6fIbd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFocusMerge", ()=>getFocusMerge);
var _solver = require("./solver");
var _domutils = require("./utils/DOMutils");
var _allAffected = require("./utils/all-affected");
var _array = require("./utils/array");
var _autoFocus = require("./utils/auto-focus");
var _getActiveElement = require("./utils/getActiveElement");
var _is = require("./utils/is");
var _parenting = require("./utils/parenting");
var reorderNodes = function(srcNodes, dstNodes) {
    var remap = new Map();
    // no Set(dstNodes) for IE11 :(
    dstNodes.forEach(function(entity) {
        return remap.set(entity.node, entity);
    });
    // remap to dstNodes
    return srcNodes.map(function(node) {
        return remap.get(node);
    }).filter((0, _is.isDefined));
};
var getFocusMerge = function(topNode, lastNode) {
    var activeElement = (0, _getActiveElement.getActiveElement)((0, _array.asArray)(topNode).length > 0 ? document : (0, _array.getFirst)(topNode).ownerDocument);
    var entries = (0, _allAffected.getAllAffectedNodes)(topNode).filter((0, _is.isNotAGuard));
    var commonParent = (0, _parenting.getTopCommonParent)(activeElement || topNode, topNode, entries);
    var visibilityCache = new Map();
    var anyFocusable = (0, _domutils.getAllTabbableNodes)(entries, visibilityCache);
    var innerElements = (0, _domutils.getTabbableNodes)(entries, visibilityCache).filter(function(_a) {
        var node = _a.node;
        return (0, _is.isNotAGuard)(node);
    });
    if (!innerElements[0]) {
        innerElements = anyFocusable;
        if (!innerElements[0]) return undefined;
    }
    var outerNodes = (0, _domutils.getAllTabbableNodes)([
        commonParent
    ], visibilityCache).map(function(_a) {
        var node = _a.node;
        return node;
    });
    var orderedInnerElements = reorderNodes(outerNodes, innerElements);
    var innerNodes = orderedInnerElements.map(function(_a) {
        var node = _a.node;
        return node;
    });
    var newId = (0, _solver.newFocus)(innerNodes, outerNodes, activeElement, lastNode);
    if (newId === (0, _solver.NEW_FOCUS)) {
        var focusNode = (0, _autoFocus.pickAutofocus)(anyFocusable, innerNodes, (0, _parenting.allParentAutofocusables)(entries, visibilityCache));
        if (focusNode) return {
            node: focusNode
        };
        else {
            console.warn("focus-lock: cannot find any node to move focus into");
            return undefined;
        }
    }
    if (newId === undefined) return newId;
    return orderedInnerElements[newId];
};

},{"./solver":"2e6Um","./utils/DOMutils":"5Nm8f","./utils/all-affected":"lwgNK","./utils/array":"4X20H","./utils/auto-focus":"5bowr","./utils/getActiveElement":"aTXU1","./utils/is":"jEK2O","./utils/parenting":"99SY7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2e6Um":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NEW_FOCUS", ()=>NEW_FOCUS);
parcelHelpers.export(exports, "newFocus", ()=>newFocus);
var _correctFocus = require("./utils/correctFocus");
var _firstFocus = require("./utils/firstFocus");
var _is = require("./utils/is");
var NEW_FOCUS = "NEW_FOCUS";
var newFocus = function(innerNodes, outerNodes, activeElement, lastNode) {
    var cnt = innerNodes.length;
    var firstFocus = innerNodes[0];
    var lastFocus = innerNodes[cnt - 1];
    var isOnGuard = (0, _is.isGuard)(activeElement);
    // focus is inside
    if (activeElement && innerNodes.indexOf(activeElement) >= 0) return undefined;
    var activeIndex = activeElement !== undefined ? outerNodes.indexOf(activeElement) : -1;
    var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
    var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
    var indexDiff = activeIndex - lastIndex;
    var firstNodeIndex = outerNodes.indexOf(firstFocus);
    var lastNodeIndex = outerNodes.indexOf(lastFocus);
    var correctedNodes = (0, _correctFocus.correctNodes)(outerNodes);
    var correctedIndex = activeElement !== undefined ? correctedNodes.indexOf(activeElement) : -1;
    var correctedIndexDiff = correctedIndex - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
    var returnFirstNode = (0, _firstFocus.pickFocusable)(innerNodes, 0);
    var returnLastNode = (0, _firstFocus.pickFocusable)(innerNodes, cnt - 1);
    // new focus
    if (activeIndex === -1 || lastNodeInside === -1) return NEW_FOCUS;
    // old focus
    if (!indexDiff && lastNodeInside >= 0) return lastNodeInside;
    // first element
    if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) return returnLastNode;
    // last element
    if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) return returnFirstNode;
    // jump out, but not on the guard
    if (indexDiff && Math.abs(correctedIndexDiff) > 1) return lastNodeInside;
    // focus above lock
    if (activeIndex <= firstNodeIndex) return returnLastNode;
    // focus below lock
    if (activeIndex > lastNodeIndex) return returnFirstNode;
    // index is inside tab order, but outside Lock
    if (indexDiff) {
        if (Math.abs(indexDiff) > 1) return lastNodeInside;
        return (cnt + lastNodeInside + indexDiff) % cnt;
    }
    // do nothing
    return undefined;
};

},{"./utils/correctFocus":"5H42c","./utils/firstFocus":"fZdBH","./utils/is":"jEK2O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5H42c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "correctNode", ()=>correctNode);
parcelHelpers.export(exports, "correctNodes", ()=>correctNodes);
var _is = require("./is");
var findSelectedRadio = function(node, nodes) {
    return nodes.filter((0, _is.isRadioElement)).filter(function(el) {
        return el.name === node.name;
    }).filter(function(el) {
        return el.checked;
    })[0] || node;
};
var correctNode = function(node, nodes) {
    if ((0, _is.isRadioElement)(node) && node.name) return findSelectedRadio(node, nodes);
    return node;
};
var correctNodes = function(nodes) {
    // IE11 has no Set(array) constructor
    var resultSet = new Set();
    nodes.forEach(function(node) {
        return resultSet.add(correctNode(node, nodes));
    });
    // using filter to support IE11
    return nodes.filter(function(node) {
        return resultSet.has(node);
    });
};

},{"./is":"jEK2O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fZdBH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pickFirstFocus", ()=>pickFirstFocus);
parcelHelpers.export(exports, "pickFocusable", ()=>pickFocusable);
var _correctFocus = require("./correctFocus");
var pickFirstFocus = function(nodes) {
    if (nodes[0] && nodes.length > 1) return (0, _correctFocus.correctNode)(nodes[0], nodes);
    return nodes[0];
};
var pickFocusable = function(nodes, index) {
    if (nodes.length > 1) return nodes.indexOf((0, _correctFocus.correctNode)(nodes[index], nodes));
    return index;
};

},{"./correctFocus":"5H42c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5bowr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pickAutofocus", ()=>pickAutofocus);
var _domutils = require("./DOMutils");
var _firstFocus = require("./firstFocus");
var _is = require("./is");
var findAutoFocused = function(autoFocusables) {
    return function(node) {
        var _a;
        var autofocus = (_a = (0, _is.getDataset)(node)) === null || _a === void 0 ? void 0 : _a.autofocus;
        return(// @ts-expect-error
        node.autofocus || //
        autofocus !== undefined && autofocus !== "false" || //
        autoFocusables.indexOf(node) >= 0);
    };
};
var pickAutofocus = function(nodesIndexes, orderedNodes, groups) {
    var nodes = nodesIndexes.map(function(_a) {
        var node = _a.node;
        return node;
    });
    var autoFocusable = (0, _domutils.filterAutoFocusable)(nodes.filter(findAutoFocused(groups)));
    if (autoFocusable && autoFocusable.length) return (0, _firstFocus.pickFirstFocus)(autoFocusable);
    return (0, _firstFocus.pickFirstFocus)((0, _domutils.filterAutoFocusable)(orderedNodes));
};

},{"./DOMutils":"5Nm8f","./firstFocus":"fZdBH","./is":"jEK2O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99SY7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCommonParent", ()=>getCommonParent);
parcelHelpers.export(exports, "getTopCommonParent", ()=>getTopCommonParent);
parcelHelpers.export(exports, "allParentAutofocusables", ()=>allParentAutofocusables);
var _domutils = require("./DOMutils");
var _array = require("./array");
var getParents = function(node, parents) {
    if (parents === void 0) parents = [];
    parents.push(node);
    if (node.parentNode) getParents(node.parentNode.host || node.parentNode, parents);
    return parents;
};
var getCommonParent = function(nodeA, nodeB) {
    var parentsA = getParents(nodeA);
    var parentsB = getParents(nodeB);
    // tslint:disable-next-line:prefer-for-of
    for(var i = 0; i < parentsA.length; i += 1){
        var currentParent = parentsA[i];
        if (parentsB.indexOf(currentParent) >= 0) return currentParent;
    }
    return false;
};
var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
    var activeElements = (0, _array.asArray)(baseActiveElement);
    var leftEntries = (0, _array.asArray)(leftEntry);
    var activeElement = activeElements[0];
    var topCommon = false;
    leftEntries.filter(Boolean).forEach(function(entry) {
        topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
        rightEntries.filter(Boolean).forEach(function(subEntry) {
            var common = getCommonParent(activeElement, subEntry);
            if (common) {
                if (!topCommon || (0, _domutils.contains)(common, topCommon)) topCommon = common;
                else topCommon = getCommonParent(common, topCommon);
            }
        });
    });
    // TODO: add assert here?
    return topCommon;
};
var allParentAutofocusables = function(entries, visibilityCache) {
    return entries.reduce(function(acc, node) {
        return acc.concat((0, _domutils.parentAutofocusables)(node, visibilityCache));
    }, []);
};

},{"./DOMutils":"5Nm8f","./array":"4X20H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bywfM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFocusabledIn", ()=>getFocusabledIn);
parcelHelpers.export(exports, "getFocusableIn", ()=>getFocusableIn);
var _domutils = require("./utils/DOMutils");
var _allAffected = require("./utils/all-affected");
var _is = require("./utils/is");
var _parenting = require("./utils/parenting");
var getFocusabledIn = function(topNode) {
    var entries = (0, _allAffected.getAllAffectedNodes)(topNode).filter((0, _is.isNotAGuard));
    var commonParent = (0, _parenting.getTopCommonParent)(topNode, topNode, entries);
    var visibilityCache = new Map();
    var outerNodes = (0, _domutils.getTabbableNodes)([
        commonParent
    ], visibilityCache, true);
    var innerElements = (0, _domutils.getTabbableNodes)(entries, visibilityCache).filter(function(_a) {
        var node = _a.node;
        return (0, _is.isNotAGuard)(node);
    }).map(function(_a) {
        var node = _a.node;
        return node;
    });
    return outerNodes.map(function(_a) {
        var node = _a.node, index = _a.index;
        return {
            node: node,
            index: index,
            lockItem: innerElements.indexOf(node) >= 0,
            guard: (0, _is.isGuard)(node)
        };
    });
};
var getFocusableIn = getFocusabledIn;

},{"./utils/DOMutils":"5Nm8f","./utils/all-affected":"lwgNK","./utils/is":"jEK2O","./utils/parenting":"99SY7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Xoeo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "focusOn", ()=>focusOn);
parcelHelpers.export(exports, "setFocus", ()=>setFocus);
var _focusMerge = require("./focusMerge");
var focusOn = function(target, focusOptions) {
    if ("focus" in target) target.focus(focusOptions);
    if ("contentWindow" in target && target.contentWindow) target.contentWindow.focus();
};
var guardCount = 0;
var lockDisabled = false;
var setFocus = function(topNode, lastNode, options) {
    if (options === void 0) options = {};
    var focusable = (0, _focusMerge.getFocusMerge)(topNode, lastNode);
    if (lockDisabled) return;
    if (focusable) {
        if (guardCount > 2) {
            // tslint:disable-next-line:no-console
            console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
            lockDisabled = true;
            setTimeout(function() {
                lockDisabled = false;
            }, 1);
            return;
        }
        guardCount++;
        focusOn(focusable.node, options.focusOptions);
        guardCount--;
    }
};

},{"./focusMerge":"6fIbd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCG0y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deferAction", ()=>deferAction);
parcelHelpers.export(exports, "inlineProp", ()=>inlineProp);
function deferAction(action) {
    setTimeout(action, 1);
}
var inlineProp = function inlineProp(name, value) {
    var obj = {};
    obj[name] = value;
    return obj;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cWgfO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contains", ()=>(0, _chunk3XANSPY5Mjs.contains));
parcelHelpers.export(exports, "getActiveElement", ()=>(0, _chunk3XANSPY5Mjs.getActiveElement));
parcelHelpers.export(exports, "getAllFocusable", ()=>getAllFocusable);
parcelHelpers.export(exports, "getAllTabbable", ()=>getAllTabbable);
parcelHelpers.export(exports, "getEventWindow", ()=>(0, _chunk3XANSPY5Mjs.getEventWindow));
parcelHelpers.export(exports, "getFirstFocusable", ()=>getFirstFocusable);
parcelHelpers.export(exports, "getFirstTabbableIn", ()=>getFirstTabbableIn);
parcelHelpers.export(exports, "getLastTabbableIn", ()=>getLastTabbableIn);
parcelHelpers.export(exports, "getNextTabbable", ()=>getNextTabbable);
parcelHelpers.export(exports, "getOwnerDocument", ()=>(0, _chunk3XANSPY5Mjs.getOwnerDocument));
parcelHelpers.export(exports, "getOwnerWindow", ()=>(0, _chunk3XANSPY5Mjs.getOwnerWindow));
parcelHelpers.export(exports, "getPreviousTabbable", ()=>getPreviousTabbable);
parcelHelpers.export(exports, "getScrollParent", ()=>(0, _chunk4WEUWBTDMjs.getScrollParent));
parcelHelpers.export(exports, "hasDisplayNone", ()=>(0, _chunkROURZMX4Mjs.hasDisplayNone));
parcelHelpers.export(exports, "hasFocusWithin", ()=>(0, _chunkROURZMX4Mjs.hasFocusWithin));
parcelHelpers.export(exports, "hasNegativeTabIndex", ()=>(0, _chunkROURZMX4Mjs.hasNegativeTabIndex));
parcelHelpers.export(exports, "hasTabIndex", ()=>(0, _chunkROURZMX4Mjs.hasTabIndex));
parcelHelpers.export(exports, "isActiveElement", ()=>(0, _chunkROURZMX4Mjs.isActiveElement));
parcelHelpers.export(exports, "isBrowser", ()=>(0, _chunk3XANSPY5Mjs.isBrowser));
parcelHelpers.export(exports, "isContentEditable", ()=>(0, _chunkROURZMX4Mjs.isContentEditable));
parcelHelpers.export(exports, "isDisabled", ()=>(0, _chunkROURZMX4Mjs.isDisabled));
parcelHelpers.export(exports, "isElement", ()=>(0, _chunk3XANSPY5Mjs.isElement));
parcelHelpers.export(exports, "isFocusable", ()=>(0, _chunkROURZMX4Mjs.isFocusable));
parcelHelpers.export(exports, "isHTMLElement", ()=>(0, _chunk3XANSPY5Mjs.isHTMLElement));
parcelHelpers.export(exports, "isHidden", ()=>(0, _chunkROURZMX4Mjs.isHidden));
parcelHelpers.export(exports, "isInputElement", ()=>(0, _chunkROURZMX4Mjs.isInputElement));
parcelHelpers.export(exports, "isTabbable", ()=>(0, _chunkROURZMX4Mjs.isTabbable));
var _chunk4WEUWBTDMjs = require("./chunk-4WEUWBTD.mjs");
var _chunkROURZMX4Mjs = require("./chunk-ROURZMX4.mjs");
var _chunk3XANSPY5Mjs = require("./chunk-3XANSPY5.mjs");
// src/index.ts
var focusableElList = [
    "input:not(:disabled):not([disabled])",
    "select:not(:disabled):not([disabled])",
    "textarea:not(:disabled):not([disabled])",
    "embed",
    "iframe",
    "object",
    "a[href]",
    "area[href]",
    "button:not(:disabled):not([disabled])",
    "[tabindex]",
    "audio[controls]",
    "video[controls]",
    "*[tabindex]:not([aria-disabled])",
    "*[contenteditable]"
];
var focusableElSelector = focusableElList.join();
var isVisible = (el)=>el.offsetWidth > 0 && el.offsetHeight > 0;
function getAllFocusable(container) {
    const focusableEls = Array.from(container.querySelectorAll(focusableElSelector));
    focusableEls.unshift(container);
    return focusableEls.filter((el)=>(0, _chunkROURZMX4Mjs.isFocusable)(el) && isVisible(el));
}
function getFirstFocusable(container) {
    const allFocusable = getAllFocusable(container);
    return allFocusable.length ? allFocusable[0] : null;
}
function getAllTabbable(container, fallbackToFocusable) {
    const allFocusable = Array.from(container.querySelectorAll(focusableElSelector));
    const allTabbable = allFocusable.filter((0, _chunkROURZMX4Mjs.isTabbable));
    if ((0, _chunkROURZMX4Mjs.isTabbable)(container)) allTabbable.unshift(container);
    if (!allTabbable.length && fallbackToFocusable) return allFocusable;
    return allTabbable;
}
function getFirstTabbableIn(container, fallbackToFocusable) {
    const [first] = getAllTabbable(container, fallbackToFocusable);
    return first || null;
}
function getLastTabbableIn(container, fallbackToFocusable) {
    const allTabbable = getAllTabbable(container, fallbackToFocusable);
    return allTabbable[allTabbable.length - 1] || null;
}
function getNextTabbable(container, fallbackToFocusable) {
    const allFocusable = getAllFocusable(container);
    const index = allFocusable.indexOf(document.activeElement);
    const slice = allFocusable.slice(index + 1);
    return slice.find((0, _chunkROURZMX4Mjs.isTabbable)) || allFocusable.find((0, _chunkROURZMX4Mjs.isTabbable)) || (fallbackToFocusable ? slice[0] : null);
}
function getPreviousTabbable(container, fallbackToFocusable) {
    const allFocusable = getAllFocusable(container).reverse();
    const index = allFocusable.indexOf(document.activeElement);
    const slice = allFocusable.slice(index + 1);
    return slice.find((0, _chunkROURZMX4Mjs.isTabbable)) || allFocusable.find((0, _chunkROURZMX4Mjs.isTabbable)) || (fallbackToFocusable ? slice[0] : null);
}

},{"./chunk-4WEUWBTD.mjs":"d72nq","./chunk-ROURZMX4.mjs":"fUrMT","./chunk-3XANSPY5.mjs":"5vdk7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d72nq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getScrollParent", ()=>getScrollParent);
var _chunk3XANSPY5Mjs = require("./chunk-3XANSPY5.mjs");
// src/scroll.ts
function isScrollParent(el) {
    const win = el.ownerDocument.defaultView || window;
    const { overflow, overflowX, overflowY } = win.getComputedStyle(el);
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getParent(el) {
    if (el.localName === "html") return el;
    return el.assignedSlot || el.parentElement || el.ownerDocument.documentElement;
}
function getScrollParent(el) {
    if ([
        "html",
        "body",
        "#document"
    ].includes(el.localName)) return el.ownerDocument.body;
    if ((0, _chunk3XANSPY5Mjs.isHTMLElement)(el) && isScrollParent(el)) return el;
    return getScrollParent(getParent(el));
}

},{"./chunk-3XANSPY5.mjs":"5vdk7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5vdk7":[function(require,module,exports) {
// src/dom.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement);
parcelHelpers.export(exports, "getOwnerWindow", ()=>getOwnerWindow);
parcelHelpers.export(exports, "getOwnerDocument", ()=>getOwnerDocument);
parcelHelpers.export(exports, "getEventWindow", ()=>getEventWindow);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
parcelHelpers.export(exports, "getActiveElement", ()=>getActiveElement);
parcelHelpers.export(exports, "contains", ()=>contains);
function isElement(el) {
    return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}
function isHTMLElement(el) {
    var _a;
    if (!isElement(el)) return false;
    const win = (_a = el.ownerDocument.defaultView) != null ? _a : window;
    return el instanceof win.HTMLElement;
}
function getOwnerWindow(node) {
    var _a, _b;
    return (_b = (_a = getOwnerDocument(node)) == null ? void 0 : _a.defaultView) != null ? _b : window;
}
function getOwnerDocument(node) {
    return isElement(node) ? node.ownerDocument : document;
}
function getEventWindow(event) {
    var _a;
    return (_a = event.view) != null ? _a : window;
}
function isBrowser() {
    return Boolean(globalThis == null ? void 0 : globalThis.document);
}
function getActiveElement(node) {
    return getOwnerDocument(node).activeElement;
}
function contains(parent, child) {
    if (!parent) return false;
    return parent === child || parent.contains(child);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fUrMT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasDisplayNone", ()=>hasDisplayNone);
parcelHelpers.export(exports, "hasTabIndex", ()=>hasTabIndex);
parcelHelpers.export(exports, "hasNegativeTabIndex", ()=>hasNegativeTabIndex);
parcelHelpers.export(exports, "isDisabled", ()=>isDisabled);
parcelHelpers.export(exports, "isInputElement", ()=>isInputElement);
parcelHelpers.export(exports, "isActiveElement", ()=>isActiveElement);
parcelHelpers.export(exports, "hasFocusWithin", ()=>hasFocusWithin);
parcelHelpers.export(exports, "isHidden", ()=>isHidden);
parcelHelpers.export(exports, "isContentEditable", ()=>isContentEditable);
parcelHelpers.export(exports, "isFocusable", ()=>isFocusable);
parcelHelpers.export(exports, "isTabbable", ()=>isTabbable);
var _chunk3XANSPY5Mjs = require("./chunk-3XANSPY5.mjs");
// src/tabbable.ts
var hasDisplayNone = (element)=>window.getComputedStyle(element).display === "none";
var hasTabIndex = (element)=>element.hasAttribute("tabindex");
var hasNegativeTabIndex = (element)=>hasTabIndex(element) && element.tabIndex === -1;
function isDisabled(element) {
    return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
}
function isInputElement(element) {
    return (0, _chunk3XANSPY5Mjs.isHTMLElement)(element) && element.localName === "input" && "select" in element;
}
function isActiveElement(element) {
    const doc = (0, _chunk3XANSPY5Mjs.isHTMLElement)(element) ? (0, _chunk3XANSPY5Mjs.getOwnerDocument)(element) : document;
    return doc.activeElement === element;
}
function hasFocusWithin(element) {
    if (!document.activeElement) return false;
    return element.contains(document.activeElement);
}
function isHidden(element) {
    if (element.parentElement && isHidden(element.parentElement)) return true;
    return element.hidden;
}
function isContentEditable(element) {
    const value = element.getAttribute("contenteditable");
    return value !== "false" && value != null;
}
function isFocusable(element) {
    if (!(0, _chunk3XANSPY5Mjs.isHTMLElement)(element) || isHidden(element) || isDisabled(element)) return false;
    const { localName } = element;
    const focusableTags = [
        "input",
        "select",
        "textarea",
        "button"
    ];
    if (focusableTags.indexOf(localName) >= 0) return true;
    const others = {
        a: ()=>element.hasAttribute("href"),
        audio: ()=>element.hasAttribute("controls"),
        video: ()=>element.hasAttribute("controls")
    };
    if (localName in others) return others[localName]();
    if (isContentEditable(element)) return true;
    return hasTabIndex(element);
}
function isTabbable(element) {
    if (!element) return false;
    return (0, _chunk3XANSPY5Mjs.isHTMLElement)(element) && isFocusable(element) && !hasNegativeTabIndex(element);
}

},{"./chunk-3XANSPY5.mjs":"5vdk7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2IUDP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignRef", ()=>(0, _chunkAZVKQZKIMjs.assignRef));
parcelHelpers.export(exports, "useAnimationState", ()=>(0, _chunkATO3JZNWMjs.useAnimationState));
parcelHelpers.export(exports, "useBoolean", ()=>(0, _chunkBBVTFCMBMjs.useBoolean));
parcelHelpers.export(exports, "useCallbackRef", ()=>(0, _chunkKA2477BYMjs.useCallbackRef));
parcelHelpers.export(exports, "useClipboard", ()=>(0, _chunkKYYEOW6SMjs.useClipboard));
parcelHelpers.export(exports, "useConst", ()=>(0, _chunkQP32JBMJMjs.useConst));
parcelHelpers.export(exports, "useControllableProp", ()=>(0, _chunk7JSBRQFIMjs.useControllableProp));
parcelHelpers.export(exports, "useControllableState", ()=>(0, _chunk7JSBRQFIMjs.useControllableState));
parcelHelpers.export(exports, "useDimensions", ()=>(0, _chunkS7MFKWQBMjs.useDimensions));
parcelHelpers.export(exports, "useDisclosure", ()=>(0, _chunk7JBTTEVGMjs.useDisclosure));
parcelHelpers.export(exports, "useEventListener", ()=>(0, _chunk7JEV5YKLMjs.useEventListener));
parcelHelpers.export(exports, "useEventListenerMap", ()=>(0, _chunkQNRG6N65Mjs.useEventListenerMap));
parcelHelpers.export(exports, "useFocusEffect", ()=>(0, _chunkLAJNVC3FMjs.useFocusEffect));
parcelHelpers.export(exports, "useFocusOnHide", ()=>(0, _chunk4INTB4VCMjs.useFocusOnHide));
parcelHelpers.export(exports, "useFocusOnPointerDown", ()=>(0, _chunkCUYKOI3HMjs.useFocusOnPointerDown));
parcelHelpers.export(exports, "useFocusOnShow", ()=>(0, _chunkIQENJQQ5Mjs.useFocusOnShow));
parcelHelpers.export(exports, "useForceUpdate", ()=>(0, _chunkTJQCN7SCMjs.useForceUpdate));
parcelHelpers.export(exports, "useId", ()=>(0, _chunk6B2YUEGKMjs.useId));
parcelHelpers.export(exports, "useIds", ()=>(0, _chunk6B2YUEGKMjs.useIds));
parcelHelpers.export(exports, "useInterval", ()=>(0, _chunkGVIR6Q3WMjs.useInterval));
parcelHelpers.export(exports, "useLatestRef", ()=>(0, _chunk3VAWNCU2Mjs.useLatestRef));
parcelHelpers.export(exports, "useMergeRefs", ()=>(0, _chunkAZVKQZKIMjs.useMergeRefs));
parcelHelpers.export(exports, "useMouseDownRef", ()=>(0, _chunkLMHOK4JGMjs.useMouseDownRef));
parcelHelpers.export(exports, "useOptionalPart", ()=>(0, _chunk6B2YUEGKMjs.useOptionalPart));
parcelHelpers.export(exports, "useOutsideClick", ()=>(0, _chunkR5W6LHQWMjs.useOutsideClick));
parcelHelpers.export(exports, "usePanGesture", ()=>(0, _chunk77SN3XBTMjs.usePanGesture));
parcelHelpers.export(exports, "usePointerEvent", ()=>(0, _chunkZCYNKCF5Mjs.usePointerEvent));
parcelHelpers.export(exports, "usePrevious", ()=>(0, _chunk6SQFIFNPMjs.usePrevious));
parcelHelpers.export(exports, "useSafeLayoutEffect", ()=>(0, _chunk724WJZW4Mjs.useSafeLayoutEffect));
parcelHelpers.export(exports, "useShortcut", ()=>(0, _chunkYSKACL7RMjs.useShortcut));
parcelHelpers.export(exports, "useTimeout", ()=>(0, _chunkHMTAETMOMjs.useTimeout));
parcelHelpers.export(exports, "useUnmountEffect", ()=>(0, _chunkNGVRPZ6WMjs.useUnmountEffect));
parcelHelpers.export(exports, "useUpdateEffect", ()=>(0, _chunk6WEF4DIOMjs.useUpdateEffect));
parcelHelpers.export(exports, "useWhyDidYouUpdate", ()=>(0, _chunkW4SX2OS5Mjs.useWhyDidYouUpdate));
var _chunk6SQFIFNPMjs = require("./chunk-6SQFIFNP.mjs");
var _chunkYSKACL7RMjs = require("./chunk-YSKACL7R.mjs");
var _chunkHMTAETMOMjs = require("./chunk-HMTAETMO.mjs");
var _chunkW4SX2OS5Mjs = require("./chunk-W4SX2OS5.mjs");
var _chunkGVIR6Q3WMjs = require("./chunk-GVIR6Q3W.mjs");
var _chunk3VAWNCU2Mjs = require("./chunk-3VAWNCU2.mjs");
var _chunkAZVKQZKIMjs = require("./chunk-AZVKQZKI.mjs");
var _chunkLMHOK4JGMjs = require("./chunk-LMHOK4JG.mjs");
var _chunkR5W6LHQWMjs = require("./chunk-R5W6LHQW.mjs");
var _chunk77SN3XBTMjs = require("./chunk-77SN3XBT.mjs");
var _chunk7JBTTEVGMjs = require("./chunk-7JBTTEVG.mjs");
var _chunk6B2YUEGKMjs = require("./chunk-6B2YUEGK.mjs");
var _chunkQNRG6N65Mjs = require("./chunk-QNRG6N65.mjs");
var _chunkLAJNVC3FMjs = require("./chunk-LAJNVC3F.mjs");
var _chunk4INTB4VCMjs = require("./chunk-4INTB4VC.mjs");
var _chunkCUYKOI3HMjs = require("./chunk-CUYKOI3H.mjs");
var _chunkZCYNKCF5Mjs = require("./chunk-ZCYNKCF5.mjs");
var _chunkIQENJQQ5Mjs = require("./chunk-IQENJQQ5.mjs");
var _chunk6WEF4DIOMjs = require("./chunk-6WEF4DIO.mjs");
var _chunkTJQCN7SCMjs = require("./chunk-TJQCN7SC.mjs");
var _chunkNGVRPZ6WMjs = require("./chunk-NGVRPZ6W.mjs");
var _chunkATO3JZNWMjs = require("./chunk-ATO3JZNW.mjs");
var _chunk7JEV5YKLMjs = require("./chunk-7JEV5YKL.mjs");
var _chunkBBVTFCMBMjs = require("./chunk-BBVTFCMB.mjs");
var _chunkKYYEOW6SMjs = require("./chunk-KYYEOW6S.mjs");
var _chunkQP32JBMJMjs = require("./chunk-QP32JBMJ.mjs");
var _chunk7JSBRQFIMjs = require("./chunk-7JSBRQFI.mjs");
var _chunkKA2477BYMjs = require("./chunk-KA2477BY.mjs");
var _chunkS7MFKWQBMjs = require("./chunk-S7MFKWQB.mjs");
var _chunk724WJZW4Mjs = require("./chunk-724WJZW4.mjs");
"use client";

},{"./chunk-6SQFIFNP.mjs":"b3x9p","./chunk-YSKACL7R.mjs":"lzrfh","./chunk-HMTAETMO.mjs":"cb38g","./chunk-W4SX2OS5.mjs":"f4kpW","./chunk-GVIR6Q3W.mjs":"8YRSn","./chunk-3VAWNCU2.mjs":"99zFO","./chunk-AZVKQZKI.mjs":"7Tdyg","./chunk-LMHOK4JG.mjs":"14yru","./chunk-R5W6LHQW.mjs":"e5p9c","./chunk-77SN3XBT.mjs":"gPX1R","./chunk-7JBTTEVG.mjs":"lrxbw","./chunk-6B2YUEGK.mjs":"5ZhN2","./chunk-QNRG6N65.mjs":"43BwN","./chunk-LAJNVC3F.mjs":"hwKR3","./chunk-4INTB4VC.mjs":"1kj1Q","./chunk-CUYKOI3H.mjs":"fBf5c","./chunk-ZCYNKCF5.mjs":"aRnL6","./chunk-IQENJQQ5.mjs":"8T5Bu","./chunk-6WEF4DIO.mjs":"6hV6f","./chunk-TJQCN7SC.mjs":"43Y5y","./chunk-NGVRPZ6W.mjs":"80rfL","./chunk-ATO3JZNW.mjs":"e6e3c","./chunk-7JEV5YKL.mjs":"1ASbp","./chunk-BBVTFCMB.mjs":"7XwGB","./chunk-KYYEOW6S.mjs":"4ObSF","./chunk-QP32JBMJ.mjs":"9pRDe","./chunk-7JSBRQFI.mjs":"iRvNE","./chunk-KA2477BY.mjs":"i3jfE","./chunk-S7MFKWQB.mjs":"bj6Vk","./chunk-724WJZW4.mjs":"984N8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b3x9p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePrevious", ()=>usePrevious);
// src/use-previous.ts
var _react = require("react");
"use client";
function usePrevious(value) {
    const ref = (0, _react.useRef)();
    (0, _react.useEffect)(()=>{
        ref.current = value;
    }, [
        value
    ]);
    return ref.current;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lzrfh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useShortcut", ()=>useShortcut);
// src/use-shortcut.ts
var _react = require("react");
"use client";
function isPrintableCharacter(event) {
    const { key } = event;
    return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);
}
function useShortcut(props = {}) {
    const { timeout = 300, preventDefault = ()=>true } = props;
    const [keys, setKeys] = (0, _react.useState)([]);
    const timeoutRef = (0, _react.useRef)();
    const flush = ()=>{
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = null;
        }
    };
    const clearKeysAfterDelay = ()=>{
        flush();
        timeoutRef.current = setTimeout(()=>{
            setKeys([]);
            timeoutRef.current = null;
        }, timeout);
    };
    (0, _react.useEffect)(()=>flush, []);
    function onKeyDown(fn) {
        return (event)=>{
            if (event.key === "Backspace") {
                const keysCopy = [
                    ...keys
                ];
                keysCopy.pop();
                setKeys(keysCopy);
                return;
            }
            if (isPrintableCharacter(event)) {
                const keysCopy = keys.concat(event.key);
                if (preventDefault(event)) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                setKeys(keysCopy);
                fn(keysCopy.join(""));
                clearKeysAfterDelay();
            }
        };
    }
    return onKeyDown;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cb38g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useTimeout", ()=>useTimeout);
var _chunkKA2477BYMjs = require("./chunk-KA2477BY.mjs");
// src/use-timeout.ts
var _react = require("react");
"use client";
function useTimeout(callback, delay) {
    const fn = (0, _chunkKA2477BYMjs.useCallbackRef)(callback);
    (0, _react.useEffect)(()=>{
        if (delay == null) return void 0;
        let timeoutId = null;
        timeoutId = window.setTimeout(()=>{
            fn();
        }, delay);
        return ()=>{
            if (timeoutId) window.clearTimeout(timeoutId);
        };
    }, [
        delay,
        fn
    ]);
}

},{"./chunk-KA2477BY.mjs":"i3jfE","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i3jfE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCallbackRef", ()=>useCallbackRef);
var _chunk724WJZW4Mjs = require("./chunk-724WJZW4.mjs");
// src/use-callback-ref.ts
var _react = require("react");
"use client";
function useCallbackRef(fn, deps = []) {
    const ref = (0, _react.useRef)(fn);
    (0, _chunk724WJZW4Mjs.useSafeLayoutEffect)(()=>{
        ref.current = fn;
    });
    return (0, _react.useCallback)((...args)=>{
        var _a;
        return (_a = ref.current) == null ? void 0 : _a.call(ref, ...args);
    }, deps);
}

},{"./chunk-724WJZW4.mjs":"984N8","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"984N8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSafeLayoutEffect", ()=>useSafeLayoutEffect);
// src/use-safe-layout-effect.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
var useSafeLayoutEffect = (0, _utils.isBrowser) ? (0, _react.useLayoutEffect) : (0, _react.useEffect);

},{"@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f4kpW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useWhyDidYouUpdate", ()=>useWhyDidYouUpdate);
// src/use-why-update.ts
var _react = require("react");
"use client";
function useWhyDidYouUpdate(name, props) {
    const previousProps = (0, _react.useRef)();
    (0, _react.useEffect)(()=>{
        if (previousProps.current) {
            const allKeys = Object.keys({
                ...previousProps.current,
                ...props
            });
            const changesObj = {};
            allKeys.forEach((key)=>{
                if (previousProps.current[key] !== props[key]) changesObj[key] = {
                    from: previousProps.current[key],
                    to: props[key]
                };
            });
            if (Object.keys(changesObj).length) console.log("[why-did-you-update]", name, changesObj);
        }
        previousProps.current = props;
    });
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8YRSn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useInterval", ()=>useInterval);
var _chunkKA2477BYMjs = require("./chunk-KA2477BY.mjs");
// src/use-interval.ts
var _react = require("react");
"use client";
function useInterval(callback, delay) {
    const fn = (0, _chunkKA2477BYMjs.useCallbackRef)(callback);
    (0, _react.useEffect)(()=>{
        let intervalId = null;
        const tick = ()=>fn();
        if (delay !== null) intervalId = window.setInterval(tick, delay);
        return ()=>{
            if (intervalId) window.clearInterval(intervalId);
        };
    }, [
        delay,
        fn
    ]);
}

},{"./chunk-KA2477BY.mjs":"i3jfE","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99zFO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useLatestRef", ()=>useLatestRef);
// src/use-latest-ref.ts
var _react = require("react");
"use client";
function useLatestRef(value) {
    const ref = (0, _react.useRef)(null);
    ref.current = value;
    return ref;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Tdyg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignRef", ()=>assignRef);
parcelHelpers.export(exports, "useMergeRefs", ()=>useMergeRefs);
// src/use-merge-refs.ts
var _react = require("react");
"use client";
function assignRef(ref, value) {
    if (ref == null) return;
    if (typeof ref === "function") {
        ref(value);
        return;
    }
    try {
        ref.current = value;
    } catch (error) {
        throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
    }
}
function useMergeRefs(...refs) {
    return (0, _react.useMemo)(()=>{
        if (refs.every((ref)=>ref == null)) return null;
        return (node)=>{
            refs.forEach((ref)=>{
                if (ref) assignRef(ref, node);
            });
        };
    }, refs);
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"14yru":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useMouseDownRef", ()=>useMouseDownRef);
var _chunk7JEV5YKLMjs = require("./chunk-7JEV5YKL.mjs");
// src/use-mouse-down-ref.ts
var _react = require("react");
"use client";
function useMouseDownRef(shouldListen = true) {
    const mouseDownRef = (0, _react.useRef)();
    (0, _chunk7JEV5YKLMjs.useEventListener)("mousedown", (event)=>{
        if (shouldListen) mouseDownRef.current = event.target;
    });
    return mouseDownRef;
}

},{"./chunk-7JEV5YKL.mjs":"1ASbp","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ASbp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEventListener", ()=>useEventListener);
var _chunkKA2477BYMjs = require("./chunk-KA2477BY.mjs");
// src/use-event-listener.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
function useEventListener(event, handler, env, options) {
    const listener = (0, _chunkKA2477BYMjs.useCallbackRef)(handler);
    (0, _react.useEffect)(()=>{
        var _a;
        const node = (_a = (0, _utils.runIfFn)(env)) != null ? _a : document;
        if (!handler) return;
        node.addEventListener(event, listener, options);
        return ()=>{
            node.removeEventListener(event, listener, options);
        };
    }, [
        event,
        env,
        options,
        listener,
        handler
    ]);
    return ()=>{
        var _a;
        const node = (_a = (0, _utils.runIfFn)(env)) != null ? _a : document;
        node.removeEventListener(event, listener, options);
    };
}

},{"./chunk-KA2477BY.mjs":"i3jfE","@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e5p9c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useOutsideClick", ()=>useOutsideClick);
var _chunkKA2477BYMjs = require("./chunk-KA2477BY.mjs");
// src/use-outside-click.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
function useOutsideClick(props) {
    const { ref, handler, enabled = true } = props;
    const savedHandler = (0, _chunkKA2477BYMjs.useCallbackRef)(handler);
    const stateRef = (0, _react.useRef)({
        isPointerDown: false,
        ignoreEmulatedMouseEvents: false
    });
    const state = stateRef.current;
    (0, _react.useEffect)(()=>{
        if (!enabled) return;
        const onPointerDown = (e)=>{
            if (isValidEvent(e, ref)) state.isPointerDown = true;
        };
        const onMouseUp = (event)=>{
            if (state.ignoreEmulatedMouseEvents) {
                state.ignoreEmulatedMouseEvents = false;
                return;
            }
            if (state.isPointerDown && handler && isValidEvent(event, ref)) {
                state.isPointerDown = false;
                savedHandler(event);
            }
        };
        const onTouchEnd = (event)=>{
            state.ignoreEmulatedMouseEvents = true;
            if (handler && state.isPointerDown && isValidEvent(event, ref)) {
                state.isPointerDown = false;
                savedHandler(event);
            }
        };
        const doc = (0, _utils.getOwnerDocument)(ref.current);
        doc.addEventListener("mousedown", onPointerDown, true);
        doc.addEventListener("mouseup", onMouseUp, true);
        doc.addEventListener("touchstart", onPointerDown, true);
        doc.addEventListener("touchend", onTouchEnd, true);
        return ()=>{
            doc.removeEventListener("mousedown", onPointerDown, true);
            doc.removeEventListener("mouseup", onMouseUp, true);
            doc.removeEventListener("touchstart", onPointerDown, true);
            doc.removeEventListener("touchend", onTouchEnd, true);
        };
    }, [
        handler,
        ref,
        savedHandler,
        state,
        enabled
    ]);
}
function isValidEvent(event, ref) {
    var _a;
    const target = event.target;
    if (target) {
        const doc = (0, _utils.getOwnerDocument)(target);
        if (!doc.contains(target)) return false;
    }
    return !((_a = ref.current) == null ? void 0 : _a.contains(target));
}

},{"./chunk-KA2477BY.mjs":"i3jfE","@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gPX1R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePanGesture", ()=>usePanGesture);
var _chunkZCYNKCF5Mjs = require("./chunk-ZCYNKCF5.mjs");
var _chunkNGVRPZ6WMjs = require("./chunk-NGVRPZ6W.mjs");
// src/use-pan-gesture.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
function usePanGesture(ref, props) {
    const { onPan, onPanStart, onPanEnd, onPanSessionStart, onPanSessionEnd, threshold } = props;
    const hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);
    const panSession = (0, _react.useRef)(null);
    const handlers = {
        onSessionStart: onPanSessionStart,
        onSessionEnd: onPanSessionEnd,
        onStart: onPanStart,
        onMove: onPan,
        onEnd (event, info) {
            panSession.current = null;
            onPanEnd == null || onPanEnd(event, info);
        }
    };
    (0, _react.useEffect)(()=>{
        var _a;
        (_a = panSession.current) == null || _a.updateHandlers(handlers);
    });
    function onPointerDown(event) {
        panSession.current = new (0, _utils.PanSession)(event, handlers, threshold);
    }
    (0, _chunkZCYNKCF5Mjs.usePointerEvent)(()=>ref.current, "pointerdown", hasPanEvents ? onPointerDown : (0, _utils.noop));
    (0, _chunkNGVRPZ6WMjs.useUnmountEffect)(()=>{
        var _a;
        (_a = panSession.current) == null || _a.end();
        panSession.current = null;
    });
}

},{"./chunk-ZCYNKCF5.mjs":"aRnL6","./chunk-NGVRPZ6W.mjs":"80rfL","@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aRnL6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePointerEvent", ()=>usePointerEvent);
var _chunk7JEV5YKLMjs = require("./chunk-7JEV5YKL.mjs");
// src/use-pointer-event.ts
var _utils = require("@chakra-ui/utils");
"use client";
function usePointerEvent(env, eventName, handler, options) {
    return (0, _chunk7JEV5YKLMjs.useEventListener)((0, _utils.getPointerEventName)(eventName), (0, _utils.wrapPointerEventHandler)(handler, eventName === "pointerdown"), env, options);
}

},{"./chunk-7JEV5YKL.mjs":"1ASbp","@chakra-ui/utils":"cOMMM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80rfL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useUnmountEffect", ()=>useUnmountEffect);
// src/use-unmount-effect.ts
var _react = require("react");
"use client";
function useUnmountEffect(fn, deps = []) {
    return (0, _react.useEffect)(()=>()=>fn(), // eslint-disable-next-line react-hooks/exhaustive-deps
    deps);
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lrxbw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useDisclosure", ()=>useDisclosure);
var _chunk6B2YUEGKMjs = require("./chunk-6B2YUEGK.mjs");
var _chunk7JSBRQFIMjs = require("./chunk-7JSBRQFI.mjs");
var _chunkKA2477BYMjs = require("./chunk-KA2477BY.mjs");
// src/use-disclosure.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
function useDisclosure(props = {}) {
    const { onClose: onCloseProp, onOpen: onOpenProp, isOpen: isOpenProp, id: idProp } = props;
    const onOpenPropCallbackRef = (0, _chunkKA2477BYMjs.useCallbackRef)(onOpenProp);
    const onClosePropCallbackRef = (0, _chunkKA2477BYMjs.useCallbackRef)(onCloseProp);
    const [isOpenState, setIsOpen] = (0, _react.useState)(props.defaultIsOpen || false);
    const [isControlled, isOpen] = (0, _chunk7JSBRQFIMjs.useControllableProp)(isOpenProp, isOpenState);
    const id = (0, _chunk6B2YUEGKMjs.useId)(idProp, "disclosure");
    const onClose = (0, _react.useCallback)(()=>{
        if (!isControlled) setIsOpen(false);
        onClosePropCallbackRef == null || onClosePropCallbackRef();
    }, [
        isControlled,
        onClosePropCallbackRef
    ]);
    const onOpen = (0, _react.useCallback)(()=>{
        if (!isControlled) setIsOpen(true);
        onOpenPropCallbackRef == null || onOpenPropCallbackRef();
    }, [
        isControlled,
        onOpenPropCallbackRef
    ]);
    const onToggle = (0, _react.useCallback)(()=>{
        const action = isOpen ? onClose : onOpen;
        action();
    }, [
        isOpen,
        onOpen,
        onClose
    ]);
    return {
        isOpen: !!isOpen,
        onOpen,
        onClose,
        onToggle,
        isControlled,
        getButtonProps: (props2 = {})=>({
                ...props2,
                "aria-expanded": isOpen,
                "aria-controls": id,
                onClick: (0, _utils.callAllHandlers)(props2.onClick, onToggle)
            }),
        getDisclosureProps: (props2 = {})=>({
                ...props2,
                hidden: !isOpen,
                id
            })
    };
}

},{"./chunk-6B2YUEGK.mjs":"5ZhN2","./chunk-7JSBRQFI.mjs":"iRvNE","./chunk-KA2477BY.mjs":"i3jfE","@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ZhN2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useId", ()=>useId);
parcelHelpers.export(exports, "useIds", ()=>useIds);
parcelHelpers.export(exports, "useOptionalPart", ()=>useOptionalPart);
// src/use-id.ts
var _react = require("react");
"use client";
function useId(idProp, prefix) {
    const id = (0, _react.useId)();
    return (0, _react.useMemo)(()=>idProp || [
            prefix,
            id
        ].filter(Boolean).join("-"), [
        idProp,
        prefix,
        id
    ]);
}
function useIds(idProp, ...prefixes) {
    const id = useId(idProp);
    return (0, _react.useMemo)(()=>{
        return prefixes.map((prefix)=>`${prefix}-${id}`);
    }, [
        id,
        prefixes
    ]);
}
function useOptionalPart(partId) {
    const [id, setId] = (0, _react.useState)(null);
    const ref = (0, _react.useCallback)((node)=>{
        setId(node ? partId : null);
    }, [
        partId
    ]);
    return {
        ref,
        id,
        isRendered: Boolean(id)
    };
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRvNE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useControllableProp", ()=>useControllableProp);
parcelHelpers.export(exports, "useControllableState", ()=>useControllableState);
var _chunkKA2477BYMjs = require("./chunk-KA2477BY.mjs");
// src/use-controllable.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
function useControllableProp(prop, state) {
    const isControlled = prop !== void 0;
    const value = isControlled && typeof prop !== "undefined" ? prop : state;
    return [
        isControlled,
        value
    ];
}
function useControllableState(props) {
    const { value: valueProp, defaultValue, onChange, shouldUpdate = (prev, next)=>prev !== next } = props;
    const onChangeProp = (0, _chunkKA2477BYMjs.useCallbackRef)(onChange);
    const shouldUpdateProp = (0, _chunkKA2477BYMjs.useCallbackRef)(shouldUpdate);
    const [valueState, setValue] = (0, _react.useState)(defaultValue);
    const isControlled = valueProp !== void 0;
    const value = isControlled ? valueProp : valueState;
    const updateValue = (0, _react.useCallback)((next)=>{
        const nextValue = (0, _utils.runIfFn)(next, value);
        if (!shouldUpdateProp(value, nextValue)) return;
        if (!isControlled) setValue(nextValue);
        onChangeProp(nextValue);
    }, [
        isControlled,
        onChangeProp,
        value,
        shouldUpdateProp
    ]);
    return [
        value,
        updateValue
    ];
}

},{"./chunk-KA2477BY.mjs":"i3jfE","@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43BwN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEventListenerMap", ()=>useEventListenerMap);
// src/use-event-listener-map.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
function useEventListenerMap() {
    const listeners = (0, _react.useRef)(/* @__PURE__ */ new Map());
    const currentListeners = listeners.current;
    const add = (0, _react.useCallback)((el, type, listener, options)=>{
        const pointerEventListener = (0, _utils.wrapPointerEventHandler)(listener, type === "pointerdown");
        listeners.current.set(listener, {
            __listener: pointerEventListener,
            type: (0, _utils.getPointerEventName)(type),
            el,
            options
        });
        el.addEventListener(type, pointerEventListener, options);
    }, []);
    const remove = (0, _react.useCallback)((el, type, listener, options)=>{
        const { __listener: pointerEventListener } = listeners.current.get(listener);
        el.removeEventListener(type, pointerEventListener, options);
        listeners.current.delete(pointerEventListener);
    }, []);
    (0, _react.useEffect)(()=>()=>{
            currentListeners.forEach((value, key)=>{
                remove(value.el, value.type, key, value.options);
            });
        }, [
        remove,
        currentListeners
    ]);
    return {
        add,
        remove
    };
}

},{"@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hwKR3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useFocusEffect", ()=>useFocusEffect);
var _chunk6WEF4DIOMjs = require("./chunk-6WEF4DIO.mjs");
// src/use-focus-effect.ts
var _utils = require("@chakra-ui/utils");
"use client";
function useFocusEffect(ref, options) {
    const { shouldFocus, preventScroll } = options;
    (0, _chunk6WEF4DIOMjs.useUpdateEffect)(()=>{
        const node = ref.current;
        if (!node || !shouldFocus) return;
        if (!(0, _utils.hasFocusWithin)(node)) (0, _utils.focus)(node, {
            preventScroll,
            nextTick: true
        });
    }, [
        shouldFocus,
        ref,
        preventScroll
    ]);
}

},{"./chunk-6WEF4DIO.mjs":"6hV6f","@chakra-ui/utils":"cOMMM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6hV6f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useUpdateEffect", ()=>useUpdateEffect);
// src/use-update-effect.ts
var _react = require("react");
"use client";
var useUpdateEffect = (effect, deps)=>{
    const renderCycleRef = (0, _react.useRef)(false);
    const effectCycleRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(()=>{
        const isMounted = renderCycleRef.current;
        const shouldRun = isMounted && effectCycleRef.current;
        if (shouldRun) return effect();
        effectCycleRef.current = true;
    }, deps);
    (0, _react.useEffect)(()=>{
        renderCycleRef.current = true;
        return ()=>{
            renderCycleRef.current = false;
        };
    }, []);
};

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1kj1Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useFocusOnHide", ()=>useFocusOnHide);
var _chunk6WEF4DIOMjs = require("./chunk-6WEF4DIO.mjs");
// src/use-focus-on-hide.ts
var _utils = require("@chakra-ui/utils");
"use client";
function preventReturnFocus(containerRef) {
    const el = containerRef.current;
    if (!el) return false;
    const activeElement = (0, _utils.getActiveElement)(el);
    if (!activeElement) return false;
    if ((0, _utils.contains)(el, activeElement)) return false;
    if ((0, _utils.isTabbable)(activeElement)) return true;
    return false;
}
function useFocusOnHide(containerRef, options) {
    const { shouldFocus: shouldFocusProp, visible, focusRef } = options;
    const shouldFocus = shouldFocusProp && !visible;
    (0, _chunk6WEF4DIOMjs.useUpdateEffect)(()=>{
        if (!shouldFocus) return;
        if (preventReturnFocus(containerRef)) return;
        const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;
        if (el) (0, _utils.focus)(el, {
            nextTick: true
        });
    }, [
        shouldFocus,
        containerRef,
        focusRef
    ]);
}

},{"./chunk-6WEF4DIO.mjs":"6hV6f","@chakra-ui/utils":"cOMMM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fBf5c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useFocusOnPointerDown", ()=>useFocusOnPointerDown);
var _chunkZCYNKCF5Mjs = require("./chunk-ZCYNKCF5.mjs");
// src/use-focus-on-pointerdown.ts
var _utils = require("@chakra-ui/utils");
"use client";
function useFocusOnPointerDown(props) {
    const { ref, elements, enabled } = props;
    const isSafari = (0, _utils.detectBrowser)("Safari");
    const doc = ()=>(0, _utils.getOwnerDocument)(ref.current);
    (0, _chunkZCYNKCF5Mjs.usePointerEvent)(doc, "pointerdown", (event)=>{
        if (!isSafari || !enabled) return;
        const target = event.target;
        const els = elements != null ? elements : [
            ref
        ];
        const isValidTarget = els.some((elementOrRef)=>{
            const el = (0, _utils.isRefObject)(elementOrRef) ? elementOrRef.current : elementOrRef;
            return (0, _utils.contains)(el, target);
        });
        if (!(0, _utils.isActiveElement)(target) && isValidTarget) {
            event.preventDefault();
            (0, _utils.focus)(target);
        }
    });
}

},{"./chunk-ZCYNKCF5.mjs":"aRnL6","@chakra-ui/utils":"cOMMM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8T5Bu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useFocusOnShow", ()=>useFocusOnShow);
var _chunk6WEF4DIOMjs = require("./chunk-6WEF4DIO.mjs");
var _chunk7JEV5YKLMjs = require("./chunk-7JEV5YKL.mjs");
var _chunk724WJZW4Mjs = require("./chunk-724WJZW4.mjs");
// src/use-focus-on-show.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
var defaultOptions = {
    preventScroll: true,
    shouldFocus: false
};
function useFocusOnShow(target, options = defaultOptions) {
    const { focusRef, preventScroll, shouldFocus, visible } = options;
    const element = (0, _utils.isRefObject)(target) ? target.current : target;
    const autoFocusValue = shouldFocus && visible;
    const autoFocusRef = (0, _react.useRef)(autoFocusValue);
    const lastVisibleRef = (0, _react.useRef)(visible);
    (0, _chunk724WJZW4Mjs.useSafeLayoutEffect)(()=>{
        if (!lastVisibleRef.current && visible) autoFocusRef.current = autoFocusValue;
        lastVisibleRef.current = visible;
    }, [
        visible,
        autoFocusValue
    ]);
    const onFocus = (0, _react.useCallback)(()=>{
        if (!visible || !element || !autoFocusRef.current) return;
        autoFocusRef.current = false;
        if ((0, _utils.contains)(element, document.activeElement)) return;
        if (focusRef == null ? void 0 : focusRef.current) (0, _utils.focus)(focusRef.current, {
            preventScroll,
            nextTick: true
        });
        else {
            const tabbableEls = (0, _utils.getAllFocusable)(element);
            if (tabbableEls.length > 0) (0, _utils.focus)(tabbableEls[0], {
                preventScroll,
                nextTick: true
            });
        }
    }, [
        visible,
        preventScroll,
        element,
        focusRef
    ]);
    (0, _chunk6WEF4DIOMjs.useUpdateEffect)(()=>{
        onFocus();
    }, [
        onFocus
    ]);
    (0, _chunk7JEV5YKLMjs.useEventListener)("transitionend", onFocus, element);
}

},{"./chunk-6WEF4DIO.mjs":"6hV6f","./chunk-7JEV5YKL.mjs":"1ASbp","./chunk-724WJZW4.mjs":"984N8","@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43Y5y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useForceUpdate", ()=>useForceUpdate);
var _chunkNGVRPZ6WMjs = require("./chunk-NGVRPZ6W.mjs");
// src/use-force-update.ts
var _react = require("react");
"use client";
function useForceUpdate() {
    const unloadingRef = (0, _react.useRef)(false);
    const [count, setCount] = (0, _react.useState)(0);
    (0, _chunkNGVRPZ6WMjs.useUnmountEffect)(()=>{
        unloadingRef.current = true;
    });
    return (0, _react.useCallback)(()=>{
        if (!unloadingRef.current) setCount(count + 1);
    }, [
        count
    ]);
}

},{"./chunk-NGVRPZ6W.mjs":"80rfL","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e6e3c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useAnimationState", ()=>useAnimationState);
var _chunk7JEV5YKLMjs = require("./chunk-7JEV5YKL.mjs");
// src/use-animation-state.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
function useAnimationState(props) {
    const { isOpen, ref } = props;
    const [mounted, setMounted] = (0, _react.useState)(isOpen);
    const [once, setOnce] = (0, _react.useState)(false);
    (0, _react.useEffect)(()=>{
        if (!once) {
            setMounted(isOpen);
            setOnce(true);
        }
    }, [
        isOpen,
        once,
        mounted
    ]);
    (0, _chunk7JEV5YKLMjs.useEventListener)("animationend", ()=>{
        setMounted(isOpen);
    }, ()=>ref.current);
    const hidden = isOpen ? false : !mounted;
    return {
        present: !hidden,
        onComplete () {
            var _a;
            const win = (0, _utils.getOwnerWindow)(ref.current);
            const evt = new win.CustomEvent("animationend", {
                bubbles: true
            });
            (_a = ref.current) == null || _a.dispatchEvent(evt);
        }
    };
}

},{"./chunk-7JEV5YKL.mjs":"1ASbp","@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7XwGB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useBoolean", ()=>useBoolean);
// src/use-boolean.ts
var _react = require("react");
"use client";
function useBoolean(initialState = false) {
    const [value, setValue] = (0, _react.useState)(initialState);
    const callbacks = (0, _react.useMemo)(()=>({
            on: ()=>setValue(true),
            off: ()=>setValue(false),
            toggle: ()=>setValue((prev)=>!prev)
        }), []);
    return [
        value,
        callbacks
    ];
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ObSF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useClipboard", ()=>useClipboard);
// src/use-clipboard.ts
var _react = require("react");
var _copyToClipboard = require("copy-to-clipboard");
var _copyToClipboardDefault = parcelHelpers.interopDefault(_copyToClipboard);
"use client";
function useClipboard(value, optionsOrTimeout = {}) {
    const [hasCopied, setHasCopied] = (0, _react.useState)(false);
    const [valueState, setValueState] = (0, _react.useState)(value);
    (0, _react.useEffect)(()=>setValueState(value), [
        value
    ]);
    const { timeout = 1500, ...copyOptions } = typeof optionsOrTimeout === "number" ? {
        timeout: optionsOrTimeout
    } : optionsOrTimeout;
    const onCopy = (0, _react.useCallback)(()=>{
        const didCopy = (0, _copyToClipboardDefault.default)(valueState, copyOptions);
        setHasCopied(didCopy);
    }, [
        valueState,
        copyOptions
    ]);
    (0, _react.useEffect)(()=>{
        let timeoutId = null;
        if (hasCopied) timeoutId = window.setTimeout(()=>{
            setHasCopied(false);
        }, timeout);
        return ()=>{
            if (timeoutId) window.clearTimeout(timeoutId);
        };
    }, [
        timeout,
        hasCopied
    ]);
    return {
        value: valueState,
        setValue: setValueState,
        onCopy,
        hasCopied
    };
}

},{"react":"21dqq","copy-to-clipboard":"fLPFI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fLPFI":[function(require,module,exports) {
"use strict";
var deselectCurrent = require("b270149f26797c52");
var clipboardToIE11Formatting = {
    "text/plain": "Text",
    "text/html": "Url",
    "default": "Text"
};
var defaultMessage = "Copy to clipboard: #{key}, Enter";
function format(message) {
    var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
    return message.replace(/#{\s*key\s*}/g, copyKey);
}
function copy(text, options) {
    var debug, message, reselectPrevious, range, selection, mark, success = false;
    if (!options) options = {};
    debug = options.debug || false;
    try {
        reselectPrevious = deselectCurrent();
        range = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text;
        // avoid screen readers from reading out loud the text
        mark.ariaHidden = "true";
        // reset user styles for span element
        mark.style.all = "unset";
        // prevents scrolling to the end of the page
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        // used to preserve spaces and line breaks
        mark.style.whiteSpace = "pre";
        // do not inherit user-select (it may be `none`)
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e) {
            e.stopPropagation();
            if (options.format) {
                e.preventDefault();
                if (typeof e.clipboardData === "undefined") {
                    debug && console.warn("unable to use e.clipboardData");
                    debug && console.warn("trying IE specific stuff");
                    window.clipboardData.clearData();
                    var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
                    window.clipboardData.setData(format, text);
                } else {
                    e.clipboardData.clearData();
                    e.clipboardData.setData(options.format, text);
                }
            }
            if (options.onCopy) {
                e.preventDefault();
                options.onCopy(e.clipboardData);
            }
        });
        document.body.appendChild(mark);
        range.selectNodeContents(mark);
        selection.addRange(range);
        var successful = document.execCommand("copy");
        if (!successful) throw new Error("copy command was unsuccessful");
        success = true;
    } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
            window.clipboardData.setData(options.format || "text", text);
            options.onCopy && options.onCopy(window.clipboardData);
            success = true;
        } catch (err) {
            debug && console.error("unable to copy using clipboardData: ", err);
            debug && console.error("falling back to prompt");
            message = format("message" in options ? options.message : defaultMessage);
            window.prompt(message, text);
        }
    } finally{
        if (selection) {
            if (typeof selection.removeRange == "function") selection.removeRange(range);
            else selection.removeAllRanges();
        }
        if (mark) document.body.removeChild(mark);
        reselectPrevious();
    }
    return success;
}
module.exports = copy;

},{"b270149f26797c52":"jmaua"}],"jmaua":[function(require,module,exports) {
module.exports = function() {
    var selection = document.getSelection();
    if (!selection.rangeCount) return function() {};
    var active = document.activeElement;
    var ranges = [];
    for(var i = 0; i < selection.rangeCount; i++)ranges.push(selection.getRangeAt(i));
    switch(active.tagName.toUpperCase()){
        case "INPUT":
        case "TEXTAREA":
            active.blur();
            break;
        default:
            active = null;
            break;
    }
    selection.removeAllRanges();
    return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) ranges.forEach(function(range) {
            selection.addRange(range);
        });
        active && active.focus();
    };
};

},{}],"9pRDe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useConst", ()=>useConst);
// src/use-const.ts
var _react = require("react");
"use client";
function useConst(init) {
    const ref = (0, _react.useRef)(null);
    if (ref.current === null) ref.current = typeof init === "function" ? init() : init;
    return ref.current;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bj6Vk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useDimensions", ()=>useDimensions);
var _chunk724WJZW4Mjs = require("./chunk-724WJZW4.mjs");
// src/use-dimensions.ts
var _utils = require("@chakra-ui/utils");
var _react = require("react");
"use client";
function useDimensions(ref, observe) {
    const [dimensions, setDimensions] = (0, _react.useState)(null);
    const rafId = (0, _react.useRef)();
    (0, _chunk724WJZW4Mjs.useSafeLayoutEffect)(()=>{
        function measure() {
            const node = ref.current;
            if (!node) return;
            rafId.current = requestAnimationFrame(()=>{
                const boxModel = (0, _utils.getBox)(node);
                setDimensions(boxModel);
            });
        }
        measure();
        if (observe) {
            window.addEventListener("resize", measure);
            window.addEventListener("scroll", measure);
        }
        return ()=>{
            if (observe) {
                window.removeEventListener("resize", measure);
                window.removeEventListener("scroll", measure);
            }
            if (rafId.current) cancelAnimationFrame(rafId.current);
        };
    }, [
        observe
    ]);
    return dimensions;
}

},{"./chunk-724WJZW4.mjs":"984N8","@chakra-ui/utils":"cOMMM","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8EdY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Input", ()=>(0, _chunk6CVSDS6CMjs.Input));
parcelHelpers.export(exports, "InputAddon", ()=>(0, _chunkADBZ7YHXMjs.InputAddon));
parcelHelpers.export(exports, "InputGroup", ()=>(0, _chunkFKYN3ZGEMjs.InputGroup));
parcelHelpers.export(exports, "InputLeftAddon", ()=>(0, _chunkADBZ7YHXMjs.InputLeftAddon));
parcelHelpers.export(exports, "InputLeftElement", ()=>(0, _chunk2ZHRCML3Mjs.InputLeftElement));
parcelHelpers.export(exports, "InputRightAddon", ()=>(0, _chunkADBZ7YHXMjs.InputRightAddon));
parcelHelpers.export(exports, "InputRightElement", ()=>(0, _chunk2ZHRCML3Mjs.InputRightElement));
parcelHelpers.export(exports, "useInputGroupStyles", ()=>(0, _chunkFKYN3ZGEMjs.useInputGroupStyles));
var _chunkADBZ7YHXMjs = require("./chunk-ADBZ7YHX.mjs");
var _chunk2ZHRCML3Mjs = require("./chunk-2ZHRCML3.mjs");
var _chunkFKYN3ZGEMjs = require("./chunk-FKYN3ZGE.mjs");
var _chunk6CVSDS6CMjs = require("./chunk-6CVSDS6C.mjs");
"use client";

},{"./chunk-ADBZ7YHX.mjs":"xs6EI","./chunk-2ZHRCML3.mjs":"6ZgYp","./chunk-FKYN3ZGE.mjs":"aVxp0","./chunk-6CVSDS6C.mjs":"71OSM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"xs6EI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InputAddon", ()=>InputAddon);
parcelHelpers.export(exports, "InputLeftAddon", ()=>InputLeftAddon);
parcelHelpers.export(exports, "InputRightAddon", ()=>InputRightAddon);
var _chunkFKYN3ZGEMjs = require("./chunk-FKYN3ZGE.mjs");
// src/input-addon.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var placements = {
    left: {
        marginEnd: "-1px",
        borderEndRadius: 0,
        borderEndColor: "transparent"
    },
    right: {
        marginStart: "-1px",
        borderStartRadius: 0,
        borderStartColor: "transparent"
    }
};
var StyledAddon = (0, _system.chakra)("div", {
    baseStyle: {
        flex: "0 0 auto",
        width: "auto",
        display: "flex",
        alignItems: "center",
        whiteSpace: "nowrap"
    }
});
var InputAddon = (0, _system.forwardRef)(function InputAddon2(props, ref) {
    var _a;
    const { placement = "left", ...rest } = props;
    const placementStyles = (_a = placements[placement]) != null ? _a : {};
    const styles = (0, _chunkFKYN3ZGEMjs.useInputGroupStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StyledAddon, {
        ref,
        ...rest,
        __css: {
            ...styles.addon,
            ...placementStyles
        }
    });
});
InputAddon.displayName = "InputAddon";
var InputLeftAddon = (0, _system.forwardRef)(function InputLeftAddon2(props, ref) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputAddon, {
        ref,
        placement: "left",
        ...props,
        className: (0, _sharedUtils.cx)("chakra-input__left-addon", props.className)
    });
});
InputLeftAddon.displayName = "InputLeftAddon";
InputLeftAddon.id = "InputLeftAddon";
var InputRightAddon = (0, _system.forwardRef)(function InputRightAddon2(props, ref) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputAddon, {
        ref,
        placement: "right",
        ...props,
        className: (0, _sharedUtils.cx)("chakra-input__right-addon", props.className)
    });
});
InputRightAddon.displayName = "InputRightAddon";
InputRightAddon.id = "InputRightAddon";

},{"./chunk-FKYN3ZGE.mjs":"aVxp0","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aVxp0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useInputGroupStyles", ()=>useInputGroupStyles);
parcelHelpers.export(exports, "InputGroup", ()=>InputGroup);
// src/input-group.tsx
var _reactContext = require("@chakra-ui/react-context");
var _reactChildrenUtils = require("@chakra-ui/react-children-utils");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _objectUtils = require("@chakra-ui/object-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [InputGroupStylesProvider, useInputGroupStyles] = (0, _reactContext.createContext)({
    name: `InputGroupStylesContext`,
    errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in "<InputGroup />" `
});
var InputGroup = (0, _system.forwardRef)(function InputGroup2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Input", props);
    const { children, className, ...rest } = (0, _system.omitThemingProps)(props);
    const _className = (0, _sharedUtils.cx)("chakra-input__group", className);
    const groupStyles = {};
    const validChildren = (0, _reactChildrenUtils.getValidChildren)(children);
    const input = styles.field;
    validChildren.forEach((child)=>{
        var _a, _b;
        if (!styles) return;
        if (input && child.type.id === "InputLeftElement") groupStyles.paddingStart = (_a = input.height) != null ? _a : input.h;
        if (input && child.type.id === "InputRightElement") groupStyles.paddingEnd = (_b = input.height) != null ? _b : input.h;
        if (child.type.id === "InputRightAddon") groupStyles.borderEndRadius = 0;
        if (child.type.id === "InputLeftAddon") groupStyles.borderStartRadius = 0;
    });
    const clones = validChildren.map((child)=>{
        var _a, _b;
        const theming = (0, _objectUtils.compact)({
            size: ((_a = child.props) == null ? void 0 : _a.size) || props.size,
            variant: ((_b = child.props) == null ? void 0 : _b.variant) || props.variant
        });
        return child.type.id !== "Input" ? (0, _react.cloneElement)(child, theming) : (0, _react.cloneElement)(child, Object.assign(theming, groupStyles, child.props));
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        className: _className,
        ref,
        __css: {
            width: "100%",
            display: "flex",
            position: "relative",
            // Parts of inputs override z-index to ensure that they stack correctly on each other
            // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes
            isolation: "isolate",
            ...styles.group
        },
        "data-group": true,
        ...rest,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputGroupStylesProvider, {
            value: styles,
            children: clones
        })
    });
});
InputGroup.displayName = "InputGroup";

},{"@chakra-ui/react-context":"7RVZP","@chakra-ui/react-children-utils":"49v95","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/object-utils":"dOsk1","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ZgYp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InputLeftElement", ()=>InputLeftElement);
parcelHelpers.export(exports, "InputRightElement", ()=>InputRightElement);
var _chunkFKYN3ZGEMjs = require("./chunk-FKYN3ZGE.mjs");
// src/input-element.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StyledInputElement = (0, _system.chakra)("div", {
    baseStyle: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: "absolute",
        top: "0",
        zIndex: 2
    }
});
var InputElement = (0, _system.forwardRef)(function InputElement2(props, ref) {
    var _a, _b;
    const { placement = "left", ...rest } = props;
    const styles = (0, _chunkFKYN3ZGEMjs.useInputGroupStyles)();
    const input = styles.field;
    const attr = placement === "left" ? "insetStart" : "insetEnd";
    const elementStyles = {
        [attr]: "0",
        width: (_a = input == null ? void 0 : input.height) != null ? _a : input == null ? void 0 : input.h,
        height: (_b = input == null ? void 0 : input.height) != null ? _b : input == null ? void 0 : input.h,
        fontSize: input == null ? void 0 : input.fontSize,
        ...styles.element
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StyledInputElement, {
        ref,
        __css: elementStyles,
        ...rest
    });
});
InputElement.id = "InputElement";
InputElement.displayName = "InputElement";
var InputLeftElement = (0, _system.forwardRef)(function InputLeftElement2(props, ref) {
    const { className, ...rest } = props;
    const _className = (0, _sharedUtils.cx)("chakra-input__left-element", className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputElement, {
        ref,
        placement: "left",
        className: _className,
        ...rest
    });
});
InputLeftElement.id = "InputLeftElement";
InputLeftElement.displayName = "InputLeftElement";
var InputRightElement = (0, _system.forwardRef)(function InputRightElement2(props, ref) {
    const { className, ...rest } = props;
    const _className = (0, _sharedUtils.cx)("chakra-input__right-element", className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputElement, {
        ref,
        placement: "right",
        className: _className,
        ...rest
    });
});
InputRightElement.id = "InputRightElement";
InputRightElement.displayName = "InputRightElement";

},{"./chunk-FKYN3ZGE.mjs":"aVxp0","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"71OSM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Input", ()=>Input);
// src/input.tsx
var _formControl = require("@chakra-ui/form-control");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Input = (0, _system.forwardRef)(function Input2(props, ref) {
    const { htmlSize, ...rest } = props;
    const styles = (0, _system.useMultiStyleConfig)("Input", rest);
    const ownProps = (0, _system.omitThemingProps)(rest);
    const input = (0, _formControl.useFormControl)(ownProps);
    const _className = (0, _sharedUtils.cx)("chakra-input", props.className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).input, {
        size: htmlSize,
        ...input,
        __css: styles.field,
        ref,
        className: _className
    });
});
Input.displayName = "Input";
Input.id = "Input";

},{"@chakra-ui/form-control":"5Ic17","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpGn5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbsoluteCenter", ()=>(0, _chunkFAWTVNS3Mjs.AbsoluteCenter));
parcelHelpers.export(exports, "AspectRatio", ()=>(0, _chunkZVFRDZZYMjs.AspectRatio));
parcelHelpers.export(exports, "Badge", ()=>(0, _chunkZ6RXEUPOMjs.Badge));
parcelHelpers.export(exports, "Box", ()=>(0, _chunkPULVB27SMjs.Box));
parcelHelpers.export(exports, "Center", ()=>(0, _chunkFAWTVNS3Mjs.Center));
parcelHelpers.export(exports, "Circle", ()=>(0, _chunkPULVB27SMjs.Circle));
parcelHelpers.export(exports, "Code", ()=>(0, _chunkLZZHVJFGMjs.Code));
parcelHelpers.export(exports, "Container", ()=>(0, _chunk5MKCW436Mjs.Container));
parcelHelpers.export(exports, "Divider", ()=>(0, _chunkW7WUSNWJMjs.Divider));
parcelHelpers.export(exports, "Flex", ()=>(0, _chunkKRPLQIP4Mjs.Flex));
parcelHelpers.export(exports, "Grid", ()=>(0, _chunkJARCRF6WMjs.Grid));
parcelHelpers.export(exports, "GridItem", ()=>(0, _chunkZPFGWTBBMjs.GridItem));
parcelHelpers.export(exports, "HStack", ()=>(0, _chunk3ASUQ6PAMjs.HStack));
parcelHelpers.export(exports, "Heading", ()=>(0, _chunk7OLJDQMTMjs.Heading));
parcelHelpers.export(exports, "Highlight", ()=>(0, _chunk6WNMSZKBMjs.Highlight));
parcelHelpers.export(exports, "Indicator", ()=>(0, _chunkFDDFQHXZMjs.Indicator));
parcelHelpers.export(exports, "Kbd", ()=>(0, _chunkEBIU6VW7Mjs.Kbd));
parcelHelpers.export(exports, "Link", ()=>(0, _chunkK7XRJ7NLMjs.Link));
parcelHelpers.export(exports, "LinkBox", ()=>(0, _chunkNRJBSIIZMjs.LinkBox));
parcelHelpers.export(exports, "LinkOverlay", ()=>(0, _chunkNRJBSIIZMjs.LinkOverlay));
parcelHelpers.export(exports, "List", ()=>(0, _chunk46CXQZ4EMjs.List));
parcelHelpers.export(exports, "ListIcon", ()=>(0, _chunk46CXQZ4EMjs.ListIcon));
parcelHelpers.export(exports, "ListItem", ()=>(0, _chunk46CXQZ4EMjs.ListItem));
parcelHelpers.export(exports, "Mark", ()=>(0, _chunk6WNMSZKBMjs.Mark));
parcelHelpers.export(exports, "OrderedList", ()=>(0, _chunk46CXQZ4EMjs.OrderedList));
parcelHelpers.export(exports, "SimpleGrid", ()=>(0, _chunkNEK3OOAMMjs.SimpleGrid));
parcelHelpers.export(exports, "Spacer", ()=>(0, _chunkBL2ZZSHGMjs.Spacer));
parcelHelpers.export(exports, "Square", ()=>(0, _chunkPULVB27SMjs.Square));
parcelHelpers.export(exports, "Stack", ()=>(0, _chunkZHMYA64RMjs.Stack));
parcelHelpers.export(exports, "StackDivider", ()=>(0, _chunkKTD65HY5Mjs.StackDivider));
parcelHelpers.export(exports, "StackItem", ()=>(0, _chunkZFQCCYWDMjs.StackItem));
parcelHelpers.export(exports, "Text", ()=>(0, _chunk2OOHT3W5Mjs.Text));
parcelHelpers.export(exports, "UnorderedList", ()=>(0, _chunk46CXQZ4EMjs.UnorderedList));
parcelHelpers.export(exports, "VStack", ()=>(0, _chunkNTCQBYKEMjs.VStack));
parcelHelpers.export(exports, "Wrap", ()=>(0, _chunk7ELO524QMjs.Wrap));
parcelHelpers.export(exports, "WrapItem", ()=>(0, _chunk7ELO524QMjs.WrapItem));
parcelHelpers.export(exports, "useHighlight", ()=>(0, _chunk6WNMSZKBMjs.useHighlight));
parcelHelpers.export(exports, "useListStyles", ()=>(0, _chunk46CXQZ4EMjs.useListStyles));
var _chunkK7XRJ7NLMjs = require("./chunk-K7XRJ7NL.mjs");
var _chunk46CXQZ4EMjs = require("./chunk-46CXQZ4E.mjs");
var _chunkNEK3OOAMMjs = require("./chunk-NEK3OOAM.mjs");
var _chunkBL2ZZSHGMjs = require("./chunk-BL2ZZSHG.mjs");
var _chunk2OOHT3W5Mjs = require("./chunk-2OOHT3W5.mjs");
var _chunk7ELO524QMjs = require("./chunk-7ELO524Q.mjs");
var _chunkMEVIUHYVMjs = require("./chunk-MEVIUHYV.mjs");
var _chunkKTD65HY5Mjs = require("./chunk-KTD65HY5.mjs");
var _chunkNTCQBYKEMjs = require("./chunk-NTCQBYKE.mjs");
var _chunk3ASUQ6PAMjs = require("./chunk-3ASUQ6PA.mjs");
var _chunkZHMYA64RMjs = require("./chunk-ZHMYA64R.mjs");
var _chunkZFQCCYWDMjs = require("./chunk-ZFQCCYWD.mjs");
var _chunk5VJV6UNAMjs = require("./chunk-5VJV6UNA.mjs");
var _chunkZPFGWTBBMjs = require("./chunk-ZPFGWTBB.mjs");
var _chunkJARCRF6WMjs = require("./chunk-JARCRF6W.mjs");
var _chunk7OLJDQMTMjs = require("./chunk-7OLJDQMT.mjs");
var _chunk6WNMSZKBMjs = require("./chunk-6WNMSZKB.mjs");
var _chunkFDDFQHXZMjs = require("./chunk-FDDFQHXZ.mjs");
var _chunkEBIU6VW7Mjs = require("./chunk-EBIU6VW7.mjs");
var _chunkNRJBSIIZMjs = require("./chunk-NRJBSIIZ.mjs");
var _chunkZVFRDZZYMjs = require("./chunk-ZVFRDZZY.mjs");
var _chunkZ6RXEUPOMjs = require("./chunk-Z6RXEUPO.mjs");
var _chunkPULVB27SMjs = require("./chunk-PULVB27S.mjs");
var _chunkFAWTVNS3Mjs = require("./chunk-FAWTVNS3.mjs");
var _chunkLZZHVJFGMjs = require("./chunk-LZZHVJFG.mjs");
var _chunk5MKCW436Mjs = require("./chunk-5MKCW436.mjs");
var _chunkW7WUSNWJMjs = require("./chunk-W7WUSNWJ.mjs");
var _chunkKRPLQIP4Mjs = require("./chunk-KRPLQIP4.mjs");
"use client";

},{"./chunk-K7XRJ7NL.mjs":"bH1K9","./chunk-46CXQZ4E.mjs":"dYZ0F","./chunk-NEK3OOAM.mjs":"3TD1X","./chunk-BL2ZZSHG.mjs":"9qdyK","./chunk-2OOHT3W5.mjs":"gccJI","./chunk-7ELO524Q.mjs":"acOd5","./chunk-MEVIUHYV.mjs":"73KDT","./chunk-KTD65HY5.mjs":"hhiBN","./chunk-NTCQBYKE.mjs":"9DRwN","./chunk-3ASUQ6PA.mjs":"hWUWz","./chunk-ZHMYA64R.mjs":"bXYra","./chunk-ZFQCCYWD.mjs":"9kaEI","./chunk-5VJV6UNA.mjs":"dnszB","./chunk-ZPFGWTBB.mjs":"jqcTE","./chunk-JARCRF6W.mjs":"ducp9","./chunk-7OLJDQMT.mjs":"geEwc","./chunk-6WNMSZKB.mjs":"24v8p","./chunk-FDDFQHXZ.mjs":"6S4cm","./chunk-EBIU6VW7.mjs":"l1505","./chunk-NRJBSIIZ.mjs":"iTNCF","./chunk-ZVFRDZZY.mjs":"evvle","./chunk-Z6RXEUPO.mjs":"9vyU6","./chunk-PULVB27S.mjs":"eARLz","./chunk-FAWTVNS3.mjs":"hF9wm","./chunk-LZZHVJFG.mjs":"3zSv5","./chunk-5MKCW436.mjs":"eV73e","./chunk-W7WUSNWJ.mjs":"fMh9d","./chunk-KRPLQIP4.mjs":"7icKR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bH1K9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Link", ()=>Link);
// src/link.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Link = (0, _system.forwardRef)(function Link2(props, ref) {
    const styles = (0, _system.useStyleConfig)("Link", props);
    const { className, isExternal, ...rest } = (0, _system.omitThemingProps)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).a, {
        target: isExternal ? "_blank" : void 0,
        rel: isExternal ? "noopener" : void 0,
        ref,
        className: (0, _sharedUtils.cx)("chakra-link", className),
        ...rest,
        __css: styles
    });
});
Link.displayName = "Link";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dYZ0F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useListStyles", ()=>useListStyles);
parcelHelpers.export(exports, "List", ()=>List);
parcelHelpers.export(exports, "OrderedList", ()=>OrderedList);
parcelHelpers.export(exports, "UnorderedList", ()=>UnorderedList);
parcelHelpers.export(exports, "ListItem", ()=>ListItem);
parcelHelpers.export(exports, "ListIcon", ()=>ListIcon);
// src/list.tsx
var _icon = require("@chakra-ui/icon");
var _reactContext = require("@chakra-ui/react-context");
var _reactChildrenUtils = require("@chakra-ui/react-children-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [ListStylesProvider, useListStyles] = (0, _reactContext.createContext)({
    name: `ListStylesContext`,
    errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in "<List />" `
});
var List = (0, _system.forwardRef)(function List2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("List", props);
    const { children, styleType = "none", stylePosition, spacing, ...rest } = (0, _system.omitThemingProps)(props);
    const validChildren = (0, _reactChildrenUtils.getValidChildren)(children);
    const selector = "& > *:not(style) ~ *:not(style)";
    const spacingStyle = spacing ? {
        [selector]: {
            mt: spacing
        }
    } : {};
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ListStylesProvider, {
        value: styles,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).ul, {
            ref,
            listStyleType: styleType,
            listStylePosition: stylePosition,
            role: "list",
            __css: {
                ...styles.container,
                ...spacingStyle
            },
            ...rest,
            children: validChildren
        })
    });
});
List.displayName = "List";
var OrderedList = (0, _system.forwardRef)((props, ref)=>{
    const { as, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(List, {
        ref,
        as: "ol",
        styleType: "decimal",
        marginStart: "1em",
        ...rest
    });
});
OrderedList.displayName = "OrderedList";
var UnorderedList = (0, _system.forwardRef)(function UnorderedList2(props, ref) {
    const { as, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(List, {
        ref,
        as: "ul",
        styleType: "initial",
        marginStart: "1em",
        ...rest
    });
});
UnorderedList.displayName = "UnorderedList";
var ListItem = (0, _system.forwardRef)(function ListItem2(props, ref) {
    const styles = useListStyles();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).li, {
        ref,
        ...props,
        __css: styles.item
    });
});
ListItem.displayName = "ListItem";
var ListIcon = (0, _system.forwardRef)(function ListIcon2(props, ref) {
    const styles = useListStyles();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        ref,
        role: "presentation",
        ...props,
        __css: styles.icon
    });
});
ListIcon.displayName = "ListIcon";

},{"@chakra-ui/icon":"jW1nH","@chakra-ui/react-context":"7RVZP","@chakra-ui/react-children-utils":"49v95","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3TD1X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SimpleGrid", ()=>SimpleGrid);
var _chunkJARCRF6WMjs = require("./chunk-JARCRF6W.mjs");
// src/simple-grid.tsx
var _system = require("@chakra-ui/system");
var _breakpointUtils = require("@chakra-ui/breakpoint-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var SimpleGrid = (0, _system.forwardRef)(function SimpleGrid2(props, ref) {
    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;
    const theme = (0, _system.useTheme)();
    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkJARCRF6WMjs.Grid), {
        ref,
        gap: spacing,
        columnGap: spacingX,
        rowGap: spacingY,
        templateColumns,
        ...rest
    });
});
SimpleGrid.displayName = "SimpleGrid";
function toPx(n) {
    return typeof n === "number" ? `${n}px` : n;
}
function widthToColumns(width, theme) {
    return (0, _breakpointUtils.mapResponsive)(width, (value)=>{
        const _value = (0, _system.getToken)("sizes", value, toPx(value))(theme);
        return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;
    });
}
function countToColumns(count) {
    return (0, _breakpointUtils.mapResponsive)(count, (value)=>value === null ? null : `repeat(${value}, minmax(0, 1fr))`);
}

},{"./chunk-JARCRF6W.mjs":"ducp9","@chakra-ui/system":"jpRoG","@chakra-ui/breakpoint-utils":"axoPR","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ducp9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Grid", ()=>Grid);
// src/grid.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Grid = (0, _system.forwardRef)(function Grid2(props, ref) {
    const { templateAreas, gap, rowGap, columnGap, column, row, autoFlow, autoRows, templateRows, autoColumns, templateColumns, ...rest } = props;
    const styles = {
        display: "grid",
        gridTemplateAreas: templateAreas,
        gridGap: gap,
        gridRowGap: rowGap,
        gridColumnGap: columnGap,
        gridAutoColumns: autoColumns,
        gridColumn: column,
        gridRow: row,
        gridAutoFlow: autoFlow,
        gridAutoRows: autoRows,
        gridTemplateRows: templateRows,
        gridTemplateColumns: templateColumns
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        __css: styles,
        ...rest
    });
});
Grid.displayName = "Grid";

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"axoPR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "analyzeBreakpoints", ()=>(0, _chunkFWBNTPACMjs.analyzeBreakpoints));
parcelHelpers.export(exports, "arrayToObjectNotation", ()=>(0, _chunkG72KV6MBMjs.arrayToObjectNotation));
parcelHelpers.export(exports, "breakpoints", ()=>(0, _chunkG72KV6MBMjs.breakpoints));
parcelHelpers.export(exports, "isCustomBreakpoint", ()=>(0, _chunkG72KV6MBMjs.isCustomBreakpoint));
parcelHelpers.export(exports, "isResponsiveObjectLike", ()=>(0, _chunkG72KV6MBMjs.isResponsiveObjectLike));
parcelHelpers.export(exports, "mapResponsive", ()=>(0, _chunkG72KV6MBMjs.mapResponsive));
parcelHelpers.export(exports, "objectToArrayNotation", ()=>(0, _chunkG72KV6MBMjs.objectToArrayNotation));
parcelHelpers.export(exports, "px", ()=>(0, _chunkFWBNTPACMjs.px));
parcelHelpers.export(exports, "toMediaQueryString", ()=>(0, _chunkFWBNTPACMjs.toMediaQueryString));
var _chunkFWBNTPACMjs = require("./chunk-FWBNTPAC.mjs");
var _chunkG72KV6MBMjs = require("./chunk-G72KV6MB.mjs");

},{"./chunk-FWBNTPAC.mjs":false,"./chunk-G72KV6MB.mjs":"5rVcG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5rVcG":[function(require,module,exports) {
// src/responsive.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "breakpoints", ()=>breakpoints);
parcelHelpers.export(exports, "mapResponsive", ()=>mapResponsive);
parcelHelpers.export(exports, "objectToArrayNotation", ()=>objectToArrayNotation);
parcelHelpers.export(exports, "arrayToObjectNotation", ()=>arrayToObjectNotation);
parcelHelpers.export(exports, "isResponsiveObjectLike", ()=>isResponsiveObjectLike);
parcelHelpers.export(exports, "isCustomBreakpoint", ()=>isCustomBreakpoint);
var _sharedUtils = require("@chakra-ui/shared-utils");
var breakpoints = Object.freeze([
    "base",
    "sm",
    "md",
    "lg",
    "xl",
    "2xl"
]);
function mapResponsive(prop, mapper) {
    if (Array.isArray(prop)) return prop.map((item)=>item === null ? null : mapper(item));
    if ((0, _sharedUtils.isObject)(prop)) return Object.keys(prop).reduce((result, key)=>{
        result[key] = mapper(prop[key]);
        return result;
    }, {});
    if (prop != null) return mapper(prop);
    return null;
}
function objectToArrayNotation(obj, bps = breakpoints) {
    const result = bps.map((br)=>{
        var _a;
        return (_a = obj[br]) != null ? _a : null;
    });
    const lastItem = result[result.length - 1];
    while(lastItem === null)result.pop();
    return result;
}
function arrayToObjectNotation(values, bps = breakpoints) {
    const result = {};
    values.forEach((value, index)=>{
        const key = bps[index];
        if (value == null) return;
        result[key] = value;
    });
    return result;
}
function isResponsiveObjectLike(obj, bps = breakpoints) {
    const keys = Object.keys(obj);
    return keys.length > 0 && keys.every((key)=>bps.includes(key));
}
var isCustomBreakpoint = (v)=>Number.isNaN(Number(v));

},{"@chakra-ui/shared-utils":"h33Zu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9qdyK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Spacer", ()=>Spacer);
// src/spacer.tsx
var _system = require("@chakra-ui/system");
"use client";
var Spacer = (0, _system.chakra)("div", {
    baseStyle: {
        flex: 1,
        justifySelf: "stretch",
        alignSelf: "stretch"
    }
});
Spacer.displayName = "Spacer";

},{"@chakra-ui/system":"jpRoG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gccJI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Text", ()=>Text);
// src/text.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _objectUtils = require("@chakra-ui/object-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Text = (0, _system.forwardRef)(function Text2(props, ref) {
    const styles = (0, _system.useStyleConfig)("Text", props);
    const { className, align, decoration, casing, ...rest } = (0, _system.omitThemingProps)(props);
    const aliasedProps = (0, _objectUtils.compact)({
        textAlign: props.align,
        textDecoration: props.decoration,
        textTransform: props.casing
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).p, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-text", props.className),
        ...aliasedProps,
        ...rest,
        __css: styles
    });
});
Text.displayName = "Text";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/object-utils":"dOsk1","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"acOd5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Wrap", ()=>Wrap);
parcelHelpers.export(exports, "WrapItem", ()=>WrapItem);
// src/wrap.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Wrap = (0, _system.forwardRef)(function Wrap2(props, ref) {
    const { spacing = "0.5rem", spacingX, spacingY, children, justify, direction, align, className, shouldWrapChildren, ...rest } = props;
    const _children = (0, _react.useMemo)(()=>shouldWrapChildren ? (0, _react.Children).map(children, (child, index)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)(WrapItem, {
                children: child
            }, index)) : children, [
        children,
        shouldWrapChildren
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-wrap", className),
        ...rest,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).ul, {
            className: "chakra-wrap__list",
            __css: {
                display: "flex",
                flexWrap: "wrap",
                justifyContent: justify,
                alignItems: align,
                flexDirection: direction,
                listStyleType: "none",
                gap: spacing,
                columnGap: spacingX,
                rowGap: spacingY,
                padding: "0"
            },
            children: _children
        })
    });
});
Wrap.displayName = "Wrap";
var WrapItem = (0, _system.forwardRef)(function WrapItem2(props, ref) {
    const { className, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).li, {
        ref,
        __css: {
            display: "flex",
            alignItems: "flex-start"
        },
        className: (0, _sharedUtils.cx)("chakra-wrap__listitem", className),
        ...rest
    });
});
WrapItem.displayName = "WrapItem";

},{"@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"73KDT":[function(require,module,exports) {
"use client";

},{}],"hhiBN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StackDivider", ()=>StackDivider);
// src/stack/stack-divider.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StackDivider = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        className: "chakra-stack__divider",
        ...props,
        __css: {
            ...props["__css"],
            borderWidth: 0,
            alignSelf: "stretch",
            borderColor: "inherit",
            width: "auto",
            height: "auto"
        }
    });
StackDivider.displayName = "StackDivider";

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9DRwN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VStack", ()=>VStack);
var _chunkZHMYA64RMjs = require("./chunk-ZHMYA64R.mjs");
// src/stack/v-stack.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var VStack = (0, _system.forwardRef)((props, ref)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkZHMYA64RMjs.Stack), {
        align: "center",
        ...props,
        direction: "column",
        ref
    }));
VStack.displayName = "VStack";

},{"./chunk-ZHMYA64R.mjs":"bXYra","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXYra":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Stack", ()=>Stack);
var _chunkZFQCCYWDMjs = require("./chunk-ZFQCCYWD.mjs");
var _chunk5VJV6UNAMjs = require("./chunk-5VJV6UNA.mjs");
// src/stack/stack.tsx
var _reactChildrenUtils = require("@chakra-ui/react-children-utils");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Stack = (0, _system.forwardRef)((props, ref)=>{
    const { isInline, direction: directionProp, align, justify, spacing = "0.5rem", wrap, children, divider, className, shouldWrapChildren, ...rest } = props;
    const direction = isInline ? "row" : directionProp != null ? directionProp : "column";
    const dividerStyle = (0, _react.useMemo)(()=>(0, _chunk5VJV6UNAMjs.getDividerStyles)({
            spacing,
            direction
        }), [
        spacing,
        direction
    ]);
    const hasDivider = !!divider;
    const shouldUseChildren = !shouldWrapChildren && !hasDivider;
    const clones = (0, _react.useMemo)(()=>{
        const validChildren = (0, _reactChildrenUtils.getValidChildren)(children);
        return shouldUseChildren ? validChildren : validChildren.map((child, index)=>{
            const key = typeof child.key !== "undefined" ? child.key : index;
            const isLast = index + 1 === validChildren.length;
            const wrappedChild = /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkZFQCCYWDMjs.StackItem), {
                children: child
            }, key);
            const _child = shouldWrapChildren ? wrappedChild : child;
            if (!hasDivider) return _child;
            const clonedDivider = (0, _react.cloneElement)(divider, {
                __css: dividerStyle
            });
            const _divider = isLast ? null : clonedDivider;
            return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _react.Fragment), {
                children: [
                    _child,
                    _divider
                ]
            }, key);
        });
    }, [
        divider,
        dividerStyle,
        hasDivider,
        shouldUseChildren,
        shouldWrapChildren,
        children
    ]);
    const _className = (0, _sharedUtils.cx)("chakra-stack", className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        display: "flex",
        alignItems: align,
        justifyContent: justify,
        flexDirection: direction,
        flexWrap: wrap,
        gap: hasDivider ? void 0 : spacing,
        className: _className,
        ...rest,
        children: clones
    });
});
Stack.displayName = "Stack";

},{"./chunk-ZFQCCYWD.mjs":"9kaEI","./chunk-5VJV6UNA.mjs":"dnszB","@chakra-ui/react-children-utils":"49v95","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kaEI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StackItem", ()=>StackItem);
// src/stack/stack-item.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StackItem = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        className: "chakra-stack__item",
        ...props,
        __css: {
            display: "inline-block",
            flex: "0 0 auto",
            minWidth: 0,
            ...props["__css"]
        }
    });
StackItem.displayName = "StackItem";

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dnszB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDividerStyles", ()=>getDividerStyles);
// src/stack/stack.utils.tsx
var _breakpointUtils = require("@chakra-ui/breakpoint-utils");
"use client";
function getDividerStyles(options) {
    const { spacing, direction } = options;
    const dividerStyles = {
        column: {
            my: spacing,
            mx: 0,
            borderLeftWidth: 0,
            borderBottomWidth: "1px"
        },
        "column-reverse": {
            my: spacing,
            mx: 0,
            borderLeftWidth: 0,
            borderBottomWidth: "1px"
        },
        row: {
            mx: spacing,
            my: 0,
            borderLeftWidth: "1px",
            borderBottomWidth: 0
        },
        "row-reverse": {
            mx: spacing,
            my: 0,
            borderLeftWidth: "1px",
            borderBottomWidth: 0
        }
    };
    return {
        "&": (0, _breakpointUtils.mapResponsive)(direction, (value)=>dividerStyles[value])
    };
}

},{"@chakra-ui/breakpoint-utils":"axoPR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWUWz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HStack", ()=>HStack);
var _chunkZHMYA64RMjs = require("./chunk-ZHMYA64R.mjs");
// src/stack/h-stack.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var HStack = (0, _system.forwardRef)((props, ref)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkZHMYA64RMjs.Stack), {
        align: "center",
        ...props,
        direction: "row",
        ref
    }));
HStack.displayName = "HStack";

},{"./chunk-ZHMYA64R.mjs":"bXYra","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jqcTE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GridItem", ()=>GridItem);
// src/grid-item.tsx
var _system = require("@chakra-ui/system");
var _objectUtils = require("@chakra-ui/object-utils");
var _breakpointUtils = require("@chakra-ui/breakpoint-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function spanFn(span) {
    return (0, _breakpointUtils.mapResponsive)(span, (value)=>value === "auto" ? "auto" : `span ${value}/span ${value}`);
}
var GridItem = (0, _system.forwardRef)(function GridItem2(props, ref) {
    const { area, colSpan, colStart, colEnd, rowEnd, rowSpan, rowStart, ...rest } = props;
    const styles = (0, _objectUtils.compact)({
        gridArea: area,
        gridColumn: spanFn(colSpan),
        gridRow: spanFn(rowSpan),
        gridColumnStart: colStart,
        gridColumnEnd: colEnd,
        gridRowStart: rowStart,
        gridRowEnd: rowEnd
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        __css: styles,
        ...rest
    });
});
GridItem.displayName = "GridItem";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/object-utils":"dOsk1","@chakra-ui/breakpoint-utils":"axoPR","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"geEwc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Heading", ()=>Heading);
// src/heading.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Heading = (0, _system.forwardRef)(function Heading2(props, ref) {
    const styles = (0, _system.useStyleConfig)("Heading", props);
    const { className, ...rest } = (0, _system.omitThemingProps)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).h2, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-heading", props.className),
        ...rest,
        __css: styles
    });
});
Heading.displayName = "Heading";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"24v8p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useHighlight", ()=>useHighlight);
parcelHelpers.export(exports, "Mark", ()=>Mark);
parcelHelpers.export(exports, "Highlight", ()=>Highlight);
var _chunkPULVB27SMjs = require("./chunk-PULVB27S.mjs");
// src/highlight.tsx
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var escapeRegexp = (term)=>term.replace(/[|\\{}()[\]^$+*?.-]/g, (char)=>`\\${char}`);
function buildRegex(query) {
    const _query = query.filter((text)=>text.length !== 0).map((text)=>escapeRegexp(text.trim()));
    if (!_query.length) return null;
    return new RegExp(`(${_query.join("|")})`, "ig");
}
function highlightWords({ text, query }) {
    const regex = buildRegex(Array.isArray(query) ? query : [
        query
    ]);
    if (!regex) return [
        {
            text,
            match: false
        }
    ];
    const result = text.split(regex).filter(Boolean);
    return result.map((str)=>({
            text: str,
            match: regex.test(str)
        }));
}
function useHighlight(props) {
    const { text, query } = props;
    return (0, _react.useMemo)(()=>highlightWords({
            text,
            query
        }), [
        text,
        query
    ]);
}
var Mark = (0, _system.forwardRef)(function Mark2(props, ref) {
    const styles = (0, _system.useStyleConfig)("Mark", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkPULVB27SMjs.Box), {
        ref,
        ...ownProps,
        as: "mark",
        __css: {
            bg: "transparent",
            whiteSpace: "nowrap",
            ...styles
        }
    });
});
function Highlight(props) {
    const { children, query, styles } = props;
    if (typeof children !== "string") throw new Error("The children prop of Highlight must be a string");
    const chunks = useHighlight({
        query,
        text: children
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _jsxRuntime.Fragment), {
        children: chunks.map((chunk, index)=>{
            return chunk.match ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(Mark, {
                sx: styles,
                children: chunk.text
            }, index) : /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _react.Fragment), {
                children: chunk.text
            }, index);
        })
    });
}

},{"./chunk-PULVB27S.mjs":"eARLz","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eARLz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Box", ()=>Box);
parcelHelpers.export(exports, "Square", ()=>Square);
parcelHelpers.export(exports, "Circle", ()=>Circle);
// src/box.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Box = (0, _system.chakra)("div");
Box.displayName = "Box";
var Square = (0, _system.forwardRef)(function Square2(props, ref) {
    const { size, centerContent = true, ...rest } = props;
    const styles = centerContent ? {
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
    } : {};
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Box, {
        ref,
        boxSize: size,
        __css: {
            ...styles,
            flexShrink: 0,
            flexGrow: 0
        },
        ...rest
    });
});
Square.displayName = "Square";
var Circle = (0, _system.forwardRef)(function Circle2(props, ref) {
    const { size, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Square, {
        size,
        ref,
        borderRadius: "9999px",
        ...rest
    });
});
Circle.displayName = "Circle";

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6S4cm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Indicator", ()=>Indicator);
// src/indicator.tsx
var _breakpointUtils = require("@chakra-ui/breakpoint-utils");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Indicator = (0, _system.forwardRef)(function Indicator2(props, ref) {
    const { offsetX, offsetY, offset = "0", placement = "top-end", ...rest } = props;
    const styles = (0, _react.useMemo)(()=>({
            display: "inline-flex",
            justifyContent: "center",
            alignItems: "center",
            position: "absolute",
            insetBlockStart: (0, _breakpointUtils.mapResponsive)(placement, (v)=>{
                const [side] = v.split("-");
                const map = {
                    top: offsetY != null ? offsetY : offset,
                    middle: "50%",
                    bottom: "auto"
                };
                return map[side];
            }),
            insetBlockEnd: (0, _breakpointUtils.mapResponsive)(placement, (v)=>{
                const [side] = v.split("-");
                const map = {
                    top: "auto",
                    middle: "50%",
                    bottom: offsetY != null ? offsetY : offset
                };
                return map[side];
            }),
            insetStart: (0, _breakpointUtils.mapResponsive)(placement, (v)=>{
                const [, align] = v.split("-");
                const map = {
                    start: offsetX != null ? offsetX : offset,
                    center: "50%",
                    end: "auto"
                };
                return map[align];
            }),
            insetEnd: (0, _breakpointUtils.mapResponsive)(placement, (v)=>{
                const [, align] = v.split("-");
                const map = {
                    start: "auto",
                    center: "50%",
                    end: offsetX != null ? offsetX : offset
                };
                return map[align];
            }),
            translate: (0, _breakpointUtils.mapResponsive)(placement, (v)=>{
                const [side, align] = v.split("-");
                const mapX = {
                    start: "-50%",
                    center: "-50%",
                    end: "50%"
                };
                const mapY = {
                    top: "-50%",
                    middle: "-50%",
                    bottom: "50%"
                };
                return `${mapX[align]} ${mapY[side]}`;
            })
        }), [
        offset,
        offsetX,
        offsetY,
        placement
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        __css: styles,
        ...rest
    });
});

},{"@chakra-ui/breakpoint-utils":"axoPR","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l1505":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Kbd", ()=>Kbd);
// src/kbd.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Kbd = (0, _system.forwardRef)(function Kbd2(props, ref) {
    const styles = (0, _system.useStyleConfig)("Kbd", props);
    const { className, ...rest } = (0, _system.omitThemingProps)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).kbd, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-kbd", className),
        ...rest,
        __css: {
            fontFamily: "mono",
            ...styles
        }
    });
});
Kbd.displayName = "Kbd";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iTNCF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LinkOverlay", ()=>LinkOverlay);
parcelHelpers.export(exports, "LinkBox", ()=>LinkBox);
// src/link-box.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var LinkOverlay = (0, _system.forwardRef)(function LinkOverlay2(props, ref) {
    const { isExternal, target, rel, className, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).a, {
        ...rest,
        ref,
        className: (0, _sharedUtils.cx)("chakra-linkbox__overlay", className),
        rel: isExternal ? "noopener noreferrer" : rel,
        target: isExternal ? "_blank" : target,
        __css: {
            position: "static",
            "&::before": {
                content: "''",
                cursor: "inherit",
                display: "block",
                position: "absolute",
                top: 0,
                left: 0,
                zIndex: 0,
                width: "100%",
                height: "100%"
            }
        }
    });
});
var LinkBox = (0, _system.forwardRef)(function LinkBox2(props, ref) {
    const { className, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        position: "relative",
        ...rest,
        className: (0, _sharedUtils.cx)("chakra-linkbox", className),
        __css: {
            /* Elevate the links and abbreviations up */ "a[href]:not(.chakra-linkbox__overlay), abbr[title]": {
                position: "relative",
                zIndex: 1
            }
        }
    });
});

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"evvle":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AspectRatio", ()=>AspectRatio);
// src/aspect-ratio.tsx
var _system = require("@chakra-ui/system");
var _breakpointUtils = require("@chakra-ui/breakpoint-utils");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var AspectRatio = (0, _system.forwardRef)(function(props, ref) {
    const { ratio = 4 / 3, children, className, ...rest } = props;
    const child = (0, _react.Children).only(children);
    const _className = (0, _sharedUtils.cx)("chakra-aspect-ratio", className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        position: "relative",
        className: _className,
        _before: {
            height: 0,
            content: `""`,
            display: "block",
            paddingBottom: (0, _breakpointUtils.mapResponsive)(ratio, (r)=>`${1 / r * 100}%`)
        },
        __css: {
            "& > *:not(style)": {
                overflow: "hidden",
                position: "absolute",
                top: "0",
                right: "0",
                bottom: "0",
                left: "0",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                width: "100%",
                height: "100%"
            },
            "& > img, & > video": {
                objectFit: "cover"
            }
        },
        ...rest,
        children: child
    });
});
AspectRatio.displayName = "AspectRatio";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/breakpoint-utils":"axoPR","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9vyU6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Badge", ()=>Badge);
// src/badge.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Badge = (0, _system.forwardRef)(function Badge2(props, ref) {
    const styles = (0, _system.useStyleConfig)("Badge", props);
    const { className, ...rest } = (0, _system.omitThemingProps)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-badge", props.className),
        ...rest,
        __css: {
            display: "inline-block",
            whiteSpace: "nowrap",
            verticalAlign: "middle",
            ...styles
        }
    });
});
Badge.displayName = "Badge";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hF9wm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Center", ()=>Center);
parcelHelpers.export(exports, "AbsoluteCenter", ()=>AbsoluteCenter);
// src/center.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Center = (0, _system.chakra)("div", {
    baseStyle: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
    }
});
Center.displayName = "Center";
var centerStyles = {
    horizontal: {
        insetStart: "50%",
        transform: "translateX(-50%)"
    },
    vertical: {
        top: "50%",
        transform: "translateY(-50%)"
    },
    both: {
        insetStart: "50%",
        top: "50%",
        transform: "translate(-50%, -50%)"
    }
};
var AbsoluteCenter = (0, _system.forwardRef)(function AbsoluteCenter2(props, ref) {
    const { axis = "both", ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        __css: centerStyles[axis],
        ...rest,
        position: "absolute"
    });
});

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3zSv5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Code", ()=>Code);
// src/code.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Code = (0, _system.forwardRef)(function Code2(props, ref) {
    const styles = (0, _system.useStyleConfig)("Code", props);
    const { className, ...rest } = (0, _system.omitThemingProps)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).code, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-code", props.className),
        ...rest,
        __css: {
            display: "inline-block",
            ...styles
        }
    });
});
Code.displayName = "Code";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eV73e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Container", ()=>Container);
// src/container.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Container = (0, _system.forwardRef)(function Container2(props, ref) {
    const { className, centerContent, ...rest } = (0, _system.omitThemingProps)(props);
    const styles = (0, _system.useStyleConfig)("Container", props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-container", className),
        ...rest,
        __css: {
            ...styles,
            ...centerContent && {
                display: "flex",
                flexDirection: "column",
                alignItems: "center"
            }
        }
    });
});
Container.displayName = "Container";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fMh9d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Divider", ()=>Divider);
// src/divider.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Divider = (0, _system.forwardRef)(function Divider2(props, ref) {
    const { borderLeftWidth, borderBottomWidth, borderTopWidth, borderRightWidth, borderWidth, borderStyle, borderColor, ...styles } = (0, _system.useStyleConfig)("Divider", props);
    const { className, orientation = "horizontal", __css, ...rest } = (0, _system.omitThemingProps)(props);
    const dividerStyles = {
        vertical: {
            borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
            height: "100%"
        },
        horizontal: {
            borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
            width: "100%"
        }
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).hr, {
        ref,
        "aria-orientation": orientation,
        ...rest,
        __css: {
            ...styles,
            border: "0",
            borderColor,
            borderStyle,
            ...dividerStyles[orientation],
            ...__css
        },
        className: (0, _sharedUtils.cx)("chakra-divider", className)
    });
});
Divider.displayName = "Divider";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7icKR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Flex", ()=>Flex);
// src/flex.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Flex = (0, _system.forwardRef)(function Flex2(props, ref) {
    const { direction, align, justify, wrap, basis, grow, shrink, ...rest } = props;
    const styles = {
        display: "flex",
        flexDirection: direction,
        alignItems: align,
        justifyContent: justify,
        flexWrap: wrap,
        flexBasis: basis,
        flexGrow: grow,
        flexShrink: shrink
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        __css: styles,
        ...rest
    });
});
Flex.displayName = "Flex";

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"27uLV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Hide", ()=>(0, _chunkE2LBHKJ2Mjs.Hide));
parcelHelpers.export(exports, "Show", ()=>(0, _chunkVXCSBZ7KMjs.Show));
parcelHelpers.export(exports, "useBreakpoint", ()=>(0, _chunk6KW5I77SMjs.useBreakpoint));
parcelHelpers.export(exports, "useBreakpointValue", ()=>(0, _chunkKC77MHL3Mjs.useBreakpointValue));
parcelHelpers.export(exports, "useColorModePreference", ()=>(0, _chunk6RI7LWPKMjs.useColorModePreference));
parcelHelpers.export(exports, "useMediaQuery", ()=>(0, _chunk57I6FYPZMjs.useMediaQuery));
parcelHelpers.export(exports, "usePrefersReducedMotion", ()=>(0, _chunk6RI7LWPKMjs.usePrefersReducedMotion));
parcelHelpers.export(exports, "useQuery", ()=>(0, _chunkOYHRTWD2Mjs.useQuery));
var _chunkE2LBHKJ2Mjs = require("./chunk-E2LBHKJ2.mjs");
var _chunk6RI7LWPKMjs = require("./chunk-6RI7LWPK.mjs");
var _chunkVXCSBZ7KMjs = require("./chunk-VXCSBZ7K.mjs");
var _chunkQ2OSBGYWMjs = require("./chunk-Q2OSBGYW.mjs");
var _chunkOYHRTWD2Mjs = require("./chunk-OYHRTWD2.mjs");
var _chunkKC77MHL3Mjs = require("./chunk-KC77MHL3.mjs");
var _chunkC53CKZDPMjs = require("./chunk-C53CKZDP.mjs");
var _chunk6KW5I77SMjs = require("./chunk-6KW5I77S.mjs");
var _chunk57I6FYPZMjs = require("./chunk-57I6FYPZ.mjs");
"use client";

},{"./chunk-E2LBHKJ2.mjs":"8G8iy","./chunk-6RI7LWPK.mjs":"eSqmp","./chunk-VXCSBZ7K.mjs":"hzzyL","./chunk-Q2OSBGYW.mjs":"1KRW9","./chunk-OYHRTWD2.mjs":"3OHhB","./chunk-KC77MHL3.mjs":"2ImL2","./chunk-C53CKZDP.mjs":"ftrJY","./chunk-6KW5I77S.mjs":"6daUz","./chunk-57I6FYPZ.mjs":"kema7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8G8iy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Hide", ()=>Hide);
var _chunkQ2OSBGYWMjs = require("./chunk-Q2OSBGYW.mjs");
var _chunkOYHRTWD2Mjs = require("./chunk-OYHRTWD2.mjs");
// src/hide.tsx
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function Hide(props) {
    const { children, ssr } = props;
    const query = (0, _chunkOYHRTWD2Mjs.useQuery)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkQ2OSBGYWMjs.Visibility), {
        breakpoint: query,
        hide: true,
        ssr,
        children
    });
}
Hide.displayName = "Hide";

},{"./chunk-Q2OSBGYW.mjs":"1KRW9","./chunk-OYHRTWD2.mjs":"3OHhB","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1KRW9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Visibility", ()=>Visibility);
var _chunk57I6FYPZMjs = require("./chunk-57I6FYPZ.mjs");
"use client";
// src/visibility.tsx
function Visibility(props) {
    const { breakpoint, hide, children, ssr } = props;
    const [show] = (0, _chunk57I6FYPZMjs.useMediaQuery)(breakpoint, {
        ssr
    });
    const isVisible = hide ? !show : show;
    const rendered = isVisible ? children : null;
    return rendered;
}

},{"./chunk-57I6FYPZ.mjs":"kema7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kema7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useMediaQuery", ()=>useMediaQuery);
// src/use-media-query.ts
var _reactEnv = require("@chakra-ui/react-env");
var _react = require("react");
"use client";
function useMediaQuery(query, options = {}) {
    const { ssr = true, fallback } = options;
    const { getWindow } = (0, _reactEnv.useEnvironment)();
    const queries = Array.isArray(query) ? query : [
        query
    ];
    let fallbackValues = Array.isArray(fallback) ? fallback : [
        fallback
    ];
    fallbackValues = fallbackValues.filter((v)=>v != null);
    const [value, setValue] = (0, _react.useState)(()=>{
        return queries.map((query2, index)=>({
                media: query2,
                matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches
            }));
    });
    (0, _react.useEffect)(()=>{
        const win = getWindow();
        setValue(queries.map((query2)=>({
                media: query2,
                matches: win.matchMedia(query2).matches
            })));
        const mql = queries.map((query2)=>win.matchMedia(query2));
        const handler = (evt)=>{
            setValue((prev)=>{
                return prev.slice().map((item)=>{
                    if (item.media === evt.media) return {
                        ...item,
                        matches: evt.matches
                    };
                    return item;
                });
            });
        };
        mql.forEach((mql2)=>{
            if (typeof mql2.addListener === "function") mql2.addListener(handler);
            else mql2.addEventListener("change", handler);
        });
        return ()=>{
            mql.forEach((mql2)=>{
                if (typeof mql2.removeListener === "function") mql2.removeListener(handler);
                else mql2.removeEventListener("change", handler);
            });
        };
    }, [
        getWindow
    ]);
    return value.map((item)=>item.matches);
}

},{"@chakra-ui/react-env":"jTqMf","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3OHhB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useQuery", ()=>useQuery);
// src/media-query.tsx
var _system = require("@chakra-ui/system");
"use client";
var getBreakpoint = (theme, value)=>{
    var _a, _b;
    return (_b = (_a = theme == null ? void 0 : theme.breakpoints) == null ? void 0 : _a[value]) != null ? _b : value;
};
function useQuery(props) {
    const { breakpoint = "", below, above } = props;
    const theme = (0, _system.useTheme)();
    const bpBelow = getBreakpoint(theme, below);
    const bpAbove = getBreakpoint(theme, above);
    let query = breakpoint;
    if (bpBelow) query = `(max-width: ${bpBelow})`;
    else if (bpAbove) query = `(min-width: ${bpAbove})`;
    return query;
}

},{"@chakra-ui/system":"jpRoG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eSqmp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePrefersReducedMotion", ()=>usePrefersReducedMotion);
parcelHelpers.export(exports, "useColorModePreference", ()=>useColorModePreference);
var _chunk57I6FYPZMjs = require("./chunk-57I6FYPZ.mjs");
"use client";
// src/media-query.hook.ts
function usePrefersReducedMotion(options) {
    const [prefersReducedMotion] = (0, _chunk57I6FYPZMjs.useMediaQuery)("(prefers-reduced-motion: reduce)", options);
    return prefersReducedMotion;
}
function useColorModePreference(options) {
    const [isLight, isDark] = (0, _chunk57I6FYPZMjs.useMediaQuery)([
        "(prefers-color-scheme: light)",
        "(prefers-color-scheme: dark)"
    ], options);
    if (isLight) return "light";
    if (isDark) return "dark";
    return void 0;
}

},{"./chunk-57I6FYPZ.mjs":"kema7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hzzyL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Show", ()=>Show);
var _chunkQ2OSBGYWMjs = require("./chunk-Q2OSBGYW.mjs");
var _chunkOYHRTWD2Mjs = require("./chunk-OYHRTWD2.mjs");
// src/show.tsx
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function Show(props) {
    const { children, ssr } = props;
    const query = (0, _chunkOYHRTWD2Mjs.useQuery)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkQ2OSBGYWMjs.Visibility), {
        breakpoint: query,
        ssr,
        children
    });
}
Show.displayName = "Show";

},{"./chunk-Q2OSBGYW.mjs":"1KRW9","./chunk-OYHRTWD2.mjs":"3OHhB","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ImL2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useBreakpointValue", ()=>useBreakpointValue);
var _chunkC53CKZDPMjs = require("./chunk-C53CKZDP.mjs");
var _chunk6KW5I77SMjs = require("./chunk-6KW5I77S.mjs");
// src/use-breakpoint-value.ts
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _breakpointUtils = require("@chakra-ui/breakpoint-utils");
"use client";
function useBreakpointValue(values, arg) {
    var _a;
    const opts = (0, _sharedUtils.isObject)(arg) ? arg : {
        fallback: arg != null ? arg : "base"
    };
    const breakpoint = (0, _chunk6KW5I77SMjs.useBreakpoint)(opts);
    const theme = (0, _system.useTheme)();
    if (!breakpoint) return;
    const breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);
    const obj = Array.isArray(values) ? Object.fromEntries(Object.entries((0, _breakpointUtils.arrayToObjectNotation)(values, breakpoints)).map(([key, value])=>[
            key,
            value
        ])) : values;
    return (0, _chunkC53CKZDPMjs.getClosestValue)(obj, breakpoint, breakpoints);
}

},{"./chunk-C53CKZDP.mjs":"ftrJY","./chunk-6KW5I77S.mjs":"6daUz","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/breakpoint-utils":"axoPR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ftrJY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getClosestValue", ()=>getClosestValue);
// src/media-query.utils.ts
var _breakpointUtils = require("@chakra-ui/breakpoint-utils");
"use client";
function getClosestValue(values, breakpoint, breakpoints = (0, _breakpointUtils.breakpoints)) {
    let index = Object.keys(values).indexOf(breakpoint);
    if (index !== -1) return values[breakpoint];
    let stopIndex = breakpoints.indexOf(breakpoint);
    while(stopIndex >= 0){
        const key = breakpoints[stopIndex];
        if (values.hasOwnProperty(key)) {
            index = stopIndex;
            break;
        }
        stopIndex -= 1;
    }
    if (index !== -1) {
        const key = breakpoints[index];
        return values[key];
    }
    return void 0;
}

},{"@chakra-ui/breakpoint-utils":"axoPR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6daUz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useBreakpoint", ()=>useBreakpoint);
var _chunk57I6FYPZMjs = require("./chunk-57I6FYPZ.mjs");
// src/use-breakpoint.ts
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
"use client";
function useBreakpoint(arg) {
    var _a, _b;
    const opts = (0, _sharedUtils.isObject)(arg) ? arg : {
        fallback: arg != null ? arg : "base"
    };
    const theme = (0, _system.useTheme)();
    const breakpoints = theme.__breakpoints.details.map(({ minMaxQuery, breakpoint })=>({
            breakpoint,
            query: minMaxQuery.replace("@media screen and ", "")
        }));
    const fallback = breakpoints.map((bp)=>bp.breakpoint === opts.fallback);
    const values = (0, _chunk57I6FYPZMjs.useMediaQuery)(breakpoints.map((bp)=>bp.query), {
        fallback,
        ssr: opts.ssr
    });
    const index = values.findIndex((value)=>value == true);
    return (_b = (_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) != null ? _b : opts.fallback;
}

},{"./chunk-57I6FYPZ.mjs":"kema7","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bvzwT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Menu", ()=>(0, _chunkUZJ3TPNQMjs.Menu));
parcelHelpers.export(exports, "MenuButton", ()=>(0, _chunkZ3VR2BFQMjs.MenuButton));
parcelHelpers.export(exports, "MenuCommand", ()=>(0, _chunk4CNGLKYXMjs.MenuCommand));
parcelHelpers.export(exports, "MenuDescendantsProvider", ()=>(0, _chunkSANI5SUMMjs.MenuDescendantsProvider));
parcelHelpers.export(exports, "MenuDivider", ()=>(0, _chunkH43S3DLBMjs.MenuDivider));
parcelHelpers.export(exports, "MenuGroup", ()=>(0, _chunkPTXXWAJUMjs.MenuGroup));
parcelHelpers.export(exports, "MenuIcon", ()=>(0, _chunkHB6KBUMZMjs.MenuIcon));
parcelHelpers.export(exports, "MenuItem", ()=>(0, _chunk5TWLKMYIMjs.MenuItem));
parcelHelpers.export(exports, "MenuItemOption", ()=>(0, _chunkB3RAGXFVMjs.MenuItemOption));
parcelHelpers.export(exports, "MenuList", ()=>(0, _chunk6MF6NSK4Mjs.MenuList));
parcelHelpers.export(exports, "MenuOptionGroup", ()=>(0, _chunkIOKLOFVXMjs.MenuOptionGroup));
parcelHelpers.export(exports, "MenuProvider", ()=>(0, _chunkSANI5SUMMjs.MenuProvider));
parcelHelpers.export(exports, "useMenu", ()=>(0, _chunkSANI5SUMMjs.useMenu));
parcelHelpers.export(exports, "useMenuButton", ()=>(0, _chunkSANI5SUMMjs.useMenuButton));
parcelHelpers.export(exports, "useMenuContext", ()=>(0, _chunkSANI5SUMMjs.useMenuContext));
parcelHelpers.export(exports, "useMenuDescendant", ()=>(0, _chunkSANI5SUMMjs.useMenuDescendant));
parcelHelpers.export(exports, "useMenuDescendants", ()=>(0, _chunkSANI5SUMMjs.useMenuDescendants));
parcelHelpers.export(exports, "useMenuDescendantsContext", ()=>(0, _chunkSANI5SUMMjs.useMenuDescendantsContext));
parcelHelpers.export(exports, "useMenuItem", ()=>(0, _chunkSANI5SUMMjs.useMenuItem));
parcelHelpers.export(exports, "useMenuList", ()=>(0, _chunkSANI5SUMMjs.useMenuList));
parcelHelpers.export(exports, "useMenuOption", ()=>(0, _chunkSANI5SUMMjs.useMenuOption));
parcelHelpers.export(exports, "useMenuOptionGroup", ()=>(0, _chunkSANI5SUMMjs.useMenuOptionGroup));
parcelHelpers.export(exports, "useMenuPositioner", ()=>(0, _chunkSANI5SUMMjs.useMenuPositioner));
parcelHelpers.export(exports, "useMenuState", ()=>(0, _chunkSANI5SUMMjs.useMenuState));
parcelHelpers.export(exports, "useMenuStyles", ()=>(0, _chunkUZJ3TPNQMjs.useMenuStyles));
var _chunk5TWLKMYIMjs = require("./chunk-5TWLKMYI.mjs");
var _chunk6MF6NSK4Mjs = require("./chunk-6MF6NSK4.mjs");
var _chunkIOKLOFVXMjs = require("./chunk-IOKLOFVX.mjs");
var _chunkZ3VR2BFQMjs = require("./chunk-Z3VR2BFQ.mjs");
var _chunk4CNGLKYXMjs = require("./chunk-4CNGLKYX.mjs");
var _chunkH43S3DLBMjs = require("./chunk-H43S3DLB.mjs");
var _chunkPTXXWAJUMjs = require("./chunk-PTXXWAJU.mjs");
var _chunkB3RAGXFVMjs = require("./chunk-B3RAGXFV.mjs");
var _chunkM565QO7NMjs = require("./chunk-M565QO7N.mjs");
var _chunkHB6KBUMZMjs = require("./chunk-HB6KBUMZ.mjs");
var _chunkUZJ3TPNQMjs = require("./chunk-UZJ3TPNQ.mjs");
var _chunkSANI5SUMMjs = require("./chunk-SANI5SUM.mjs");
var _chunkYSKACL7RMjs = require("./chunk-YSKACL7R.mjs");
var _chunkBWUXSGSJMjs = require("./chunk-BWUXSGSJ.mjs");
"use client";

},{"./chunk-5TWLKMYI.mjs":"eB6pI","./chunk-6MF6NSK4.mjs":"9mQNn","./chunk-IOKLOFVX.mjs":"hKLL0","./chunk-Z3VR2BFQ.mjs":"lUVV6","./chunk-4CNGLKYX.mjs":"cVKzz","./chunk-H43S3DLB.mjs":"7sSbx","./chunk-PTXXWAJU.mjs":"8fOA3","./chunk-B3RAGXFV.mjs":"1ImAi","./chunk-M565QO7N.mjs":"k0sXt","./chunk-HB6KBUMZ.mjs":"dz2S4","./chunk-UZJ3TPNQ.mjs":"6xmCW","./chunk-SANI5SUM.mjs":"4rRSF","./chunk-YSKACL7R.mjs":"59YaY","./chunk-BWUXSGSJ.mjs":"9eYxc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eB6pI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuItem", ()=>MenuItem);
var _chunk4CNGLKYXMjs = require("./chunk-4CNGLKYX.mjs");
var _chunkM565QO7NMjs = require("./chunk-M565QO7N.mjs");
var _chunkHB6KBUMZMjs = require("./chunk-HB6KBUMZ.mjs");
var _chunkSANI5SUMMjs = require("./chunk-SANI5SUM.mjs");
// src/menu-item.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var MenuItem = (0, _system.forwardRef)((props, ref)=>{
    const { icon, iconSpacing = "0.75rem", command, commandSpacing = "0.75rem", children, ...rest } = props;
    const menuitemProps = (0, _chunkSANI5SUMMjs.useMenuItem)(rest, ref);
    const shouldWrap = icon || command;
    const _children = shouldWrap ? /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
        style: {
            pointerEvents: "none",
            flex: 1
        },
        children
    }) : children;
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _chunkM565QO7NMjs.StyledMenuItem), {
        ...menuitemProps,
        className: (0, _sharedUtils.cx)("chakra-menu__menuitem", menuitemProps.className),
        children: [
            icon && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkHB6KBUMZMjs.MenuIcon), {
                fontSize: "0.8em",
                marginEnd: iconSpacing,
                children: icon
            }),
            _children,
            command && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk4CNGLKYXMjs.MenuCommand), {
                marginStart: commandSpacing,
                children: command
            })
        ]
    });
});
MenuItem.displayName = "MenuItem";

},{"./chunk-4CNGLKYX.mjs":"cVKzz","./chunk-M565QO7N.mjs":"k0sXt","./chunk-HB6KBUMZ.mjs":"dz2S4","./chunk-SANI5SUM.mjs":"4rRSF","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cVKzz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuCommand", ()=>MenuCommand);
var _chunkUZJ3TPNQMjs = require("./chunk-UZJ3TPNQ.mjs");
// src/menu-command.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var MenuCommand = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _chunkUZJ3TPNQMjs.useMenuStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        ref,
        ...props,
        __css: styles.command,
        className: "chakra-menu__command"
    });
});
MenuCommand.displayName = "MenuCommand";

},{"./chunk-UZJ3TPNQ.mjs":"6xmCW","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6xmCW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useMenuStyles", ()=>useMenuStyles);
parcelHelpers.export(exports, "Menu", ()=>Menu);
var _chunkSANI5SUMMjs = require("./chunk-SANI5SUM.mjs");
// src/menu.tsx
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [MenuStylesProvider, useMenuStyles] = (0, _reactContext.createContext)({
    name: `MenuStylesContext`,
    errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Menu />" `
});
var Menu = (props)=>{
    const { children } = props;
    const styles = (0, _system.useMultiStyleConfig)("Menu", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    const { direction } = (0, _system.useTheme)();
    const { descendants, ...ctx } = (0, _chunkSANI5SUMMjs.useMenu)({
        ...ownProps,
        direction
    });
    const context = (0, _react.useMemo)(()=>ctx, [
        ctx
    ]);
    const { isOpen, onClose, forceUpdate } = context;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkSANI5SUMMjs.MenuDescendantsProvider), {
        value: descendants,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkSANI5SUMMjs.MenuProvider), {
            value: context,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(MenuStylesProvider, {
                value: styles,
                children: (0, _sharedUtils.runIfFn)(children, {
                    isOpen,
                    onClose,
                    forceUpdate
                })
            })
        })
    });
};
Menu.displayName = "Menu";

},{"./chunk-SANI5SUM.mjs":"4rRSF","@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4rRSF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuDescendantsProvider", ()=>MenuDescendantsProvider);
parcelHelpers.export(exports, "useMenuDescendantsContext", ()=>useMenuDescendantsContext);
parcelHelpers.export(exports, "useMenuDescendants", ()=>useMenuDescendants);
parcelHelpers.export(exports, "useMenuDescendant", ()=>useMenuDescendant);
parcelHelpers.export(exports, "MenuProvider", ()=>MenuProvider);
parcelHelpers.export(exports, "useMenuContext", ()=>useMenuContext);
parcelHelpers.export(exports, "useMenu", ()=>useMenu);
parcelHelpers.export(exports, "useMenuButton", ()=>useMenuButton);
parcelHelpers.export(exports, "useMenuList", ()=>useMenuList);
parcelHelpers.export(exports, "useMenuPositioner", ()=>useMenuPositioner);
parcelHelpers.export(exports, "useMenuItem", ()=>useMenuItem);
parcelHelpers.export(exports, "useMenuOption", ()=>useMenuOption);
parcelHelpers.export(exports, "useMenuOptionGroup", ()=>useMenuOptionGroup);
parcelHelpers.export(exports, "useMenuState", ()=>useMenuState);
var _chunkYSKACL7RMjs = require("./chunk-YSKACL7R.mjs");
var _chunkBWUXSGSJMjs = require("./chunk-BWUXSGSJ.mjs");
// src/use-menu.ts
var _clickable = require("@chakra-ui/clickable");
var _descendant = require("@chakra-ui/descendant");
var _reactUseFocusEffect = require("@chakra-ui/react-use-focus-effect");
var _popper = require("@chakra-ui/popper");
var _reactUseDisclosure = require("@chakra-ui/react-use-disclosure");
var _reactUseOutsideClick = require("@chakra-ui/react-use-outside-click");
var _reactUseAnimationState = require("@chakra-ui/react-use-animation-state");
var _reactContext = require("@chakra-ui/react-context");
var _reactChildrenUtils = require("@chakra-ui/react-children-utils");
var _reactUseControllableState = require("@chakra-ui/react-use-controllable-state");
var _reactUseUpdateEffect = require("@chakra-ui/react-use-update-effect");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _lazyUtils = require("@chakra-ui/lazy-utils");
var _react = require("react");
"use client";
var [MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant] = (0, _descendant.createDescendantContext)();
var [MenuProvider, useMenuContext] = (0, _reactContext.createContext)({
    strict: false,
    name: "MenuContext"
});
function useIds(idProp, ...prefixes) {
    const reactId = (0, _react.useId)();
    const id = idProp || reactId;
    return (0, _react.useMemo)(()=>{
        return prefixes.map((prefix)=>`${prefix}-${id}`);
    }, [
        id,
        prefixes
    ]);
}
function getOwnerDocument(node) {
    var _a;
    return (_a = node == null ? void 0 : node.ownerDocument) != null ? _a : document;
}
function isActiveElement(element) {
    const doc = getOwnerDocument(element);
    return doc.activeElement === element;
}
function useMenu(props = {}) {
    const { id, closeOnSelect = true, closeOnBlur = true, initialFocusRef, autoSelect = true, isLazy, isOpen: isOpenProp, defaultIsOpen, onClose: onCloseProp, onOpen: onOpenProp, placement = "bottom-start", lazyBehavior = "unmount", direction, computePositionOnMount = false, ...popperProps } = props;
    const menuRef = (0, _react.useRef)(null);
    const buttonRef = (0, _react.useRef)(null);
    const descendants = useMenuDescendants();
    const focusMenu = (0, _react.useCallback)(()=>{
        requestAnimationFrame(()=>{
            var _a;
            (_a = menuRef.current) == null || _a.focus({
                preventScroll: false
            });
        });
    }, []);
    const focusFirstItem = (0, _react.useCallback)(()=>{
        const id2 = setTimeout(()=>{
            var _a;
            if (initialFocusRef) (_a = initialFocusRef.current) == null || _a.focus();
            else {
                const first = descendants.firstEnabled();
                if (first) setFocusedIndex(first.index);
            }
        });
        timeoutIds.current.add(id2);
    }, [
        descendants,
        initialFocusRef
    ]);
    const focusLastItem = (0, _react.useCallback)(()=>{
        const id2 = setTimeout(()=>{
            const last = descendants.lastEnabled();
            if (last) setFocusedIndex(last.index);
        });
        timeoutIds.current.add(id2);
    }, [
        descendants
    ]);
    const onOpenInternal = (0, _react.useCallback)(()=>{
        onOpenProp == null || onOpenProp();
        if (autoSelect) focusFirstItem();
        else focusMenu();
    }, [
        autoSelect,
        focusFirstItem,
        focusMenu,
        onOpenProp
    ]);
    const { isOpen, onOpen, onClose, onToggle } = (0, _reactUseDisclosure.useDisclosure)({
        isOpen: isOpenProp,
        defaultIsOpen,
        onClose: onCloseProp,
        onOpen: onOpenInternal
    });
    (0, _reactUseOutsideClick.useOutsideClick)({
        enabled: isOpen && closeOnBlur,
        ref: menuRef,
        handler: (event)=>{
            var _a;
            if (!((_a = buttonRef.current) == null ? void 0 : _a.contains(event.target))) onClose();
        }
    });
    const popper = (0, _popper.usePopper)({
        ...popperProps,
        enabled: isOpen || computePositionOnMount,
        placement,
        direction
    });
    const [focusedIndex, setFocusedIndex] = (0, _react.useState)(-1);
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        if (!isOpen) setFocusedIndex(-1);
    }, [
        isOpen
    ]);
    (0, _reactUseFocusEffect.useFocusOnHide)(menuRef, {
        focusRef: buttonRef,
        visible: isOpen,
        shouldFocus: true
    });
    const animationState = (0, _reactUseAnimationState.useAnimationState)({
        isOpen,
        ref: menuRef
    });
    const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`);
    const openAndFocusMenu = (0, _react.useCallback)(()=>{
        onOpen();
        focusMenu();
    }, [
        onOpen,
        focusMenu
    ]);
    const timeoutIds = (0, _react.useRef)(/* @__PURE__ */ new Set([]));
    (0, _react.useEffect)(()=>{
        const ids = timeoutIds.current;
        return ()=>{
            ids.forEach((id2)=>clearTimeout(id2));
            ids.clear();
        };
    }, []);
    const openAndFocusFirstItem = (0, _react.useCallback)(()=>{
        onOpen();
        focusFirstItem();
    }, [
        focusFirstItem,
        onOpen
    ]);
    const openAndFocusLastItem = (0, _react.useCallback)(()=>{
        onOpen();
        focusLastItem();
    }, [
        onOpen,
        focusLastItem
    ]);
    const refocus = (0, _react.useCallback)(()=>{
        var _a, _b;
        const doc = getOwnerDocument(menuRef.current);
        const hasFocusWithin = (_a = menuRef.current) == null ? void 0 : _a.contains(doc.activeElement);
        const shouldRefocus = isOpen && !hasFocusWithin;
        if (!shouldRefocus) return;
        const node = (_b = descendants.item(focusedIndex)) == null ? void 0 : _b.node;
        node == null || node.focus({
            preventScroll: true
        });
    }, [
        isOpen,
        focusedIndex,
        descendants
    ]);
    const rafId = (0, _react.useRef)(null);
    return {
        openAndFocusMenu,
        openAndFocusFirstItem,
        openAndFocusLastItem,
        onTransitionEnd: refocus,
        unstable__animationState: animationState,
        descendants,
        popper,
        buttonId,
        menuId,
        forceUpdate: popper.forceUpdate,
        orientation: "vertical",
        isOpen,
        onToggle,
        onOpen,
        onClose,
        menuRef,
        buttonRef,
        focusedIndex,
        closeOnSelect,
        closeOnBlur,
        autoSelect,
        setFocusedIndex,
        isLazy,
        lazyBehavior,
        initialFocusRef,
        rafId
    };
}
function useMenuButton(props = {}, externalRef = null) {
    const menu = useMenuContext();
    const { onToggle, popper, openAndFocusFirstItem, openAndFocusLastItem } = menu;
    const onKeyDown = (0, _react.useCallback)((event)=>{
        const eventKey = event.key;
        const keyMap = {
            Enter: openAndFocusFirstItem,
            ArrowDown: openAndFocusFirstItem,
            ArrowUp: openAndFocusLastItem
        };
        const action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            event.stopPropagation();
            action(event);
        }
    }, [
        openAndFocusFirstItem,
        openAndFocusLastItem
    ]);
    return {
        ...props,
        ref: (0, _reactUseMergeRefs.mergeRefs)(menu.buttonRef, externalRef, popper.referenceRef),
        id: menu.buttonId,
        "data-active": (0, _sharedUtils.dataAttr)(menu.isOpen),
        "aria-expanded": menu.isOpen,
        "aria-haspopup": "menu",
        "aria-controls": menu.menuId,
        onClick: (0, _sharedUtils.callAllHandlers)(props.onClick, onToggle),
        onKeyDown: (0, _sharedUtils.callAllHandlers)(props.onKeyDown, onKeyDown)
    };
}
function isTargetMenuItem(target) {
    var _a;
    return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute("role")) == null ? void 0 : _a.startsWith("menuitem"));
}
function useMenuList(props = {}, ref = null) {
    const menu = useMenuContext();
    if (!menu) throw new Error(`useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`);
    const { focusedIndex, setFocusedIndex, menuRef, isOpen, onClose, menuId, isLazy, lazyBehavior, unstable__animationState: animated } = menu;
    const descendants = useMenuDescendantsContext();
    const createTypeaheadHandler = (0, _chunkYSKACL7RMjs.useShortcut)({
        preventDefault: (event)=>event.key !== " " && isTargetMenuItem(event.target)
    });
    const onKeyDown = (0, _react.useCallback)((event)=>{
        if (!event.currentTarget.contains(event.target)) return;
        const eventKey = event.key;
        const keyMap = {
            Tab: (event2)=>event2.preventDefault(),
            Escape: onClose,
            ArrowDown: ()=>{
                const next = descendants.nextEnabled(focusedIndex);
                if (next) setFocusedIndex(next.index);
            },
            ArrowUp: ()=>{
                const prev = descendants.prevEnabled(focusedIndex);
                if (prev) setFocusedIndex(prev.index);
            }
        };
        const fn = keyMap[eventKey];
        if (fn) {
            event.preventDefault();
            fn(event);
            return;
        }
        const onTypeahead = createTypeaheadHandler((character)=>{
            const nextItem = (0, _chunkBWUXSGSJMjs.getNextItemFromSearch)(descendants.values(), character, (item)=>{
                var _a, _b;
                return (_b = (_a = item == null ? void 0 : item.node) == null ? void 0 : _a.textContent) != null ? _b : "";
            }, descendants.item(focusedIndex));
            if (nextItem) {
                const index = descendants.indexOf(nextItem.node);
                setFocusedIndex(index);
            }
        });
        if (isTargetMenuItem(event.target)) onTypeahead(event);
    }, [
        descendants,
        focusedIndex,
        createTypeaheadHandler,
        onClose,
        setFocusedIndex
    ]);
    const hasBeenOpened = (0, _react.useRef)(false);
    if (isOpen) hasBeenOpened.current = true;
    const shouldRenderChildren = (0, _lazyUtils.lazyDisclosure)({
        wasSelected: hasBeenOpened.current,
        enabled: isLazy,
        mode: lazyBehavior,
        isSelected: animated.present
    });
    return {
        ...props,
        ref: (0, _reactUseMergeRefs.mergeRefs)(menuRef, ref),
        children: shouldRenderChildren ? props.children : null,
        tabIndex: -1,
        role: "menu",
        id: menuId,
        style: {
            ...props.style,
            transformOrigin: "var(--popper-transform-origin)"
        },
        "aria-orientation": "vertical",
        onKeyDown: (0, _sharedUtils.callAllHandlers)(props.onKeyDown, onKeyDown)
    };
}
function useMenuPositioner(props = {}) {
    const { popper, isOpen } = useMenuContext();
    return popper.getPopperProps({
        ...props,
        style: {
            visibility: isOpen ? "visible" : "hidden",
            ...props.style
        }
    });
}
function useMenuItem(props = {}, externalRef = null) {
    const { onMouseEnter: onMouseEnterProp, onMouseMove: onMouseMoveProp, onMouseLeave: onMouseLeaveProp, onClick: onClickProp, onFocus: onFocusProp, isDisabled, isFocusable, closeOnSelect, type: typeProp, ...htmlProps } = props;
    const menu = useMenuContext();
    const { setFocusedIndex, focusedIndex, closeOnSelect: menuCloseOnSelect, onClose, menuRef, isOpen, menuId, rafId } = menu;
    const ref = (0, _react.useRef)(null);
    const id = `${menuId}-menuitem-${(0, _react.useId)()}`;
    const { index, register } = useMenuDescendant({
        disabled: isDisabled && !isFocusable
    });
    const onMouseEnter = (0, _react.useCallback)((event)=>{
        onMouseEnterProp == null || onMouseEnterProp(event);
        if (isDisabled) return;
        setFocusedIndex(index);
    }, [
        setFocusedIndex,
        index,
        isDisabled,
        onMouseEnterProp
    ]);
    const onMouseMove = (0, _react.useCallback)((event)=>{
        onMouseMoveProp == null || onMouseMoveProp(event);
        if (ref.current && !isActiveElement(ref.current)) onMouseEnter(event);
    }, [
        onMouseEnter,
        onMouseMoveProp
    ]);
    const onMouseLeave = (0, _react.useCallback)((event)=>{
        onMouseLeaveProp == null || onMouseLeaveProp(event);
        if (isDisabled) return;
        setFocusedIndex(-1);
    }, [
        setFocusedIndex,
        isDisabled,
        onMouseLeaveProp
    ]);
    const onClick = (0, _react.useCallback)((event)=>{
        onClickProp == null || onClickProp(event);
        if (!isTargetMenuItem(event.currentTarget)) return;
        if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) onClose();
    }, [
        onClose,
        onClickProp,
        menuCloseOnSelect,
        closeOnSelect
    ]);
    const onFocus = (0, _react.useCallback)((event)=>{
        onFocusProp == null || onFocusProp(event);
        setFocusedIndex(index);
    }, [
        setFocusedIndex,
        onFocusProp,
        index
    ]);
    const isFocused = index === focusedIndex;
    const trulyDisabled = isDisabled && !isFocusable;
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        if (!isOpen) return;
        if (isFocused && !trulyDisabled && ref.current) {
            if (rafId.current) cancelAnimationFrame(rafId.current);
            rafId.current = requestAnimationFrame(()=>{
                var _a;
                (_a = ref.current) == null || _a.focus({
                    preventScroll: true
                });
                rafId.current = null;
            });
        } else if (menuRef.current && !isActiveElement(menuRef.current)) menuRef.current.focus({
            preventScroll: true
        });
        return ()=>{
            if (rafId.current) cancelAnimationFrame(rafId.current);
        };
    }, [
        isFocused,
        trulyDisabled,
        menuRef,
        isOpen
    ]);
    const clickableProps = (0, _clickable.useClickable)({
        onClick,
        onFocus,
        onMouseEnter,
        onMouseMove,
        onMouseLeave,
        ref: (0, _reactUseMergeRefs.mergeRefs)(register, ref, externalRef),
        isDisabled,
        isFocusable
    });
    return {
        ...htmlProps,
        ...clickableProps,
        type: typeProp != null ? typeProp : clickableProps.type,
        id,
        role: "menuitem",
        tabIndex: isFocused ? 0 : -1
    };
}
function useMenuOption(props = {}, ref = null) {
    const { type = "radio", isChecked, ...rest } = props;
    const ownProps = useMenuItem(rest, ref);
    return {
        ...ownProps,
        role: `menuitem${type}`,
        "aria-checked": isChecked
    };
}
function useMenuOptionGroup(props = {}) {
    const { children, type = "radio", value: valueProp, defaultValue, onChange: onChangeProp, ...htmlProps } = props;
    const isRadio = type === "radio";
    const fallback = isRadio ? "" : [];
    const [value, setValue] = (0, _reactUseControllableState.useControllableState)({
        defaultValue: defaultValue != null ? defaultValue : fallback,
        value: valueProp,
        onChange: onChangeProp
    });
    const onChange = (0, _react.useCallback)((selectedValue)=>{
        if (type === "radio" && typeof value === "string") setValue(selectedValue);
        if (type === "checkbox" && Array.isArray(value)) {
            const nextValue = value.includes(selectedValue) ? value.filter((item)=>item !== selectedValue) : value.concat(selectedValue);
            setValue(nextValue);
        }
    }, [
        value,
        setValue,
        type
    ]);
    const validChildren = (0, _reactChildrenUtils.getValidChildren)(children);
    const clones = validChildren.map((child)=>{
        if (child.type.id !== "MenuItemOption") return child;
        const onClick = (event)=>{
            var _a, _b;
            onChange(child.props.value);
            (_b = (_a = child.props).onClick) == null || _b.call(_a, event);
        };
        const isChecked = type === "radio" ? child.props.value === value : value.includes(child.props.value);
        return (0, _react.cloneElement)(child, {
            type,
            onClick,
            isChecked
        });
    });
    return {
        ...htmlProps,
        children: clones
    };
}
function useMenuState() {
    const { isOpen, onClose } = useMenuContext();
    return {
        isOpen,
        onClose
    };
}
function isHTMLElement(el) {
    var _a;
    if (!isElement(el)) return false;
    const win = (_a = el.ownerDocument.defaultView) != null ? _a : window;
    return el instanceof win.HTMLElement;
}
function isElement(el) {
    return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}

},{"./chunk-YSKACL7R.mjs":"59YaY","./chunk-BWUXSGSJ.mjs":"9eYxc","@chakra-ui/clickable":"jduir","@chakra-ui/descendant":"4UCVd","@chakra-ui/react-use-focus-effect":"5tvB0","@chakra-ui/popper":"p5cnD","@chakra-ui/react-use-disclosure":"kajTV","@chakra-ui/react-use-outside-click":"bZvLt","@chakra-ui/react-use-animation-state":"jyXlh","@chakra-ui/react-context":"7RVZP","@chakra-ui/react-children-utils":"49v95","@chakra-ui/react-use-controllable-state":"ghlge","@chakra-ui/react-use-update-effect":"kfB4Y","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/lazy-utils":"hW1vr","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59YaY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useShortcut", ()=>useShortcut);
// src/use-shortcut.ts
var _react = require("react");
"use client";
function isPrintableCharacter(event) {
    const { key } = event;
    return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);
}
function useShortcut(props = {}) {
    const { timeout = 300, preventDefault = ()=>true } = props;
    const [keys, setKeys] = (0, _react.useState)([]);
    const timeoutRef = (0, _react.useRef)();
    const flush = ()=>{
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = null;
        }
    };
    const clearKeysAfterDelay = ()=>{
        flush();
        timeoutRef.current = setTimeout(()=>{
            setKeys([]);
            timeoutRef.current = null;
        }, timeout);
    };
    (0, _react.useEffect)(()=>flush, []);
    function onKeyDown(fn) {
        return (event)=>{
            if (event.key === "Backspace") {
                const keysCopy = [
                    ...keys
                ];
                keysCopy.pop();
                setKeys(keysCopy);
                return;
            }
            if (isPrintableCharacter(event)) {
                const keysCopy = keys.concat(event.key);
                if (preventDefault(event)) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                setKeys(keysCopy);
                fn(keysCopy.join(""));
                clearKeysAfterDelay();
            }
        };
    }
    return onKeyDown;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9eYxc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getNextItemFromSearch", ()=>getNextItemFromSearch);
"use client";
// src/get-next-item-from-search.ts
function getNextItemFromSearch(items, searchString, itemToString, currentItem) {
    if (searchString == null) return currentItem;
    if (!currentItem) {
        const foundItem = items.find((item)=>itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()));
        return foundItem;
    }
    const matchingItems = items.filter((item)=>itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()));
    if (matchingItems.length > 0) {
        let nextIndex;
        if (matchingItems.includes(currentItem)) {
            const currentIndex = matchingItems.indexOf(currentItem);
            nextIndex = currentIndex + 1;
            if (nextIndex === matchingItems.length) nextIndex = 0;
            return matchingItems[nextIndex];
        }
        nextIndex = items.indexOf(matchingItems[0]);
        return items[nextIndex];
    }
    return currentItem;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jduir":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useClickable", ()=>(0, _chunkAXLEE3EKMjs.useClickable));
var _chunkAXLEE3EKMjs = require("./chunk-AXLEE3EK.mjs");
var _chunkVDSXRTOEMjs = require("./chunk-VDSXRTOE.mjs");
"use client";

},{"./chunk-AXLEE3EK.mjs":"7Y0Wc","./chunk-VDSXRTOE.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Y0Wc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useClickable", ()=>useClickable);
var _chunkVDSXRTOEMjs = require("./chunk-VDSXRTOE.mjs");
// src/use-clickable.ts
var _sharedUtils = require("@chakra-ui/shared-utils");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _react = require("react");
"use client";
function isValidElement(event) {
    const element = event.target;
    const { tagName, isContentEditable } = element;
    return tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable !== true;
}
function useClickable(props = {}) {
    const { ref: htmlRef, isDisabled, isFocusable, clickOnEnter = true, clickOnSpace = true, onMouseDown, onMouseUp, onClick, onKeyDown, onKeyUp, tabIndex: tabIndexProp, onMouseOver, onMouseLeave, ...htmlProps } = props;
    const [isButton, setIsButton] = (0, _react.useState)(true);
    const [isPressed, setIsPressed] = (0, _react.useState)(false);
    const listeners = (0, _chunkVDSXRTOEMjs.useEventListeners)();
    const refCallback = (node)=>{
        if (!node) return;
        if (node.tagName !== "BUTTON") setIsButton(false);
    };
    const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;
    const trulyDisabled = isDisabled && !isFocusable;
    const handleClick = (0, _react.useCallback)((event)=>{
        if (isDisabled) {
            event.stopPropagation();
            event.preventDefault();
            return;
        }
        const self = event.currentTarget;
        self.focus();
        onClick == null || onClick(event);
    }, [
        isDisabled,
        onClick
    ]);
    const onDocumentKeyUp = (0, _react.useCallback)((e)=>{
        if (isPressed && isValidElement(e)) {
            e.preventDefault();
            e.stopPropagation();
            setIsPressed(false);
            listeners.remove(document, "keyup", onDocumentKeyUp, false);
        }
    }, [
        isPressed,
        listeners
    ]);
    const handleKeyDown = (0, _react.useCallback)((event)=>{
        onKeyDown == null || onKeyDown(event);
        if (isDisabled || event.defaultPrevented || event.metaKey) return;
        if (!isValidElement(event.nativeEvent) || isButton) return;
        const shouldClickOnEnter = clickOnEnter && event.key === "Enter";
        const shouldClickOnSpace = clickOnSpace && event.key === " ";
        if (shouldClickOnSpace) {
            event.preventDefault();
            setIsPressed(true);
        }
        if (shouldClickOnEnter) {
            event.preventDefault();
            const self = event.currentTarget;
            self.click();
        }
        listeners.add(document, "keyup", onDocumentKeyUp, false);
    }, [
        isDisabled,
        isButton,
        onKeyDown,
        clickOnEnter,
        clickOnSpace,
        listeners,
        onDocumentKeyUp
    ]);
    const handleKeyUp = (0, _react.useCallback)((event)=>{
        onKeyUp == null || onKeyUp(event);
        if (isDisabled || event.defaultPrevented || event.metaKey) return;
        if (!isValidElement(event.nativeEvent) || isButton) return;
        const shouldClickOnSpace = clickOnSpace && event.key === " ";
        if (shouldClickOnSpace) {
            event.preventDefault();
            setIsPressed(false);
            const self = event.currentTarget;
            self.click();
        }
    }, [
        clickOnSpace,
        isButton,
        isDisabled,
        onKeyUp
    ]);
    const onDocumentMouseUp = (0, _react.useCallback)((event)=>{
        if (event.button !== 0) return;
        setIsPressed(false);
        listeners.remove(document, "mouseup", onDocumentMouseUp, false);
    }, [
        listeners
    ]);
    const handleMouseDown = (0, _react.useCallback)((event)=>{
        if (event.button !== 0) return;
        if (isDisabled) {
            event.stopPropagation();
            event.preventDefault();
            return;
        }
        if (!isButton) setIsPressed(true);
        const target = event.currentTarget;
        target.focus({
            preventScroll: true
        });
        listeners.add(document, "mouseup", onDocumentMouseUp, false);
        onMouseDown == null || onMouseDown(event);
    }, [
        isDisabled,
        isButton,
        onMouseDown,
        listeners,
        onDocumentMouseUp
    ]);
    const handleMouseUp = (0, _react.useCallback)((event)=>{
        if (event.button !== 0) return;
        if (!isButton) setIsPressed(false);
        onMouseUp == null || onMouseUp(event);
    }, [
        onMouseUp,
        isButton
    ]);
    const handleMouseOver = (0, _react.useCallback)((event)=>{
        if (isDisabled) {
            event.preventDefault();
            return;
        }
        onMouseOver == null || onMouseOver(event);
    }, [
        isDisabled,
        onMouseOver
    ]);
    const handleMouseLeave = (0, _react.useCallback)((event)=>{
        if (isPressed) {
            event.preventDefault();
            setIsPressed(false);
        }
        onMouseLeave == null || onMouseLeave(event);
    }, [
        isPressed,
        onMouseLeave
    ]);
    const ref = (0, _reactUseMergeRefs.mergeRefs)(htmlRef, refCallback);
    if (isButton) return {
        ...htmlProps,
        ref,
        type: "button",
        "aria-disabled": trulyDisabled ? void 0 : isDisabled,
        disabled: trulyDisabled,
        onClick: handleClick,
        onMouseDown,
        onMouseUp,
        onKeyUp,
        onKeyDown,
        onMouseOver,
        onMouseLeave
    };
    return {
        ...htmlProps,
        ref,
        role: "button",
        "data-active": (0, _sharedUtils.dataAttr)(isPressed),
        "aria-disabled": isDisabled ? "true" : void 0,
        tabIndex: trulyDisabled ? void 0 : tabIndex,
        onClick: handleClick,
        onMouseDown: handleMouseDown,
        onMouseUp: handleMouseUp,
        onKeyUp: handleKeyUp,
        onKeyDown: handleKeyDown,
        onMouseOver: handleMouseOver,
        onMouseLeave: handleMouseLeave
    };
}

},{"./chunk-VDSXRTOE.mjs":"kfxd8","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/react-use-merge-refs":"9E5Ql","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kfxd8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEventListeners", ()=>useEventListeners);
// src/use-event-listeners.ts
var _react = require("react");
"use client";
function useEventListeners() {
    const listeners = (0, _react.useRef)(/* @__PURE__ */ new Map());
    const currentListeners = listeners.current;
    const add = (0, _react.useCallback)((el, type, listener, options)=>{
        listeners.current.set(listener, {
            type,
            el,
            options
        });
        el.addEventListener(type, listener, options);
    }, []);
    const remove = (0, _react.useCallback)((el, type, listener, options)=>{
        el.removeEventListener(type, listener, options);
        listeners.current.delete(listener);
    }, []);
    (0, _react.useEffect)(()=>()=>{
            currentListeners.forEach((value, key)=>{
                remove(value.el, value.type, key, value.options);
            });
        }, [
        remove,
        currentListeners
    ]);
    return {
        add,
        remove
    };
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5tvB0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useFocusOnHide", ()=>useFocusOnHide);
parcelHelpers.export(exports, "useFocusOnShow", ()=>useFocusOnShow);
// src/index.ts
var _domUtils = require("@chakra-ui/dom-utils");
var _reactUseEventListener = require("@chakra-ui/react-use-event-listener");
var _reactUseSafeLayoutEffect = require("@chakra-ui/react-use-safe-layout-effect");
var _reactUseUpdateEffect = require("@chakra-ui/react-use-update-effect");
var _react = require("react");
"use client";
function preventReturnFocus(containerRef) {
    const el = containerRef.current;
    if (!el) return false;
    const activeElement = (0, _domUtils.getActiveElement)(el);
    if (!activeElement) return false;
    if (el.contains(activeElement)) return false;
    if ((0, _domUtils.isTabbable)(activeElement)) return true;
    return false;
}
function useFocusOnHide(containerRef, options) {
    const { shouldFocus: shouldFocusProp, visible, focusRef } = options;
    const shouldFocus = shouldFocusProp && !visible;
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        if (!shouldFocus) return;
        if (preventReturnFocus(containerRef)) return;
        const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;
        let rafId;
        if (el) {
            rafId = requestAnimationFrame(()=>{
                el.focus({
                    preventScroll: true
                });
            });
            return ()=>{
                cancelAnimationFrame(rafId);
            };
        }
    }, [
        shouldFocus,
        containerRef,
        focusRef
    ]);
}
var defaultOptions = {
    preventScroll: true,
    shouldFocus: false
};
function useFocusOnShow(target, options = defaultOptions) {
    const { focusRef, preventScroll, shouldFocus, visible } = options;
    const element = isRefObject(target) ? target.current : target;
    const autoFocusValue = shouldFocus && visible;
    const autoFocusRef = (0, _react.useRef)(autoFocusValue);
    const lastVisibleRef = (0, _react.useRef)(visible);
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (!lastVisibleRef.current && visible) autoFocusRef.current = autoFocusValue;
        lastVisibleRef.current = visible;
    }, [
        visible,
        autoFocusValue
    ]);
    const onFocus = (0, _react.useCallback)(()=>{
        if (!visible || !element || !autoFocusRef.current) return;
        autoFocusRef.current = false;
        if (element.contains(document.activeElement)) return;
        if (focusRef == null ? void 0 : focusRef.current) requestAnimationFrame(()=>{
            var _a;
            (_a = focusRef.current) == null || _a.focus({
                preventScroll
            });
        });
        else {
            const tabbableEls = (0, _domUtils.getAllFocusable)(element);
            if (tabbableEls.length > 0) requestAnimationFrame(()=>{
                tabbableEls[0].focus({
                    preventScroll
                });
            });
        }
    }, [
        visible,
        preventScroll,
        element,
        focusRef
    ]);
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        onFocus();
    }, [
        onFocus
    ]);
    (0, _reactUseEventListener.useEventListener)(element, "transitionend", onFocus);
}
function isRefObject(val) {
    return "current" in val;
}

},{"@chakra-ui/dom-utils":"cWgfO","@chakra-ui/react-use-event-listener":"lQUDe","@chakra-ui/react-use-safe-layout-effect":"eJbER","@chakra-ui/react-use-update-effect":"kfB4Y","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"p5cnD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperCSSVars", ()=>(0, _chunk6WT2JRWXMjs.cssVars));
parcelHelpers.export(exports, "usePopper", ()=>(0, _chunkLUYFNC5GMjs.usePopper));
var _chunkLUYFNC5GMjs = require("./chunk-LUYFNC5G.mjs");
var _chunkP4KPSAOWMjs = require("./chunk-P4KPSAOW.mjs");
var _chunkAUJXXV3BMjs = require("./chunk-AUJXXV3B.mjs");
var _chunk6WT2JRWXMjs = require("./chunk-6WT2JRWX.mjs");
"use client";

},{"./chunk-LUYFNC5G.mjs":"gsRWa","./chunk-P4KPSAOW.mjs":"7isKA","./chunk-AUJXXV3B.mjs":"eiW59","./chunk-6WT2JRWX.mjs":"hUBKG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gsRWa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePopper", ()=>usePopper);
var _chunkP4KPSAOWMjs = require("./chunk-P4KPSAOW.mjs");
var _chunkAUJXXV3BMjs = require("./chunk-AUJXXV3B.mjs");
var _chunk6WT2JRWXMjs = require("./chunk-6WT2JRWX.mjs");
// src/use-popper.ts
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _core = require("@popperjs/core");
var _react = require("react");
"use client";
function usePopper(props = {}) {
    const { enabled = true, modifiers, placement: placementProp = "bottom", strategy = "absolute", arrowPadding = 8, eventListeners = true, offset, gutter = 8, flip = true, boundary = "clippingParents", preventOverflow = true, matchWidth: matchWidth2, direction = "ltr" } = props;
    const reference = (0, _react.useRef)(null);
    const popper = (0, _react.useRef)(null);
    const instance = (0, _react.useRef)(null);
    const placement = (0, _chunkAUJXXV3BMjs.getPopperPlacement)(placementProp, direction);
    const cleanup = (0, _react.useRef)(()=>{});
    const setupPopper = (0, _react.useCallback)(()=>{
        var _a;
        if (!enabled || !reference.current || !popper.current) return;
        (_a = cleanup.current) == null || _a.call(cleanup);
        instance.current = (0, _core.createPopper)(reference.current, popper.current, {
            placement,
            modifiers: [
                (0, _chunkP4KPSAOWMjs.innerArrow),
                (0, _chunkP4KPSAOWMjs.positionArrow),
                (0, _chunkP4KPSAOWMjs.transformOrigin),
                {
                    ...(0, _chunkP4KPSAOWMjs.matchWidth),
                    enabled: !!matchWidth2
                },
                {
                    name: "eventListeners",
                    ...(0, _chunk6WT2JRWXMjs.getEventListenerOptions)(eventListeners)
                },
                {
                    name: "arrow",
                    options: {
                        padding: arrowPadding
                    }
                },
                {
                    name: "offset",
                    options: {
                        offset: offset != null ? offset : [
                            0,
                            gutter
                        ]
                    }
                },
                {
                    name: "flip",
                    enabled: !!flip,
                    options: {
                        padding: 8
                    }
                },
                {
                    name: "preventOverflow",
                    enabled: !!preventOverflow,
                    options: {
                        boundary
                    }
                },
                // allow users override internal modifiers
                ...modifiers != null ? modifiers : []
            ],
            strategy
        });
        instance.current.forceUpdate();
        cleanup.current = instance.current.destroy;
    }, [
        placement,
        enabled,
        modifiers,
        matchWidth2,
        eventListeners,
        arrowPadding,
        offset,
        gutter,
        flip,
        preventOverflow,
        boundary,
        strategy
    ]);
    (0, _react.useEffect)(()=>{
        return ()=>{
            var _a;
            if (!reference.current && !popper.current) {
                (_a = instance.current) == null || _a.destroy();
                instance.current = null;
            }
        };
    }, []);
    const referenceRef = (0, _react.useCallback)((node)=>{
        reference.current = node;
        setupPopper();
    }, [
        setupPopper
    ]);
    const getReferenceProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(referenceRef, ref)
        }), [
        referenceRef
    ]);
    const popperRef = (0, _react.useCallback)((node)=>{
        popper.current = node;
        setupPopper();
    }, [
        setupPopper
    ]);
    const getPopperProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(popperRef, ref),
            style: {
                ...props2.style,
                position: strategy,
                minWidth: matchWidth2 ? void 0 : "max-content",
                inset: "0 auto auto 0"
            }
        }), [
        strategy,
        popperRef,
        matchWidth2
    ]);
    const getArrowProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        const { size, shadowColor, bg, style, ...rest } = props2;
        return {
            ...rest,
            ref,
            "data-popper-arrow": "",
            style: getArrowStyle(props2)
        };
    }, []);
    const getArrowInnerProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            ref,
            "data-popper-arrow-inner": ""
        }), []);
    return {
        update () {
            var _a;
            (_a = instance.current) == null || _a.update();
        },
        forceUpdate () {
            var _a;
            (_a = instance.current) == null || _a.forceUpdate();
        },
        transformOrigin: (0, _chunk6WT2JRWXMjs.cssVars).transformOrigin.varRef,
        referenceRef,
        popperRef,
        getPopperProps,
        getArrowProps,
        getArrowInnerProps,
        getReferenceProps
    };
}
function getArrowStyle(props) {
    const { size, shadowColor, bg, style } = props;
    const computedStyle = {
        ...style,
        position: "absolute"
    };
    if (size) computedStyle["--popper-arrow-size"] = size;
    if (shadowColor) computedStyle["--popper-arrow-shadow-color"] = shadowColor;
    if (bg) computedStyle["--popper-arrow-bg"] = bg;
    return computedStyle;
}

},{"./chunk-P4KPSAOW.mjs":"7isKA","./chunk-AUJXXV3B.mjs":"eiW59","./chunk-6WT2JRWX.mjs":"hUBKG","@chakra-ui/react-use-merge-refs":"9E5Ql","@popperjs/core":"7unqC","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7isKA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matchWidth", ()=>matchWidth);
parcelHelpers.export(exports, "transformOrigin", ()=>transformOrigin);
parcelHelpers.export(exports, "positionArrow", ()=>positionArrow);
parcelHelpers.export(exports, "innerArrow", ()=>innerArrow);
var _chunk6WT2JRWXMjs = require("./chunk-6WT2JRWX.mjs");
"use client";
// src/modifiers.ts
var matchWidth = {
    name: "matchWidth",
    enabled: true,
    phase: "beforeWrite",
    requires: [
        "computeStyles"
    ],
    fn: ({ state })=>{
        state.styles.popper.width = `${state.rects.reference.width}px`;
    },
    effect: ({ state })=>()=>{
            const reference = state.elements.reference;
            state.elements.popper.style.width = `${reference.offsetWidth}px`;
        }
};
var transformOrigin = {
    name: "transformOrigin",
    enabled: true,
    phase: "write",
    fn: ({ state })=>{
        setTransformOrigin(state);
    },
    effect: ({ state })=>()=>{
            setTransformOrigin(state);
        }
};
var setTransformOrigin = (state)=>{
    state.elements.popper.style.setProperty((0, _chunk6WT2JRWXMjs.cssVars).transformOrigin.var, (0, _chunk6WT2JRWXMjs.toTransformOrigin)(state.placement));
};
var positionArrow = {
    name: "positionArrow",
    enabled: true,
    phase: "afterWrite",
    fn: ({ state })=>{
        setArrowStyles(state);
    }
};
var setArrowStyles = (state)=>{
    var _a;
    if (!state.placement) return;
    const overrides = getArrowStyle(state.placement);
    if (((_a = state.elements) == null ? void 0 : _a.arrow) && overrides) {
        Object.assign(state.elements.arrow.style, {
            [overrides.property]: overrides.value,
            width: (0, _chunk6WT2JRWXMjs.cssVars).arrowSize.varRef,
            height: (0, _chunk6WT2JRWXMjs.cssVars).arrowSize.varRef,
            zIndex: -1
        });
        const vars = {
            [(0, _chunk6WT2JRWXMjs.cssVars).arrowSizeHalf.var]: `calc(${(0, _chunk6WT2JRWXMjs.cssVars).arrowSize.varRef} / 2 - 1px)`,
            [(0, _chunk6WT2JRWXMjs.cssVars).arrowOffset.var]: `calc(${(0, _chunk6WT2JRWXMjs.cssVars).arrowSizeHalf.varRef} * -1)`
        };
        for(const property in vars)state.elements.arrow.style.setProperty(property, vars[property]);
    }
};
var getArrowStyle = (placement)=>{
    if (placement.startsWith("top")) return {
        property: "bottom",
        value: (0, _chunk6WT2JRWXMjs.cssVars).arrowOffset.varRef
    };
    if (placement.startsWith("bottom")) return {
        property: "top",
        value: (0, _chunk6WT2JRWXMjs.cssVars).arrowOffset.varRef
    };
    if (placement.startsWith("left")) return {
        property: "right",
        value: (0, _chunk6WT2JRWXMjs.cssVars).arrowOffset.varRef
    };
    if (placement.startsWith("right")) return {
        property: "left",
        value: (0, _chunk6WT2JRWXMjs.cssVars).arrowOffset.varRef
    };
};
var innerArrow = {
    name: "innerArrow",
    enabled: true,
    phase: "main",
    requires: [
        "arrow"
    ],
    fn: ({ state })=>{
        setInnerArrowStyles(state);
    },
    effect: ({ state })=>()=>{
            setInnerArrowStyles(state);
        }
};
var setInnerArrowStyles = (state)=>{
    if (!state.elements.arrow) return;
    const inner = state.elements.arrow.querySelector("[data-popper-arrow-inner]");
    if (!inner) return;
    const boxShadow = (0, _chunk6WT2JRWXMjs.getBoxShadow)(state.placement);
    if (boxShadow) inner.style.setProperty("--popper-arrow-default-shadow", boxShadow);
    Object.assign(inner.style, {
        transform: "rotate(45deg)",
        background: (0, _chunk6WT2JRWXMjs.cssVars).arrowBg.varRef,
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        position: "absolute",
        zIndex: "inherit",
        boxShadow: `var(--popper-arrow-shadow, var(--popper-arrow-default-shadow))`
    });
};

},{"./chunk-6WT2JRWX.mjs":"hUBKG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hUBKG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssVars", ()=>cssVars);
parcelHelpers.export(exports, "getBoxShadow", ()=>getBoxShadow);
parcelHelpers.export(exports, "toTransformOrigin", ()=>toTransformOrigin);
parcelHelpers.export(exports, "getEventListenerOptions", ()=>getEventListenerOptions);
"use client";
// src/utils.ts
var toVar = (value, fallback)=>({
        var: value,
        varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`
    });
var cssVars = {
    arrowShadowColor: toVar("--popper-arrow-shadow-color"),
    arrowSize: toVar("--popper-arrow-size", "8px"),
    arrowSizeHalf: toVar("--popper-arrow-size-half"),
    arrowBg: toVar("--popper-arrow-bg"),
    transformOrigin: toVar("--popper-transform-origin"),
    arrowOffset: toVar("--popper-arrow-offset")
};
function getBoxShadow(placement) {
    if (placement.includes("top")) return `1px 1px 0px 0 var(--popper-arrow-shadow-color)`;
    if (placement.includes("bottom")) return `-1px -1px 0px 0 var(--popper-arrow-shadow-color)`;
    if (placement.includes("right")) return `-1px 1px 0px 0 var(--popper-arrow-shadow-color)`;
    if (placement.includes("left")) return `1px -1px 0px 0 var(--popper-arrow-shadow-color)`;
}
var transforms = {
    top: "bottom center",
    "top-start": "bottom left",
    "top-end": "bottom right",
    bottom: "top center",
    "bottom-start": "top left",
    "bottom-end": "top right",
    left: "right center",
    "left-start": "right top",
    "left-end": "right bottom",
    right: "left center",
    "right-start": "left top",
    "right-end": "left bottom"
};
var toTransformOrigin = (placement)=>transforms[placement];
var defaultEventListeners = {
    scroll: true,
    resize: true
};
function getEventListenerOptions(value) {
    let eventListeners;
    if (typeof value === "object") eventListeners = {
        enabled: true,
        options: {
            ...defaultEventListeners,
            ...value
        }
    };
    else eventListeners = {
        enabled: value,
        options: defaultEventListeners
    };
    return eventListeners;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eiW59":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPopperPlacement", ()=>getPopperPlacement);
"use client";
// src/popper.placement.ts
var logicals = {
    "start-start": {
        ltr: "left-start",
        rtl: "right-start"
    },
    "start-end": {
        ltr: "left-end",
        rtl: "right-end"
    },
    "end-start": {
        ltr: "right-start",
        rtl: "left-start"
    },
    "end-end": {
        ltr: "right-end",
        rtl: "left-end"
    },
    start: {
        ltr: "left",
        rtl: "right"
    },
    end: {
        ltr: "right",
        rtl: "left"
    }
};
var opposites = {
    "auto-start": "auto-end",
    "auto-end": "auto-start",
    "top-start": "top-end",
    "top-end": "top-start",
    "bottom-start": "bottom-end",
    "bottom-end": "bottom-start"
};
function getPopperPlacement(placement, dir = "ltr") {
    var _a, _b;
    const value = ((_a = logicals[placement]) == null ? void 0 : _a[dir]) || placement;
    if (dir === "ltr") return value;
    return (_b = opposites[placement]) != null ? _b : value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7unqC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
parcelHelpers.export(exports, "createPopperBase", ()=>(0, _createPopperJs.createPopper));
parcelHelpers.export(exports, "createPopper", ()=>(0, _popperJs.createPopper)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopperLite", ()=>(0, _popperLiteJs.createPopper));
var _enumsJs = require("./enums.js");
parcelHelpers.exportAll(_enumsJs, exports);
var _indexJs = require("./modifiers/index.js"); // eslint-disable-next-line import/no-unused-modules
parcelHelpers.exportAll(_indexJs, exports);
var _createPopperJs = require("./createPopper.js");
var _popperJs = require("./popper.js");
var _popperLiteJs = require("./popper-lite.js");

},{"./enums.js":false,"./modifiers/index.js":false,"./createPopper.js":false,"./popper.js":"1PuRF","./popper-lite.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lCAq5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "top", ()=>top);
parcelHelpers.export(exports, "bottom", ()=>bottom);
parcelHelpers.export(exports, "right", ()=>right);
parcelHelpers.export(exports, "left", ()=>left);
parcelHelpers.export(exports, "auto", ()=>auto);
parcelHelpers.export(exports, "basePlacements", ()=>basePlacements);
parcelHelpers.export(exports, "start", ()=>start);
parcelHelpers.export(exports, "end", ()=>end);
parcelHelpers.export(exports, "clippingParents", ()=>clippingParents);
parcelHelpers.export(exports, "viewport", ()=>viewport);
parcelHelpers.export(exports, "popper", ()=>popper);
parcelHelpers.export(exports, "reference", ()=>reference);
parcelHelpers.export(exports, "variationPlacements", ()=>variationPlacements);
parcelHelpers.export(exports, "placements", ()=>placements);
parcelHelpers.export(exports, "beforeRead", ()=>beforeRead);
parcelHelpers.export(exports, "read", ()=>read);
parcelHelpers.export(exports, "afterRead", ()=>afterRead);
parcelHelpers.export(exports, "beforeMain", ()=>beforeMain);
parcelHelpers.export(exports, "main", ()=>main);
parcelHelpers.export(exports, "afterMain", ()=>afterMain);
parcelHelpers.export(exports, "beforeWrite", ()=>beforeWrite);
parcelHelpers.export(exports, "write", ()=>write);
parcelHelpers.export(exports, "afterWrite", ()=>afterWrite);
parcelHelpers.export(exports, "modifierPhases", ()=>modifierPhases);
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead"; // pure-logic modifiers
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain"; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cHuNp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>popperGenerator);
parcelHelpers.export(exports, "createPopper", ()=>createPopper);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _detectOverflowJsDefault.default));
var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _orderModifiersJs = require("./utils/orderModifiers.js");
var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
var _debounceJs = require("./utils/debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _mergeByNameJs = require("./utils/mergeByName.js");
var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
var _detectOverflowJs = require("./utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _instanceOfJs = require("./dom-utils/instanceOf.js");
var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === "function");
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {};
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
        if (options === void 0) options = defaultOptions;
        var state = {
            placement: "bottom",
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
                reference: reference,
                popper: popper
            },
            attributes: {},
            styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({}, defaultOptions, state.options, options);
                state.scrollParents = {
                    reference: (0, _instanceOfJs.isElement)(reference) ? (0, _listScrollParentsJsDefault.default)(reference) : reference.contextElement ? (0, _listScrollParentsJsDefault.default)(reference.contextElement) : [],
                    popper: (0, _listScrollParentsJsDefault.default)(popper)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = (0, _orderModifiersJsDefault.default)((0, _mergeByNameJsDefault.default)([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers
                state.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                });
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) return;
                 // Store the reference and popper rects to be read by modifiers
                state.rects = {
                    reference: (0, _getCompositeRectJsDefault.default)(reference, (0, _getOffsetParentJsDefault.default)(popper), state.options.strategy === "fixed"),
                    popper: (0, _getLayoutRectJsDefault.default)(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state.reset = false;
                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state.orderedModifiers.forEach(function(modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                });
                for(var index = 0; index < state.orderedModifiers.length; index++){
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === "function") state = fn({
                        state: state,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: (0, _debounceJsDefault.default)(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference, popper)) return instance;
        instance.setOptions(options).then(function(state) {
            if (!isDestroyed && options.onFirstUpdate) options.onFirstUpdate(state);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref) {
                var name = _ref.name, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, effect = _ref.effect;
                if (typeof effect === "function") {
                    var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() {};
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

},{"./dom-utils/getCompositeRect.js":"ijPls","./dom-utils/getLayoutRect.js":"jvjuf","./dom-utils/listScrollParents.js":"2di3T","./dom-utils/getOffsetParent.js":"laoYw","./utils/orderModifiers.js":"N0VO0","./utils/debounce.js":"g6Chr","./utils/mergeByName.js":"2zTVN","./utils/detectOverflow.js":false,"./dom-utils/instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ijPls":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getCompositeRect);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getNodeScrollJs = require("./getNodeScroll.js");
var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _mathJs = require("../utils/math.js");
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = (0, _mathJs.round)(rect.width) / element.offsetWidth || 1;
    var scaleY = (0, _mathJs.round)(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = (0, _instanceOfJs.isHTMLElement)(offsetParent);
    var offsetParentIsScaled = (0, _instanceOfJs.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);
    var documentElement = (0, _getDocumentElementJsDefault.default)(offsetParent);
    var rect = (0, _getBoundingClientRectJsDefault.default)(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if ((0, _getNodeNameJsDefault.default)(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
        (0, _isScrollParentJsDefault.default)(documentElement)) scroll = (0, _getNodeScrollJsDefault.default)(offsetParent);
        if ((0, _instanceOfJs.isHTMLElement)(offsetParent)) {
            offsets = (0, _getBoundingClientRectJsDefault.default)(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = (0, _getWindowScrollBarXJsDefault.default)(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}

},{"./getBoundingClientRect.js":"9CFSQ","./getNodeScroll.js":"bBjCr","./getNodeName.js":"a2Qom","./instanceOf.js":"gYFUC","./getWindowScrollBarX.js":"sz4Ld","./getDocumentElement.js":"eJ9Y1","./isScrollParent.js":"9rLGO","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9CFSQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getBoundingClientRect);
var _instanceOfJs = require("./instanceOf.js");
var _mathJs = require("../utils/math.js");
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) includeScale = false;
    if (isFixedStrategy === void 0) isFixedStrategy = false;
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && (0, _instanceOfJs.isHTMLElement)(element)) {
        scaleX = element.offsetWidth > 0 ? (0, _mathJs.round)(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? (0, _mathJs.round)(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = (0, _instanceOfJs.isElement)(element) ? (0, _getWindowJsDefault.default)(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !(0, _isLayoutViewportJsDefault.default)() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
    };
}

},{"./instanceOf.js":"gYFUC","../utils/math.js":"gQqVe","./getWindow.js":"2SkOo","./isLayoutViewport.js":"3ipHv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gYFUC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement);
parcelHelpers.export(exports, "isShadowRoot", ()=>isShadowRoot);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function isElement(node) {
    var OwnElement = (0, _getWindowJsDefault.default)(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = (0, _getWindowJsDefault.default)(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === "undefined") return false;
    var OwnElement = (0, _getWindowJsDefault.default)(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SkOo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindow);
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== "[object Window]") {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQqVe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "round", ()=>round);
var max = Math.max;
var min = Math.min;
var round = Math.round;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ipHv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isLayoutViewport);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test((0, _userAgentJsDefault.default)());
}

},{"../utils/userAgent.js":"1hEx0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1hEx0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getUAString);
function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
    }).join(" ");
    return navigator.userAgent;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBjCr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getNodeScroll);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _instanceOfJs = require("./instanceOf.js");
var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
function getNodeScroll(node) {
    if (node === (0, _getWindowJsDefault.default)(node) || !(0, _instanceOfJs.isHTMLElement)(node)) return (0, _getWindowScrollJsDefault.default)(node);
    else return (0, _getHTMLElementScrollJsDefault.default)(node);
}

},{"./getWindowScroll.js":"1XUtN","./getWindow.js":"2SkOo","./instanceOf.js":"gYFUC","./getHTMLElementScroll.js":"6pwY2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1XUtN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindowScroll);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getWindowScroll(node) {
    var win = (0, _getWindowJsDefault.default)(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pwY2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getHTMLElementScroll);
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2Qom":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getNodeName);
function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"sz4Ld":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindowScrollBarX);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return (0, _getBoundingClientRectJsDefault.default)((0, _getDocumentElementJsDefault.default)(element)).left + (0, _getWindowScrollJsDefault.default)(element).scrollLeft;
}

},{"./getBoundingClientRect.js":"9CFSQ","./getDocumentElement.js":"eJ9Y1","./getWindowScroll.js":"1XUtN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJ9Y1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getDocumentElement);
var _instanceOfJs = require("./instanceOf.js");
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return (((0, _instanceOfJs.isElement)(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

},{"./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9rLGO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isScrollParent);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = (0, _getComputedStyleJsDefault.default)(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

},{"./getComputedStyle.js":"3mZjB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mZjB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getComputedStyle);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getComputedStyle(element) {
    return (0, _getWindowJsDefault.default)(element).getComputedStyle(element);
}

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jvjuf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getLayoutRect);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
function getLayoutRect(element) {
    var clientRect = (0, _getBoundingClientRectJsDefault.default)(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}

},{"./getBoundingClientRect.js":"9CFSQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2di3T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>listScrollParents);
var _getScrollParentJs = require("./getScrollParent.js");
var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = (0, _getScrollParentJsDefault.default)(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = (0, _getWindowJsDefault.default)(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], (0, _isScrollParentJsDefault.default)(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents((0, _getParentNodeJsDefault.default)(target)));
}

},{"./getScrollParent.js":"jy4ZS","./getParentNode.js":"bIHpd","./getWindow.js":"2SkOo","./isScrollParent.js":"9rLGO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jy4ZS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getScrollParent);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
function getScrollParent(node) {
    if ([
        "html",
        "body",
        "#document"
    ].indexOf((0, _getNodeNameJsDefault.default)(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if ((0, _instanceOfJs.isHTMLElement)(node) && (0, _isScrollParentJsDefault.default)(node)) return node;
    return getScrollParent((0, _getParentNodeJsDefault.default)(node));
}

},{"./getParentNode.js":"bIHpd","./isScrollParent.js":"9rLGO","./getNodeName.js":"a2Qom","./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bIHpd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getParentNode);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _instanceOfJs = require("./instanceOf.js");
function getParentNode(element) {
    if ((0, _getNodeNameJsDefault.default)(element) === "html") return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ((0, _instanceOfJs.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    (0, _getDocumentElementJsDefault.default)(element) // fallback
    );
}

},{"./getNodeName.js":"a2Qom","./getDocumentElement.js":"eJ9Y1","./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"laoYw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOffsetParent);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _isTableElementJs = require("./isTableElement.js");
var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function getTrueOffsetParent(element) {
    if (!(0, _instanceOfJs.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
    (0, _getComputedStyleJsDefault.default)(element).position === "fixed") return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = /firefox/i.test((0, _userAgentJsDefault.default)());
    var isIE = /Trident/i.test((0, _userAgentJsDefault.default)());
    if (isIE && (0, _instanceOfJs.isHTMLElement)(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = (0, _getComputedStyleJsDefault.default)(element);
        if (elementCss.position === "fixed") return null;
    }
    var currentNode = (0, _getParentNodeJsDefault.default)(element);
    if ((0, _instanceOfJs.isShadowRoot)(currentNode)) currentNode = currentNode.host;
    while((0, _instanceOfJs.isHTMLElement)(currentNode) && [
        "html",
        "body"
    ].indexOf((0, _getNodeNameJsDefault.default)(currentNode)) < 0){
        var css = (0, _getComputedStyleJsDefault.default)(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || [
            "transform",
            "perspective"
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
function getOffsetParent(element) {
    var window = (0, _getWindowJsDefault.default)(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && (0, _isTableElementJsDefault.default)(offsetParent) && (0, _getComputedStyleJsDefault.default)(offsetParent).position === "static")offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && ((0, _getNodeNameJsDefault.default)(offsetParent) === "html" || (0, _getNodeNameJsDefault.default)(offsetParent) === "body" && (0, _getComputedStyleJsDefault.default)(offsetParent).position === "static")) return window;
    return offsetParent || getContainingBlock(element) || window;
}

},{"./getWindow.js":"2SkOo","./getNodeName.js":"a2Qom","./getComputedStyle.js":"3mZjB","./instanceOf.js":"gYFUC","./isTableElement.js":"2qBb7","./getParentNode.js":"bIHpd","../utils/userAgent.js":"1hEx0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2qBb7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isTableElement);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
function isTableElement(element) {
    return [
        "table",
        "td",
        "th"
    ].indexOf((0, _getNodeNameJsDefault.default)(element)) >= 0;
}

},{"./getNodeName.js":"a2Qom","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"N0VO0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>orderModifiers);
var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return (0, _enumsJs.modifierPhases).reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}

},{"../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g6Chr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>debounce);
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zTVN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mergeByName);
function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
    }, {}); // IE11 does not support Object.values
    return Object.keys(merged).map(function(key) {
        return merged[key];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltCuw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>detectOverflow);
var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _computeOffsetsJs = require("./computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
var _rectToClientRectJs = require("./rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js");
var _mergePaddingObjectJs = require("./mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
function detectOverflow(state, options) {
    if (options === void 0) options = {};
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? (0, _enumsJs.clippingParents) : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? (0, _enumsJs.viewport) : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? (0, _enumsJs.popper) : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = (0, _mergePaddingObjectJsDefault.default)(typeof padding !== "number" ? padding : (0, _expandToHashMapJsDefault.default)(padding, (0, _enumsJs.basePlacements)));
    var altContext = elementContext === (0, _enumsJs.popper) ? (0, _enumsJs.reference) : (0, _enumsJs.popper);
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = (0, _getClippingRectJsDefault.default)((0, _instanceOfJs.isElement)(element) ? element : element.contextElement || (0, _getDocumentElementJsDefault.default)(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = (0, _getBoundingClientRectJsDefault.default)(state.elements.reference);
    var popperOffsets = (0, _computeOffsetsJsDefault.default)({
        reference: referenceClientRect,
        element: popperRect,
        strategy: "absolute",
        placement: placement
    });
    var popperClientRect = (0, _rectToClientRectJsDefault.default)(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === (0, _enumsJs.popper) ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === (0, _enumsJs.popper) && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                (0, _enumsJs.right),
                (0, _enumsJs.bottom)
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                (0, _enumsJs.top),
                (0, _enumsJs.bottom)
            ].indexOf(key) >= 0 ? "y" : "x";
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}

},{"../dom-utils/getClippingRect.js":"eeg2s","../dom-utils/getDocumentElement.js":"eJ9Y1","../dom-utils/getBoundingClientRect.js":"9CFSQ","./computeOffsets.js":"7jtXk","./rectToClientRect.js":"cQ3tg","../enums.js":"lCAq5","../dom-utils/instanceOf.js":"gYFUC","./mergePaddingObject.js":"lEIf9","./expandToHashMap.js":"iQlH5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eeg2s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getClippingRect);
var _enumsJs = require("../enums.js");
var _getViewportRectJs = require("./getViewportRect.js");
var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
var _getDocumentRectJs = require("./getDocumentRect.js");
var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
var _listScrollParentsJs = require("./listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _rectToClientRectJs = require("../utils/rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _mathJs = require("../utils/math.js");
function getInnerBoundingClientRect(element, strategy) {
    var rect = (0, _getBoundingClientRectJsDefault.default)(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === (0, _enumsJs.viewport) ? (0, _rectToClientRectJsDefault.default)((0, _getViewportRectJsDefault.default)(element, strategy)) : (0, _instanceOfJs.isElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : (0, _rectToClientRectJsDefault.default)((0, _getDocumentRectJsDefault.default)((0, _getDocumentElementJsDefault.default)(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = (0, _listScrollParentsJsDefault.default)((0, _getParentNodeJsDefault.default)(element));
    var canEscapeClipping = [
        "absolute",
        "fixed"
    ].indexOf((0, _getComputedStyleJsDefault.default)(element).position) >= 0;
    var clipperElement = canEscapeClipping && (0, _instanceOfJs.isHTMLElement)(element) ? (0, _getOffsetParentJsDefault.default)(element) : element;
    if (!(0, _instanceOfJs.isElement)(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return (0, _instanceOfJs.isElement)(clippingParent) && (0, _containsJsDefault.default)(clippingParent, clipperElement) && (0, _getNodeNameJsDefault.default)(clippingParent) !== "body";
    });
} // Gets the maximum area that the element is visible in due to any number of
function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = (0, _mathJs.max)(rect.top, accRect.top);
        accRect.right = (0, _mathJs.min)(rect.right, accRect.right);
        accRect.bottom = (0, _mathJs.min)(rect.bottom, accRect.bottom);
        accRect.left = (0, _mathJs.max)(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}

},{"../enums.js":"lCAq5","./getViewportRect.js":"cnH2G","./getDocumentRect.js":"d94SC","./listScrollParents.js":"2di3T","./getOffsetParent.js":"laoYw","./getDocumentElement.js":"eJ9Y1","./getComputedStyle.js":"3mZjB","./instanceOf.js":"gYFUC","./getBoundingClientRect.js":"9CFSQ","./getParentNode.js":"bIHpd","./contains.js":"4QxRR","./getNodeName.js":"a2Qom","../utils/rectToClientRect.js":"cQ3tg","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cnH2G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getViewportRect);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getViewportRect(element, strategy) {
    var win = (0, _getWindowJsDefault.default)(element);
    var html = (0, _getDocumentElementJsDefault.default)(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = (0, _isLayoutViewportJsDefault.default)();
        if (layoutViewport || !layoutViewport && strategy === "fixed") {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + (0, _getWindowScrollBarXJsDefault.default)(element),
        y: y
    };
}

},{"./getWindow.js":"2SkOo","./getDocumentElement.js":"eJ9Y1","./getWindowScrollBarX.js":"sz4Ld","./isLayoutViewport.js":"3ipHv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d94SC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getDocumentRect);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = (0, _getDocumentElementJsDefault.default)(element);
    var winScroll = (0, _getWindowScrollJsDefault.default)(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = (0, _mathJs.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = (0, _mathJs.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + (0, _getWindowScrollBarXJsDefault.default)(element);
    var y = -winScroll.scrollTop;
    if ((0, _getComputedStyleJsDefault.default)(body || html).direction === "rtl") x += (0, _mathJs.max)(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}

},{"./getDocumentElement.js":"eJ9Y1","./getComputedStyle.js":"3mZjB","./getWindowScrollBarX.js":"sz4Ld","./getWindowScroll.js":"1XUtN","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4QxRR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>contains);
var _instanceOfJs = require("./instanceOf.js");
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && (0, _instanceOfJs.isShadowRoot)(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next);
    } // Give up, the result is false
    return false;
}

},{"./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQ3tg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>rectToClientRect);
function rectToClientRect(rect) {
    return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7jtXk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>computeOffsets);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _enumsJs = require("../enums.js");
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? (0, _getBasePlacementJsDefault.default)(placement) : null;
    var variation = placement ? (0, _getVariationJsDefault.default)(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case 0, _enumsJs.top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case 0, _enumsJs.bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case 0, _enumsJs.right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case 0, _enumsJs.left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === "y" ? "height" : "width";
        switch(variation){
            case 0, _enumsJs.start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case 0, _enumsJs.end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}

},{"./getBasePlacement.js":"59Wp3","./getVariation.js":"hIo7Y","./getMainAxisFromPlacement.js":"1Xlom","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59Wp3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getBasePlacement);
var _enumsJs = require("../enums.js");
function getBasePlacement(placement) {
    return placement.split("-")[0];
}

},{"../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hIo7Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getVariation);
function getVariation(placement) {
    return placement.split("-")[1];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Xlom":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getMainAxisFromPlacement);
function getMainAxisFromPlacement(placement) {
    return [
        "top",
        "bottom"
    ].indexOf(placement) >= 0 ? "x" : "y";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lEIf9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mergePaddingObject);
var _getFreshSideObjectJs = require("./getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
function mergePaddingObject(paddingObject) {
    return Object.assign({}, (0, _getFreshSideObjectJsDefault.default)(), paddingObject);
}

},{"./getFreshSideObject.js":"g4xOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4xOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getFreshSideObject);
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQlH5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>expandToHashMap);
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {});
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1PuRF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopperLite", ()=>(0, _popperLiteJs.createPopper)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopper", ()=>createPopper) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator));
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _offsetJs = require("./modifiers/offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _flipJs = require("./modifiers/flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _preventOverflowJs = require("./modifiers/preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
var _arrowJs = require("./modifiers/arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _hideJs = require("./modifiers/hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _popperLiteJs = require("./popper-lite.js");
var _indexJs = require("./modifiers/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var defaultModifiers = [
    (0, _eventListenersJsDefault.default),
    (0, _popperOffsetsJsDefault.default),
    (0, _computeStylesJsDefault.default),
    (0, _applyStylesJsDefault.default),
    (0, _offsetJsDefault.default),
    (0, _flipJsDefault.default),
    (0, _preventOverflowJsDefault.default),
    (0, _arrowJsDefault.default),
    (0, _hideJsDefault.default)
];
var createPopper = /*#__PURE__*/ (0, _createPopperJs.popperGenerator)({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"cHuNp","./modifiers/eventListeners.js":"hBKsL","./modifiers/popperOffsets.js":"6I679","./modifiers/computeStyles.js":"gDlm2","./modifiers/applyStyles.js":"4iMn4","./modifiers/offset.js":"3GKVY","./modifiers/flip.js":"fv5wq","./modifiers/preventOverflow.js":"1AMhb","./modifiers/arrow.js":"31HFW","./modifiers/hide.js":"2g4OF","./popper-lite.js":false,"./modifiers/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBKsL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = (0, _getWindowJsDefault.default)(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
    });
    if (resize) window.addEventListener("resize", instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener("scroll", instance.update, passive);
        });
        if (resize) window.removeEventListener("resize", instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {},
    effect: effect,
    data: {}
};

},{"../dom-utils/getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6I679":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeOffsetsJs = require("../utils/computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = (0, _computeOffsetsJsDefault.default)({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: "absolute",
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
};

},{"../utils/computeOffsets.js":"7jtXk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gDlm2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapToStyles", ()=>mapToStyles);
var _enumsJs = require("../enums.js");
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getWindowJs = require("../dom-utils/getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: (0, _mathJs.round)(x * dpr) / dpr || 0,
        y: (0, _mathJs.round)(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = (0, _enumsJs.left);
    var sideY = (0, _enumsJs.top);
    var win = window;
    if (adaptive) {
        var offsetParent = (0, _getOffsetParentJsDefault.default)(popper);
        var heightProp = "clientHeight";
        var widthProp = "clientWidth";
        if (offsetParent === (0, _getWindowJsDefault.default)(popper)) {
            offsetParent = (0, _getDocumentElementJsDefault.default)(popper);
            if ((0, _getComputedStyleJsDefault.default)(offsetParent).position !== "static" && position === "absolute") {
                heightProp = "scrollHeight";
                widthProp = "scrollWidth";
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        offsetParent;
        if (placement === (0, _enumsJs.top) || (placement === (0, _enumsJs.left) || placement === (0, _enumsJs.right)) && variation === (0, _enumsJs.end)) {
            sideY = (0, _enumsJs.bottom);
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === (0, _enumsJs.left) || (placement === (0, _enumsJs.top) || placement === (0, _enumsJs.bottom)) && variation === (0, _enumsJs.end)) {
            sideX = (0, _enumsJs.right);
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
    }, (0, _getWindowJsDefault.default)(popper)) : {
        x: x,
        y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
        placement: (0, _getBasePlacementJsDefault.default)(state.placement),
        variation: (0, _getVariationJsDefault.default)(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-placement": state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
};

},{"../enums.js":"lCAq5","../dom-utils/getOffsetParent.js":"laoYw","../dom-utils/getWindow.js":"2SkOo","../dom-utils/getDocumentElement.js":"eJ9Y1","../dom-utils/getComputedStyle.js":"3mZjB","../utils/getBasePlacement.js":"59Wp3","../utils/getVariation.js":"hIo7Y","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4iMn4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("../dom-utils/getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements
        if (!(0, _instanceOfJs.isHTMLElement)(element) || !(0, _getNodeNameJsDefault.default)(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name) {
            var value = attributes[name];
            if (value === false) element.removeAttribute(name);
            else element.setAttribute(name, value === true ? "" : value);
        });
    });
}
function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: "0",
            top: "0",
            margin: "0"
        },
        arrow: {
            position: "absolute"
        },
        reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style = styleProperties.reduce(function(style, property) {
                style[property] = "";
                return style;
            }, {}); // arrow is optional + virtual elements
            if (!(0, _instanceOfJs.isHTMLElement)(element) || !(0, _getNodeNameJsDefault.default)(element)) return;
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect: effect,
    requires: [
        "computeStyles"
    ]
};

},{"../dom-utils/getNodeName.js":"a2Qom","../dom-utils/instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3GKVY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceAndSkiddingToXY", ()=>distanceAndSkiddingToXY);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = (0, _getBasePlacementJsDefault.default)(placement);
    var invertDistance = [
        (0, _enumsJs.left),
        (0, _enumsJs.top)
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === "function" ? offset(Object.assign({}, rects, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        (0, _enumsJs.left),
        (0, _enumsJs.right)
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = (0, _enumsJs.placements).reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: [
        "popperOffsets"
    ],
    fn: offset
};

},{"../utils/getBasePlacement.js":"59Wp3","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fv5wq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
var _enumsJs = require("../enums.js");
var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
function getExpandedFallbackPlacements(placement) {
    if ((0, _getBasePlacementJsDefault.default)(placement) === (0, _enumsJs.auto)) return [];
    var oppositePlacement = (0, _getOppositePlacementJsDefault.default)(placement);
    return [
        (0, _getOppositeVariationPlacementJsDefault.default)(placement),
        oppositePlacement,
        (0, _getOppositeVariationPlacementJsDefault.default)(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = (0, _getBasePlacementJsDefault.default)(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        (0, _getOppositePlacementJsDefault.default)(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat((0, _getBasePlacementJsDefault.default)(placement) === (0, _enumsJs.auto) ? (0, _computeAutoPlacementJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement = placements[i];
        var _basePlacement = (0, _getBasePlacementJsDefault.default)(placement);
        var isStartVariation = (0, _getVariationJsDefault.default)(placement) === (0, _enumsJs.start);
        var isVertical = [
            (0, _enumsJs.top),
            (0, _enumsJs.bottom)
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? "width" : "height";
        var overflow = (0, _detectOverflowJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? (0, _enumsJs.right) : (0, _enumsJs.left) : isStartVariation ? (0, _enumsJs.bottom) : (0, _enumsJs.top);
        if (referenceRect[len] > popperRect[len]) mainVariationSide = (0, _getOppositePlacementJsDefault.default)(mainVariationSide);
        var altVariationSide = (0, _getOppositePlacementJsDefault.default)(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i = numberOfChecks; _i > 0; _i--){
            var _ret = _loop(_i);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: [
        "offset"
    ],
    data: {
        _skip: false
    }
};

},{"../utils/getOppositePlacement.js":"a8CY0","../utils/getBasePlacement.js":"59Wp3","../utils/getOppositeVariationPlacement.js":"bKTLC","../utils/detectOverflow.js":"ltCuw","../utils/computeAutoPlacement.js":"gytMj","../enums.js":"lCAq5","../utils/getVariation.js":"hIo7Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a8CY0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOppositePlacement);
var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bKTLC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOppositeVariationPlacement);
var hash = {
    start: "end",
    end: "start"
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gytMj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>computeAutoPlacement);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("./detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {};
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? (0, _enumsJs.placements) : _options$allowedAutoP;
    var variation = (0, _getVariationJsDefault.default)(placement);
    var placements = variation ? flipVariations ? (0, _enumsJs.variationPlacements) : (0, _enumsJs.variationPlacements).filter(function(placement) {
        return (0, _getVariationJsDefault.default)(placement) === variation;
    }) : (0, _enumsJs.basePlacements);
    var allowedPlacements = placements.filter(function(placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) allowedPlacements = placements;
     // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement) {
        acc[placement] = (0, _detectOverflowJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[(0, _getBasePlacementJsDefault.default)(placement)];
        return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}

},{"./getVariation.js":"hIo7Y","../enums.js":"lCAq5","./detectOverflow.js":"ltCuw","./getBasePlacement.js":"59Wp3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1AMhb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _getAltAxisJs = require("../utils/getAltAxis.js");
var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
var _withinJs = require("../utils/within.js");
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
var _mathJs = require("../utils/math.js");
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = (0, _detectOverflowJsDefault.default)(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = (0, _getBasePlacementJsDefault.default)(state.placement);
    var variation = (0, _getVariationJsDefault.default)(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement);
    var altAxis = (0, _getAltAxisJsDefault.default)(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === "y" ? (0, _enumsJs.top) : (0, _enumsJs.left);
        var altSide = mainAxis === "y" ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
        var len = mainAxis === "y" ? "height" : "width";
        var offset = popperOffsets[mainAxis];
        var min = offset + overflow[mainSide];
        var max = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === (0, _enumsJs.start) ? referenceRect[len] : popperRect[len];
        var maxLen = variation === (0, _enumsJs.start) ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? (0, _getLayoutRectJsDefault.default)(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : (0, _getFreshSideObjectJsDefault.default)();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = (0, _withinJs.within)(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && (0, _getOffsetParentJsDefault.default)(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = (0, _withinJs.within)(tether ? (0, _mathJs.min)(min, tetherMin) : min, offset, tether ? (0, _mathJs.max)(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === "x" ? (0, _enumsJs.top) : (0, _enumsJs.left);
        var _altSide = mainAxis === "x" ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === "y" ? "height" : "width";
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [
            (0, _enumsJs.top),
            (0, _enumsJs.left)
        ].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? (0, _withinJs.withinMaxClamp)(_tetherMin, _offset, _tetherMax) : (0, _withinJs.within)(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: [
        "offset"
    ]
};

},{"../enums.js":"lCAq5","../utils/getBasePlacement.js":"59Wp3","../utils/getMainAxisFromPlacement.js":"1Xlom","../utils/getAltAxis.js":"59FWE","../utils/within.js":"3glSz","../dom-utils/getLayoutRect.js":"jvjuf","../dom-utils/getOffsetParent.js":"laoYw","../utils/detectOverflow.js":"ltCuw","../utils/getVariation.js":"hIo7Y","../utils/getFreshSideObject.js":"g4xOt","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59FWE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getAltAxis);
function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3glSz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "within", ()=>within);
parcelHelpers.export(exports, "withinMaxClamp", ()=>withinMaxClamp);
var _mathJs = require("./math.js");
function within(min, value, max) {
    return (0, _mathJs.max)(min, (0, _mathJs.min)(value, max));
}
function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
}

},{"./math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"31HFW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _containsJs = require("../dom-utils/contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _withinJs = require("../utils/within.js");
var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("../utils/expandToHashMap.js");
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
        placement: state.placement
    })) : padding;
    return (0, _mergePaddingObjectJsDefault.default)(typeof padding !== "number" ? padding : (0, _expandToHashMapJsDefault.default)(padding, (0, _enumsJs.basePlacements)));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = (0, _getBasePlacementJsDefault.default)(state.placement);
    var axis = (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement);
    var isVertical = [
        (0, _enumsJs.left),
        (0, _enumsJs.right)
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = (0, _getLayoutRectJsDefault.default)(arrowElement);
    var minProp = axis === "y" ? (0, _enumsJs.top) : (0, _enumsJs.left);
    var maxProp = axis === "y" ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = (0, _getOffsetParentJsDefault.default)(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = (0, _withinJs.within)(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === "string") {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!(0, _containsJsDefault.default)(state.elements.popper, arrowElement)) return;
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect,
    requires: [
        "popperOffsets"
    ],
    requiresIfExists: [
        "preventOverflow"
    ]
};

},{"../utils/getBasePlacement.js":"59Wp3","../dom-utils/getLayoutRect.js":"jvjuf","../dom-utils/contains.js":"4QxRR","../dom-utils/getOffsetParent.js":"laoYw","../utils/getMainAxisFromPlacement.js":"1Xlom","../utils/within.js":"3glSz","../utils/mergePaddingObject.js":"lEIf9","../utils/expandToHashMap.js":"iQlH5","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2g4OF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        (0, _enumsJs.top),
        (0, _enumsJs.right),
        (0, _enumsJs.bottom),
        (0, _enumsJs.left)
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = (0, _detectOverflowJsDefault.default)(state, {
        elementContext: "reference"
    });
    var popperAltOverflow = (0, _detectOverflowJsDefault.default)(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-reference-hidden": isReferenceHidden,
        "data-popper-escaped": hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: [
        "preventOverflow"
    ],
    fn: hide
};

},{"../enums.js":"lCAq5","../utils/detectOverflow.js":"ltCuw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kajTV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useDisclosure", ()=>useDisclosure);
// src/index.ts
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
var _react = require("react");
"use client";
function useDisclosure(props = {}) {
    const { onClose: onCloseProp, onOpen: onOpenProp, isOpen: isOpenProp, id: idProp } = props;
    const handleOpen = (0, _reactUseCallbackRef.useCallbackRef)(onOpenProp);
    const handleClose = (0, _reactUseCallbackRef.useCallbackRef)(onCloseProp);
    const [isOpenState, setIsOpen] = (0, _react.useState)(props.defaultIsOpen || false);
    const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;
    const isControlled = isOpenProp !== void 0;
    const uid = (0, _react.useId)();
    const id = idProp != null ? idProp : `disclosure-${uid}`;
    const onClose = (0, _react.useCallback)(()=>{
        if (!isControlled) setIsOpen(false);
        handleClose == null || handleClose();
    }, [
        isControlled,
        handleClose
    ]);
    const onOpen = (0, _react.useCallback)(()=>{
        if (!isControlled) setIsOpen(true);
        handleOpen == null || handleOpen();
    }, [
        isControlled,
        handleOpen
    ]);
    const onToggle = (0, _react.useCallback)(()=>{
        if (isOpen) onClose();
        else onOpen();
    }, [
        isOpen,
        onOpen,
        onClose
    ]);
    function getButtonProps(props2 = {}) {
        return {
            ...props2,
            "aria-expanded": isOpen,
            "aria-controls": id,
            onClick (event) {
                var _a;
                (_a = props2.onClick) == null || _a.call(props2, event);
                onToggle();
            }
        };
    }
    function getDisclosureProps(props2 = {}) {
        return {
            ...props2,
            hidden: !isOpen,
            id
        };
    }
    return {
        isOpen,
        onOpen,
        onClose,
        onToggle,
        isControlled,
        getButtonProps,
        getDisclosureProps
    };
}

},{"@chakra-ui/react-use-callback-ref":"dbPJ9","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZvLt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useOutsideClick", ()=>useOutsideClick);
// src/index.ts
var _react = require("react");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
"use client";
function useOutsideClick(props) {
    const { ref, handler, enabled = true } = props;
    const savedHandler = (0, _reactUseCallbackRef.useCallbackRef)(handler);
    const stateRef = (0, _react.useRef)({
        isPointerDown: false,
        ignoreEmulatedMouseEvents: false
    });
    const state = stateRef.current;
    (0, _react.useEffect)(()=>{
        if (!enabled) return;
        const onPointerDown = (e)=>{
            if (isValidEvent(e, ref)) state.isPointerDown = true;
        };
        const onMouseUp = (event)=>{
            if (state.ignoreEmulatedMouseEvents) {
                state.ignoreEmulatedMouseEvents = false;
                return;
            }
            if (state.isPointerDown && handler && isValidEvent(event, ref)) {
                state.isPointerDown = false;
                savedHandler(event);
            }
        };
        const onTouchEnd = (event)=>{
            state.ignoreEmulatedMouseEvents = true;
            if (handler && state.isPointerDown && isValidEvent(event, ref)) {
                state.isPointerDown = false;
                savedHandler(event);
            }
        };
        const doc = getOwnerDocument(ref.current);
        doc.addEventListener("mousedown", onPointerDown, true);
        doc.addEventListener("mouseup", onMouseUp, true);
        doc.addEventListener("touchstart", onPointerDown, true);
        doc.addEventListener("touchend", onTouchEnd, true);
        return ()=>{
            doc.removeEventListener("mousedown", onPointerDown, true);
            doc.removeEventListener("mouseup", onMouseUp, true);
            doc.removeEventListener("touchstart", onPointerDown, true);
            doc.removeEventListener("touchend", onTouchEnd, true);
        };
    }, [
        handler,
        ref,
        savedHandler,
        state,
        enabled
    ]);
}
function isValidEvent(event, ref) {
    var _a;
    const target = event.target;
    if (target) {
        const doc = getOwnerDocument(target);
        if (!doc.contains(target)) return false;
    }
    return !((_a = ref.current) == null ? void 0 : _a.contains(target));
}
function getOwnerDocument(node) {
    var _a;
    return (_a = node == null ? void 0 : node.ownerDocument) != null ? _a : document;
}

},{"react":"21dqq","@chakra-ui/react-use-callback-ref":"dbPJ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jyXlh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useAnimationState", ()=>useAnimationState);
// src/index.ts
var _react = require("react");
var _reactUseEventListener = require("@chakra-ui/react-use-event-listener");
var _domUtils = require("@chakra-ui/dom-utils");
"use client";
function useAnimationState(props) {
    const { isOpen, ref } = props;
    const [mounted, setMounted] = (0, _react.useState)(isOpen);
    const [once, setOnce] = (0, _react.useState)(false);
    (0, _react.useEffect)(()=>{
        if (!once) {
            setMounted(isOpen);
            setOnce(true);
        }
    }, [
        isOpen,
        once,
        mounted
    ]);
    (0, _reactUseEventListener.useEventListener)(()=>ref.current, "animationend", ()=>{
        setMounted(isOpen);
    });
    const hidden = isOpen ? false : !mounted;
    return {
        present: !hidden,
        onComplete () {
            var _a;
            const win = (0, _domUtils.getOwnerWindow)(ref.current);
            const evt = new win.CustomEvent("animationend", {
                bubbles: true
            });
            (_a = ref.current) == null || _a.dispatchEvent(evt);
        }
    };
}

},{"react":"21dqq","@chakra-ui/react-use-event-listener":"lQUDe","@chakra-ui/dom-utils":"cWgfO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hW1vr":[function(require,module,exports) {
// src/index.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lazyDisclosure", ()=>lazyDisclosure);
function lazyDisclosure(options) {
    const { wasSelected, enabled, isSelected, mode = "unmount" } = options;
    if (!enabled) return true;
    if (isSelected) return true;
    if (mode === "keepMounted" && wasSelected) return true;
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k0sXt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StyledMenuItem", ()=>StyledMenuItem);
var _chunkUZJ3TPNQMjs = require("./chunk-UZJ3TPNQ.mjs");
// src/styled-menu-item.tsx
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StyledMenuItem = (0, _system.forwardRef)((props, ref)=>{
    const { type, ...rest } = props;
    const styles = (0, _chunkUZJ3TPNQMjs.useMenuStyles)();
    const btnType = rest.as || type ? type != null ? type : void 0 : "button";
    const buttonStyles = (0, _react.useMemo)(()=>({
            textDecoration: "none",
            color: "inherit",
            userSelect: "none",
            display: "flex",
            width: "100%",
            alignItems: "center",
            textAlign: "start",
            flex: "0 0 auto",
            outline: 0,
            ...styles.item
        }), [
        styles.item
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).button, {
        ref,
        type: btnType,
        ...rest,
        __css: buttonStyles
    });
});

},{"./chunk-UZJ3TPNQ.mjs":"6xmCW","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dz2S4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuIcon", ()=>MenuIcon);
var _chunkUZJ3TPNQMjs = require("./chunk-UZJ3TPNQ.mjs");
// src/menu-icon.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var MenuIcon = (props)=>{
    const { className, children, ...rest } = props;
    const styles = (0, _chunkUZJ3TPNQMjs.useMenuStyles)();
    const child = (0, _react.Children).only(children);
    const clone = (0, _react.isValidElement)(child) ? (0, _react.cloneElement)(child, {
        focusable: "false",
        "aria-hidden": true,
        className: (0, _sharedUtils.cx)("chakra-menu__icon", child.props.className)
    }) : null;
    const _className = (0, _sharedUtils.cx)("chakra-menu__icon-wrapper", className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        className: _className,
        ...rest,
        __css: styles.icon,
        children: clone
    });
};
MenuIcon.displayName = "MenuIcon";

},{"./chunk-UZJ3TPNQ.mjs":"6xmCW","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9mQNn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuList", ()=>MenuList);
var _chunkUZJ3TPNQMjs = require("./chunk-UZJ3TPNQ.mjs");
var _chunkSANI5SUMMjs = require("./chunk-SANI5SUM.mjs");
// src/menu-list.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _framerMotion = require("framer-motion");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var motionVariants = {
    enter: {
        visibility: "visible",
        opacity: 1,
        scale: 1,
        transition: {
            duration: 0.2,
            ease: [
                0.4,
                0,
                0.2,
                1
            ]
        }
    },
    exit: {
        transitionEnd: {
            visibility: "hidden"
        },
        opacity: 0,
        scale: 0.8,
        transition: {
            duration: 0.1,
            easings: "easeOut"
        }
    }
};
var MenuTransition = (0, _system.chakra)((0, _framerMotion.motion).div);
var MenuList = (0, _system.forwardRef)(function MenuList2(props, ref) {
    var _a, _b;
    const { rootProps, motionProps, ...rest } = props;
    const { isOpen, onTransitionEnd, unstable__animationState: animated } = (0, _chunkSANI5SUMMjs.useMenuContext)();
    const listProps = (0, _chunkSANI5SUMMjs.useMenuList)(rest, ref);
    const positionerProps = (0, _chunkSANI5SUMMjs.useMenuPositioner)(rootProps);
    const styles = (0, _chunkUZJ3TPNQMjs.useMenuStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...positionerProps,
        __css: {
            zIndex: (_b = props.zIndex) != null ? _b : (_a = styles.list) == null ? void 0 : _a.zIndex
        },
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(MenuTransition, {
            variants: motionVariants,
            initial: false,
            animate: isOpen ? "enter" : "exit",
            __css: {
                outline: 0,
                ...styles.list
            },
            ...motionProps,
            className: (0, _sharedUtils.cx)("chakra-menu__menu-list", listProps.className),
            ...listProps,
            onUpdate: onTransitionEnd,
            onAnimationComplete: (0, _sharedUtils.callAll)(animated.onComplete, listProps.onAnimationComplete)
        })
    });
});
MenuList.displayName = "MenuList";

},{"./chunk-UZJ3TPNQ.mjs":"6xmCW","./chunk-SANI5SUM.mjs":"4rRSF","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","framer-motion":"5bZBB","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hKLL0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuOptionGroup", ()=>MenuOptionGroup);
var _chunkPTXXWAJUMjs = require("./chunk-PTXXWAJU.mjs");
var _chunkSANI5SUMMjs = require("./chunk-SANI5SUM.mjs");
// src/menu-option-group.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var MenuOptionGroup = (props)=>{
    const { className, title, ...rest } = props;
    const ownProps = (0, _chunkSANI5SUMMjs.useMenuOptionGroup)(rest);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkPTXXWAJUMjs.MenuGroup), {
        title,
        className: (0, _sharedUtils.cx)("chakra-menu__option-group", className),
        ...ownProps
    });
};
MenuOptionGroup.displayName = "MenuOptionGroup";

},{"./chunk-PTXXWAJU.mjs":"8fOA3","./chunk-SANI5SUM.mjs":"4rRSF","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8fOA3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuGroup", ()=>MenuGroup);
var _chunkUZJ3TPNQMjs = require("./chunk-UZJ3TPNQ.mjs");
// src/menu-group.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var MenuGroup = (0, _system.forwardRef)((props, ref)=>{
    const { title, children, className, ...rest } = props;
    const _className = (0, _sharedUtils.cx)("chakra-menu__group__title", className);
    const styles = (0, _chunkUZJ3TPNQMjs.useMenuStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)("div", {
        ref,
        className: "chakra-menu__group",
        role: "group",
        children: [
            title && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).p, {
                className: _className,
                ...rest,
                __css: styles.groupTitle,
                children: title
            }),
            children
        ]
    });
});
MenuGroup.displayName = "MenuGroup";

},{"./chunk-UZJ3TPNQ.mjs":"6xmCW","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lUVV6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuButton", ()=>MenuButton);
var _chunkUZJ3TPNQMjs = require("./chunk-UZJ3TPNQ.mjs");
var _chunkSANI5SUMMjs = require("./chunk-SANI5SUM.mjs");
// src/menu-button.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StyledMenuButton = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _chunkUZJ3TPNQMjs.useMenuStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).button, {
        ref,
        ...props,
        __css: {
            display: "inline-flex",
            appearance: "none",
            alignItems: "center",
            outline: 0,
            ...styles.button
        }
    });
});
var MenuButton = (0, _system.forwardRef)((props, ref)=>{
    const { children, as: As, ...rest } = props;
    const buttonProps = (0, _chunkSANI5SUMMjs.useMenuButton)(rest, ref);
    const Element = As || StyledMenuButton;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Element, {
        ...buttonProps,
        className: (0, _sharedUtils.cx)("chakra-menu__menu-button", props.className),
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
            __css: {
                pointerEvents: "none",
                flex: "1 1 auto",
                minW: 0
            },
            children: props.children
        })
    });
});
MenuButton.displayName = "MenuButton";

},{"./chunk-UZJ3TPNQ.mjs":"6xmCW","./chunk-SANI5SUM.mjs":"4rRSF","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7sSbx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuDivider", ()=>MenuDivider);
var _chunkUZJ3TPNQMjs = require("./chunk-UZJ3TPNQ.mjs");
// src/menu-divider.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var MenuDivider = (props)=>{
    const { className, ...rest } = props;
    const styles = (0, _chunkUZJ3TPNQMjs.useMenuStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).hr, {
        "aria-orientation": "horizontal",
        className: (0, _sharedUtils.cx)("chakra-menu__divider", className),
        ...rest,
        __css: styles.divider
    });
};
MenuDivider.displayName = "MenuDivider";

},{"./chunk-UZJ3TPNQ.mjs":"6xmCW","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ImAi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuItemOption", ()=>MenuItemOption);
var _chunkM565QO7NMjs = require("./chunk-M565QO7N.mjs");
var _chunkHB6KBUMZMjs = require("./chunk-HB6KBUMZ.mjs");
var _chunkSANI5SUMMjs = require("./chunk-SANI5SUM.mjs");
// src/menu-item-option.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var CheckIcon = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)("svg", {
        viewBox: "0 0 14 14",
        width: "1em",
        height: "1em",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("polygon", {
            fill: "currentColor",
            points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
        })
    });
var MenuItemOption = (0, _system.forwardRef)((props, ref)=>{
    const { icon, iconSpacing = "0.75rem", ...rest } = props;
    const optionProps = (0, _chunkSANI5SUMMjs.useMenuOption)(rest, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _chunkM565QO7NMjs.StyledMenuItem), {
        ...optionProps,
        className: (0, _sharedUtils.cx)("chakra-menu__menuitem-option", rest.className),
        children: [
            icon !== null && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkHB6KBUMZMjs.MenuIcon), {
                fontSize: "0.8em",
                marginEnd: iconSpacing,
                opacity: props.isChecked ? 1 : 0,
                children: icon || /* @__PURE__ */ (0, _jsxRuntime.jsx)(CheckIcon, {})
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
                style: {
                    flex: 1
                },
                children: optionProps.children
            })
        ]
    });
});
MenuItemOption.id = "MenuItemOption";
MenuItemOption.displayName = "MenuItemOption";

},{"./chunk-M565QO7N.mjs":"k0sXt","./chunk-HB6KBUMZ.mjs":"dz2S4","./chunk-SANI5SUM.mjs":"4rRSF","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kLy8v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AlertDialog", ()=>(0, _chunkFQDHE43WMjs.AlertDialog));
parcelHelpers.export(exports, "AlertDialogBody", ()=>(0, _chunkOFOVX77RMjs.ModalBody));
parcelHelpers.export(exports, "AlertDialogCloseButton", ()=>(0, _chunk4FCEGNGTMjs.ModalCloseButton));
parcelHelpers.export(exports, "AlertDialogContent", ()=>(0, _chunkFQDHE43WMjs.AlertDialogContent));
parcelHelpers.export(exports, "AlertDialogFooter", ()=>(0, _chunkRAWN7VJ3Mjs.ModalFooter));
parcelHelpers.export(exports, "AlertDialogHeader", ()=>(0, _chunk5FG5SY5KMjs.ModalHeader));
parcelHelpers.export(exports, "AlertDialogOverlay", ()=>(0, _chunkJQMJHPZHMjs.ModalOverlay));
parcelHelpers.export(exports, "Drawer", ()=>(0, _chunkMCHDHFCQMjs.Drawer));
parcelHelpers.export(exports, "DrawerBody", ()=>(0, _chunkOFOVX77RMjs.ModalBody));
parcelHelpers.export(exports, "DrawerCloseButton", ()=>(0, _chunk4FCEGNGTMjs.ModalCloseButton));
parcelHelpers.export(exports, "DrawerContent", ()=>(0, _chunk65IR7CTHMjs.DrawerContent));
parcelHelpers.export(exports, "DrawerFooter", ()=>(0, _chunkRAWN7VJ3Mjs.ModalFooter));
parcelHelpers.export(exports, "DrawerHeader", ()=>(0, _chunk5FG5SY5KMjs.ModalHeader));
parcelHelpers.export(exports, "DrawerOverlay", ()=>(0, _chunkJQMJHPZHMjs.ModalOverlay));
parcelHelpers.export(exports, "Modal", ()=>(0, _chunkMSA2NPQTMjs.Modal));
parcelHelpers.export(exports, "ModalBody", ()=>(0, _chunkOFOVX77RMjs.ModalBody));
parcelHelpers.export(exports, "ModalCloseButton", ()=>(0, _chunk4FCEGNGTMjs.ModalCloseButton));
parcelHelpers.export(exports, "ModalContent", ()=>(0, _chunkEL2VKIZQMjs.ModalContent));
parcelHelpers.export(exports, "ModalContextProvider", ()=>(0, _chunkMSA2NPQTMjs.ModalContextProvider));
parcelHelpers.export(exports, "ModalFocusScope", ()=>(0, _chunkNABYTFTGMjs.ModalFocusScope));
parcelHelpers.export(exports, "ModalFooter", ()=>(0, _chunkRAWN7VJ3Mjs.ModalFooter));
parcelHelpers.export(exports, "ModalHeader", ()=>(0, _chunk5FG5SY5KMjs.ModalHeader));
parcelHelpers.export(exports, "ModalOverlay", ()=>(0, _chunkJQMJHPZHMjs.ModalOverlay));
parcelHelpers.export(exports, "useDrawerContext", ()=>(0, _chunkMCHDHFCQMjs.useDrawerContext));
parcelHelpers.export(exports, "useModal", ()=>(0, _chunkTJ2Q5ITWMjs.useModal));
parcelHelpers.export(exports, "useModalContext", ()=>(0, _chunkMSA2NPQTMjs.useModalContext));
parcelHelpers.export(exports, "useModalManager", ()=>(0, _chunkCYRBRIA2Mjs.useModalManager));
parcelHelpers.export(exports, "useModalStyles", ()=>(0, _chunkMSA2NPQTMjs.useModalStyles));
var _chunkFQDHE43WMjs = require("./chunk-FQDHE43W.mjs");
var _chunk65IR7CTHMjs = require("./chunk-65IR7CTH.mjs");
var _chunkMCHDHFCQMjs = require("./chunk-MCHDHFCQ.mjs");
var _chunkRAWN7VJ3Mjs = require("./chunk-RAWN7VJ3.mjs");
var _chunk5FG5SY5KMjs = require("./chunk-5FG5SY5K.mjs");
var _chunkJQMJHPZHMjs = require("./chunk-JQMJHPZH.mjs");
var _chunkOFOVX77RMjs = require("./chunk-OFOVX77R.mjs");
var _chunk4FCEGNGTMjs = require("./chunk-4FCEGNGT.mjs");
var _chunkEL2VKIZQMjs = require("./chunk-EL2VKIZQ.mjs");
var _chunk7NUJBCELMjs = require("./chunk-7NUJBCEL.mjs");
var _chunkNABYTFTGMjs = require("./chunk-NABYTFTG.mjs");
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
var _chunkTJ2Q5ITWMjs = require("./chunk-TJ2Q5ITW.mjs");
var _chunkCYRBRIA2Mjs = require("./chunk-CYRBRIA2.mjs");
var _chunk5WQ4PXEVMjs = require("./chunk-5WQ4PXEV.mjs");
"use client";

},{"./chunk-FQDHE43W.mjs":"9RWlG","./chunk-65IR7CTH.mjs":"kxJV2","./chunk-MCHDHFCQ.mjs":"eghWo","./chunk-RAWN7VJ3.mjs":"jauAw","./chunk-5FG5SY5K.mjs":"1dOLb","./chunk-JQMJHPZH.mjs":"lqCDs","./chunk-OFOVX77R.mjs":"7bIGY","./chunk-4FCEGNGT.mjs":"2HpCw","./chunk-EL2VKIZQ.mjs":"2647O","./chunk-7NUJBCEL.mjs":"9pR3g","./chunk-NABYTFTG.mjs":"b1zJ1","./chunk-MSA2NPQT.mjs":"1xsEz","./chunk-TJ2Q5ITW.mjs":"cwLRo","./chunk-CYRBRIA2.mjs":"izkzA","./chunk-5WQ4PXEV.mjs":"awPfH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9RWlG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AlertDialog", ()=>AlertDialog);
parcelHelpers.export(exports, "AlertDialogContent", ()=>AlertDialogContent);
var _chunkEL2VKIZQMjs = require("./chunk-EL2VKIZQ.mjs");
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
// src/alert-dialog.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function AlertDialog(props) {
    const { leastDestructiveRef, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkMSA2NPQTMjs.Modal), {
        ...rest,
        initialFocusRef: leastDestructiveRef
    });
}
var AlertDialogContent = (0, _system.forwardRef)((props, ref)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkEL2VKIZQMjs.ModalContent), {
        ref,
        role: "alertdialog",
        ...props
    }));

},{"./chunk-EL2VKIZQ.mjs":"2647O","./chunk-MSA2NPQT.mjs":"1xsEz","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2647O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalContent", ()=>ModalContent);
var _chunk7NUJBCELMjs = require("./chunk-7NUJBCEL.mjs");
var _chunkNABYTFTGMjs = require("./chunk-NABYTFTG.mjs");
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
// src/modal-content.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var ModalContent = (0, _system.forwardRef)((props, ref)=>{
    const { className, children, containerProps: rootProps, motionProps, ...rest } = props;
    const { getDialogProps, getDialogContainerProps } = (0, _chunkMSA2NPQTMjs.useModalContext)();
    const dialogProps = getDialogProps(rest, ref);
    const containerProps = getDialogContainerProps(rootProps);
    const _className = (0, _sharedUtils.cx)("chakra-modal__content", className);
    const styles = (0, _chunkMSA2NPQTMjs.useModalStyles)();
    const dialogStyles = {
        display: "flex",
        flexDirection: "column",
        position: "relative",
        width: "100%",
        outline: 0,
        ...styles.dialog
    };
    const dialogContainerStyles = {
        display: "flex",
        width: "100vw",
        height: "$100vh",
        position: "fixed",
        left: 0,
        top: 0,
        ...styles.dialogContainer
    };
    const { motionPreset } = (0, _chunkMSA2NPQTMjs.useModalContext)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkNABYTFTGMjs.ModalFocusScope), {
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            ...containerProps,
            className: "chakra-modal__content-container",
            tabIndex: -1,
            __css: dialogContainerStyles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk7NUJBCELMjs.ModalTransition), {
                preset: motionPreset,
                motionProps,
                className: _className,
                ...dialogProps,
                __css: dialogStyles,
                children
            })
        })
    });
});
ModalContent.displayName = "ModalContent";

},{"./chunk-7NUJBCEL.mjs":"9pR3g","./chunk-NABYTFTG.mjs":"b1zJ1","./chunk-MSA2NPQT.mjs":"1xsEz","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9pR3g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalTransition", ()=>ModalTransition);
// src/modal-transition.tsx
var _system = require("@chakra-ui/system");
var _transition = require("@chakra-ui/transition");
var _framerMotion = require("framer-motion");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var transitions = {
    slideInBottom: {
        ...(0, _transition.slideFadeConfig),
        custom: {
            offsetY: 16,
            reverse: true
        }
    },
    slideInRight: {
        ...(0, _transition.slideFadeConfig),
        custom: {
            offsetX: 16,
            reverse: true
        }
    },
    slideInTop: {
        ...(0, _transition.slideFadeConfig),
        custom: {
            offsetY: -16,
            reverse: true
        }
    },
    slideInLeft: {
        ...(0, _transition.slideFadeConfig),
        custom: {
            offsetX: -16,
            reverse: true
        }
    },
    scale: {
        ...(0, _transition.scaleFadeConfig),
        custom: {
            initialScale: 0.95,
            reverse: true
        }
    },
    none: {}
};
var MotionSection = (0, _system.chakra)((0, _framerMotion.motion).section);
var getMotionProps = (preset)=>{
    return transitions[preset || "none"];
};
var ModalTransition = (0, _react.forwardRef)((props, ref)=>{
    const { preset, motionProps = getMotionProps(preset), ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(MotionSection, {
        ref,
        ...motionProps,
        ...rest
    });
});
ModalTransition.displayName = "ModalTransition";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/transition":"igsIe","framer-motion":"5bZBB","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b1zJ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalFocusScope", ()=>ModalFocusScope);
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
var _chunkCYRBRIA2Mjs = require("./chunk-CYRBRIA2.mjs");
// src/modal-focus.tsx
var _focusLock = require("@chakra-ui/focus-lock");
var _framerMotion = require("framer-motion");
var _react = require("react");
var _reactRemoveScroll = require("react-remove-scroll");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function ModalFocusScope(props) {
    const { autoFocus, trapFocus, dialogRef, initialFocusRef, blockScrollOnMount, allowPinchZoom, finalFocusRef, returnFocusOnClose, preserveScrollBarGap, lockFocusAcrossFrames, isOpen } = (0, _chunkMSA2NPQTMjs.useModalContext)();
    const [isPresent, safeToRemove] = (0, _framerMotion.usePresence)();
    (0, _react.useEffect)(()=>{
        if (!isPresent && safeToRemove) setTimeout(safeToRemove);
    }, [
        isPresent,
        safeToRemove
    ]);
    const index = (0, _chunkCYRBRIA2Mjs.useModalManager)(dialogRef, isOpen);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _focusLock.FocusLock), {
        autoFocus,
        isDisabled: !trapFocus,
        initialFocusRef,
        finalFocusRef,
        restoreFocus: returnFocusOnClose,
        contentRef: dialogRef,
        lockFocusAcrossFrames,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _reactRemoveScroll.RemoveScroll), {
            removeScrollBar: !preserveScrollBarGap,
            allowPinchZoom,
            enabled: index === 1 && blockScrollOnMount,
            forwardProps: true,
            children: props.children
        })
    });
}

},{"./chunk-MSA2NPQT.mjs":"1xsEz","./chunk-CYRBRIA2.mjs":"izkzA","@chakra-ui/focus-lock":"cRbMA","framer-motion":"5bZBB","react":"21dqq","react-remove-scroll":"af7VV","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1xsEz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useModalStyles", ()=>useModalStyles);
parcelHelpers.export(exports, "ModalContextProvider", ()=>ModalContextProvider);
parcelHelpers.export(exports, "useModalContext", ()=>useModalContext);
parcelHelpers.export(exports, "Modal", ()=>Modal);
var _chunkTJ2Q5ITWMjs = require("./chunk-TJ2Q5ITW.mjs");
// src/modal.tsx
var _portal = require("@chakra-ui/portal");
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _framerMotion = require("framer-motion");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [ModalStylesProvider, useModalStyles] = (0, _reactContext.createContext)({
    name: `ModalStylesContext`,
    errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Modal />" `
});
var [ModalContextProvider, useModalContext] = (0, _reactContext.createContext)({
    strict: true,
    name: "ModalContext",
    errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
});
var Modal = (props)=>{
    const modalProps = {
        scrollBehavior: "outside",
        autoFocus: true,
        trapFocus: true,
        returnFocusOnClose: true,
        blockScrollOnMount: true,
        allowPinchZoom: false,
        motionPreset: "scale",
        lockFocusAcrossFrames: true,
        ...props
    };
    const { portalProps, children, autoFocus, trapFocus, initialFocusRef, finalFocusRef, returnFocusOnClose, blockScrollOnMount, allowPinchZoom, preserveScrollBarGap, motionPreset, lockFocusAcrossFrames, onCloseComplete } = modalProps;
    const styles = (0, _system.useMultiStyleConfig)("Modal", modalProps);
    const modal = (0, _chunkTJ2Q5ITWMjs.useModal)(modalProps);
    const context = {
        ...modal,
        autoFocus,
        trapFocus,
        initialFocusRef,
        finalFocusRef,
        returnFocusOnClose,
        blockScrollOnMount,
        allowPinchZoom,
        preserveScrollBarGap,
        motionPreset,
        lockFocusAcrossFrames
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ModalContextProvider, {
        value: context,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(ModalStylesProvider, {
            value: styles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.AnimatePresence), {
                onExitComplete: onCloseComplete,
                children: context.isOpen && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _portal.Portal), {
                    ...portalProps,
                    children
                })
            })
        })
    });
};
Modal.displayName = "Modal";

},{"./chunk-TJ2Q5ITW.mjs":"cwLRo","@chakra-ui/portal":"d4tN5","@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","framer-motion":"5bZBB","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwLRo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useModal", ()=>useModal);
parcelHelpers.export(exports, "useAriaHidden", ()=>useAriaHidden);
var _chunkCYRBRIA2Mjs = require("./chunk-CYRBRIA2.mjs");
// src/use-modal.ts
var _sharedUtils = require("@chakra-ui/shared-utils");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _ariaHidden = require("aria-hidden");
var _react = require("react");
"use client";
function useModal(props) {
    const { isOpen, onClose, id, closeOnOverlayClick = true, closeOnEsc = true, useInert = true, onOverlayClick: onOverlayClickProp, onEsc } = props;
    const dialogRef = (0, _react.useRef)(null);
    const overlayRef = (0, _react.useRef)(null);
    const [dialogId, headerId, bodyId] = useIds(id, `chakra-modal`, `chakra-modal--header`, `chakra-modal--body`);
    useAriaHidden(dialogRef, isOpen && useInert);
    const index = (0, _chunkCYRBRIA2Mjs.useModalManager)(dialogRef, isOpen);
    const mouseDownTarget = (0, _react.useRef)(null);
    const onMouseDown = (0, _react.useCallback)((event)=>{
        mouseDownTarget.current = event.target;
    }, []);
    const onKeyDown = (0, _react.useCallback)((event)=>{
        if (event.key === "Escape") {
            event.stopPropagation();
            if (closeOnEsc) onClose == null || onClose();
            onEsc == null || onEsc();
        }
    }, [
        closeOnEsc,
        onClose,
        onEsc
    ]);
    const [headerMounted, setHeaderMounted] = (0, _react.useState)(false);
    const [bodyMounted, setBodyMounted] = (0, _react.useState)(false);
    const getDialogProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            role: "dialog",
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, dialogRef),
            id: dialogId,
            tabIndex: -1,
            "aria-modal": true,
            "aria-labelledby": headerMounted ? headerId : void 0,
            "aria-describedby": bodyMounted ? bodyId : void 0,
            onClick: (0, _sharedUtils.callAllHandlers)(props2.onClick, (event)=>event.stopPropagation())
        }), [
        bodyId,
        bodyMounted,
        dialogId,
        headerId,
        headerMounted
    ]);
    const onOverlayClick = (0, _react.useCallback)((event)=>{
        event.stopPropagation();
        if (mouseDownTarget.current !== event.target) return;
        if (!(0, _chunkCYRBRIA2Mjs.modalManager).isTopModal(dialogRef.current)) return;
        if (closeOnOverlayClick) onClose == null || onClose();
        onOverlayClickProp == null || onOverlayClickProp();
    }, [
        onClose,
        closeOnOverlayClick,
        onOverlayClickProp
    ]);
    const getDialogContainerProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, overlayRef),
            onClick: (0, _sharedUtils.callAllHandlers)(props2.onClick, onOverlayClick),
            onKeyDown: (0, _sharedUtils.callAllHandlers)(props2.onKeyDown, onKeyDown),
            onMouseDown: (0, _sharedUtils.callAllHandlers)(props2.onMouseDown, onMouseDown)
        }), [
        onKeyDown,
        onMouseDown,
        onOverlayClick
    ]);
    return {
        isOpen,
        onClose,
        headerId,
        bodyId,
        setBodyMounted,
        setHeaderMounted,
        dialogRef,
        overlayRef,
        getDialogProps,
        getDialogContainerProps,
        index
    };
}
function useAriaHidden(ref, shouldHide) {
    const currentElement = ref.current;
    (0, _react.useEffect)(()=>{
        if (!ref.current || !shouldHide) return void 0;
        return (0, _ariaHidden.hideOthers)(ref.current);
    }, [
        shouldHide,
        ref,
        currentElement
    ]);
}
function useIds(idProp, ...prefixes) {
    const reactId = (0, _react.useId)();
    const id = idProp || reactId;
    return (0, _react.useMemo)(()=>{
        return prefixes.map((prefix)=>`${prefix}-${id}`);
    }, [
        id,
        prefixes
    ]);
}

},{"./chunk-CYRBRIA2.mjs":"izkzA","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/react-use-merge-refs":"9E5Ql","aria-hidden":"eLXeS","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"izkzA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modalManager", ()=>modalManager);
parcelHelpers.export(exports, "useModalManager", ()=>useModalManager);
var _chunk5WQ4PXEVMjs = require("./chunk-5WQ4PXEV.mjs");
// src/modal-manager.ts
var _react = require("react");
"use client";
var ModalManager = class {
    constructor(){
        (0, _chunk5WQ4PXEVMjs.__publicField)(this, "modals");
        this.modals = /* @__PURE__ */ new Map();
    }
    add(modal) {
        this.modals.set(modal, this.modals.size + 1);
        return this.modals.size;
    }
    remove(modal) {
        this.modals.delete(modal);
    }
    isTopModal(modal) {
        if (!modal) return false;
        return this.modals.get(modal) === this.modals.size;
    }
};
var modalManager = new ModalManager();
function useModalManager(ref, isOpen) {
    const [index, setIndex] = (0, _react.useState)(0);
    (0, _react.useEffect)(()=>{
        const node = ref.current;
        if (!node) return;
        if (isOpen) {
            const index2 = modalManager.add(node);
            setIndex(index2);
        }
        return ()=>{
            modalManager.remove(node);
            setIndex(0);
        };
    }, [
        isOpen,
        ref
    ]);
    return index;
}

},{"./chunk-5WQ4PXEV.mjs":"awPfH","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"awPfH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__publicField", ()=>__publicField);
"use client";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>{
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eLXeS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hideOthers", ()=>hideOthers);
parcelHelpers.export(exports, "inertOthers", ()=>inertOthers);
parcelHelpers.export(exports, "supportsInert", ()=>supportsInert);
parcelHelpers.export(exports, "suppressOthers", ()=>suppressOthers);
var getDefaultParent = function(originalTarget) {
    if (typeof document === "undefined") return null;
    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return sampleTarget.ownerDocument.body;
};
var counterMap = new WeakMap();
var uncontrolledNodes = new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = function(node) {
    return node && (node.host || unwrapHost(node.parentNode));
};
var correctTargets = function(parent, targets) {
    return targets.map(function(target) {
        if (parent.contains(target)) return target;
        var correctedTarget = unwrapHost(target);
        if (correctedTarget && parent.contains(correctedTarget)) return correctedTarget;
        console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
        return null;
    }).filter(function(x) {
        return Boolean(x);
    });
};
/**
 * Marks everything except given node(or nodes) as aria-hidden
 * @param {Element | Element[]} originalTarget - elements to keep on the page
 * @param [parentNode] - top element, defaults to document.body
 * @param {String} [markerName] - a special attribute to mark every node
 * @param {String} [controlAttribute] - html Attribute to control
 * @return {Undo} undo command
 */ var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
    var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [
        originalTarget
    ]);
    if (!markerMap[markerName]) markerMap[markerName] = new WeakMap();
    var markerCounter = markerMap[markerName];
    var hiddenNodes = [];
    var elementsToKeep = new Set();
    var elementsToStop = new Set(targets);
    var keep = function(el) {
        if (!el || elementsToKeep.has(el)) return;
        elementsToKeep.add(el);
        keep(el.parentNode);
    };
    targets.forEach(keep);
    var deep = function(parent) {
        if (!parent || elementsToStop.has(parent)) return;
        Array.prototype.forEach.call(parent.children, function(node) {
            if (elementsToKeep.has(node)) deep(node);
            else {
                var attr = node.getAttribute(controlAttribute);
                var alreadyHidden = attr !== null && attr !== "false";
                var counterValue = (counterMap.get(node) || 0) + 1;
                var markerValue = (markerCounter.get(node) || 0) + 1;
                counterMap.set(node, counterValue);
                markerCounter.set(node, markerValue);
                hiddenNodes.push(node);
                if (counterValue === 1 && alreadyHidden) uncontrolledNodes.set(node, true);
                if (markerValue === 1) node.setAttribute(markerName, "true");
                if (!alreadyHidden) node.setAttribute(controlAttribute, "true");
            }
        });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return function() {
        hiddenNodes.forEach(function(node) {
            var counterValue = counterMap.get(node) - 1;
            var markerValue = markerCounter.get(node) - 1;
            counterMap.set(node, counterValue);
            markerCounter.set(node, markerValue);
            if (!counterValue) {
                if (!uncontrolledNodes.has(node)) node.removeAttribute(controlAttribute);
                uncontrolledNodes.delete(node);
            }
            if (!markerValue) node.removeAttribute(markerName);
        });
        lockCount--;
        if (!lockCount) {
            // clear
            counterMap = new WeakMap();
            counterMap = new WeakMap();
            uncontrolledNodes = new WeakMap();
            markerMap = {};
        }
    };
};
var hideOthers = function(originalTarget, parentNode, markerName) {
    if (markerName === void 0) markerName = "data-aria-hidden";
    var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [
        originalTarget
    ]);
    var activeParentNode = parentNode || getDefaultParent(originalTarget);
    if (!activeParentNode) return function() {
        return null;
    };
    // we should not hide ariaLive elements - https://github.com/theKashey/aria-hidden/issues/10
    targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
    return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
};
var inertOthers = function(originalTarget, parentNode, markerName) {
    if (markerName === void 0) markerName = "data-inert-ed";
    var activeParentNode = parentNode || getDefaultParent(originalTarget);
    if (!activeParentNode) return function() {
        return null;
    };
    return applyAttributeToOthers(originalTarget, activeParentNode, markerName, "inert");
};
var supportsInert = function() {
    return typeof HTMLElement !== "undefined" && HTMLElement.prototype.hasOwnProperty("inert");
};
var suppressOthers = function(originalTarget, parentNode, markerName) {
    if (markerName === void 0) markerName = "data-suppressed";
    return (supportsInert() ? inertOthers : hideOthers)(originalTarget, parentNode, markerName);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"af7VV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RemoveScroll", ()=>(0, _combinationDefault.default));
var _combination = require("./Combination");
var _combinationDefault = parcelHelpers.interopDefault(_combination);

},{"./Combination":"hWff9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWff9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tslib = require("tslib");
var _react = require("react");
var _ui = require("./UI");
var _sidecar = require("./sidecar");
var _sidecarDefault = parcelHelpers.interopDefault(_sidecar);
var ReactRemoveScroll = _react.forwardRef(function(props, ref) {
    return _react.createElement((0, _ui.RemoveScroll), (0, _tslib.__assign)({}, props, {
        ref: ref,
        sideCar: (0, _sidecarDefault.default)
    }));
});
ReactRemoveScroll.classNames = (0, _ui.RemoveScroll).classNames;
exports.default = ReactRemoveScroll;

},{"tslib":"lRdW5","react":"21dqq","./UI":"cOHO9","./sidecar":"5avMF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cOHO9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RemoveScroll", ()=>RemoveScroll);
var _tslib = require("tslib");
var _react = require("react");
var _constants = require("react-remove-scroll-bar/constants");
var _useCallbackRef = require("use-callback-ref");
var _medium = require("./medium");
var nothing = function() {
    return;
};
/**
 * Removes scrollbar from the page and contain the scroll within the Lock
 */ var RemoveScroll = _react.forwardRef(function(props, parentRef) {
    var ref = _react.useRef(null);
    var _a = _react.useState({
        onScrollCapture: nothing,
        onWheelCapture: nothing,
        onTouchMoveCapture: nothing
    }), callbacks = _a[0], setCallbacks = _a[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? "div" : _b, gapMode = props.gapMode, rest = (0, _tslib.__rest)(props, [
        "forwardProps",
        "children",
        "className",
        "removeScrollBar",
        "enabled",
        "shards",
        "sideCar",
        "noIsolation",
        "inert",
        "allowPinchZoom",
        "as",
        "gapMode"
    ]);
    var SideCar = sideCar;
    var containerRef = (0, _useCallbackRef.useMergeRefs)([
        ref,
        parentRef
    ]);
    var containerProps = (0, _tslib.__assign)((0, _tslib.__assign)({}, rest), callbacks);
    return _react.createElement(_react.Fragment, null, enabled && _react.createElement(SideCar, {
        sideCar: (0, _medium.effectCar),
        removeScrollBar: removeScrollBar,
        shards: shards,
        noIsolation: noIsolation,
        inert: inert,
        setCallbacks: setCallbacks,
        allowPinchZoom: !!allowPinchZoom,
        lockRef: ref,
        gapMode: gapMode
    }), forwardProps ? _react.cloneElement(_react.Children.only(children), (0, _tslib.__assign)((0, _tslib.__assign)({}, containerProps), {
        ref: containerRef
    })) : _react.createElement(Container, (0, _tslib.__assign)({}, containerProps, {
        className: className,
        ref: containerRef
    }), children));
});
RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false
};
RemoveScroll.classNames = {
    fullWidth: (0, _constants.fullWidthClassName),
    zeroRight: (0, _constants.zeroRightClassName)
};

},{"tslib":"lRdW5","react":"21dqq","react-remove-scroll-bar/constants":"dMIJh","use-callback-ref":"J09ED","./medium":"eD9Xv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dMIJh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zeroRightClassName", ()=>zeroRightClassName);
parcelHelpers.export(exports, "fullWidthClassName", ()=>fullWidthClassName);
parcelHelpers.export(exports, "noScrollbarsClassName", ()=>noScrollbarsClassName);
parcelHelpers.export(exports, "removedBarSizeVariable", ()=>removedBarSizeVariable);
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eD9Xv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "effectCar", ()=>effectCar);
var _useSidecar = require("use-sidecar");
var effectCar = (0, _useSidecar.createSidecarMedium)();

},{"use-sidecar":"lj6LD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5avMF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useSidecar = require("use-sidecar");
var _sideEffect = require("./SideEffect");
var _medium = require("./medium");
exports.default = (0, _useSidecar.exportSidecar)((0, _medium.effectCar), (0, _sideEffect.RemoveScrollSideCar));

},{"use-sidecar":"lj6LD","./SideEffect":"fqUhK","./medium":"eD9Xv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fqUhK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTouchXY", ()=>getTouchXY);
parcelHelpers.export(exports, "getDeltaXY", ()=>getDeltaXY);
parcelHelpers.export(exports, "RemoveScrollSideCar", ()=>RemoveScrollSideCar);
var _tslib = require("tslib");
var _react = require("react");
var _reactRemoveScrollBar = require("react-remove-scroll-bar");
var _reactStyleSingleton = require("react-style-singleton");
var _aggresiveCapture = require("./aggresiveCapture");
var _handleScroll = require("./handleScroll");
var getTouchXY = function(event) {
    return "changedTouches" in event ? [
        event.changedTouches[0].clientX,
        event.changedTouches[0].clientY
    ] : [
        0,
        0
    ];
};
var getDeltaXY = function(event) {
    return [
        event.deltaX,
        event.deltaY
    ];
};
var extractRef = function(ref) {
    return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x, y) {
    return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function(id) {
    return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
    var shouldPreventQueue = _react.useRef([]);
    var touchStartRef = _react.useRef([
        0,
        0
    ]);
    var activeAxis = _react.useRef();
    var id = _react.useState(idCounter++)[0];
    var Style = _react.useState((0, _reactStyleSingleton.styleSingleton))[0];
    var lastProps = _react.useRef(props);
    _react.useEffect(function() {
        lastProps.current = props;
    }, [
        props
    ]);
    _react.useEffect(function() {
        if (props.inert) {
            document.body.classList.add("block-interactivity-".concat(id));
            var allow_1 = (0, _tslib.__spreadArray)([
                props.lockRef.current
            ], (props.shards || []).map(extractRef), true).filter(Boolean);
            allow_1.forEach(function(el) {
                return el.classList.add("allow-interactivity-".concat(id));
            });
            return function() {
                document.body.classList.remove("block-interactivity-".concat(id));
                allow_1.forEach(function(el) {
                    return el.classList.remove("allow-interactivity-".concat(id));
                });
            };
        }
        return;
    }, [
        props.inert,
        props.lockRef.current,
        props.shards
    ]);
    var shouldCancelEvent = _react.useCallback(function(event, parent) {
        if ("touches" in event && event.touches.length === 2) return !lastProps.current.allowPinchZoom;
        var touch = getTouchXY(event);
        var touchStart = touchStartRef.current;
        var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
        var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
        var currentAxis;
        var target = event.target;
        var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
        // allow horizontal touch move on Range inputs. They will not cause any scroll
        if ("touches" in event && moveDirection === "h" && target.type === "range") return false;
        var canBeScrolledInMainDirection = (0, _handleScroll.locationCouldBeScrolled)(moveDirection, target);
        if (!canBeScrolledInMainDirection) return true;
        if (canBeScrolledInMainDirection) currentAxis = moveDirection;
        else {
            currentAxis = moveDirection === "v" ? "h" : "v";
            canBeScrolledInMainDirection = (0, _handleScroll.locationCouldBeScrolled)(moveDirection, target);
        // other axis might be not scrollable
        }
        if (!canBeScrolledInMainDirection) return false;
        if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) activeAxis.current = currentAxis;
        if (!currentAxis) return true;
        var cancelingAxis = activeAxis.current || currentAxis;
        return (0, _handleScroll.handleScroll)(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = _react.useCallback(function(_event) {
        var event = _event;
        if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) // not the last active
        return;
        var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
        var sourceEvent = shouldPreventQueue.current.filter(function(e) {
            return e.name === event.type && e.target === event.target && deltaCompare(e.delta, delta);
        })[0];
        // self event, and should be canceled
        if (sourceEvent && sourceEvent.should) {
            if (event.cancelable) event.preventDefault();
            return;
        }
        // outside or shard event
        if (!sourceEvent) {
            var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
                return node.contains(event.target);
            });
            var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
            if (shouldStop) {
                if (event.cancelable) event.preventDefault();
            }
        }
    }, []);
    var shouldCancel = _react.useCallback(function(name, delta, target, should) {
        var event = {
            name: name,
            delta: delta,
            target: target,
            should: should
        };
        shouldPreventQueue.current.push(event);
        setTimeout(function() {
            shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
                return e !== event;
            });
        }, 1);
    }, []);
    var scrollTouchStart = _react.useCallback(function(event) {
        touchStartRef.current = getTouchXY(event);
        activeAxis.current = undefined;
    }, []);
    var scrollWheel = _react.useCallback(function(event) {
        shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = _react.useCallback(function(event) {
        shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    _react.useEffect(function() {
        lockStack.push(Style);
        props.setCallbacks({
            onScrollCapture: scrollWheel,
            onWheelCapture: scrollWheel,
            onTouchMoveCapture: scrollTouchMove
        });
        document.addEventListener("wheel", shouldPrevent, (0, _aggresiveCapture.nonPassive));
        document.addEventListener("touchmove", shouldPrevent, (0, _aggresiveCapture.nonPassive));
        document.addEventListener("touchstart", scrollTouchStart, (0, _aggresiveCapture.nonPassive));
        return function() {
            lockStack = lockStack.filter(function(inst) {
                return inst !== Style;
            });
            document.removeEventListener("wheel", shouldPrevent, (0, _aggresiveCapture.nonPassive));
            document.removeEventListener("touchmove", shouldPrevent, (0, _aggresiveCapture.nonPassive));
            document.removeEventListener("touchstart", scrollTouchStart, (0, _aggresiveCapture.nonPassive));
        };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return _react.createElement(_react.Fragment, null, inert ? _react.createElement(Style, {
        styles: generateStyle(id)
    }) : null, removeScrollBar ? _react.createElement((0, _reactRemoveScrollBar.RemoveScrollBar), {
        gapMode: props.gapMode
    }) : null);
}

},{"tslib":"lRdW5","react":"21dqq","react-remove-scroll-bar":"dnQwg","react-style-singleton":"kZ76E","./aggresiveCapture":"hHc5S","./handleScroll":"2b1Si","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dnQwg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RemoveScrollBar", ()=>(0, _component.RemoveScrollBar));
parcelHelpers.export(exports, "zeroRightClassName", ()=>(0, _constants.zeroRightClassName));
parcelHelpers.export(exports, "fullWidthClassName", ()=>(0, _constants.fullWidthClassName));
parcelHelpers.export(exports, "noScrollbarsClassName", ()=>(0, _constants.noScrollbarsClassName));
parcelHelpers.export(exports, "removedBarSizeVariable", ()=>(0, _constants.removedBarSizeVariable));
parcelHelpers.export(exports, "getGapWidth", ()=>(0, _utils.getGapWidth));
var _component = require("./component");
var _constants = require("./constants");
var _utils = require("./utils");

},{"./component":"9Tx5D","./constants":"dMIJh","./utils":"6rClG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Tx5D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RemoveScrollBar", ()=>RemoveScrollBar);
var _react = require("react");
var _reactStyleSingleton = require("react-style-singleton");
var _constants = require("./constants");
var _utils = require("./utils");
var Style = (0, _reactStyleSingleton.styleSingleton)();
// important tip - once we measure scrollBar width and remove them
// we could not repeat this operation
// thus we are using style-singleton - only the first "yet correct" style will be applied.
var getStyles = function(_a, allowRelative, gapMode, important) {
    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
    if (gapMode === void 0) gapMode = "margin";
    return "\n  .".concat((0, _constants.noScrollbarsClassName), " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
        allowRelative && "position: relative ".concat(important, ";"),
        gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
        gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
    ].filter(Boolean).join(""), "\n  }\n  \n  .").concat((0, _constants.zeroRightClassName), " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat((0, _constants.fullWidthClassName), " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat((0, _constants.zeroRightClassName), " .").concat((0, _constants.zeroRightClassName), " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat((0, _constants.fullWidthClassName), " .").concat((0, _constants.fullWidthClassName), " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body {\n    ").concat((0, _constants.removedBarSizeVariable), ": ").concat(gap, "px;\n  }\n");
};
var RemoveScrollBar = function(props) {
    var noRelative = props.noRelative, noImportant = props.noImportant, _a = props.gapMode, gapMode = _a === void 0 ? "margin" : _a;
    /*
     gap will be measured on every component mount
     however it will be used only by the "first" invocation
     due to singleton nature of <Style
     */ var gap = _react.useMemo(function() {
        return (0, _utils.getGapWidth)(gapMode);
    }, [
        gapMode
    ]);
    return _react.createElement(Style, {
        styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "")
    });
};

},{"react":"21dqq","react-style-singleton":"kZ76E","./constants":"dMIJh","./utils":"6rClG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kZ76E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styleSingleton", ()=>(0, _component.styleSingleton));
parcelHelpers.export(exports, "stylesheetSingleton", ()=>(0, _singleton.stylesheetSingleton));
parcelHelpers.export(exports, "styleHookSingleton", ()=>(0, _hook.styleHookSingleton));
var _component = require("./component");
var _singleton = require("./singleton");
var _hook = require("./hook");

},{"./component":"gkeY6","./singleton":"efDBm","./hook":"cNlHk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkeY6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styleSingleton", ()=>styleSingleton);
var _hook = require("./hook");
var styleSingleton = function() {
    var useStyle = (0, _hook.styleHookSingleton)();
    var Sheet = function(_a) {
        var styles = _a.styles, dynamic = _a.dynamic;
        useStyle(styles, dynamic);
        return null;
    };
    return Sheet;
};

},{"./hook":"cNlHk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNlHk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styleHookSingleton", ()=>styleHookSingleton);
var _react = require("react");
var _singleton = require("./singleton");
var styleHookSingleton = function() {
    var sheet = (0, _singleton.stylesheetSingleton)();
    return function(styles, isDynamic) {
        _react.useEffect(function() {
            sheet.add(styles);
            return function() {
                sheet.remove();
            };
        }, [
            styles && isDynamic
        ]);
    };
};

},{"react":"21dqq","./singleton":"efDBm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"efDBm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stylesheetSingleton", ()=>stylesheetSingleton);
var _getNonce = require("get-nonce");
function makeStyleTag() {
    if (!document) return null;
    var tag = document.createElement("style");
    tag.type = "text/css";
    var nonce = (0, _getNonce.getNonce)();
    if (nonce) tag.setAttribute("nonce", nonce);
    return tag;
}
function injectStyles(tag, css) {
    // @ts-ignore
    if (tag.styleSheet) // @ts-ignore
    tag.styleSheet.cssText = css;
    else tag.appendChild(document.createTextNode(css));
}
function insertStyleTag(tag) {
    var head = document.head || document.getElementsByTagName("head")[0];
    head.appendChild(tag);
}
var stylesheetSingleton = function() {
    var counter = 0;
    var stylesheet = null;
    return {
        add: function(style) {
            if (counter == 0) {
                if (stylesheet = makeStyleTag()) {
                    injectStyles(stylesheet, style);
                    insertStyleTag(stylesheet);
                }
            }
            counter++;
        },
        remove: function() {
            counter--;
            if (!counter && stylesheet) {
                stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
                stylesheet = null;
            }
        }
    };
};

},{"get-nonce":"hfsFH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hfsFH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setNonce", ()=>setNonce);
parcelHelpers.export(exports, "getNonce", ()=>getNonce);
var currentNonce;
var setNonce = function(nonce) {
    currentNonce = nonce;
};
var getNonce = function() {
    if (currentNonce) return currentNonce;
    if (typeof __webpack_nonce__ !== "undefined") return __webpack_nonce__;
    return undefined;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6rClG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zeroGap", ()=>zeroGap);
parcelHelpers.export(exports, "getGapWidth", ()=>getGapWidth);
var zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
};
var parse = function(x) {
    return parseInt(x || "", 10) || 0;
};
var getOffset = function(gapMode) {
    var cs = window.getComputedStyle(document.body);
    var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
    var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
    var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
    return [
        parse(left),
        parse(top),
        parse(right)
    ];
};
var getGapWidth = function(gapMode) {
    if (gapMode === void 0) gapMode = "margin";
    if (typeof window === "undefined") return zeroGap;
    var offsets = getOffset(gapMode);
    var documentWidth = document.documentElement.clientWidth;
    var windowWidth = window.innerWidth;
    return {
        left: offsets[0],
        top: offsets[1],
        right: offsets[2],
        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHc5S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonPassive", ()=>nonPassive);
var passiveSupported = false;
if (typeof window !== "undefined") try {
    var options = Object.defineProperty({}, "passive", {
        get: function() {
            passiveSupported = true;
            return true;
        }
    });
    // @ts-ignore
    window.addEventListener("test", options, options);
    // @ts-ignore
    window.removeEventListener("test", options, options);
} catch (err) {
    passiveSupported = false;
}
var nonPassive = passiveSupported ? {
    passive: false
} : false;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2b1Si":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "locationCouldBeScrolled", ()=>locationCouldBeScrolled);
parcelHelpers.export(exports, "handleScroll", ()=>handleScroll);
var alwaysContainsScroll = function(node) {
    // textarea will always _contain_ scroll inside self. It only can be hidden
    return node.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node, overflow) {
    var styles = window.getComputedStyle(node);
    return(// not-not-scrollable
    styles[overflow] !== "hidden" && // contains scroll inside self
    !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible"));
};
var elementCouldBeVScrolled = function(node) {
    return elementCanBeScrolled(node, "overflowY");
};
var elementCouldBeHScrolled = function(node) {
    return elementCanBeScrolled(node, "overflowX");
};
var locationCouldBeScrolled = function(axis, node) {
    var ownerDocument = node.ownerDocument;
    var current = node;
    do {
        // Skip over shadow root
        if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) current = current.host;
        var isScrollable = elementCouldBeScrolled(axis, current);
        if (isScrollable) {
            var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
            if (s > d) return true;
        }
        current = current.parentNode;
    }while (current && current !== ownerDocument.body);
    return false;
};
var getVScrollVariables = function(_a) {
    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
    return [
        scrollTop,
        scrollHeight,
        clientHeight
    ];
};
var getHScrollVariables = function(_a) {
    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
    return [
        scrollLeft,
        scrollWidth,
        clientWidth
    ];
};
var elementCouldBeScrolled = function(axis, node) {
    return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function(axis, node) {
    return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
};
var getDirectionFactor = function(axis, direction) {
    /**
     * If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position,
     * and then increasingly negative as you scroll towards the end of the content.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft
     */ return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
    var delta = directionFactor * sourceDelta;
    // find scrollable target
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
        var elementScroll = scroll_1 - capacity - directionFactor * position;
        if (position || elementScroll) {
            if (elementCouldBeScrolled(axis, target)) {
                availableScroll += elementScroll;
                availableScrollTop += position;
            }
        }
        target = target.parentNode;
    }while (// portaled content
    !targetInLock && target !== document.body || // self content
    targetInLock && (endTarget.contains(target) || endTarget === target));
    if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) shouldCancelScroll = true;
    else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) shouldCancelScroll = true;
    return shouldCancelScroll;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kxJV2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DrawerContent", ()=>DrawerContent);
var _chunkMCHDHFCQMjs = require("./chunk-MCHDHFCQ.mjs");
var _chunkNABYTFTGMjs = require("./chunk-NABYTFTG.mjs");
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
// src/drawer-content.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _transition = require("@chakra-ui/transition");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var MotionDiv = (0, _system.chakra)((0, _transition.Slide));
var DrawerContent = (0, _system.forwardRef)((props, ref)=>{
    const { className, children, motionProps, containerProps: rootProps, ...rest } = props;
    const { getDialogProps, getDialogContainerProps, isOpen } = (0, _chunkMSA2NPQTMjs.useModalContext)();
    const dialogProps = getDialogProps(rest, ref);
    const containerProps = getDialogContainerProps(rootProps);
    const _className = (0, _sharedUtils.cx)("chakra-modal__content", className);
    const styles = (0, _chunkMSA2NPQTMjs.useModalStyles)();
    const dialogStyles = {
        display: "flex",
        flexDirection: "column",
        position: "relative",
        width: "100%",
        outline: 0,
        ...styles.dialog
    };
    const dialogContainerStyles = {
        display: "flex",
        width: "100vw",
        height: "$100vh",
        position: "fixed",
        left: 0,
        top: 0,
        ...styles.dialogContainer
    };
    const { placement } = (0, _chunkMCHDHFCQMjs.useDrawerContext)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkNABYTFTGMjs.ModalFocusScope), {
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            ...containerProps,
            className: "chakra-modal__content-container",
            __css: dialogContainerStyles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(MotionDiv, {
                motionProps,
                direction: placement,
                in: isOpen,
                className: _className,
                ...dialogProps,
                __css: dialogStyles,
                children
            })
        })
    });
});
DrawerContent.displayName = "DrawerContent";

},{"./chunk-MCHDHFCQ.mjs":"eghWo","./chunk-NABYTFTG.mjs":"b1zJ1","./chunk-MSA2NPQT.mjs":"1xsEz","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","@chakra-ui/transition":"igsIe","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eghWo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useDrawerContext", ()=>useDrawerContext);
parcelHelpers.export(exports, "Drawer", ()=>Drawer);
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
// src/drawer.tsx
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [DrawerContextProvider, useDrawerContext] = (0, _reactContext.createContext)();
var placementMap = {
    start: {
        ltr: "left",
        rtl: "right"
    },
    end: {
        ltr: "right",
        rtl: "left"
    }
};
function getDrawerPlacement(placement, dir) {
    var _a, _b;
    if (!placement) return;
    return (_b = (_a = placementMap[placement]) == null ? void 0 : _a[dir]) != null ? _b : placement;
}
function Drawer(props) {
    var _a;
    const { isOpen, onClose, placement: placementProp = "right", children, ...rest } = props;
    const theme = (0, _system.useTheme)();
    const drawerStyleConfig = (_a = theme.components) == null ? void 0 : _a.Drawer;
    const placement = getDrawerPlacement(placementProp, theme.direction);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(DrawerContextProvider, {
        value: {
            placement
        },
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkMSA2NPQTMjs.Modal), {
            isOpen,
            onClose,
            styleConfig: drawerStyleConfig,
            ...rest,
            children
        })
    });
}

},{"./chunk-MSA2NPQT.mjs":"1xsEz","@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jauAw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalFooter", ()=>ModalFooter);
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
// src/modal-footer.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var ModalFooter = (0, _system.forwardRef)((props, ref)=>{
    const { className, ...rest } = props;
    const _className = (0, _sharedUtils.cx)("chakra-modal__footer", className);
    const styles = (0, _chunkMSA2NPQTMjs.useModalStyles)();
    const footerStyles = {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-end",
        ...styles.footer
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).footer, {
        ref,
        ...rest,
        __css: footerStyles,
        className: _className
    });
});
ModalFooter.displayName = "ModalFooter";

},{"./chunk-MSA2NPQT.mjs":"1xsEz","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1dOLb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalHeader", ()=>ModalHeader);
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
// src/modal-header.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var ModalHeader = (0, _system.forwardRef)((props, ref)=>{
    const { className, ...rest } = props;
    const { headerId, setHeaderMounted } = (0, _chunkMSA2NPQTMjs.useModalContext)();
    (0, _react.useEffect)(()=>{
        setHeaderMounted(true);
        return ()=>setHeaderMounted(false);
    }, [
        setHeaderMounted
    ]);
    const _className = (0, _sharedUtils.cx)("chakra-modal__header", className);
    const styles = (0, _chunkMSA2NPQTMjs.useModalStyles)();
    const headerStyles = {
        flex: 0,
        ...styles.header
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).header, {
        ref,
        className: _className,
        id: headerId,
        ...rest,
        __css: headerStyles
    });
});
ModalHeader.displayName = "ModalHeader";

},{"./chunk-MSA2NPQT.mjs":"1xsEz","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqCDs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalOverlay", ()=>ModalOverlay);
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
// src/modal-overlay.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _transition = require("@chakra-ui/transition");
var _framerMotion = require("framer-motion");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var MotionDiv = (0, _system.chakra)((0, _framerMotion.motion).div);
var ModalOverlay = (0, _system.forwardRef)((props, ref)=>{
    const { className, transition, motionProps: _motionProps, ...rest } = props;
    const _className = (0, _sharedUtils.cx)("chakra-modal__overlay", className);
    const styles = (0, _chunkMSA2NPQTMjs.useModalStyles)();
    const overlayStyle = {
        pos: "fixed",
        left: "0",
        top: "0",
        w: "100vw",
        h: "100vh",
        ...styles.overlay
    };
    const { motionPreset } = (0, _chunkMSA2NPQTMjs.useModalContext)();
    const defaultMotionProps = motionPreset === "none" ? {} : (0, _transition.fadeConfig);
    const motionProps = _motionProps || defaultMotionProps;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(MotionDiv, {
        ...motionProps,
        __css: overlayStyle,
        ref,
        className: _className,
        ...rest
    });
});
ModalOverlay.displayName = "ModalOverlay";

},{"./chunk-MSA2NPQT.mjs":"1xsEz","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","@chakra-ui/transition":"igsIe","framer-motion":"5bZBB","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7bIGY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalBody", ()=>ModalBody);
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
// src/modal-body.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var ModalBody = (0, _system.forwardRef)((props, ref)=>{
    const { className, ...rest } = props;
    const { bodyId, setBodyMounted } = (0, _chunkMSA2NPQTMjs.useModalContext)();
    (0, _react.useEffect)(()=>{
        setBodyMounted(true);
        return ()=>setBodyMounted(false);
    }, [
        setBodyMounted
    ]);
    const _className = (0, _sharedUtils.cx)("chakra-modal__body", className);
    const styles = (0, _chunkMSA2NPQTMjs.useModalStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        className: _className,
        id: bodyId,
        ...rest,
        __css: styles.body
    });
});
ModalBody.displayName = "ModalBody";

},{"./chunk-MSA2NPQT.mjs":"1xsEz","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2HpCw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalCloseButton", ()=>ModalCloseButton);
var _chunkMSA2NPQTMjs = require("./chunk-MSA2NPQT.mjs");
// src/modal-close-button.tsx
var _closeButton = require("@chakra-ui/close-button");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var ModalCloseButton = (0, _system.forwardRef)((props, ref)=>{
    const { onClick, className, ...rest } = props;
    const { onClose } = (0, _chunkMSA2NPQTMjs.useModalContext)();
    const _className = (0, _sharedUtils.cx)("chakra-modal__close-btn", className);
    const styles = (0, _chunkMSA2NPQTMjs.useModalStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _closeButton.CloseButton), {
        ref,
        __css: styles.closeButton,
        className: _className,
        onClick: (0, _sharedUtils.callAllHandlers)(onClick, (event)=>{
            event.stopPropagation();
            onClose();
        }),
        ...rest
    });
});
ModalCloseButton.displayName = "ModalCloseButton";

},{"./chunk-MSA2NPQT.mjs":"1xsEz","@chakra-ui/close-button":"gSDF2","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25Ppc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NumberDecrementStepper", ()=>(0, _chunk2JJX6TVYMjs.NumberDecrementStepper));
parcelHelpers.export(exports, "NumberIncrementStepper", ()=>(0, _chunk2JJX6TVYMjs.NumberIncrementStepper));
parcelHelpers.export(exports, "NumberInput", ()=>(0, _chunk2JJX6TVYMjs.NumberInput));
parcelHelpers.export(exports, "NumberInputField", ()=>(0, _chunk2JJX6TVYMjs.NumberInputField));
parcelHelpers.export(exports, "NumberInputStepper", ()=>(0, _chunk2JJX6TVYMjs.NumberInputStepper));
parcelHelpers.export(exports, "useNumberInput", ()=>(0, _chunk4ZJMWFQTMjs.useNumberInput));
parcelHelpers.export(exports, "useNumberInputStyles", ()=>(0, _chunk2JJX6TVYMjs.useNumberInputStyles));
var _chunk2JJX6TVYMjs = require("./chunk-2JJX6TVY.mjs");
var _chunkKWODBCCWMjs = require("./chunk-KWODBCCW.mjs");
var _chunk4ZJMWFQTMjs = require("./chunk-4ZJMWFQT.mjs");
var _chunk2PMVP26DMjs = require("./chunk-2PMVP26D.mjs");
var _chunk366L2ZDNMjs = require("./chunk-366L2ZDN.mjs");
"use client";

},{"./chunk-2JJX6TVY.mjs":"iobcw","./chunk-KWODBCCW.mjs":"l3Kd5","./chunk-4ZJMWFQT.mjs":"78h1J","./chunk-2PMVP26D.mjs":"hnEIE","./chunk-366L2ZDN.mjs":"5kOQj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iobcw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useNumberInputStyles", ()=>useNumberInputStyles);
parcelHelpers.export(exports, "NumberInput", ()=>NumberInput);
parcelHelpers.export(exports, "NumberInputStepper", ()=>NumberInputStepper);
parcelHelpers.export(exports, "NumberInputField", ()=>NumberInputField);
parcelHelpers.export(exports, "StyledStepper", ()=>StyledStepper);
parcelHelpers.export(exports, "NumberDecrementStepper", ()=>NumberDecrementStepper);
parcelHelpers.export(exports, "NumberIncrementStepper", ()=>NumberIncrementStepper);
var _chunkKWODBCCWMjs = require("./chunk-KWODBCCW.mjs");
var _chunk4ZJMWFQTMjs = require("./chunk-4ZJMWFQT.mjs");
// src/number-input.tsx
var _formControl = require("@chakra-ui/form-control");
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [NumberInputStylesProvider, useNumberInputStyles] = (0, _reactContext.createContext)({
    name: `NumberInputStylesContext`,
    errorMessage: `useNumberInputStyles returned is 'undefined'. Seems you forgot to wrap the components in "<NumberInput />" `
});
var [NumberInputProvider, useNumberInputContext] = (0, _reactContext.createContext)({
    name: "NumberInputContext",
    errorMessage: "useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />"
});
var NumberInput = (0, _system.forwardRef)(function NumberInput2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("NumberInput", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    const controlProps = (0, _formControl.useFormControlProps)(ownProps);
    const { htmlProps, ...context } = (0, _chunk4ZJMWFQTMjs.useNumberInput)(controlProps);
    const ctx = (0, _react.useMemo)(()=>context, [
        context
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(NumberInputProvider, {
        value: ctx,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(NumberInputStylesProvider, {
            value: styles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                ...htmlProps,
                ref,
                className: (0, _sharedUtils.cx)("chakra-numberinput", props.className),
                __css: {
                    position: "relative",
                    zIndex: 0,
                    ...styles.root
                }
            })
        })
    });
});
NumberInput.displayName = "NumberInput";
var NumberInputStepper = (0, _system.forwardRef)(function NumberInputStepper2(props, ref) {
    const styles = useNumberInputStyles();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        "aria-hidden": true,
        ref,
        ...props,
        __css: {
            display: "flex",
            flexDirection: "column",
            position: "absolute",
            top: "0",
            insetEnd: "0px",
            margin: "1px",
            height: "calc(100% - 2px)",
            zIndex: 1,
            ...styles.stepperGroup
        }
    });
});
NumberInputStepper.displayName = "NumberInputStepper";
var NumberInputField = (0, _system.forwardRef)(function NumberInputField2(props, ref) {
    const { getInputProps } = useNumberInputContext();
    const input = getInputProps(props, ref);
    const styles = useNumberInputStyles();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).input, {
        ...input,
        className: (0, _sharedUtils.cx)("chakra-numberinput__field", props.className),
        __css: {
            width: "100%",
            ...styles.field
        }
    });
});
NumberInputField.displayName = "NumberInputField";
var StyledStepper = (0, _system.chakra)("div", {
    baseStyle: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        flex: 1,
        transitionProperty: "common",
        transitionDuration: "normal",
        userSelect: "none",
        cursor: "pointer",
        lineHeight: "normal"
    }
});
var NumberDecrementStepper = (0, _system.forwardRef)(function NumberDecrementStepper2(props, ref) {
    var _a;
    const styles = useNumberInputStyles();
    const { getDecrementButtonProps } = useNumberInputContext();
    const decrement = getDecrementButtonProps(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StyledStepper, {
        ...decrement,
        __css: styles.stepper,
        children: (_a = props.children) != null ? _a : /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkKWODBCCWMjs.TriangleDownIcon), {})
    });
});
NumberDecrementStepper.displayName = "NumberDecrementStepper";
var NumberIncrementStepper = (0, _system.forwardRef)(function NumberIncrementStepper2(props, ref) {
    var _a;
    const { getIncrementButtonProps } = useNumberInputContext();
    const increment = getIncrementButtonProps(props, ref);
    const styles = useNumberInputStyles();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StyledStepper, {
        ...increment,
        __css: styles.stepper,
        children: (_a = props.children) != null ? _a : /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkKWODBCCWMjs.TriangleUpIcon), {})
    });
});
NumberIncrementStepper.displayName = "NumberIncrementStepper";

},{"./chunk-KWODBCCW.mjs":"l3Kd5","./chunk-4ZJMWFQT.mjs":"78h1J","@chakra-ui/form-control":"5Ic17","@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l3Kd5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TriangleDownIcon", ()=>TriangleDownIcon);
parcelHelpers.export(exports, "TriangleUpIcon", ()=>TriangleUpIcon);
// src/icons.tsx
var _icon = require("@chakra-ui/icon");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var TriangleDownIcon = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        viewBox: "0 0 24 24",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
        })
    });
var TriangleUpIcon = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        viewBox: "0 0 24 24",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
        })
    });

},{"@chakra-ui/icon":"jW1nH","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"78h1J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useNumberInput", ()=>useNumberInput);
var _chunk2PMVP26DMjs = require("./chunk-2PMVP26D.mjs");
var _chunk366L2ZDNMjs = require("./chunk-366L2ZDN.mjs");
// src/use-number-input.ts
var _counter = require("@chakra-ui/counter");
var _reactUseEventListener = require("@chakra-ui/react-use-event-listener");
var _reactUseUpdateEffect = require("@chakra-ui/react-use-update-effect");
var _reactUseSafeLayoutEffect = require("@chakra-ui/react-use-safe-layout-effect");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
"use client";
var FLOATING_POINT_REGEX = /^[Ee0-9+\-.]$/;
function isFloatingPointNumericCharacter(character) {
    return FLOATING_POINT_REGEX.test(character);
}
function isValidNumericKeyboardEvent(event, isValid) {
    if (event.key == null) return true;
    const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
    const isSingleCharacterKey = event.key.length === 1;
    if (!isSingleCharacterKey || isModifierKey) return true;
    return isValid(event.key);
}
function useNumberInput(props = {}) {
    const { focusInputOnChange = true, clampValueOnBlur = true, keepWithinRange = true, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER, step: stepProp = 1, isReadOnly, isDisabled, isRequired, isInvalid, pattern = "[0-9]*(.[0-9]+)?", inputMode = "decimal", allowMouseWheel, id, onChange: _, precision, name, "aria-describedby": ariaDescBy, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, onFocus: onFocusProp, onBlur: onBlurProp, onInvalid: onInvalidProp, getAriaValueText: getAriaValueTextProp, isValidCharacter: isValidCharacterProp, format: formatValue, parse: parseValue, ...htmlProps } = props;
    const onFocus = (0, _reactUseCallbackRef.useCallbackRef)(onFocusProp);
    const onBlur = (0, _reactUseCallbackRef.useCallbackRef)(onBlurProp);
    const onInvalid = (0, _reactUseCallbackRef.useCallbackRef)(onInvalidProp);
    const isValidCharacter = (0, _reactUseCallbackRef.useCallbackRef)(isValidCharacterProp != null ? isValidCharacterProp : isFloatingPointNumericCharacter);
    const getAriaValueText = (0, _reactUseCallbackRef.useCallbackRef)(getAriaValueTextProp);
    const counter = (0, _counter.useCounter)(props);
    const { update: updateFn, increment: incrementFn, decrement: decrementFn } = counter;
    const [isFocused, setFocused] = (0, _react.useState)(false);
    const isInteractive = !(isReadOnly || isDisabled);
    const inputRef = (0, _react.useRef)(null);
    const inputSelectionRef = (0, _react.useRef)(null);
    const incrementButtonRef = (0, _react.useRef)(null);
    const decrementButtonRef = (0, _react.useRef)(null);
    const sanitize = (0, _react.useCallback)((value)=>value.split("").filter(isValidCharacter).join(""), [
        isValidCharacter
    ]);
    const parse = (0, _react.useCallback)((value)=>{
        var _a;
        return (_a = parseValue == null ? void 0 : parseValue(value)) != null ? _a : value;
    }, [
        parseValue
    ]);
    const format = (0, _react.useCallback)((value)=>{
        var _a;
        return ((_a = formatValue == null ? void 0 : formatValue(value)) != null ? _a : value).toString();
    }, [
        formatValue
    ]);
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        if (counter.valueAsNumber > max) onInvalid == null || onInvalid("rangeOverflow", format(counter.value), counter.valueAsNumber);
        else if (counter.valueAsNumber < min) onInvalid == null || onInvalid("rangeOverflow", format(counter.value), counter.valueAsNumber);
    }, [
        counter.valueAsNumber,
        counter.value,
        format,
        onInvalid
    ]);
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (!inputRef.current) return;
        const notInSync = inputRef.current.value != counter.value;
        if (notInSync) {
            const parsedInput = parse(inputRef.current.value);
            counter.setValue(sanitize(parsedInput));
        }
    }, [
        parse,
        sanitize
    ]);
    const increment = (0, _react.useCallback)((step = stepProp)=>{
        if (isInteractive) incrementFn(step);
    }, [
        incrementFn,
        isInteractive,
        stepProp
    ]);
    const decrement = (0, _react.useCallback)((step = stepProp)=>{
        if (isInteractive) decrementFn(step);
    }, [
        decrementFn,
        isInteractive,
        stepProp
    ]);
    const spinner = (0, _chunk366L2ZDNMjs.useSpinner)(increment, decrement);
    (0, _chunk2PMVP26DMjs.useAttributeObserver)(incrementButtonRef, "disabled", spinner.stop, spinner.isSpinning);
    (0, _chunk2PMVP26DMjs.useAttributeObserver)(decrementButtonRef, "disabled", spinner.stop, spinner.isSpinning);
    const onChange = (0, _react.useCallback)((event)=>{
        const evt = event.nativeEvent;
        if (evt.isComposing) return;
        const parsedInput = parse(event.currentTarget.value);
        updateFn(sanitize(parsedInput));
        inputSelectionRef.current = {
            start: event.currentTarget.selectionStart,
            end: event.currentTarget.selectionEnd
        };
    }, [
        updateFn,
        sanitize,
        parse
    ]);
    const _onFocus = (0, _react.useCallback)((event)=>{
        var _a, _b, _c;
        onFocus == null || onFocus(event);
        if (!inputSelectionRef.current) return;
        event.target.selectionStart = (_b = inputSelectionRef.current.start) != null ? _b : (_a = event.currentTarget.value) == null ? void 0 : _a.length;
        event.currentTarget.selectionEnd = (_c = inputSelectionRef.current.end) != null ? _c : event.currentTarget.selectionStart;
    }, [
        onFocus
    ]);
    const onKeyDown = (0, _react.useCallback)((event)=>{
        if (event.nativeEvent.isComposing) return;
        if (!isValidNumericKeyboardEvent(event, isValidCharacter)) event.preventDefault();
        const stepFactor = getStepFactor(event) * stepProp;
        const eventKey = event.key;
        const keyMap = {
            ArrowUp: ()=>increment(stepFactor),
            ArrowDown: ()=>decrement(stepFactor),
            Home: ()=>updateFn(min),
            End: ()=>updateFn(max)
        };
        const action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            action(event);
        }
    }, [
        isValidCharacter,
        stepProp,
        increment,
        decrement,
        updateFn,
        min,
        max
    ]);
    const getStepFactor = (event)=>{
        let ratio = 1;
        if (event.metaKey || event.ctrlKey) ratio = 0.1;
        if (event.shiftKey) ratio = 10;
        return ratio;
    };
    const ariaValueText = (0, _react.useMemo)(()=>{
        const text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);
        if (text != null) return text;
        const defaultText = counter.value.toString();
        return !defaultText ? void 0 : defaultText;
    }, [
        counter.value,
        getAriaValueText
    ]);
    const validateAndClamp = (0, _react.useCallback)(()=>{
        let next = counter.value;
        if (counter.value === "") return;
        const valueStartsWithE = /^[eE]/.test(counter.value.toString());
        if (valueStartsWithE) counter.setValue("");
        else {
            if (counter.valueAsNumber < min) next = min;
            if (counter.valueAsNumber > max) next = max;
            counter.cast(next);
        }
    }, [
        counter,
        max,
        min
    ]);
    const onInputBlur = (0, _react.useCallback)(()=>{
        setFocused(false);
        if (clampValueOnBlur) validateAndClamp();
    }, [
        clampValueOnBlur,
        setFocused,
        validateAndClamp
    ]);
    const focusInput = (0, _react.useCallback)(()=>{
        if (focusInputOnChange) requestAnimationFrame(()=>{
            var _a;
            (_a = inputRef.current) == null || _a.focus();
        });
    }, [
        focusInputOnChange
    ]);
    const spinUp = (0, _react.useCallback)((event)=>{
        event.preventDefault();
        spinner.up();
        focusInput();
    }, [
        focusInput,
        spinner
    ]);
    const spinDown = (0, _react.useCallback)((event)=>{
        event.preventDefault();
        spinner.down();
        focusInput();
    }, [
        focusInput,
        spinner
    ]);
    (0, _reactUseEventListener.useEventListener)(()=>inputRef.current, "wheel", (event)=>{
        var _a, _b;
        const doc = (_b = (_a = inputRef.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;
        const isInputFocused = doc.activeElement === inputRef.current;
        if (!allowMouseWheel || !isInputFocused) return;
        event.preventDefault();
        const stepFactor = getStepFactor(event) * stepProp;
        const direction = Math.sign(event.deltaY);
        if (direction === -1) increment(stepFactor);
        else if (direction === 1) decrement(stepFactor);
    }, {
        passive: false
    });
    const getIncrementButtonProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        const disabled = isDisabled || keepWithinRange && counter.isAtMax;
        return {
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, incrementButtonRef),
            role: "button",
            tabIndex: -1,
            onPointerDown: (0, _sharedUtils.callAllHandlers)(props2.onPointerDown, (event)=>{
                if (event.button !== 0 || disabled) return;
                spinUp(event);
            }),
            onPointerLeave: (0, _sharedUtils.callAllHandlers)(props2.onPointerLeave, spinner.stop),
            onPointerUp: (0, _sharedUtils.callAllHandlers)(props2.onPointerUp, spinner.stop),
            disabled,
            "aria-disabled": (0, _sharedUtils.ariaAttr)(disabled)
        };
    }, [
        counter.isAtMax,
        keepWithinRange,
        spinUp,
        spinner.stop,
        isDisabled
    ]);
    const getDecrementButtonProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        const disabled = isDisabled || keepWithinRange && counter.isAtMin;
        return {
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, decrementButtonRef),
            role: "button",
            tabIndex: -1,
            onPointerDown: (0, _sharedUtils.callAllHandlers)(props2.onPointerDown, (event)=>{
                if (event.button !== 0 || disabled) return;
                spinDown(event);
            }),
            onPointerLeave: (0, _sharedUtils.callAllHandlers)(props2.onPointerLeave, spinner.stop),
            onPointerUp: (0, _sharedUtils.callAllHandlers)(props2.onPointerUp, spinner.stop),
            disabled,
            "aria-disabled": (0, _sharedUtils.ariaAttr)(disabled)
        };
    }, [
        counter.isAtMin,
        keepWithinRange,
        spinDown,
        spinner.stop,
        isDisabled
    ]);
    const getInputProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        var _a, _b, _c, _d;
        return {
            name,
            inputMode,
            type: "text",
            pattern,
            "aria-labelledby": ariaLabelledBy,
            "aria-label": ariaLabel,
            "aria-describedby": ariaDescBy,
            id,
            disabled: isDisabled,
            ...props2,
            readOnly: (_a = props2.readOnly) != null ? _a : isReadOnly,
            "aria-readonly": (_b = props2.readOnly) != null ? _b : isReadOnly,
            "aria-required": (_c = props2.required) != null ? _c : isRequired,
            required: (_d = props2.required) != null ? _d : isRequired,
            ref: (0, _reactUseMergeRefs.mergeRefs)(inputRef, ref),
            value: format(counter.value),
            role: "spinbutton",
            "aria-valuemin": min,
            "aria-valuemax": max,
            "aria-valuenow": Number.isNaN(counter.valueAsNumber) ? void 0 : counter.valueAsNumber,
            "aria-invalid": (0, _sharedUtils.ariaAttr)(isInvalid != null ? isInvalid : counter.isOutOfRange),
            "aria-valuetext": ariaValueText,
            autoComplete: "off",
            autoCorrect: "off",
            onChange: (0, _sharedUtils.callAllHandlers)(props2.onChange, onChange),
            onKeyDown: (0, _sharedUtils.callAllHandlers)(props2.onKeyDown, onKeyDown),
            onFocus: (0, _sharedUtils.callAllHandlers)(props2.onFocus, _onFocus, ()=>setFocused(true)),
            onBlur: (0, _sharedUtils.callAllHandlers)(props2.onBlur, onBlur, onInputBlur)
        };
    }, [
        name,
        inputMode,
        pattern,
        ariaLabelledBy,
        ariaLabel,
        format,
        ariaDescBy,
        id,
        isDisabled,
        isRequired,
        isReadOnly,
        isInvalid,
        counter.value,
        counter.valueAsNumber,
        counter.isOutOfRange,
        min,
        max,
        ariaValueText,
        onChange,
        onKeyDown,
        _onFocus,
        onBlur,
        onInputBlur
    ]);
    return {
        value: format(counter.value),
        valueAsNumber: counter.valueAsNumber,
        isFocused,
        isDisabled,
        isReadOnly,
        getIncrementButtonProps,
        getDecrementButtonProps,
        getInputProps,
        htmlProps
    };
}

},{"./chunk-2PMVP26D.mjs":"hnEIE","./chunk-366L2ZDN.mjs":"5kOQj","@chakra-ui/counter":"m7Jg5","@chakra-ui/react-use-event-listener":"lQUDe","@chakra-ui/react-use-update-effect":"kfB4Y","@chakra-ui/react-use-safe-layout-effect":"eJbER","@chakra-ui/react-use-callback-ref":"dbPJ9","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hnEIE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useAttributeObserver", ()=>useAttributeObserver);
// src/use-attr-observer.ts
var _react = require("react");
"use client";
function useAttributeObserver(ref, attributes, fn, enabled) {
    (0, _react.useEffect)(()=>{
        var _a;
        if (!ref.current || !enabled) return;
        const win = (_a = ref.current.ownerDocument.defaultView) != null ? _a : window;
        const attrs = Array.isArray(attributes) ? attributes : [
            attributes
        ];
        const obs = new win.MutationObserver((changes)=>{
            for (const change of changes)if (change.type === "attributes" && change.attributeName && attrs.includes(change.attributeName)) fn(change);
        });
        obs.observe(ref.current, {
            attributes: true,
            attributeFilter: attrs
        });
        return ()=>obs.disconnect();
    });
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5kOQj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSpinner", ()=>useSpinner);
// src/use-spinner.ts
var _reactUseInterval = require("@chakra-ui/react-use-interval");
var _react = require("react");
"use client";
var CONTINUOUS_CHANGE_INTERVAL = 50;
var CONTINUOUS_CHANGE_DELAY = 300;
function useSpinner(increment, decrement) {
    const [isSpinning, setIsSpinning] = (0, _react.useState)(false);
    const [action, setAction] = (0, _react.useState)(null);
    const [runOnce, setRunOnce] = (0, _react.useState)(true);
    const timeoutRef = (0, _react.useRef)(null);
    const removeTimeout = ()=>clearTimeout(timeoutRef.current);
    (0, _reactUseInterval.useInterval)(()=>{
        if (action === "increment") increment();
        if (action === "decrement") decrement();
    }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null);
    const up = (0, _react.useCallback)(()=>{
        if (runOnce) increment();
        timeoutRef.current = setTimeout(()=>{
            setRunOnce(false);
            setIsSpinning(true);
            setAction("increment");
        }, CONTINUOUS_CHANGE_DELAY);
    }, [
        increment,
        runOnce
    ]);
    const down = (0, _react.useCallback)(()=>{
        if (runOnce) decrement();
        timeoutRef.current = setTimeout(()=>{
            setRunOnce(false);
            setIsSpinning(true);
            setAction("decrement");
        }, CONTINUOUS_CHANGE_DELAY);
    }, [
        decrement,
        runOnce
    ]);
    const stop = (0, _react.useCallback)(()=>{
        setRunOnce(true);
        setIsSpinning(false);
        removeTimeout();
    }, []);
    (0, _react.useEffect)(()=>{
        return ()=>removeTimeout();
    }, []);
    return {
        up,
        down,
        stop,
        isSpinning
    };
}

},{"@chakra-ui/react-use-interval":"NBQAc","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"NBQAc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useInterval", ()=>useInterval);
// src/index.ts
var _react = require("react");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
"use client";
function useInterval(callback, delay) {
    const fn = (0, _reactUseCallbackRef.useCallbackRef)(callback);
    (0, _react.useEffect)(()=>{
        let intervalId = null;
        const tick = ()=>fn();
        if (delay !== null) intervalId = window.setInterval(tick, delay);
        return ()=>{
            if (intervalId) window.clearInterval(intervalId);
        };
    }, [
        delay,
        fn
    ]);
}

},{"react":"21dqq","@chakra-ui/react-use-callback-ref":"dbPJ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Hbj5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PinInput", ()=>(0, _chunkI5V4ORUKMjs.PinInput));
parcelHelpers.export(exports, "PinInputDescendantsProvider", ()=>(0, _chunk7FMJRAMHMjs.PinInputDescendantsProvider));
parcelHelpers.export(exports, "PinInputField", ()=>(0, _chunkI5V4ORUKMjs.PinInputField));
parcelHelpers.export(exports, "PinInputProvider", ()=>(0, _chunk7FMJRAMHMjs.PinInputProvider));
parcelHelpers.export(exports, "usePinInput", ()=>(0, _chunk7FMJRAMHMjs.usePinInput));
parcelHelpers.export(exports, "usePinInputContext", ()=>(0, _chunk7FMJRAMHMjs.usePinInputContext));
parcelHelpers.export(exports, "usePinInputField", ()=>(0, _chunk7FMJRAMHMjs.usePinInputField));
var _chunkI5V4ORUKMjs = require("./chunk-I5V4ORUK.mjs");
var _chunk7FMJRAMHMjs = require("./chunk-7FMJRAMH.mjs");
"use client";

},{"./chunk-I5V4ORUK.mjs":"2XC1y","./chunk-7FMJRAMH.mjs":"1EoVL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2XC1y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PinInput", ()=>PinInput);
parcelHelpers.export(exports, "PinInputField", ()=>PinInputField);
var _chunk7FMJRAMHMjs = require("./chunk-7FMJRAMH.mjs");
// src/pin-input.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _reactChildrenUtils = require("@chakra-ui/react-children-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function PinInput(props) {
    const styles = (0, _system.useStyleConfig)("PinInput", props);
    const { children, ...rest } = (0, _system.omitThemingProps)(props);
    const { descendants, ...context } = (0, _chunk7FMJRAMHMjs.usePinInput)(rest);
    const clones = (0, _reactChildrenUtils.getValidChildren)(children).map((child)=>(0, _react.cloneElement)(child, {
            __css: styles
        }));
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk7FMJRAMHMjs.PinInputDescendantsProvider), {
        value: descendants,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk7FMJRAMHMjs.PinInputProvider), {
            value: context,
            children: clones
        })
    });
}
PinInput.displayName = "PinInput";
var PinInputField = (0, _system.forwardRef)(function PinInputField2(props, ref) {
    const inputProps = (0, _chunk7FMJRAMHMjs.usePinInputField)(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).input, {
        ...inputProps,
        className: (0, _sharedUtils.cx)("chakra-pin-input", props.className)
    });
});
PinInputField.displayName = "PinInputField";

},{"./chunk-7FMJRAMH.mjs":"1EoVL","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/react-children-utils":"49v95","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1EoVL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PinInputDescendantsProvider", ()=>PinInputDescendantsProvider);
parcelHelpers.export(exports, "usePinInputDescendantsContext", ()=>usePinInputDescendantsContext);
parcelHelpers.export(exports, "usePinInputDescendants", ()=>usePinInputDescendants);
parcelHelpers.export(exports, "usePinInputDescendant", ()=>usePinInputDescendant);
parcelHelpers.export(exports, "PinInputProvider", ()=>PinInputProvider);
parcelHelpers.export(exports, "usePinInputContext", ()=>usePinInputContext);
parcelHelpers.export(exports, "usePinInput", ()=>usePinInput);
parcelHelpers.export(exports, "usePinInputField", ()=>usePinInputField);
// src/use-pin-input.ts
var _descendant = require("@chakra-ui/descendant");
var _reactUseControllableState = require("@chakra-ui/react-use-controllable-state");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _reactContext = require("@chakra-ui/react-context");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _react = require("react");
"use client";
var [PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant] = (0, _descendant.createDescendantContext)();
var [PinInputProvider, usePinInputContext] = (0, _reactContext.createContext)({
    name: "PinInputContext",
    errorMessage: "usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`"
});
var toArray = (value)=>value == null ? void 0 : value.split("");
function validate(value, type) {
    const NUMERIC_REGEX = /^[0-9]+$/;
    const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;
    const regex = type === "alphanumeric" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;
    return regex.test(value);
}
function usePinInput(props = {}) {
    const { autoFocus, value, defaultValue, onChange, onComplete, placeholder = "○", manageFocus = true, otp = false, id: idProp, isDisabled, isInvalid, type = "number", mask } = props;
    const uuid = (0, _react.useId)();
    const id = idProp != null ? idProp : `pin-input-${uuid}`;
    const descendants = usePinInputDescendants();
    const [moveFocus, setMoveFocus] = (0, _react.useState)(true);
    const [focusedIndex, setFocusedIndex] = (0, _react.useState)(-1);
    const [values, setValues] = (0, _reactUseControllableState.useControllableState)({
        defaultValue: toArray(defaultValue) || [],
        value: toArray(value),
        onChange: (values2)=>onChange == null ? void 0 : onChange(values2.join(""))
    });
    (0, _react.useEffect)(()=>{
        if (autoFocus) {
            const first = descendants.first();
            if (first) requestAnimationFrame(()=>{
                first.node.focus();
            });
        }
    }, [
        descendants
    ]);
    const focusNext = (0, _react.useCallback)((index)=>{
        if (!moveFocus || !manageFocus) return;
        const next = descendants.next(index, false);
        if (next) requestAnimationFrame(()=>{
            next.node.focus();
        });
    }, [
        descendants,
        moveFocus,
        manageFocus
    ]);
    const setValue = (0, _react.useCallback)((value2, index, handleFocus = true)=>{
        const nextValues = [
            ...values
        ];
        nextValues[index] = value2;
        setValues(nextValues);
        const isComplete = value2 !== "" && nextValues.length === descendants.count() && nextValues.every((inputValue)=>inputValue != null && inputValue !== "");
        if (isComplete) onComplete == null || onComplete(nextValues.join(""));
        else if (handleFocus) focusNext(index);
    }, [
        values,
        setValues,
        focusNext,
        onComplete,
        descendants
    ]);
    const clear = (0, _react.useCallback)(()=>{
        var _a;
        const values2 = Array(descendants.count()).fill("");
        setValues(values2);
        const first = descendants.first();
        (_a = first == null ? void 0 : first.node) == null || _a.focus();
    }, [
        descendants,
        setValues
    ]);
    const getNextValue = (0, _react.useCallback)((value2, eventValue)=>{
        let nextValue = eventValue;
        if ((value2 == null ? void 0 : value2.length) > 0) {
            if (value2[0] === eventValue.charAt(0)) nextValue = eventValue.charAt(1);
            else if (value2[0] === eventValue.charAt(1)) nextValue = eventValue.charAt(0);
        }
        return nextValue;
    }, []);
    const getInputProps = (0, _react.useCallback)((props2)=>{
        const { index, ...rest } = props2;
        const onChange2 = (event)=>{
            const eventValue = event.target.value;
            const currentValue = values[index];
            const nextValue = getNextValue(currentValue, eventValue);
            if (nextValue === "") {
                setValue("", index);
                return;
            }
            if (eventValue.length > 2) {
                if (validate(eventValue, type)) {
                    const nextValue2 = eventValue.split("").filter((_, index2)=>index2 < descendants.count());
                    setValues(nextValue2);
                    if (nextValue2.length === descendants.count()) onComplete == null || onComplete(nextValue2.join(""));
                }
            } else {
                if (validate(nextValue, type)) setValue(nextValue, index);
                setMoveFocus(true);
            }
        };
        const onKeyDown = (event)=>{
            var _a;
            if (event.key === "Backspace" && manageFocus) {
                if (event.target.value === "") {
                    const prevInput = descendants.prev(index, false);
                    if (prevInput) {
                        setValue("", index - 1, false);
                        (_a = prevInput.node) == null || _a.focus();
                        setMoveFocus(true);
                    }
                } else setMoveFocus(false);
            }
        };
        const onFocus = ()=>{
            setFocusedIndex(index);
        };
        const onBlur = ()=>{
            setFocusedIndex(-1);
        };
        const hasFocus = focusedIndex === index;
        const inputType = type === "number" ? "tel" : "text";
        return {
            "aria-label": "Please enter your pin code",
            inputMode: type === "number" ? "numeric" : "text",
            type: mask ? "password" : inputType,
            ...rest,
            id: `${id}-${index}`,
            disabled: isDisabled,
            "aria-invalid": (0, _sharedUtils.ariaAttr)(isInvalid),
            onChange: (0, _sharedUtils.callAllHandlers)(rest.onChange, onChange2),
            onKeyDown: (0, _sharedUtils.callAllHandlers)(rest.onKeyDown, onKeyDown),
            onFocus: (0, _sharedUtils.callAllHandlers)(rest.onFocus, onFocus),
            onBlur: (0, _sharedUtils.callAllHandlers)(rest.onBlur, onBlur),
            value: values[index] || "",
            autoComplete: otp ? "one-time-code" : "off",
            placeholder: hasFocus ? "" : placeholder
        };
    }, [
        descendants,
        focusedIndex,
        getNextValue,
        id,
        isDisabled,
        mask,
        isInvalid,
        manageFocus,
        onComplete,
        otp,
        placeholder,
        setValue,
        setValues,
        type,
        values
    ]);
    return {
        // prop getter
        getInputProps,
        // state
        id,
        descendants,
        values,
        // actions
        setValue,
        setValues,
        clear
    };
}
function usePinInputField(props = {}, ref = null) {
    const { getInputProps } = usePinInputContext();
    const { index, register } = usePinInputDescendant();
    return getInputProps({
        ...props,
        ref: (0, _reactUseMergeRefs.mergeRefs)(register, ref),
        index
    });
}

},{"@chakra-ui/descendant":"4UCVd","@chakra-ui/react-use-controllable-state":"ghlge","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/react-context":"7RVZP","@chakra-ui/react-use-merge-refs":"9E5Ql","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ITQx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Popover", ()=>(0, _chunk3WRTUQ76Mjs.Popover));
parcelHelpers.export(exports, "PopoverAnchor", ()=>(0, _chunkDY5QRMBOMjs.PopoverAnchor));
parcelHelpers.export(exports, "PopoverArrow", ()=>(0, _chunkTL4BBA7TMjs.PopoverArrow));
parcelHelpers.export(exports, "PopoverBody", ()=>(0, _chunkRLMGYZLYMjs.PopoverBody));
parcelHelpers.export(exports, "PopoverCloseButton", ()=>(0, _chunkJKY3EM6PMjs.PopoverCloseButton));
parcelHelpers.export(exports, "PopoverContent", ()=>(0, _chunk24I2HV4NMjs.PopoverContent));
parcelHelpers.export(exports, "PopoverFooter", ()=>(0, _chunkR6BA5JLSMjs.PopoverFooter));
parcelHelpers.export(exports, "PopoverHeader", ()=>(0, _chunkDHS7LAGWMjs.PopoverHeader));
parcelHelpers.export(exports, "PopoverTrigger", ()=>(0, _chunkOFUG2FGDMjs.PopoverTrigger));
parcelHelpers.export(exports, "usePopover", ()=>(0, _chunkA566ERKIMjs.usePopover));
parcelHelpers.export(exports, "usePopoverContext", ()=>(0, _chunkZ3POGKNIMjs.usePopoverContext));
parcelHelpers.export(exports, "usePopoverStyles", ()=>(0, _chunkZ3POGKNIMjs.usePopoverStyles));
var _chunkDHS7LAGWMjs = require("./chunk-DHS7LAGW.mjs");
var _chunkOFUG2FGDMjs = require("./chunk-OFUG2FGD.mjs");
var _chunk3WRTUQ76Mjs = require("./chunk-3WRTUQ76.mjs");
var _chunkA566ERKIMjs = require("./chunk-A566ERKI.mjs");
var _chunkDY5QRMBOMjs = require("./chunk-DY5QRMBO.mjs");
var _chunkTL4BBA7TMjs = require("./chunk-TL4BBA7T.mjs");
var _chunkRLMGYZLYMjs = require("./chunk-RLMGYZLY.mjs");
var _chunkJKY3EM6PMjs = require("./chunk-JKY3EM6P.mjs");
var _chunk24I2HV4NMjs = require("./chunk-24I2HV4N.mjs");
var _chunkF4GPNG57Mjs = require("./chunk-F4GPNG57.mjs");
var _chunkR6BA5JLSMjs = require("./chunk-R6BA5JLS.mjs");
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
"use client";

},{"./chunk-DHS7LAGW.mjs":"kVN59","./chunk-OFUG2FGD.mjs":"flzdg","./chunk-3WRTUQ76.mjs":"7qETt","./chunk-A566ERKI.mjs":"71RTF","./chunk-DY5QRMBO.mjs":"2LzQc","./chunk-TL4BBA7T.mjs":"ayLvU","./chunk-RLMGYZLY.mjs":"3DBf4","./chunk-JKY3EM6P.mjs":"9uxm8","./chunk-24I2HV4N.mjs":"jFOh2","./chunk-F4GPNG57.mjs":"4IRXi","./chunk-R6BA5JLS.mjs":"1x3QA","./chunk-Z3POGKNI.mjs":"cRajg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kVN59":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverHeader", ()=>PopoverHeader);
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover-header.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var PopoverHeader = (0, _system.forwardRef)(function PopoverHeader2(props, ref) {
    const { getHeaderProps } = (0, _chunkZ3POGKNIMjs.usePopoverContext)();
    const styles = (0, _chunkZ3POGKNIMjs.usePopoverStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).header, {
        ...getHeaderProps(props, ref),
        className: (0, _sharedUtils.cx)("chakra-popover__header", props.className),
        __css: styles.header
    });
});
PopoverHeader.displayName = "PopoverHeader";

},{"./chunk-Z3POGKNI.mjs":"cRajg","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cRajg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverProvider", ()=>PopoverProvider);
parcelHelpers.export(exports, "usePopoverContext", ()=>usePopoverContext);
parcelHelpers.export(exports, "PopoverStylesProvider", ()=>PopoverStylesProvider);
parcelHelpers.export(exports, "usePopoverStyles", ()=>usePopoverStyles);
// src/popover-context.ts
var _reactContext = require("@chakra-ui/react-context");
"use client";
var [PopoverProvider, usePopoverContext] = (0, _reactContext.createContext)({
    name: "PopoverContext",
    errorMessage: "usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`"
});
var [PopoverStylesProvider, usePopoverStyles] = (0, _reactContext.createContext)({
    name: `PopoverStylesContext`,
    errorMessage: `usePopoverStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Popover />" `
});

},{"@chakra-ui/react-context":"7RVZP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"flzdg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverTrigger", ()=>PopoverTrigger);
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover-trigger.tsx
var _react = require("react");
"use client";
function PopoverTrigger(props) {
    const child = (0, _react.Children).only(props.children);
    const { getTriggerProps } = (0, _chunkZ3POGKNIMjs.usePopoverContext)();
    return (0, _react.cloneElement)(child, getTriggerProps(child.props, child.ref));
}
PopoverTrigger.displayName = "PopoverTrigger";

},{"./chunk-Z3POGKNI.mjs":"cRajg","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7qETt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Popover", ()=>Popover);
var _chunkA566ERKIMjs = require("./chunk-A566ERKI.mjs");
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function Popover(props) {
    const styles = (0, _system.useMultiStyleConfig)("Popover", props);
    const { children, ...rest } = (0, _system.omitThemingProps)(props);
    const theme = (0, _system.useTheme)();
    const context = (0, _chunkA566ERKIMjs.usePopover)({
        ...rest,
        direction: theme.direction
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkZ3POGKNIMjs.PopoverProvider), {
        value: context,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkZ3POGKNIMjs.PopoverStylesProvider), {
            value: styles,
            children: (0, _sharedUtils.runIfFn)(children, {
                isOpen: context.isOpen,
                onClose: context.onClose,
                forceUpdate: context.forceUpdate
            })
        })
    });
}
Popover.displayName = "Popover";

},{"./chunk-A566ERKI.mjs":"71RTF","./chunk-Z3POGKNI.mjs":"cRajg","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"71RTF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePopover", ()=>usePopover);
// src/use-popover.ts
var _reactUseAnimationState = require("@chakra-ui/react-use-animation-state");
var _reactUseFocusOnPointerDown = require("@chakra-ui/react-use-focus-on-pointer-down");
var _reactUseFocusEffect = require("@chakra-ui/react-use-focus-effect");
var _reactUseDisclosure = require("@chakra-ui/react-use-disclosure");
var _popper = require("@chakra-ui/popper");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _lazyUtils = require("@chakra-ui/lazy-utils");
var _react = require("react");
"use client";
var TRIGGER = {
    click: "click",
    hover: "hover"
};
function usePopover(props = {}) {
    const { closeOnBlur = true, closeOnEsc = true, initialFocusRef, id, returnFocusOnClose = true, autoFocus = true, arrowSize, arrowShadowColor, trigger = TRIGGER.click, openDelay = 200, closeDelay = 200, isLazy, lazyBehavior = "unmount", computePositionOnMount, ...popperProps } = props;
    const { isOpen, onClose, onOpen, onToggle } = (0, _reactUseDisclosure.useDisclosure)(props);
    const anchorRef = (0, _react.useRef)(null);
    const triggerRef = (0, _react.useRef)(null);
    const popoverRef = (0, _react.useRef)(null);
    const isHoveringRef = (0, _react.useRef)(false);
    const hasBeenOpened = (0, _react.useRef)(false);
    if (isOpen) hasBeenOpened.current = true;
    const [hasHeader, setHasHeader] = (0, _react.useState)(false);
    const [hasBody, setHasBody] = (0, _react.useState)(false);
    const uuid = (0, _react.useId)();
    const uid = id != null ? id : uuid;
    const [triggerId, popoverId, headerId, bodyId] = [
        "popover-trigger",
        "popover-content",
        "popover-header",
        "popover-body"
    ].map((id2)=>`${id2}-${uid}`);
    const { referenceRef, getArrowProps, getPopperProps, getArrowInnerProps, forceUpdate } = (0, _popper.usePopper)({
        ...popperProps,
        enabled: isOpen || !!computePositionOnMount
    });
    const animated = (0, _reactUseAnimationState.useAnimationState)({
        isOpen,
        ref: popoverRef
    });
    (0, _reactUseFocusOnPointerDown.useFocusOnPointerDown)({
        enabled: isOpen,
        ref: triggerRef
    });
    (0, _reactUseFocusEffect.useFocusOnHide)(popoverRef, {
        focusRef: triggerRef,
        visible: isOpen,
        shouldFocus: returnFocusOnClose && trigger === TRIGGER.click
    });
    (0, _reactUseFocusEffect.useFocusOnShow)(popoverRef, {
        focusRef: initialFocusRef,
        visible: isOpen,
        shouldFocus: autoFocus && trigger === TRIGGER.click
    });
    const shouldRenderChildren = (0, _lazyUtils.lazyDisclosure)({
        wasSelected: hasBeenOpened.current,
        enabled: isLazy,
        mode: lazyBehavior,
        isSelected: animated.present
    });
    const getPopoverProps = (0, _react.useCallback)((props2 = {}, _ref = null)=>{
        const popoverProps = {
            ...props2,
            style: {
                ...props2.style,
                transformOrigin: (0, _popper.popperCSSVars).transformOrigin.varRef,
                [(0, _popper.popperCSSVars).arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,
                [(0, _popper.popperCSSVars).arrowShadowColor.var]: arrowShadowColor
            },
            ref: (0, _reactUseMergeRefs.mergeRefs)(popoverRef, _ref),
            children: shouldRenderChildren ? props2.children : null,
            id: popoverId,
            tabIndex: -1,
            role: "dialog",
            onKeyDown: (0, _sharedUtils.callAllHandlers)(props2.onKeyDown, (event)=>{
                if (closeOnEsc && event.key === "Escape") onClose();
            }),
            onBlur: (0, _sharedUtils.callAllHandlers)(props2.onBlur, (event)=>{
                const relatedTarget = getRelatedTarget(event);
                const targetIsPopover = contains(popoverRef.current, relatedTarget);
                const targetIsTrigger = contains(triggerRef.current, relatedTarget);
                const isValidBlur = !targetIsPopover && !targetIsTrigger;
                if (isOpen && closeOnBlur && isValidBlur) onClose();
            }),
            "aria-labelledby": hasHeader ? headerId : void 0,
            "aria-describedby": hasBody ? bodyId : void 0
        };
        if (trigger === TRIGGER.hover) {
            popoverProps.role = "tooltip";
            popoverProps.onMouseEnter = (0, _sharedUtils.callAllHandlers)(props2.onMouseEnter, ()=>{
                isHoveringRef.current = true;
            });
            popoverProps.onMouseLeave = (0, _sharedUtils.callAllHandlers)(props2.onMouseLeave, (event)=>{
                if (event.nativeEvent.relatedTarget === null) return;
                isHoveringRef.current = false;
                setTimeout(()=>onClose(), closeDelay);
            });
        }
        return popoverProps;
    }, [
        shouldRenderChildren,
        popoverId,
        hasHeader,
        headerId,
        hasBody,
        bodyId,
        trigger,
        closeOnEsc,
        onClose,
        isOpen,
        closeOnBlur,
        closeDelay,
        arrowShadowColor,
        arrowSize
    ]);
    const getPopoverPositionerProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>getPopperProps({
            ...props2,
            style: {
                visibility: isOpen ? "visible" : "hidden",
                ...props2.style
            }
        }, forwardedRef), [
        isOpen,
        getPopperProps
    ]);
    const getAnchorProps = (0, _react.useCallback)((props2, _ref = null)=>{
        return {
            ...props2,
            // If anchor is rendered, it is used as reference.
            ref: (0, _reactUseMergeRefs.mergeRefs)(_ref, anchorRef, referenceRef)
        };
    }, [
        anchorRef,
        referenceRef
    ]);
    const openTimeout = (0, _react.useRef)();
    const closeTimeout = (0, _react.useRef)();
    const maybeReferenceRef = (0, _react.useCallback)((node)=>{
        if (anchorRef.current == null) referenceRef(node);
    }, [
        referenceRef
    ]);
    const getTriggerProps = (0, _react.useCallback)((props2 = {}, _ref = null)=>{
        const triggerProps = {
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(triggerRef, _ref, maybeReferenceRef),
            id: triggerId,
            "aria-haspopup": "dialog",
            "aria-expanded": isOpen,
            "aria-controls": popoverId
        };
        if (trigger === TRIGGER.click) triggerProps.onClick = (0, _sharedUtils.callAllHandlers)(props2.onClick, onToggle);
        if (trigger === TRIGGER.hover) {
            triggerProps.onFocus = (0, _sharedUtils.callAllHandlers)(props2.onFocus, ()=>{
                if (openTimeout.current === void 0) onOpen();
            });
            triggerProps.onBlur = (0, _sharedUtils.callAllHandlers)(props2.onBlur, (event)=>{
                const relatedTarget = getRelatedTarget(event);
                const isValidBlur = !contains(popoverRef.current, relatedTarget);
                if (isOpen && closeOnBlur && isValidBlur) onClose();
            });
            triggerProps.onKeyDown = (0, _sharedUtils.callAllHandlers)(props2.onKeyDown, (event)=>{
                if (event.key === "Escape") onClose();
            });
            triggerProps.onMouseEnter = (0, _sharedUtils.callAllHandlers)(props2.onMouseEnter, ()=>{
                isHoveringRef.current = true;
                openTimeout.current = window.setTimeout(()=>onOpen(), openDelay);
            });
            triggerProps.onMouseLeave = (0, _sharedUtils.callAllHandlers)(props2.onMouseLeave, ()=>{
                isHoveringRef.current = false;
                if (openTimeout.current) {
                    clearTimeout(openTimeout.current);
                    openTimeout.current = void 0;
                }
                closeTimeout.current = window.setTimeout(()=>{
                    if (isHoveringRef.current === false) onClose();
                }, closeDelay);
            });
        }
        return triggerProps;
    }, [
        triggerId,
        isOpen,
        popoverId,
        trigger,
        maybeReferenceRef,
        onToggle,
        onOpen,
        closeOnBlur,
        onClose,
        openDelay,
        closeDelay
    ]);
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (openTimeout.current) clearTimeout(openTimeout.current);
            if (closeTimeout.current) clearTimeout(closeTimeout.current);
        };
    }, []);
    const getHeaderProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            id: headerId,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, (node)=>{
                setHasHeader(!!node);
            })
        }), [
        headerId
    ]);
    const getBodyProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            id: bodyId,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, (node)=>{
                setHasBody(!!node);
            })
        }), [
        bodyId
    ]);
    return {
        forceUpdate,
        isOpen,
        onAnimationComplete: animated.onComplete,
        onClose,
        getAnchorProps,
        getArrowProps,
        getArrowInnerProps,
        getPopoverPositionerProps,
        getPopoverProps,
        getTriggerProps,
        getHeaderProps,
        getBodyProps
    };
}
function contains(parent, child) {
    return parent === child || (parent == null ? void 0 : parent.contains(child));
}
function getRelatedTarget(event) {
    var _a;
    const activeEl = event.currentTarget.ownerDocument.activeElement;
    return (_a = event.relatedTarget) != null ? _a : activeEl;
}

},{"@chakra-ui/react-use-animation-state":"jyXlh","@chakra-ui/react-use-focus-on-pointer-down":"gZxmY","@chakra-ui/react-use-focus-effect":"5tvB0","@chakra-ui/react-use-disclosure":"kajTV","@chakra-ui/popper":"p5cnD","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/lazy-utils":"hW1vr","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2LzQc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverAnchor", ()=>PopoverAnchor);
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover-anchor.tsx
var _react = require("react");
"use client";
function PopoverAnchor(props) {
    const child = (0, _react.Children).only(props.children);
    const { getAnchorProps } = (0, _chunkZ3POGKNIMjs.usePopoverContext)();
    return (0, _react.cloneElement)(child, getAnchorProps(child.props, child.ref));
}
PopoverAnchor.displayName = "PopoverAnchor";

},{"./chunk-Z3POGKNI.mjs":"cRajg","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ayLvU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverArrow", ()=>PopoverArrow);
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover-arrow.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var resolveVar = (scale, value)=>value ? `${scale}.${value}, ${value}` : void 0;
function PopoverArrow(props) {
    var _a;
    const { bg, bgColor, backgroundColor, shadow, boxShadow, shadowColor } = props;
    const { getArrowProps, getArrowInnerProps } = (0, _chunkZ3POGKNIMjs.usePopoverContext)();
    const styles = (0, _chunkZ3POGKNIMjs.usePopoverStyles)();
    const arrowBg = (_a = bg != null ? bg : bgColor) != null ? _a : backgroundColor;
    const arrowShadow = shadow != null ? shadow : boxShadow;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...getArrowProps(),
        className: "chakra-popover__arrow-positioner",
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            className: (0, _sharedUtils.cx)("chakra-popover__arrow", props.className),
            ...getArrowInnerProps(props),
            __css: {
                "--popper-arrow-shadow-color": resolveVar("colors", shadowColor),
                "--popper-arrow-bg": resolveVar("colors", arrowBg),
                "--popper-arrow-shadow": resolveVar("shadows", arrowShadow),
                ...styles.arrow
            }
        })
    });
}
PopoverArrow.displayName = "PopoverArrow";

},{"./chunk-Z3POGKNI.mjs":"cRajg","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3DBf4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverBody", ()=>PopoverBody);
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover-body.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var PopoverBody = (0, _system.forwardRef)(function PopoverBody2(props, ref) {
    const { getBodyProps } = (0, _chunkZ3POGKNIMjs.usePopoverContext)();
    const styles = (0, _chunkZ3POGKNIMjs.usePopoverStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...getBodyProps(props, ref),
        className: (0, _sharedUtils.cx)("chakra-popover__body", props.className),
        __css: styles.body
    });
});
PopoverBody.displayName = "PopoverBody";

},{"./chunk-Z3POGKNI.mjs":"cRajg","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9uxm8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverCloseButton", ()=>PopoverCloseButton);
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover-close-button.tsx
var _closeButton = require("@chakra-ui/close-button");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var PopoverCloseButton = (0, _system.forwardRef)(function PopoverCloseButton2(props, ref) {
    const { onClose } = (0, _chunkZ3POGKNIMjs.usePopoverContext)();
    const styles = (0, _chunkZ3POGKNIMjs.usePopoverStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _closeButton.CloseButton), {
        size: "sm",
        onClick: onClose,
        className: (0, _sharedUtils.cx)("chakra-popover__close-btn", props.className),
        __css: styles.closeButton,
        ref,
        ...props
    });
});
PopoverCloseButton.displayName = "PopoverCloseButton";

},{"./chunk-Z3POGKNI.mjs":"cRajg","@chakra-ui/close-button":"gSDF2","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jFOh2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverContent", ()=>PopoverContent);
var _chunkF4GPNG57Mjs = require("./chunk-F4GPNG57.mjs");
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover-content.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var PopoverContent = (0, _system.forwardRef)(function PopoverContent2(props, ref) {
    const { rootProps, motionProps, ...contentProps } = props;
    const { getPopoverProps, getPopoverPositionerProps, onAnimationComplete } = (0, _chunkZ3POGKNIMjs.usePopoverContext)();
    const styles = (0, _chunkZ3POGKNIMjs.usePopoverStyles)();
    const contentStyles = {
        position: "relative",
        display: "flex",
        flexDirection: "column",
        ...styles.content
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...getPopoverPositionerProps(rootProps),
        __css: styles.popper,
        className: "chakra-popover__popper",
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkF4GPNG57Mjs.PopoverTransition), {
            ...motionProps,
            ...getPopoverProps(contentProps, ref),
            onAnimationComplete: (0, _sharedUtils.callAll)(onAnimationComplete, contentProps.onAnimationComplete),
            className: (0, _sharedUtils.cx)("chakra-popover__content", props.className),
            __css: contentStyles
        })
    });
});
PopoverContent.displayName = "PopoverContent";

},{"./chunk-F4GPNG57.mjs":"4IRXi","./chunk-Z3POGKNI.mjs":"cRajg","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4IRXi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverTransition", ()=>PopoverTransition);
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover-transition.tsx
var _system = require("@chakra-ui/system");
var _framerMotion = require("framer-motion");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function mergeVariants(variants) {
    if (!variants) return;
    return {
        enter: {
            ...variants.enter,
            visibility: "visible"
        },
        exit: {
            ...variants.exit,
            transitionEnd: {
                visibility: "hidden"
            }
        }
    };
}
var scaleFade = {
    exit: {
        opacity: 0,
        scale: 0.95,
        transition: {
            duration: 0.1,
            ease: [
                0.4,
                0,
                1,
                1
            ]
        }
    },
    enter: {
        scale: 1,
        opacity: 1,
        transition: {
            duration: 0.15,
            ease: [
                0,
                0,
                0.2,
                1
            ]
        }
    }
};
var MotionSection = (0, _system.chakra)((0, _framerMotion.motion).section);
var PopoverTransition = (0, _system.forwardRef)(function PopoverTransition2(props, ref) {
    const { variants = scaleFade, ...rest } = props;
    const { isOpen } = (0, _chunkZ3POGKNIMjs.usePopoverContext)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(MotionSection, {
        ref,
        variants: mergeVariants(variants),
        initial: false,
        animate: isOpen ? "enter" : "exit",
        ...rest
    });
});
PopoverTransition.displayName = "PopoverTransition";

},{"./chunk-Z3POGKNI.mjs":"cRajg","@chakra-ui/system":"jpRoG","framer-motion":"5bZBB","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1x3QA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopoverFooter", ()=>PopoverFooter);
var _chunkZ3POGKNIMjs = require("./chunk-Z3POGKNI.mjs");
// src/popover-footer.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function PopoverFooter(props) {
    const styles = (0, _chunkZ3POGKNIMjs.usePopoverStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).footer, {
        ...props,
        className: (0, _sharedUtils.cx)("chakra-popover__footer", props.className),
        __css: styles.footer
    });
}
PopoverFooter.displayName = "PopoverFooter";

},{"./chunk-Z3POGKNI.mjs":"cRajg","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lSA07":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CircularProgress", ()=>(0, _chunkQ6Q7I7E5Mjs.CircularProgress));
parcelHelpers.export(exports, "CircularProgressLabel", ()=>(0, _chunkQQ2FLD7AMjs.CircularProgressLabel));
parcelHelpers.export(exports, "Progress", ()=>(0, _chunkBZDCPGYFMjs.Progress));
parcelHelpers.export(exports, "ProgressLabel", ()=>(0, _chunkTDPOTVYRMjs.ProgressLabel));
parcelHelpers.export(exports, "useProgressStyles", ()=>(0, _chunkBZDCPGYFMjs.useProgressStyles));
var _chunkQQ2FLD7AMjs = require("./chunk-QQ2FLD7A.mjs");
var _chunkQ6Q7I7E5Mjs = require("./chunk-Q6Q7I7E5.mjs");
var _chunk7CG3L4JYMjs = require("./chunk-7CG3L4JY.mjs");
var _chunkTDPOTVYRMjs = require("./chunk-TDPOTVYR.mjs");
var _chunkBZDCPGYFMjs = require("./chunk-BZDCPGYF.mjs");
var _chunkEMKK5VRDMjs = require("./chunk-EMKK5VRD.mjs");
var _chunkTXZFUZNGMjs = require("./chunk-TXZFUZNG.mjs");
"use client";

},{"./chunk-QQ2FLD7A.mjs":"9ZW2r","./chunk-Q6Q7I7E5.mjs":"4ZpBC","./chunk-7CG3L4JY.mjs":"jf9VJ","./chunk-TDPOTVYR.mjs":"h64u8","./chunk-BZDCPGYF.mjs":"dgrKv","./chunk-EMKK5VRD.mjs":"gyb1M","./chunk-TXZFUZNG.mjs":"5AWVo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ZW2r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CircularProgressLabel", ()=>CircularProgressLabel);
// src/circular-progress-label.tsx
var _system = require("@chakra-ui/system");
"use client";
var CircularProgressLabel = (0, _system.chakra)("div", {
    baseStyle: {
        fontSize: "0.24em",
        top: "50%",
        left: "50%",
        width: "100%",
        textAlign: "center",
        position: "absolute",
        transform: "translate(-50%, -50%)"
    }
});
CircularProgressLabel.displayName = "CircularProgressLabel";

},{"@chakra-ui/system":"jpRoG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ZpBC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CircularProgress", ()=>CircularProgress);
var _chunk7CG3L4JYMjs = require("./chunk-7CG3L4JY.mjs");
var _chunkEMKK5VRDMjs = require("./chunk-EMKK5VRD.mjs");
var _chunkTXZFUZNGMjs = require("./chunk-TXZFUZNG.mjs");
// src/circular-progress.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var CircularProgress = (0, _system.forwardRef)((props, ref)=>{
    var _a;
    const { size = "48px", max = 100, min = 0, valueText, getValueText, value, capIsRound, children, thickness = "10px", color = "#0078d4", trackColor = "#edebe9", isIndeterminate, ...rest } = props;
    const progress = (0, _chunkTXZFUZNGMjs.getProgressProps)({
        min,
        max,
        value,
        valueText,
        getValueText,
        isIndeterminate
    });
    const determinant = isIndeterminate ? void 0 : ((_a = progress.percent) != null ? _a : 0) * 2.64;
    const strokeDasharray = determinant == null ? void 0 : `${determinant} ${264 - determinant}`;
    const indicatorProps = isIndeterminate ? {
        css: {
            animation: `${0, _chunkTXZFUZNGMjs.spin} 1.5s linear infinite`
        }
    } : {
        strokeDashoffset: 66,
        strokeDasharray,
        transitionProperty: "stroke-dasharray, stroke",
        transitionDuration: "0.6s",
        transitionTimingFunction: "ease"
    };
    const rootStyles = {
        display: "inline-block",
        position: "relative",
        verticalAlign: "middle",
        fontSize: size
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).div, {
        ref,
        className: "chakra-progress",
        ...progress.bind,
        ...rest,
        __css: rootStyles,
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _chunkEMKK5VRDMjs.Shape), {
                size,
                isIndeterminate,
                children: [
                    /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk7CG3L4JYMjs.Circle), {
                        stroke: trackColor,
                        strokeWidth: thickness,
                        className: "chakra-progress__track"
                    }),
                    /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk7CG3L4JYMjs.Circle), {
                        stroke: color,
                        strokeWidth: thickness,
                        className: "chakra-progress__indicator",
                        strokeLinecap: capIsRound ? "round" : void 0,
                        opacity: progress.value === 0 && !isIndeterminate ? 0 : void 0,
                        ...indicatorProps
                    })
                ]
            }),
            children
        ]
    });
});
CircularProgress.displayName = "CircularProgress";

},{"./chunk-7CG3L4JY.mjs":"jf9VJ","./chunk-EMKK5VRD.mjs":"gyb1M","./chunk-TXZFUZNG.mjs":"5AWVo","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jf9VJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Circle", ()=>Circle);
// src/circle.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Circle = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).circle, {
        cx: 50,
        cy: 50,
        r: 42,
        fill: "transparent",
        ...props
    });
Circle.displayName = "Circle";

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gyb1M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Shape", ()=>Shape);
var _chunkTXZFUZNGMjs = require("./chunk-TXZFUZNG.mjs");
// src/shape.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Shape = (props)=>{
    const { size, isIndeterminate, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).svg, {
        viewBox: "0 0 100 100",
        __css: {
            width: size,
            height: size,
            animation: isIndeterminate ? `${0, _chunkTXZFUZNGMjs.rotate} 2s linear infinite` : void 0
        },
        ...rest
    });
};
Shape.displayName = "Shape";

},{"./chunk-TXZFUZNG.mjs":"5AWVo","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5AWVo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spin", ()=>spin);
parcelHelpers.export(exports, "rotate", ()=>rotate);
parcelHelpers.export(exports, "progress", ()=>progress);
parcelHelpers.export(exports, "stripe", ()=>stripe);
parcelHelpers.export(exports, "getProgressProps", ()=>getProgressProps);
// src/progress.utils.tsx
var _system = require("@chakra-ui/system");
"use client";
function valueToPercent(value, min, max) {
    return (value - min) * 100 / (max - min);
}
var spin = (0, _system.keyframes)({
    "0%": {
        strokeDasharray: "1, 400",
        strokeDashoffset: "0"
    },
    "50%": {
        strokeDasharray: "400, 400",
        strokeDashoffset: "-100"
    },
    "100%": {
        strokeDasharray: "400, 400",
        strokeDashoffset: "-260"
    }
});
var rotate = (0, _system.keyframes)({
    "0%": {
        transform: "rotate(0deg)"
    },
    "100%": {
        transform: "rotate(360deg)"
    }
});
var progress = (0, _system.keyframes)({
    "0%": {
        left: "-40%"
    },
    "100%": {
        left: "100%"
    }
});
var stripe = (0, _system.keyframes)({
    from: {
        backgroundPosition: "1rem 0"
    },
    to: {
        backgroundPosition: "0 0"
    }
});
function getProgressProps(options) {
    const { value = 0, min, max, valueText, getValueText, isIndeterminate, role = "progressbar" } = options;
    const percent = valueToPercent(value, min, max);
    const getAriaValueText = ()=>{
        if (value == null) return void 0;
        return typeof getValueText === "function" ? getValueText(value, percent) : valueText;
    };
    return {
        bind: {
            "data-indeterminate": isIndeterminate ? "" : void 0,
            "aria-valuemax": max,
            "aria-valuemin": min,
            "aria-valuenow": isIndeterminate ? void 0 : value,
            "aria-valuetext": getAriaValueText(),
            role
        },
        percent,
        value
    };
}

},{"@chakra-ui/system":"jpRoG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h64u8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProgressLabel", ()=>ProgressLabel);
var _chunkBZDCPGYFMjs = require("./chunk-BZDCPGYF.mjs");
// src/progress-label.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var ProgressLabel = (props)=>{
    const styles = (0, _chunkBZDCPGYFMjs.useProgressStyles)();
    const labelStyles = {
        top: "50%",
        left: "50%",
        width: "100%",
        textAlign: "center",
        position: "absolute",
        transform: "translate(-50%, -50%)",
        ...styles.label
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...props,
        __css: labelStyles
    });
};
ProgressLabel.displayName = "ProgressLabel";

},{"./chunk-BZDCPGYF.mjs":"dgrKv","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dgrKv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useProgressStyles", ()=>useProgressStyles);
parcelHelpers.export(exports, "Progress", ()=>Progress);
var _chunkTXZFUZNGMjs = require("./chunk-TXZFUZNG.mjs");
// src/progress.tsx
var _system = require("@chakra-ui/system");
var _reactContext = require("@chakra-ui/react-context");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [ProgressStylesProvider, useProgressStyles] = (0, _reactContext.createContext)({
    name: `ProgressStylesContext`,
    errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Progress />" `
});
var ProgressFilledTrack = (0, _system.forwardRef)((props, ref)=>{
    const { min, max, value, isIndeterminate, role, ...rest } = props;
    const progress2 = (0, _chunkTXZFUZNGMjs.getProgressProps)({
        value,
        min,
        max,
        isIndeterminate,
        role
    });
    const styles = useProgressStyles();
    const trackStyles = {
        height: "100%",
        ...styles.filledTrack
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        style: {
            width: `${progress2.percent}%`,
            ...rest.style
        },
        ...progress2.bind,
        ...rest,
        __css: trackStyles
    });
});
var Progress = (0, _system.forwardRef)((props, ref)=>{
    var _a;
    const { value, min = 0, max = 100, hasStripe, isAnimated, children, borderRadius: propBorderRadius, isIndeterminate, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-valuetext": ariaValueText, title, role, ...rest } = (0, _system.omitThemingProps)(props);
    const styles = (0, _system.useMultiStyleConfig)("Progress", props);
    const borderRadius = propBorderRadius != null ? propBorderRadius : (_a = styles.track) == null ? void 0 : _a.borderRadius;
    const stripeAnimation = {
        animation: `${(0, _chunkTXZFUZNGMjs.stripe)} 1s linear infinite`
    };
    const shouldAddStripe = !isIndeterminate && hasStripe;
    const shouldAnimateStripe = shouldAddStripe && isAnimated;
    const css = {
        ...shouldAnimateStripe && stripeAnimation,
        ...isIndeterminate && {
            position: "absolute",
            willChange: "left",
            minWidth: "50%",
            animation: `${0, _chunkTXZFUZNGMjs.progress} 1s ease infinite normal none running`
        }
    };
    const trackStyles = {
        overflow: "hidden",
        position: "relative",
        ...styles.track
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        borderRadius,
        __css: trackStyles,
        ...rest,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(ProgressStylesProvider, {
            value: styles,
            children: [
                /* @__PURE__ */ (0, _jsxRuntime.jsx)(ProgressFilledTrack, {
                    "aria-label": ariaLabel,
                    "aria-labelledby": ariaLabelledBy,
                    "aria-valuetext": ariaValueText,
                    min,
                    max,
                    value,
                    isIndeterminate,
                    css,
                    borderRadius,
                    title,
                    role
                }),
                children
            ]
        })
    });
});
Progress.displayName = "Progress";

},{"./chunk-TXZFUZNG.mjs":"5AWVo","@chakra-ui/system":"jpRoG","@chakra-ui/react-context":"7RVZP","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cb6DD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Radio", ()=>(0, _chunkRDF2AYIDMjs.Radio));
parcelHelpers.export(exports, "RadioGroup", ()=>(0, _chunkFESYGSQTMjs.RadioGroup));
parcelHelpers.export(exports, "useRadio", ()=>(0, _chunk2WQJ2JCVMjs.useRadio));
parcelHelpers.export(exports, "useRadioGroup", ()=>(0, _chunkQ56JAA3UMjs.useRadioGroup));
parcelHelpers.export(exports, "useRadioGroupContext", ()=>(0, _chunkFESYGSQTMjs.useRadioGroupContext));
var _chunkRDF2AYIDMjs = require("./chunk-RDF2AYID.mjs");
var _chunk2WQJ2JCVMjs = require("./chunk-2WQJ2JCV.mjs");
var _chunkFESYGSQTMjs = require("./chunk-FESYGSQT.mjs");
var _chunkQ56JAA3UMjs = require("./chunk-Q56JAA3U.mjs");
"use client";

},{"./chunk-RDF2AYID.mjs":"gg7rc","./chunk-2WQJ2JCV.mjs":"k92TA","./chunk-FESYGSQT.mjs":"6HQcO","./chunk-Q56JAA3U.mjs":"cfStY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gg7rc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Radio", ()=>Radio);
var _chunk2WQJ2JCVMjs = require("./chunk-2WQJ2JCV.mjs");
var _chunkFESYGSQTMjs = require("./chunk-FESYGSQT.mjs");
// src/radio.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
// src/radio.tsx
var _jsxRuntime = require("react/jsx-runtime");
"use client";
// ../../utilities/object-utils/src/split.ts
function split(object, keys) {
    const picked = {};
    const omitted = {};
    for (const [key, value] of Object.entries(object))if (keys.includes(key)) picked[key] = value;
    else omitted[key] = value;
    return [
        picked,
        omitted
    ];
}
var Radio = (0, _system.forwardRef)((props, ref)=>{
    var _a;
    const group = (0, _chunkFESYGSQTMjs.useRadioGroupContext)();
    const { onChange: onChangeProp, value: valueProp } = props;
    const styles = (0, _system.useMultiStyleConfig)("Radio", {
        ...group,
        ...props
    });
    const ownProps = (0, _system.omitThemingProps)(props);
    const { spacing = "0.5rem", children, isDisabled = group == null ? void 0 : group.isDisabled, isFocusable = group == null ? void 0 : group.isFocusable, inputProps: htmlInputProps, ...rest } = ownProps;
    let isChecked = props.isChecked;
    if ((group == null ? void 0 : group.value) != null && valueProp != null) isChecked = group.value === valueProp;
    let onChange = onChangeProp;
    if ((group == null ? void 0 : group.onChange) && valueProp != null) onChange = (0, _sharedUtils.callAll)(group.onChange, onChangeProp);
    const name = (_a = props == null ? void 0 : props.name) != null ? _a : group == null ? void 0 : group.name;
    const { getInputProps, getCheckboxProps, getLabelProps, getRootProps, htmlProps } = (0, _chunk2WQJ2JCVMjs.useRadio)({
        ...rest,
        isChecked,
        isFocusable,
        isDisabled,
        onChange,
        name
    });
    const [layoutProps, otherProps] = split(htmlProps, (0, _system.layoutPropNames));
    const checkboxProps = getCheckboxProps(otherProps);
    const inputProps = getInputProps(htmlInputProps, ref);
    const labelProps = getLabelProps();
    const rootProps = Object.assign({}, layoutProps, getRootProps());
    const rootStyles = {
        display: "inline-flex",
        alignItems: "center",
        verticalAlign: "top",
        cursor: "pointer",
        position: "relative",
        ...styles.container
    };
    const checkboxStyles = {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: 0,
        ...styles.control
    };
    const labelStyles = {
        userSelect: "none",
        marginStart: spacing,
        ...styles.label
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).label, {
        className: "chakra-radio",
        ...rootProps,
        __css: rootStyles,
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsx)("input", {
                className: "chakra-radio__input",
                ...inputProps
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                className: "chakra-radio__control",
                ...checkboxProps,
                __css: checkboxStyles
            }),
            children && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                className: "chakra-radio__label",
                ...labelProps,
                __css: labelStyles,
                children
            })
        ]
    });
});
Radio.displayName = "Radio";

},{"./chunk-2WQJ2JCV.mjs":"k92TA","./chunk-FESYGSQT.mjs":"6HQcO","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k92TA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useRadio", ()=>useRadio);
var _chunkFESYGSQTMjs = require("./chunk-FESYGSQT.mjs");
// src/use-radio.ts
var _formControl = require("@chakra-ui/form-control");
var _sharedUtils = require("@chakra-ui/shared-utils");
// src/use-radio.ts
var _focusVisible = require("@zag-js/focus-visible");
var _react = require("react");
"use client";
// ../visually-hidden/src/visually-hidden.style.ts
var visuallyHiddenStyle = {
    border: "0",
    clip: "rect(0, 0, 0, 0)",
    height: "1px",
    width: "1px",
    margin: "-1px",
    padding: "0",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
};
function useRadio(props = {}) {
    const { defaultChecked, isChecked: isCheckedProp, isFocusable, isDisabled: isDisabledProp, isReadOnly: isReadOnlyProp, isRequired: isRequiredProp, onChange, isInvalid: isInvalidProp, name, value, id: idProp, "data-radiogroup": dataRadioGroup, "aria-describedby": ariaDescribedBy, ...htmlProps } = props;
    const uuid = `radio-${(0, _react.useId)()}`;
    const formControl = (0, _formControl.useFormControlContext)();
    const group = (0, _chunkFESYGSQTMjs.useRadioGroupContext)();
    const isWithinRadioGroup = !!group || !!dataRadioGroup;
    const isWithinFormControl = !!formControl;
    let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;
    id = idProp != null ? idProp : id;
    const isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;
    const isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;
    const isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;
    const isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;
    const [isFocusVisible, setIsFocusVisible] = (0, _react.useState)(false);
    const [isFocused, setFocused] = (0, _react.useState)(false);
    const [isHovered, setHovering] = (0, _react.useState)(false);
    const [isActive, setActive] = (0, _react.useState)(false);
    const [isCheckedState, setChecked] = (0, _react.useState)(Boolean(defaultChecked));
    const isControlled = typeof isCheckedProp !== "undefined";
    const isChecked = isControlled ? isCheckedProp : isCheckedState;
    (0, _react.useEffect)(()=>{
        return (0, _focusVisible.trackFocusVisible)(setIsFocusVisible);
    }, []);
    const handleChange = (0, _react.useCallback)((event)=>{
        if (isReadOnly || isDisabled) {
            event.preventDefault();
            return;
        }
        if (!isControlled) setChecked(event.target.checked);
        onChange == null || onChange(event);
    }, [
        isControlled,
        isDisabled,
        isReadOnly,
        onChange
    ]);
    const onKeyDown = (0, _react.useCallback)((event)=>{
        if (event.key === " ") setActive(true);
    }, [
        setActive
    ]);
    const onKeyUp = (0, _react.useCallback)((event)=>{
        if (event.key === " ") setActive(false);
    }, [
        setActive
    ]);
    const getRadioProps = (0, _react.useCallback)((props2 = {}, ref = null)=>({
            ...props2,
            ref,
            "data-active": (0, _sharedUtils.dataAttr)(isActive),
            "data-hover": (0, _sharedUtils.dataAttr)(isHovered),
            "data-disabled": (0, _sharedUtils.dataAttr)(isDisabled),
            "data-invalid": (0, _sharedUtils.dataAttr)(isInvalid),
            "data-checked": (0, _sharedUtils.dataAttr)(isChecked),
            "data-focus": (0, _sharedUtils.dataAttr)(isFocused),
            "data-focus-visible": (0, _sharedUtils.dataAttr)(isFocused && isFocusVisible),
            "data-readonly": (0, _sharedUtils.dataAttr)(isReadOnly),
            "aria-hidden": true,
            onMouseDown: (0, _sharedUtils.callAllHandlers)(props2.onMouseDown, ()=>setActive(true)),
            onMouseUp: (0, _sharedUtils.callAllHandlers)(props2.onMouseUp, ()=>setActive(false)),
            onMouseEnter: (0, _sharedUtils.callAllHandlers)(props2.onMouseEnter, ()=>setHovering(true)),
            onMouseLeave: (0, _sharedUtils.callAllHandlers)(props2.onMouseLeave, ()=>setHovering(false))
        }), [
        isActive,
        isHovered,
        isDisabled,
        isInvalid,
        isChecked,
        isFocused,
        isReadOnly,
        isFocusVisible
    ]);
    const { onFocus, onBlur } = formControl != null ? formControl : {};
    const getInputProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        const trulyDisabled = isDisabled && !isFocusable;
        return {
            ...props2,
            id,
            ref,
            type: "radio",
            name,
            value,
            onChange: (0, _sharedUtils.callAllHandlers)(props2.onChange, handleChange),
            onBlur: (0, _sharedUtils.callAllHandlers)(onBlur, props2.onBlur, ()=>setFocused(false)),
            onFocus: (0, _sharedUtils.callAllHandlers)(onFocus, props2.onFocus, ()=>setFocused(true)),
            onKeyDown: (0, _sharedUtils.callAllHandlers)(props2.onKeyDown, onKeyDown),
            onKeyUp: (0, _sharedUtils.callAllHandlers)(props2.onKeyUp, onKeyUp),
            checked: isChecked,
            disabled: trulyDisabled,
            readOnly: isReadOnly,
            required: isRequired,
            "aria-invalid": (0, _sharedUtils.ariaAttr)(isInvalid),
            "aria-disabled": (0, _sharedUtils.ariaAttr)(trulyDisabled),
            "aria-required": (0, _sharedUtils.ariaAttr)(isRequired),
            "data-readonly": (0, _sharedUtils.dataAttr)(isReadOnly),
            "aria-describedby": ariaDescribedBy,
            style: visuallyHiddenStyle
        };
    }, [
        isDisabled,
        isFocusable,
        id,
        name,
        value,
        handleChange,
        onBlur,
        onFocus,
        onKeyDown,
        onKeyUp,
        isChecked,
        isReadOnly,
        isRequired,
        isInvalid,
        ariaDescribedBy
    ]);
    const getLabelProps = (props2 = {}, ref = null)=>({
            ...props2,
            ref,
            onMouseDown: (0, _sharedUtils.callAllHandlers)(props2.onMouseDown, stopEvent),
            "data-disabled": (0, _sharedUtils.dataAttr)(isDisabled),
            "data-checked": (0, _sharedUtils.dataAttr)(isChecked),
            "data-invalid": (0, _sharedUtils.dataAttr)(isInvalid)
        });
    const getRootProps = (props2, ref = null)=>({
            ...props2,
            ref,
            "data-disabled": (0, _sharedUtils.dataAttr)(isDisabled),
            "data-checked": (0, _sharedUtils.dataAttr)(isChecked),
            "data-invalid": (0, _sharedUtils.dataAttr)(isInvalid)
        });
    const state = {
        isInvalid,
        isFocused,
        isChecked,
        isActive,
        isHovered,
        isDisabled,
        isReadOnly,
        isRequired
    };
    return {
        state,
        /**
     * @deprecated - use `getRadioProps` instead
     */ getCheckboxProps: getRadioProps,
        getRadioProps,
        getInputProps,
        getLabelProps,
        getRootProps,
        htmlProps
    };
}
function stopEvent(event) {
    event.preventDefault();
    event.stopPropagation();
}

},{"./chunk-FESYGSQT.mjs":"6HQcO","@chakra-ui/form-control":"5Ic17","@chakra-ui/shared-utils":"h33Zu","@zag-js/focus-visible":"8j8VG","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HQcO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useRadioGroupContext", ()=>useRadioGroupContext);
parcelHelpers.export(exports, "RadioGroup", ()=>RadioGroup);
var _chunkQ56JAA3UMjs = require("./chunk-Q56JAA3U.mjs");
// src/radio-group.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _reactContext = require("@chakra-ui/react-context");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [RadioGroupProvider, useRadioGroupContext] = (0, _reactContext.createContext)({
    name: "RadioGroupContext",
    strict: false
});
var RadioGroup = (0, _system.forwardRef)((props, ref)=>{
    const { colorScheme, size, variant, children, className, isDisabled, isFocusable, ...rest } = props;
    const { value, onChange, getRootProps, name, htmlProps } = (0, _chunkQ56JAA3UMjs.useRadioGroup)(rest);
    const group = (0, _react.useMemo)(()=>({
            name,
            size,
            onChange,
            colorScheme,
            value,
            variant,
            isDisabled,
            isFocusable
        }), [
        name,
        size,
        onChange,
        colorScheme,
        value,
        variant,
        isDisabled,
        isFocusable
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(RadioGroupProvider, {
        value: group,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            ...getRootProps(htmlProps, ref),
            className: (0, _sharedUtils.cx)("chakra-radio-group", className),
            children
        })
    });
});
RadioGroup.displayName = "RadioGroup";

},{"./chunk-Q56JAA3U.mjs":"cfStY","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/react-context":"7RVZP","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cfStY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useRadioGroup", ()=>useRadioGroup);
// src/use-radio-group.ts
var _sharedUtils = require("@chakra-ui/shared-utils");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _react = require("react");
"use client";
function isInputEvent(value) {
    return value && (0, _sharedUtils.isObject)(value) && (0, _sharedUtils.isObject)(value.target);
}
function useRadioGroup(props = {}) {
    const { onChange: onChangeProp, value: valueProp, defaultValue, name: nameProp, isDisabled, isFocusable, isNative, ...htmlProps } = props;
    const [valueState, setValue] = (0, _react.useState)(defaultValue || "");
    const isControlled = typeof valueProp !== "undefined";
    const value = isControlled ? valueProp : valueState;
    const ref = (0, _react.useRef)(null);
    const focus = (0, _react.useCallback)(()=>{
        const rootNode = ref.current;
        if (!rootNode) return;
        let query = `input:not(:disabled):checked`;
        const firstEnabledAndCheckedInput = rootNode.querySelector(query);
        if (firstEnabledAndCheckedInput) {
            firstEnabledAndCheckedInput.focus();
            return;
        }
        query = `input:not(:disabled)`;
        const firstEnabledInput = rootNode.querySelector(query);
        firstEnabledInput == null || firstEnabledInput.focus();
    }, []);
    const uuid = (0, _react.useId)();
    const fallbackName = `radio-${uuid}`;
    const name = nameProp || fallbackName;
    const onChange = (0, _react.useCallback)((eventOrValue)=>{
        const nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
        if (!isControlled) setValue(nextValue);
        onChangeProp == null || onChangeProp(String(nextValue));
    }, [
        onChangeProp,
        isControlled
    ]);
    const getRootProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>({
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(forwardedRef, ref),
            role: "radiogroup"
        }), []);
    const getRadioProps = (0, _react.useCallback)((props2 = {}, ref2 = null)=>{
        const checkedKey = isNative ? "checked" : "isChecked";
        return {
            ...props2,
            ref: ref2,
            name,
            [checkedKey]: value != null ? props2.value === value : void 0,
            onChange (event) {
                onChange(event);
            },
            "data-radiogroup": true
        };
    }, [
        isNative,
        name,
        onChange,
        value
    ]);
    return {
        getRootProps,
        getRadioProps,
        name,
        ref,
        focus,
        setValue,
        value,
        onChange,
        isDisabled,
        isFocusable,
        htmlProps
    };
}

},{"@chakra-ui/shared-utils":"h33Zu","@chakra-ui/react-use-merge-refs":"9E5Ql","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5QGPB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Select", ()=>(0, _chunk3RSXBRANMjs.Select));
parcelHelpers.export(exports, "SelectField", ()=>(0, _chunkC6OUXMEDMjs.SelectField));
var _chunk3RSXBRANMjs = require("./chunk-3RSXBRAN.mjs");
var _chunkC6OUXMEDMjs = require("./chunk-C6OUXMED.mjs");
"use client";

},{"./chunk-3RSXBRAN.mjs":"29oI1","./chunk-C6OUXMED.mjs":"lyOfa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"29oI1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Select", ()=>Select);
parcelHelpers.export(exports, "DefaultIcon", ()=>DefaultIcon);
var _chunkC6OUXMEDMjs = require("./chunk-C6OUXMED.mjs");
// src/select.tsx
var _formControl = require("@chakra-ui/form-control");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
// src/select.tsx
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
// ../../utilities/object-utils/src/split.ts
function split(object, keys) {
    const picked = {};
    const omitted = {};
    for (const [key, value] of Object.entries(object))if (keys.includes(key)) picked[key] = value;
    else omitted[key] = value;
    return [
        picked,
        omitted
    ];
}
var Select = (0, _system.forwardRef)((props, ref)=>{
    var _a;
    const styles = (0, _system.useMultiStyleConfig)("Select", props);
    const { rootProps, placeholder, icon, color, height, h, minH, minHeight, iconColor, iconSize, ...rest } = (0, _system.omitThemingProps)(props);
    const [layoutProps, otherProps] = split(rest, (0, _system.layoutPropNames));
    const ownProps = (0, _formControl.useFormControl)(otherProps);
    const rootStyles = {
        width: "100%",
        height: "fit-content",
        position: "relative",
        color
    };
    const fieldStyles = {
        paddingEnd: "2rem",
        ...styles.field,
        _focus: {
            zIndex: "unset",
            ...(_a = styles.field) == null ? void 0 : _a["_focus"]
        }
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).div, {
        className: "chakra-select__wrapper",
        __css: rootStyles,
        ...layoutProps,
        ...rootProps,
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkC6OUXMEDMjs.SelectField), {
                ref,
                height: h != null ? h : height,
                minH: minH != null ? minH : minHeight,
                placeholder,
                ...ownProps,
                __css: fieldStyles,
                children: props.children
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsx)(SelectIcon, {
                "data-disabled": (0, _sharedUtils.dataAttr)(ownProps.disabled),
                ...(iconColor || color) && {
                    color: iconColor || color
                },
                __css: styles.icon,
                ...iconSize && {
                    fontSize: iconSize
                },
                children: icon
            })
        ]
    });
});
Select.displayName = "Select";
var DefaultIcon = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)("svg", {
        viewBox: "0 0 24 24",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
        })
    });
var IconWrapper = (0, _system.chakra)("div", {
    baseStyle: {
        position: "absolute",
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        pointerEvents: "none",
        top: "50%",
        transform: "translateY(-50%)"
    }
});
var SelectIcon = (props)=>{
    const { children = /* @__PURE__ */ (0, _jsxRuntime.jsx)(DefaultIcon, {}), ...rest } = props;
    const clone = (0, _react.cloneElement)(children, {
        role: "presentation",
        className: "chakra-select__icon",
        focusable: false,
        "aria-hidden": true,
        // force icon to adhere to `IconWrapper` styles
        style: {
            width: "1em",
            height: "1em",
            color: "currentColor"
        }
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(IconWrapper, {
        ...rest,
        className: "chakra-select__icon-wrapper",
        children: (0, _react.isValidElement)(children) ? clone : null
    });
};
SelectIcon.displayName = "SelectIcon";

},{"./chunk-C6OUXMED.mjs":"lyOfa","@chakra-ui/form-control":"5Ic17","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lyOfa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectField", ()=>SelectField);
// src/select-field.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var SelectField = (0, _system.forwardRef)(function SelectField2(props, ref) {
    const { children, placeholder, className, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).select, {
        ...rest,
        ref,
        className: (0, _sharedUtils.cx)("chakra-select", className),
        children: [
            placeholder && /* @__PURE__ */ (0, _jsxRuntime.jsx)("option", {
                value: "",
                children: placeholder
            }),
            children
        ]
    });
});
SelectField.displayName = "SelectField";

},{"@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgQ0S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Skeleton", ()=>(0, _chunkGOJLRND4Mjs.Skeleton));
parcelHelpers.export(exports, "SkeletonCircle", ()=>(0, _chunkW7A7QDAKMjs.SkeletonCircle));
parcelHelpers.export(exports, "SkeletonText", ()=>(0, _chunkIYS4KVU2Mjs.SkeletonText));
var _chunkW7A7QDAKMjs = require("./chunk-W7A7QDAK.mjs");
var _chunkIYS4KVU2Mjs = require("./chunk-IYS4KVU2.mjs");
var _chunkGOJLRND4Mjs = require("./chunk-GOJLRND4.mjs");
var _chunkAASO4CLCMjs = require("./chunk-AASO4CLC.mjs");
"use client";

},{"./chunk-W7A7QDAK.mjs":"2fdNU","./chunk-IYS4KVU2.mjs":"lgOr8","./chunk-GOJLRND4.mjs":"7118f","./chunk-AASO4CLC.mjs":"kMTSO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2fdNU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SkeletonCircle", ()=>SkeletonCircle);
var _chunkGOJLRND4Mjs = require("./chunk-GOJLRND4.mjs");
// src/skeleton-circle.tsx
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var SkeletonCircle = ({ size = "2rem", ...rest })=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkGOJLRND4Mjs.Skeleton), {
        borderRadius: "full",
        boxSize: size,
        ...rest
    });
SkeletonCircle.displayName = "SkeletonCircle";

},{"./chunk-GOJLRND4.mjs":"7118f","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7118f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Skeleton", ()=>Skeleton);
var _chunkAASO4CLCMjs = require("./chunk-AASO4CLC.mjs");
// src/skeleton.tsx
var _reactUsePrevious = require("@chakra-ui/react-use-previous");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StyledSkeleton = (0, _system.chakra)("div", {
    baseStyle: {
        boxShadow: "none",
        backgroundClip: "padding-box",
        cursor: "default",
        color: "transparent",
        pointerEvents: "none",
        userSelect: "none",
        "&::before, &::after, *": {
            visibility: "hidden"
        }
    }
});
var $startColor = (0, _system.cssVar)("skeleton-start-color");
var $endColor = (0, _system.cssVar)("skeleton-end-color");
var fade = (0, _system.keyframes)({
    from: {
        opacity: 0
    },
    to: {
        opacity: 1
    }
});
var bgFade = (0, _system.keyframes)({
    from: {
        borderColor: $startColor.reference,
        background: $startColor.reference
    },
    to: {
        borderColor: $endColor.reference,
        background: $endColor.reference
    }
});
var Skeleton = (0, _system.forwardRef)((props, ref)=>{
    const skeletonProps = {
        ...props,
        fadeDuration: typeof props.fadeDuration === "number" ? props.fadeDuration : 0.4,
        speed: typeof props.speed === "number" ? props.speed : 0.8
    };
    const styles = (0, _system.useStyleConfig)("Skeleton", skeletonProps);
    const isFirstRender = (0, _chunkAASO4CLCMjs.useIsFirstRender)();
    const { startColor = "", endColor = "", isLoaded, fadeDuration, speed, className, fitContent, ...rest } = (0, _system.omitThemingProps)(skeletonProps);
    const [startColorVar, endColorVar] = (0, _system.useToken)("colors", [
        startColor,
        endColor
    ]);
    const wasPreviouslyLoaded = (0, _reactUsePrevious.usePrevious)(isLoaded);
    const _className = (0, _sharedUtils.cx)("chakra-skeleton", className);
    const cssVarStyles = {
        ...startColorVar && {
            [$startColor.variable]: startColorVar
        },
        ...endColorVar && {
            [$endColor.variable]: endColorVar
        }
    };
    if (isLoaded) {
        const animation = isFirstRender || wasPreviouslyLoaded ? "none" : `${fade} ${fadeDuration}s`;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            ref,
            className: _className,
            __css: {
                animation
            },
            ...rest
        });
    }
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StyledSkeleton, {
        ref,
        className: _className,
        ...rest,
        __css: {
            width: fitContent ? "fit-content" : void 0,
            ...styles,
            ...cssVarStyles,
            _dark: {
                ...styles["_dark"],
                ...cssVarStyles
            },
            animation: `${speed}s linear infinite alternate ${bgFade}`
        }
    });
});
Skeleton.displayName = "Skeleton";

},{"./chunk-AASO4CLC.mjs":"kMTSO","@chakra-ui/react-use-previous":"irI8b","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kMTSO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useIsFirstRender", ()=>useIsFirstRender);
// src/use-is-first-render.ts
var _react = require("react");
"use client";
function useIsFirstRender() {
    const isFirstRender = (0, _react.useRef)(true);
    (0, _react.useEffect)(()=>{
        isFirstRender.current = false;
    }, []);
    return isFirstRender.current;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"irI8b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePrevious", ()=>usePrevious);
// src/index.ts
var _react = require("react");
"use client";
function usePrevious(value) {
    const ref = (0, _react.useRef)();
    (0, _react.useEffect)(()=>{
        ref.current = value;
    }, [
        value
    ]);
    return ref.current;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgOr8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SkeletonText", ()=>SkeletonText);
var _chunkGOJLRND4Mjs = require("./chunk-GOJLRND4.mjs");
// src/skeleton-text.tsx
var _mediaQuery = require("@chakra-ui/media-query");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function range(count) {
    return Array(count).fill(1).map((_, index)=>index + 1);
}
var defaultNoOfLines = 3;
var SkeletonText = (props)=>{
    const { noOfLines = defaultNoOfLines, spacing = "0.5rem", skeletonHeight = "0.5rem", className, startColor, endColor, isLoaded, fadeDuration, speed, variant, size, colorScheme, children, ...rest } = props;
    const noOfLinesValue = (0, _mediaQuery.useBreakpointValue)(typeof noOfLines === "number" ? [
        noOfLines
    ] : noOfLines) || defaultNoOfLines;
    const numbers = range(noOfLinesValue);
    const getWidth = (index)=>{
        if (noOfLinesValue > 1) return index === numbers.length ? "80%" : "100%";
        return "100%";
    };
    const _className = (0, _sharedUtils.cx)("chakra-skeleton__group", className);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        className: _className,
        ...rest,
        children: numbers.map((number, index)=>{
            if (isLoaded && index > 0) return null;
            const sizeProps = isLoaded ? null : {
                mb: number === numbers.length ? "0" : spacing,
                width: getWidth(number),
                height: skeletonHeight
            };
            return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkGOJLRND4Mjs.Skeleton), {
                startColor,
                endColor,
                isLoaded,
                fadeDuration,
                speed,
                variant,
                size,
                colorScheme,
                ...sizeProps,
                // allows animating the children
                children: index === 0 ? children : void 0
            }, numbers.length.toString() + number);
        })
    });
};
SkeletonText.displayName = "SkeletonText";

},{"./chunk-GOJLRND4.mjs":"7118f","@chakra-ui/media-query":"27uLV","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iNPQV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SkipNavContent", ()=>(0, _chunkIZODFAGUMjs.SkipNavContent));
parcelHelpers.export(exports, "SkipNavLink", ()=>(0, _chunkIZODFAGUMjs.SkipNavLink));
var _chunkIZODFAGUMjs = require("./chunk-IZODFAGU.mjs");
"use client";

},{"./chunk-IZODFAGU.mjs":"3SSOy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3SSOy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SkipNavLink", ()=>SkipNavLink);
parcelHelpers.export(exports, "SkipNavContent", ()=>SkipNavContent);
// src/skip-nav.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var fallbackId = "chakra-skip-nav";
function getStyles(styles) {
    return {
        userSelect: "none",
        border: "0",
        height: "1px",
        width: "1px",
        margin: "-1px",
        padding: "0",
        outline: "0",
        overflow: "hidden",
        position: "absolute",
        clip: "rect(0 0 0 0)",
        ...styles,
        _focus: {
            clip: "auto",
            width: "auto",
            height: "auto",
            ...styles["_focus"]
        }
    };
}
var SkipNavLink = (0, _system.forwardRef)(function SkipNavLink2(props, ref) {
    const styles = (0, _system.useStyleConfig)("SkipLink", props);
    const { id = fallbackId, ...rest } = (0, _system.omitThemingProps)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).a, {
        ...rest,
        ref,
        href: `#${id}`,
        __css: getStyles(styles)
    });
});
SkipNavLink.displayName = "SkipNavLink";
var SkipNavContent = (0, _system.forwardRef)(function SkipNavContent2(props, ref) {
    const { id = fallbackId, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        id,
        tabIndex: -1,
        style: {
            outline: 0
        },
        ...rest
    });
});
SkipNavContent.displayName = "SkipNavContent";

},{"@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bplRf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RangeSlider", ()=>(0, _chunkRD3HQFPGMjs.RangeSlider));
parcelHelpers.export(exports, "RangeSliderFilledTrack", ()=>(0, _chunkRD3HQFPGMjs.RangeSliderFilledTrack));
parcelHelpers.export(exports, "RangeSliderMark", ()=>(0, _chunkRD3HQFPGMjs.RangeSliderMark));
parcelHelpers.export(exports, "RangeSliderProvider", ()=>(0, _chunkRD3HQFPGMjs.RangeSliderProvider));
parcelHelpers.export(exports, "RangeSliderThumb", ()=>(0, _chunkRD3HQFPGMjs.RangeSliderThumb));
parcelHelpers.export(exports, "RangeSliderTrack", ()=>(0, _chunkRD3HQFPGMjs.RangeSliderTrack));
parcelHelpers.export(exports, "Slider", ()=>(0, _chunk6KSEUUNNMjs.Slider));
parcelHelpers.export(exports, "SliderFilledTrack", ()=>(0, _chunk6KSEUUNNMjs.SliderFilledTrack));
parcelHelpers.export(exports, "SliderMark", ()=>(0, _chunk6KSEUUNNMjs.SliderMark));
parcelHelpers.export(exports, "SliderProvider", ()=>(0, _chunk6KSEUUNNMjs.SliderProvider));
parcelHelpers.export(exports, "SliderThumb", ()=>(0, _chunk6KSEUUNNMjs.SliderThumb));
parcelHelpers.export(exports, "SliderTrack", ()=>(0, _chunk6KSEUUNNMjs.SliderTrack));
parcelHelpers.export(exports, "useRangeSlider", ()=>(0, _chunkK3MZ7A5PMjs.useRangeSlider));
parcelHelpers.export(exports, "useRangeSliderContext", ()=>(0, _chunkRD3HQFPGMjs.useRangeSliderContext));
parcelHelpers.export(exports, "useRangeSliderStyles", ()=>(0, _chunkRD3HQFPGMjs.useRangeSliderStyles));
parcelHelpers.export(exports, "useSlider", ()=>(0, _chunk45OCWRAVMjs.useSlider));
parcelHelpers.export(exports, "useSliderContext", ()=>(0, _chunk6KSEUUNNMjs.useSliderContext));
parcelHelpers.export(exports, "useSliderStyles", ()=>(0, _chunk6KSEUUNNMjs.useSliderStyles));
var _chunkRD3HQFPGMjs = require("./chunk-RD3HQFPG.mjs");
var _chunk6KSEUUNNMjs = require("./chunk-6KSEUUNN.mjs");
var _chunkK3MZ7A5PMjs = require("./chunk-K3MZ7A5P.mjs");
var _chunk45OCWRAVMjs = require("./chunk-45OCWRAV.mjs");
var _chunkDX64QB22Mjs = require("./chunk-DX64QB22.mjs");
var _chunkE23N4XENMjs = require("./chunk-E23N4XEN.mjs");
"use client";

},{"./chunk-RD3HQFPG.mjs":"7dsMM","./chunk-6KSEUUNN.mjs":"kpFx2","./chunk-K3MZ7A5P.mjs":"aIK44","./chunk-45OCWRAV.mjs":"hGG8d","./chunk-DX64QB22.mjs":"1oxgk","./chunk-E23N4XEN.mjs":"9EQhM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7dsMM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RangeSliderProvider", ()=>RangeSliderProvider);
parcelHelpers.export(exports, "useRangeSliderContext", ()=>useRangeSliderContext);
parcelHelpers.export(exports, "useRangeSliderStyles", ()=>useRangeSliderStyles);
parcelHelpers.export(exports, "RangeSlider", ()=>RangeSlider);
parcelHelpers.export(exports, "RangeSliderThumb", ()=>RangeSliderThumb);
parcelHelpers.export(exports, "RangeSliderTrack", ()=>RangeSliderTrack);
parcelHelpers.export(exports, "RangeSliderFilledTrack", ()=>RangeSliderFilledTrack);
parcelHelpers.export(exports, "RangeSliderMark", ()=>RangeSliderMark);
var _chunkK3MZ7A5PMjs = require("./chunk-K3MZ7A5P.mjs");
var _chunkDX64QB22Mjs = require("./chunk-DX64QB22.mjs");
// src/range-slider.tsx
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [RangeSliderProvider, useRangeSliderContext] = (0, _reactContext.createContext)({
    name: "SliderContext",
    errorMessage: "useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />"
});
var [RangeSliderStylesProvider, useRangeSliderStyles] = (0, _reactContext.createContext)({
    name: `RangeSliderStylesContext`,
    errorMessage: `useRangeSliderStyles returned is 'undefined'. Seems you forgot to wrap the components in "<RangeSlider />" `
});
var RangeSlider = (0, _system.forwardRef)(function RangeSlider2(props, ref) {
    const sliderProps = {
        orientation: "horizontal",
        ...props
    };
    const styles = (0, _system.useMultiStyleConfig)("Slider", sliderProps);
    const ownProps = (0, _system.omitThemingProps)(sliderProps);
    const { direction } = (0, _system.useTheme)();
    ownProps.direction = direction;
    const { getRootProps, ...context } = (0, _chunkK3MZ7A5PMjs.useRangeSlider)(ownProps);
    const ctx = (0, _react.useMemo)(()=>({
            ...context,
            name: sliderProps.name
        }), [
        context,
        sliderProps.name
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(RangeSliderProvider, {
        value: ctx,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(RangeSliderStylesProvider, {
            value: styles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                ...getRootProps({}, ref),
                className: "chakra-slider",
                __css: styles.container,
                children: sliderProps.children
            })
        })
    });
});
RangeSlider.displayName = "RangeSlider";
var RangeSliderThumb = (0, _system.forwardRef)(function RangeSliderThumb2(props, ref) {
    const { getThumbProps, getInputProps, name } = useRangeSliderContext();
    const styles = useRangeSliderStyles();
    const thumbProps = getThumbProps(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).div, {
        ...thumbProps,
        className: (0, _chunkDX64QB22Mjs.cx)("chakra-slider__thumb", props.className),
        __css: styles.thumb,
        children: [
            thumbProps.children,
            name && /* @__PURE__ */ (0, _jsxRuntime.jsx)("input", {
                ...getInputProps({
                    index: props.index
                })
            })
        ]
    });
});
RangeSliderThumb.displayName = "RangeSliderThumb";
var RangeSliderTrack = (0, _system.forwardRef)(function RangeSliderTrack2(props, ref) {
    const { getTrackProps } = useRangeSliderContext();
    const styles = useRangeSliderStyles();
    const trackProps = getTrackProps(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...trackProps,
        className: (0, _chunkDX64QB22Mjs.cx)("chakra-slider__track", props.className),
        __css: styles.track,
        "data-testid": "chakra-range-slider-track"
    });
});
RangeSliderTrack.displayName = "RangeSliderTrack";
var RangeSliderFilledTrack = (0, _system.forwardRef)(function RangeSliderFilledTrack2(props, ref) {
    const { getInnerTrackProps } = useRangeSliderContext();
    const styles = useRangeSliderStyles();
    const trackProps = getInnerTrackProps(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...trackProps,
        className: "chakra-slider__filled-track",
        __css: styles.filledTrack
    });
});
RangeSliderFilledTrack.displayName = "RangeSliderFilledTrack";
var RangeSliderMark = (0, _system.forwardRef)(function RangeSliderMark2(props, ref) {
    const { getMarkerProps } = useRangeSliderContext();
    const styles = useRangeSliderStyles();
    const markProps = getMarkerProps(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...markProps,
        className: (0, _chunkDX64QB22Mjs.cx)("chakra-slider__marker", props.className),
        __css: styles.mark
    });
});
RangeSliderMark.displayName = "RangeSliderMark";

},{"./chunk-K3MZ7A5P.mjs":"aIK44","./chunk-DX64QB22.mjs":"1oxgk","@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aIK44":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useRangeSlider", ()=>useRangeSlider);
var _chunkDX64QB22Mjs = require("./chunk-DX64QB22.mjs");
var _chunkE23N4XENMjs = require("./chunk-E23N4XEN.mjs");
// src/use-range-slider.ts
var _reactUsePanEvent = require("@chakra-ui/react-use-pan-event");
var _reactUseControllableState = require("@chakra-ui/react-use-controllable-state");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
var _reactUseUpdateEffect = require("@chakra-ui/react-use-update-effect");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _numberUtils = require("@chakra-ui/number-utils");
var _react = require("react");
var _reactUseSize = require("@chakra-ui/react-use-size");
"use client";
function useRangeSlider(props) {
    const { min = 0, max = 100, onChange, value: valueProp, defaultValue, isReversed: isReversedProp, direction = "ltr", orientation = "horizontal", id: idProp, isDisabled, isReadOnly, onChangeStart: onChangeStartProp, onChangeEnd: onChangeEndProp, step = 1, getAriaValueText: getAriaValueTextProp, "aria-valuetext": ariaValueText, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, name, focusThumbOnChange = true, minStepsBetweenThumbs = 0, ...htmlProps } = props;
    const onChangeStart = (0, _reactUseCallbackRef.useCallbackRef)(onChangeStartProp);
    const onChangeEnd = (0, _reactUseCallbackRef.useCallbackRef)(onChangeEndProp);
    const getAriaValueText = (0, _reactUseCallbackRef.useCallbackRef)(getAriaValueTextProp);
    const isReversed = (0, _chunkE23N4XENMjs.getIsReversed)({
        isReversed: isReversedProp,
        direction,
        orientation
    });
    const [valueState, setValue] = (0, _reactUseControllableState.useControllableState)({
        value: valueProp,
        defaultValue: defaultValue != null ? defaultValue : [
            25,
            75
        ],
        onChange
    });
    if (!Array.isArray(valueState)) throw new TypeError(`[range-slider] You passed an invalid value for \`value\` or \`defaultValue\`, expected \`Array\` but got \`${typeof valueState}\``);
    const [isDragging, setDragging] = (0, _react.useState)(false);
    const [isFocused, setFocused] = (0, _react.useState)(false);
    const [activeIndex, setActiveIndex] = (0, _react.useState)(-1);
    const isInteractive = !(isDisabled || isReadOnly);
    const initialValue = (0, _react.useRef)(valueState);
    const value = valueState.map((val)=>(0, _numberUtils.clampValue)(val, min, max));
    const spacing = minStepsBetweenThumbs * step;
    const valueBounds = getValueBounds(value, min, max, spacing);
    const stateRef = (0, _react.useRef)({
        eventSource: null,
        value: [],
        valueBounds: []
    });
    stateRef.current.value = value;
    stateRef.current.valueBounds = valueBounds;
    const reversedValue = value.map((val)=>max - val + min);
    const thumbValues = isReversed ? reversedValue : value;
    const thumbPercents = thumbValues.map((val)=>(0, _numberUtils.valueToPercent)(val, min, max));
    const isVertical = orientation === "vertical";
    const trackRef = (0, _react.useRef)(null);
    const rootRef = (0, _react.useRef)(null);
    const thumbRects = (0, _reactUseSize.useSizes)({
        getNodes () {
            const rootNode = rootRef.current;
            const thumbNodes = rootNode == null ? void 0 : rootNode.querySelectorAll("[role=slider]");
            return thumbNodes ? Array.from(thumbNodes) : [];
        }
    });
    const reactId = (0, _react.useId)();
    const uuid = idProp != null ? idProp : reactId;
    const ids = (0, _chunkE23N4XENMjs.getIds)(uuid);
    const getValueFromPointer = (0, _react.useCallback)((event)=>{
        var _a, _b;
        if (!trackRef.current) return;
        stateRef.current.eventSource = "pointer";
        const rect = trackRef.current.getBoundingClientRect();
        const { clientX, clientY } = (_b = (_a = event.touches) == null ? void 0 : _a[0]) != null ? _b : event;
        const diff = isVertical ? rect.bottom - clientY : clientX - rect.left;
        const length = isVertical ? rect.height : rect.width;
        let percent = diff / length;
        if (isReversed) percent = 1 - percent;
        return (0, _numberUtils.percentToValue)(percent, min, max);
    }, [
        isVertical,
        isReversed,
        max,
        min
    ]);
    const tenSteps = (max - min) / 10;
    const oneStep = step || (max - min) / 100;
    const actions = (0, _react.useMemo)(()=>({
            setValueAtIndex (index, val) {
                if (!isInteractive) return;
                const bounds = stateRef.current.valueBounds[index];
                val = parseFloat((0, _numberUtils.roundValueToStep)(val, bounds.min, oneStep));
                val = (0, _numberUtils.clampValue)(val, bounds.min, bounds.max);
                const next = [
                    ...stateRef.current.value
                ];
                next[index] = val;
                setValue(next);
            },
            setActiveIndex,
            stepUp (index, step2 = oneStep) {
                const valueAtIndex = stateRef.current.value[index];
                const next = isReversed ? valueAtIndex - step2 : valueAtIndex + step2;
                actions.setValueAtIndex(index, next);
            },
            stepDown (index, step2 = oneStep) {
                const valueAtIndex = stateRef.current.value[index];
                const next = isReversed ? valueAtIndex + step2 : valueAtIndex - step2;
                actions.setValueAtIndex(index, next);
            },
            reset () {
                setValue(initialValue.current);
            }
        }), [
        oneStep,
        isReversed,
        setValue,
        isInteractive
    ]);
    const onKeyDown = (0, _react.useCallback)((event)=>{
        const eventKey = event.key;
        const keyMap = {
            ArrowRight: ()=>actions.stepUp(activeIndex),
            ArrowUp: ()=>actions.stepUp(activeIndex),
            ArrowLeft: ()=>actions.stepDown(activeIndex),
            ArrowDown: ()=>actions.stepDown(activeIndex),
            PageUp: ()=>actions.stepUp(activeIndex, tenSteps),
            PageDown: ()=>actions.stepDown(activeIndex, tenSteps),
            Home: ()=>{
                const { min: value2 } = valueBounds[activeIndex];
                actions.setValueAtIndex(activeIndex, value2);
            },
            End: ()=>{
                const { max: value2 } = valueBounds[activeIndex];
                actions.setValueAtIndex(activeIndex, value2);
            }
        };
        const action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            event.stopPropagation();
            action(event);
            stateRef.current.eventSource = "keyboard";
        }
    }, [
        actions,
        activeIndex,
        tenSteps,
        valueBounds
    ]);
    const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } = (0, _react.useMemo)(()=>(0, _chunkE23N4XENMjs.getStyles)({
            isReversed,
            orientation,
            thumbRects,
            thumbPercents
        }), [
        isReversed,
        orientation,
        thumbPercents,
        thumbRects
    ]);
    const focusThumb = (0, _react.useCallback)((index)=>{
        var _a;
        const idx = index != null ? index : activeIndex;
        if (idx !== -1 && focusThumbOnChange) {
            const id = ids.getThumb(idx);
            const thumb = (_a = rootRef.current) == null ? void 0 : _a.ownerDocument.getElementById(id);
            if (thumb) setTimeout(()=>thumb.focus());
        }
    }, [
        focusThumbOnChange,
        activeIndex,
        ids
    ]);
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        if (stateRef.current.eventSource === "keyboard") onChangeEnd == null || onChangeEnd(stateRef.current.value);
    }, [
        value,
        onChangeEnd
    ]);
    const onPanSessionStart = (event)=>{
        const pointValue = getValueFromPointer(event) || 0;
        const distances = stateRef.current.value.map((val)=>Math.abs(val - pointValue));
        const closest = Math.min(...distances);
        let index = distances.indexOf(closest);
        const thumbsAtPosition = distances.filter((distance)=>distance === closest);
        const isThumbStacked = thumbsAtPosition.length > 1;
        if (isThumbStacked && pointValue > stateRef.current.value[index]) index = index + thumbsAtPosition.length - 1;
        setActiveIndex(index);
        actions.setValueAtIndex(index, pointValue);
        focusThumb(index);
    };
    const onPan = (event)=>{
        if (activeIndex == -1) return;
        const pointValue = getValueFromPointer(event) || 0;
        setActiveIndex(activeIndex);
        actions.setValueAtIndex(activeIndex, pointValue);
        focusThumb(activeIndex);
    };
    (0, _reactUsePanEvent.usePanEvent)(rootRef, {
        onPanSessionStart (event) {
            if (!isInteractive) return;
            setDragging(true);
            onPanSessionStart(event);
            onChangeStart == null || onChangeStart(stateRef.current.value);
        },
        onPanSessionEnd () {
            if (!isInteractive) return;
            setDragging(false);
            onChangeEnd == null || onChangeEnd(stateRef.current.value);
        },
        onPan (event) {
            if (!isInteractive) return;
            onPan(event);
        }
    });
    const getRootProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        return {
            ...props2,
            ...htmlProps,
            id: ids.root,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, rootRef),
            tabIndex: -1,
            "aria-disabled": (0, _chunkDX64QB22Mjs.ariaAttr)(isDisabled),
            "data-focused": (0, _chunkDX64QB22Mjs.dataAttr)(isFocused),
            style: {
                ...props2.style,
                ...rootStyle
            }
        };
    }, [
        htmlProps,
        isDisabled,
        isFocused,
        rootStyle,
        ids
    ]);
    const getTrackProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        return {
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, trackRef),
            id: ids.track,
            "data-disabled": (0, _chunkDX64QB22Mjs.dataAttr)(isDisabled),
            style: {
                ...props2.style,
                ...trackStyle
            }
        };
    }, [
        isDisabled,
        trackStyle,
        ids
    ]);
    const getInnerTrackProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        return {
            ...props2,
            ref,
            id: ids.innerTrack,
            style: {
                ...props2.style,
                ...innerTrackStyle
            }
        };
    }, [
        innerTrackStyle,
        ids
    ]);
    const getThumbProps = (0, _react.useCallback)((props2, ref = null)=>{
        var _a;
        const { index, ...rest } = props2;
        const valueAtIndex = value[index];
        if (valueAtIndex == null) throw new TypeError(`[range-slider > thumb] Cannot find value at index \`${index}\`. The \`value\` or \`defaultValue\` length is : ${value.length}`);
        const bounds = valueBounds[index];
        return {
            ...rest,
            ref,
            role: "slider",
            tabIndex: isInteractive ? 0 : void 0,
            id: ids.getThumb(index),
            "data-active": (0, _chunkDX64QB22Mjs.dataAttr)(isDragging && activeIndex === index),
            "aria-valuetext": (_a = getAriaValueText == null ? void 0 : getAriaValueText(valueAtIndex)) != null ? _a : ariaValueText == null ? void 0 : ariaValueText[index],
            "aria-valuemin": bounds.min,
            "aria-valuemax": bounds.max,
            "aria-valuenow": valueAtIndex,
            "aria-orientation": orientation,
            "aria-disabled": (0, _chunkDX64QB22Mjs.ariaAttr)(isDisabled),
            "aria-readonly": (0, _chunkDX64QB22Mjs.ariaAttr)(isReadOnly),
            "aria-label": ariaLabel == null ? void 0 : ariaLabel[index],
            "aria-labelledby": (ariaLabel == null ? void 0 : ariaLabel[index]) ? void 0 : ariaLabelledBy == null ? void 0 : ariaLabelledBy[index],
            style: {
                ...props2.style,
                ...getThumbStyle(index)
            },
            onKeyDown: (0, _chunkDX64QB22Mjs.callAllHandlers)(props2.onKeyDown, onKeyDown),
            onFocus: (0, _chunkDX64QB22Mjs.callAllHandlers)(props2.onFocus, ()=>{
                setFocused(true);
                setActiveIndex(index);
            }),
            onBlur: (0, _chunkDX64QB22Mjs.callAllHandlers)(props2.onBlur, ()=>{
                setFocused(false);
                setActiveIndex(-1);
            })
        };
    }, [
        ids,
        value,
        valueBounds,
        isInteractive,
        isDragging,
        activeIndex,
        getAriaValueText,
        ariaValueText,
        orientation,
        isDisabled,
        isReadOnly,
        ariaLabel,
        ariaLabelledBy,
        getThumbStyle,
        onKeyDown,
        setFocused
    ]);
    const getOutputProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        return {
            ...props2,
            ref,
            id: ids.output,
            htmlFor: value.map((v, i)=>ids.getThumb(i)).join(" "),
            "aria-live": "off"
        };
    }, [
        ids,
        value
    ]);
    const getMarkerProps = (0, _react.useCallback)((props2, ref = null)=>{
        const { value: v, ...rest } = props2;
        const isInRange = !(v < min || v > max);
        const isHighlighted = v >= value[0] && v <= value[value.length - 1];
        let percent = (0, _numberUtils.valueToPercent)(v, min, max);
        percent = isReversed ? 100 - percent : percent;
        const markerStyle = {
            position: "absolute",
            pointerEvents: "none",
            ...(0, _chunkE23N4XENMjs.orient)({
                orientation,
                vertical: {
                    bottom: `${percent}%`
                },
                horizontal: {
                    left: `${percent}%`
                }
            })
        };
        return {
            ...rest,
            ref,
            id: ids.getMarker(props2.value),
            role: "presentation",
            "aria-hidden": true,
            "data-disabled": (0, _chunkDX64QB22Mjs.dataAttr)(isDisabled),
            "data-invalid": (0, _chunkDX64QB22Mjs.dataAttr)(!isInRange),
            "data-highlighted": (0, _chunkDX64QB22Mjs.dataAttr)(isHighlighted),
            style: {
                ...props2.style,
                ...markerStyle
            }
        };
    }, [
        isDisabled,
        isReversed,
        max,
        min,
        orientation,
        value,
        ids
    ]);
    const getInputProps = (0, _react.useCallback)((props2, ref = null)=>{
        const { index, ...rest } = props2;
        return {
            ...rest,
            ref,
            id: ids.getInput(index),
            type: "hidden",
            value: value[index],
            name: Array.isArray(name) ? name[index] : `${name}-${index}`
        };
    }, [
        name,
        value,
        ids
    ]);
    const state = {
        value,
        isFocused,
        isDragging,
        getThumbPercent: (index)=>thumbPercents[index],
        getThumbMinValue: (index)=>valueBounds[index].min,
        getThumbMaxValue: (index)=>valueBounds[index].max
    };
    return {
        state,
        actions,
        getRootProps,
        getTrackProps,
        getInnerTrackProps,
        getThumbProps,
        getMarkerProps,
        getInputProps,
        getOutputProps
    };
}
function getValueBounds(arr, min, max, spacing) {
    return arr.map((v, i)=>{
        const _min = i === 0 ? min : arr[i - 1] + spacing;
        const _max = i === arr.length - 1 ? max : arr[i + 1] - spacing;
        return {
            min: _min,
            max: _max
        };
    });
}

},{"./chunk-DX64QB22.mjs":"1oxgk","./chunk-E23N4XEN.mjs":"9EQhM","@chakra-ui/react-use-pan-event":"3cdfP","@chakra-ui/react-use-controllable-state":"ghlge","@chakra-ui/react-use-callback-ref":"dbPJ9","@chakra-ui/react-use-update-effect":"kfB4Y","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/number-utils":"kC5H9","react":"21dqq","@chakra-ui/react-use-size":"3uyMN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1oxgk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dataAttr", ()=>dataAttr);
parcelHelpers.export(exports, "ariaAttr", ()=>ariaAttr);
parcelHelpers.export(exports, "cx", ()=>cx);
parcelHelpers.export(exports, "callAllHandlers", ()=>callAllHandlers);
"use client";
// ../../legacy/utils/src/dom.ts
var dataAttr = (condition)=>condition ? "" : void 0;
var ariaAttr = (condition)=>condition ? true : void 0;
var cx = (...classNames)=>classNames.filter(Boolean).join(" ");
// ../../legacy/utils/src/function.ts
function callAllHandlers(...fns) {
    return function func(event) {
        fns.some((fn)=>{
            fn == null || fn(event);
            return event == null ? void 0 : event.defaultPrevented;
        });
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9EQhM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getIds", ()=>getIds);
parcelHelpers.export(exports, "orient", ()=>orient);
parcelHelpers.export(exports, "getStyles", ()=>getStyles);
parcelHelpers.export(exports, "getIsReversed", ()=>getIsReversed);
"use client";
// src/slider-utils.ts
function getIds(id) {
    return {
        root: `slider-root-${id}`,
        getThumb: (i)=>`slider-thumb-${id}-${i}`,
        getInput: (i)=>`slider-input-${id}-${i}`,
        track: `slider-track-${id}`,
        innerTrack: `slider-filled-track-${id}`,
        getMarker: (i)=>`slider-marker-${id}-${i}`,
        output: `slider-output-${id}`
    };
}
function orient(options) {
    const { orientation, vertical, horizontal } = options;
    return orientation === "vertical" ? vertical : horizontal;
}
var zeroSize = {
    width: 0,
    height: 0
};
var normalize = (a)=>a || zeroSize;
function getStyles(options) {
    const { orientation, thumbPercents, thumbRects, isReversed } = options;
    const getThumbStyle = (i)=>{
        var _a;
        const rect = (_a = thumbRects[i]) != null ? _a : zeroSize;
        return {
            position: "absolute",
            userSelect: "none",
            WebkitUserSelect: "none",
            MozUserSelect: "none",
            msUserSelect: "none",
            touchAction: "none",
            ...orient({
                orientation,
                vertical: {
                    bottom: `calc(${thumbPercents[i]}% - ${rect.height / 2}px)`
                },
                horizontal: {
                    left: `calc(${thumbPercents[i]}% - ${rect.width / 2}px)`
                }
            })
        };
    };
    const size = orientation === "vertical" ? thumbRects.reduce((a, b)=>normalize(a).height > normalize(b).height ? a : b, zeroSize) : thumbRects.reduce((a, b)=>normalize(a).width > normalize(b).width ? a : b, zeroSize);
    const rootStyle = {
        position: "relative",
        touchAction: "none",
        WebkitTapHighlightColor: "rgba(0,0,0,0)",
        userSelect: "none",
        outline: 0,
        ...orient({
            orientation,
            vertical: size ? {
                paddingLeft: size.width / 2,
                paddingRight: size.width / 2
            } : {},
            horizontal: size ? {
                paddingTop: size.height / 2,
                paddingBottom: size.height / 2
            } : {}
        })
    };
    const trackStyle = {
        position: "absolute",
        ...orient({
            orientation,
            vertical: {
                left: "50%",
                transform: "translateX(-50%)",
                height: "100%"
            },
            horizontal: {
                top: "50%",
                transform: "translateY(-50%)",
                width: "100%"
            }
        })
    };
    const isSingleThumb = thumbPercents.length === 1;
    const fallback = [
        0,
        isReversed ? 100 - thumbPercents[0] : thumbPercents[0]
    ];
    const range = isSingleThumb ? fallback : thumbPercents;
    let start = range[0];
    if (!isSingleThumb && isReversed) start = 100 - start;
    const percent = Math.abs(range[range.length - 1] - range[0]);
    const innerTrackStyle = {
        ...trackStyle,
        ...orient({
            orientation,
            vertical: isReversed ? {
                height: `${percent}%`,
                top: `${start}%`
            } : {
                height: `${percent}%`,
                bottom: `${start}%`
            },
            horizontal: isReversed ? {
                width: `${percent}%`,
                right: `${start}%`
            } : {
                width: `${percent}%`,
                left: `${start}%`
            }
        })
    };
    return {
        trackStyle,
        innerTrackStyle,
        rootStyle,
        getThumbStyle
    };
}
function getIsReversed(options) {
    const { isReversed, direction, orientation } = options;
    if (direction === "ltr" || orientation === "vertical") return isReversed;
    return !isReversed;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3cdfP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePanEvent", ()=>(0, _chunkAQIKOOGAMjs.usePanEvent));
var _chunkAQIKOOGAMjs = require("./chunk-AQIKOOGA.mjs");
var _chunkZ2LY7B4SMjs = require("./chunk-Z2LY7B4S.mjs");
"use client";

},{"./chunk-AQIKOOGA.mjs":"2m9Or","./chunk-Z2LY7B4S.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2m9Or":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePanEvent", ()=>usePanEvent);
var _chunkZ2LY7B4SMjs = require("./chunk-Z2LY7B4S.mjs");
// src/use-pan-event.ts
var _eventUtils = require("@chakra-ui/event-utils");
var _reactUseLatestRef = require("@chakra-ui/react-use-latest-ref");
var _react = require("react");
"use client";
function usePanEvent(ref, options) {
    const { onPan, onPanStart, onPanEnd, onPanSessionStart, onPanSessionEnd, threshold } = options;
    const hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);
    const panSession = (0, _react.useRef)(null);
    const handlersRef = (0, _reactUseLatestRef.useLatestRef)({
        onSessionStart: onPanSessionStart,
        onSessionEnd: onPanSessionEnd,
        onStart: onPanStart,
        onMove: onPan,
        onEnd (event, info) {
            panSession.current = null;
            onPanEnd == null || onPanEnd(event, info);
        }
    });
    (0, _react.useEffect)(()=>{
        var _a;
        (_a = panSession.current) == null || _a.updateHandlers(handlersRef.current);
    });
    (0, _react.useEffect)(()=>{
        const node = ref.current;
        if (!node || !hasPanEvents) return;
        function onPointerDown(event) {
            panSession.current = new (0, _chunkZ2LY7B4SMjs.PanEvent)(event, handlersRef.current, threshold);
        }
        return (0, _eventUtils.addPointerEvent)(node, "pointerdown", onPointerDown);
    }, [
        ref,
        hasPanEvents,
        handlersRef,
        threshold
    ]);
    (0, _react.useEffect)(()=>{
        return ()=>{
            var _a;
            (_a = panSession.current) == null || _a.end();
            panSession.current = null;
        };
    }, []);
}

},{"./chunk-Z2LY7B4S.mjs":"cSS6U","@chakra-ui/event-utils":"hmQyU","@chakra-ui/react-use-latest-ref":"32Sbo","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cSS6U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PanEvent", ()=>PanEvent);
parcelHelpers.export(exports, "distance", ()=>distance);
// src/pan-event.ts
var _eventUtils = require("@chakra-ui/event-utils");
var _framesync = require("framesync");
var _framesyncDefault = parcelHelpers.interopDefault(_framesync);
"use client";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>{
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
};
var PanEvent = class {
    constructor(event, handlers, threshold){
        /**
     * We use this to keep track of the `x` and `y` pan session history
     * as the pan event happens. It helps to calculate the `offset` and `delta`
     */ __publicField(this, "history", []);
        // The pointer event that started the pan session
        __publicField(this, "startEvent", null);
        // The current pointer event for the pan session
        __publicField(this, "lastEvent", null);
        // The current pointer event info for the pan session
        __publicField(this, "lastEventInfo", null);
        __publicField(this, "handlers", {});
        __publicField(this, "removeListeners", ()=>{});
        /**
     * Minimal pan distance required before recognizing the pan.
     * @default "3px"
     */ __publicField(this, "threshold", 3);
        __publicField(this, "win");
        __publicField(this, "updatePoint", ()=>{
            if (!(this.lastEvent && this.lastEventInfo)) return;
            const info = getPanInfo(this.lastEventInfo, this.history);
            const isPanStarted = this.startEvent !== null;
            const isDistancePastThreshold = distance(info.offset, {
                x: 0,
                y: 0
            }) >= this.threshold;
            if (!isPanStarted && !isDistancePastThreshold) return;
            const { timestamp } = (0, _framesync.getFrameData)();
            this.history.push({
                ...info.point,
                timestamp
            });
            const { onStart, onMove } = this.handlers;
            if (!isPanStarted) {
                onStart == null || onStart(this.lastEvent, info);
                this.startEvent = this.lastEvent;
            }
            onMove == null || onMove(this.lastEvent, info);
        });
        __publicField(this, "onPointerMove", (event, info)=>{
            this.lastEvent = event;
            this.lastEventInfo = info;
            (0, _framesyncDefault.default).update(this.updatePoint, true);
        });
        __publicField(this, "onPointerUp", (event, info)=>{
            const panInfo = getPanInfo(info, this.history);
            const { onEnd, onSessionEnd } = this.handlers;
            onSessionEnd == null || onSessionEnd(event, panInfo);
            this.end();
            if (!onEnd || !this.startEvent) return;
            onEnd == null || onEnd(event, panInfo);
        });
        var _a;
        this.win = (_a = event.view) != null ? _a : window;
        if ((0, _eventUtils.isMultiTouchEvent)(event)) return;
        this.handlers = handlers;
        if (threshold) this.threshold = threshold;
        event.stopPropagation();
        event.preventDefault();
        const info = {
            point: (0, _eventUtils.getEventPoint)(event)
        };
        const { timestamp } = (0, _framesync.getFrameData)();
        this.history = [
            {
                ...info.point,
                timestamp
            }
        ];
        const { onSessionStart } = handlers;
        onSessionStart == null || onSessionStart(event, getPanInfo(info, this.history));
        this.removeListeners = pipe((0, _eventUtils.addPointerEvent)(this.win, "pointermove", this.onPointerMove), (0, _eventUtils.addPointerEvent)(this.win, "pointerup", this.onPointerUp), (0, _eventUtils.addPointerEvent)(this.win, "pointercancel", this.onPointerUp));
    }
    updateHandlers(handlers) {
        this.handlers = handlers;
    }
    end() {
        var _a;
        (_a = this.removeListeners) == null || _a.call(this);
        (0, _framesync.cancelSync).update(this.updatePoint);
    }
};
function subtract(a, b) {
    return {
        x: a.x - b.x,
        y: a.y - b.y
    };
}
function getPanInfo(info, history) {
    return {
        point: info.point,
        delta: subtract(info.point, history[history.length - 1]),
        offset: subtract(info.point, history[0]),
        velocity: getVelocity(history, 0.1)
    };
}
var toMilliseconds = (v)=>v * 1e3;
function getVelocity(history, timeDelta) {
    if (history.length < 2) return {
        x: 0,
        y: 0
    };
    let i = history.length - 1;
    let timestampedPoint = null;
    const lastPoint = history[history.length - 1];
    while(i >= 0){
        timestampedPoint = history[i];
        if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) break;
        i--;
    }
    if (!timestampedPoint) return {
        x: 0,
        y: 0
    };
    const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
    if (time === 0) return {
        x: 0,
        y: 0
    };
    const currentVelocity = {
        x: (lastPoint.x - timestampedPoint.x) / time,
        y: (lastPoint.y - timestampedPoint.y) / time
    };
    if (currentVelocity.x === Infinity) currentVelocity.x = 0;
    if (currentVelocity.y === Infinity) currentVelocity.y = 0;
    return currentVelocity;
}
function pipe(...fns) {
    return (v)=>fns.reduce((a, b)=>b(a), v);
}
function distance1D(a, b) {
    return Math.abs(a - b);
}
function isPoint(point) {
    return "x" in point && "y" in point;
}
function distance(a, b) {
    if (typeof a === "number" && typeof b === "number") return distance1D(a, b);
    if (isPoint(a) && isPoint(b)) {
        const xDelta = distance1D(a.x, b.x);
        const yDelta = distance1D(a.y, b.y);
        return Math.sqrt(xDelta ** 2 + yDelta ** 2);
    }
    return 0;
}

},{"@chakra-ui/event-utils":"hmQyU","framesync":"lhfBw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hmQyU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addDomEvent", ()=>(0, _chunk6K7SS4J6Mjs.addDomEvent));
parcelHelpers.export(exports, "addPointerEvent", ()=>(0, _chunkKDLSVIYEMjs.addPointerEvent));
parcelHelpers.export(exports, "getEventPoint", ()=>(0, _chunk6FBKF3LKMjs.getEventPoint));
parcelHelpers.export(exports, "isMouseEvent", ()=>(0, _chunkB7KYFEHMMjs.isMouseEvent));
parcelHelpers.export(exports, "isMultiTouchEvent", ()=>(0, _chunkB7KYFEHMMjs.isMultiTouchEvent));
parcelHelpers.export(exports, "isTouchEvent", ()=>(0, _chunkB7KYFEHMMjs.isTouchEvent));
var _chunkKDLSVIYEMjs = require("./chunk-KDLSVIYE.mjs");
var _chunk6K7SS4J6Mjs = require("./chunk-6K7SS4J6.mjs");
var _chunk6FBKF3LKMjs = require("./chunk-6FBKF3LK.mjs");
var _chunkB7KYFEHMMjs = require("./chunk-B7KYFEHM.mjs");

},{"./chunk-KDLSVIYE.mjs":"k8G5R","./chunk-6K7SS4J6.mjs":false,"./chunk-6FBKF3LK.mjs":"kEZgq","./chunk-B7KYFEHM.mjs":"fpilZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8G5R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addPointerEvent", ()=>addPointerEvent);
var _chunk6K7SS4J6Mjs = require("./chunk-6K7SS4J6.mjs");
var _chunk6FBKF3LKMjs = require("./chunk-6FBKF3LK.mjs");
var _chunkB7KYFEHMMjs = require("./chunk-B7KYFEHM.mjs");
// src/add-pointer-event.ts
function filter(cb) {
    return (event)=>{
        const isMouse = (0, _chunkB7KYFEHMMjs.isMouseEvent)(event);
        if (!isMouse || isMouse && event.button === 0) cb(event);
    };
}
function wrap(cb, filterPrimary = false) {
    function listener(event) {
        cb(event, {
            point: (0, _chunk6FBKF3LKMjs.getEventPoint)(event)
        });
    }
    const fn = filterPrimary ? filter(listener) : listener;
    return fn;
}
function addPointerEvent(target, type, cb, options) {
    return (0, _chunk6K7SS4J6Mjs.addDomEvent)(target, type, wrap(cb, type === "pointerdown"), options);
}

},{"./chunk-6K7SS4J6.mjs":"7pGVR","./chunk-6FBKF3LK.mjs":"kEZgq","./chunk-B7KYFEHM.mjs":"fpilZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7pGVR":[function(require,module,exports) {
// src/add-dom-event.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addDomEvent", ()=>addDomEvent);
function addDomEvent(target, eventName, handler, options) {
    target.addEventListener(eventName, handler, options);
    return ()=>{
        target.removeEventListener(eventName, handler, options);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kEZgq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEventPoint", ()=>getEventPoint);
var _chunkB7KYFEHMMjs = require("./chunk-B7KYFEHM.mjs");
// src/get-event-point.ts
function pointFromTouch(e, type = "page") {
    const point = e.touches[0] || e.changedTouches[0];
    return {
        x: point[`${type}X`],
        y: point[`${type}Y`]
    };
}
function pointFromMouse(point, type = "page") {
    return {
        x: point[`${type}X`],
        y: point[`${type}Y`]
    };
}
function getEventPoint(event, type = "page") {
    return (0, _chunkB7KYFEHMMjs.isTouchEvent)(event) ? pointFromTouch(event, type) : pointFromMouse(event, type);
}

},{"./chunk-B7KYFEHM.mjs":"fpilZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fpilZ":[function(require,module,exports) {
// src/assertion.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isMouseEvent", ()=>isMouseEvent);
parcelHelpers.export(exports, "isTouchEvent", ()=>isTouchEvent);
parcelHelpers.export(exports, "isMultiTouchEvent", ()=>isMultiTouchEvent);
parcelHelpers.export(exports, "getEventWindow", ()=>getEventWindow);
function isMouseEvent(event) {
    const win = getEventWindow(event);
    if (typeof win.PointerEvent !== "undefined" && event instanceof win.PointerEvent) return !!(event.pointerType === "mouse");
    return event instanceof win.MouseEvent;
}
function isTouchEvent(event) {
    const hasTouches = !!event.touches;
    return hasTouches;
}
function isMultiTouchEvent(event) {
    return isTouchEvent(event) && event.touches.length > 1;
}
function getEventWindow(event) {
    var _a;
    return (_a = event.view) != null ? _a : window;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32Sbo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useLatestRef", ()=>useLatestRef);
// src/index.ts
var _react = require("react");
"use client";
function useLatestRef(value) {
    const ref = (0, _react.useRef)(null);
    ref.current = value;
    return ref;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3uyMN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSize", ()=>useSize);
parcelHelpers.export(exports, "useSizes", ()=>useSizes);
// src/index.ts
var _elementSize = require("@zag-js/element-size");
var _react = require("react");
"use client";
var useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? (0, _react.useLayoutEffect) : (0, _react.useEffect);
function trackMutation(el, cb) {
    var _a, _b;
    if (!el || !el.parentElement) return;
    const win = (_b = (_a = el.ownerDocument) == null ? void 0 : _a.defaultView) != null ? _b : window;
    const observer = new win.MutationObserver(()=>{
        cb();
    });
    observer.observe(el.parentElement, {
        childList: true
    });
    return ()=>{
        observer.disconnect();
    };
}
function useSizes({ getNodes, observeMutation = true }) {
    const [sizes, setSizes] = (0, _react.useState)([]);
    const [count, setCount] = (0, _react.useState)(0);
    useSafeLayoutEffect(()=>{
        const elements = getNodes();
        const cleanups = elements.map((element, index)=>(0, _elementSize.trackElementSize)(element, (size)=>{
                setSizes((sizes2)=>{
                    return [
                        ...sizes2.slice(0, index),
                        size,
                        ...sizes2.slice(index + 1)
                    ];
                });
            }));
        if (observeMutation) {
            const firstNode = elements[0];
            cleanups.push(trackMutation(firstNode, ()=>{
                setCount((count2)=>count2 + 1);
            }));
        }
        return ()=>{
            cleanups.forEach((cleanup)=>{
                cleanup == null || cleanup();
            });
        };
    }, [
        count
    ]);
    return sizes;
}
function isRef(ref) {
    return typeof ref === "object" && ref !== null && "current" in ref;
}
function useSize(subject) {
    const [size] = useSizes({
        observeMutation: false,
        getNodes () {
            const node = isRef(subject) ? subject.current : subject;
            return [
                node
            ];
        }
    });
    return size;
}

},{"@zag-js/element-size":"5uA5G","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5uA5G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "trackElementSize", ()=>(0, _trackSizeMjs.trackElementSize));
parcelHelpers.export(exports, "trackElementsSize", ()=>(0, _trackSizesMjs.trackElementsSize));
var _trackSizeMjs = require("./track-size.mjs");
var _trackSizesMjs = require("./track-sizes.mjs");

},{"./track-size.mjs":"8btFG","./track-sizes.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8btFG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "trackElementSize", ()=>trackElementSize);
function trackElementSize(element, callback) {
    if (!element) {
        callback(void 0);
        return;
    }
    callback({
        width: element.offsetWidth,
        height: element.offsetHeight
    });
    const win = element.ownerDocument.defaultView ?? window;
    const observer = new win.ResizeObserver((entries)=>{
        if (!Array.isArray(entries) || !entries.length) return;
        const [entry] = entries;
        let width;
        let height;
        if ("borderBoxSize" in entry) {
            const borderSizeEntry = entry["borderBoxSize"];
            const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
            width = borderSize["inlineSize"];
            height = borderSize["blockSize"];
        } else {
            width = element.offsetWidth;
            height = element.offsetHeight;
        }
        callback({
            width,
            height
        });
    });
    observer.observe(element, {
        box: "border-box"
    });
    return ()=>observer.unobserve(element);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kpFx2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SliderProvider", ()=>SliderProvider);
parcelHelpers.export(exports, "useSliderContext", ()=>useSliderContext);
parcelHelpers.export(exports, "useSliderStyles", ()=>useSliderStyles);
parcelHelpers.export(exports, "Slider", ()=>Slider);
parcelHelpers.export(exports, "SliderThumb", ()=>SliderThumb);
parcelHelpers.export(exports, "SliderTrack", ()=>SliderTrack);
parcelHelpers.export(exports, "SliderFilledTrack", ()=>SliderFilledTrack);
parcelHelpers.export(exports, "SliderMark", ()=>SliderMark);
var _chunk45OCWRAVMjs = require("./chunk-45OCWRAV.mjs");
var _chunkDX64QB22Mjs = require("./chunk-DX64QB22.mjs");
// src/slider.tsx
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [SliderProvider, useSliderContext] = (0, _reactContext.createContext)({
    name: "SliderContext",
    hookName: "useSliderContext",
    providerName: "<Slider />"
});
var [SliderStylesProvider, useSliderStyles] = (0, _reactContext.createContext)({
    name: `SliderStylesContext`,
    hookName: `useSliderStyles`,
    providerName: "<Slider />"
});
var Slider = (0, _system.forwardRef)((props, ref)=>{
    var _a;
    const sliderProps = {
        ...props,
        orientation: (_a = props == null ? void 0 : props.orientation) != null ? _a : "horizontal"
    };
    const styles = (0, _system.useMultiStyleConfig)("Slider", sliderProps);
    const ownProps = (0, _system.omitThemingProps)(sliderProps);
    const { direction } = (0, _system.useTheme)();
    ownProps.direction = direction;
    const { getInputProps, getRootProps, ...context } = (0, _chunk45OCWRAVMjs.useSlider)(ownProps);
    const rootProps = getRootProps();
    const inputProps = getInputProps({}, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(SliderProvider, {
        value: context,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(SliderStylesProvider, {
            value: styles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).div, {
                ...rootProps,
                className: (0, _chunkDX64QB22Mjs.cx)("chakra-slider", sliderProps.className),
                __css: styles.container,
                children: [
                    sliderProps.children,
                    /* @__PURE__ */ (0, _jsxRuntime.jsx)("input", {
                        ...inputProps
                    })
                ]
            })
        })
    });
});
Slider.displayName = "Slider";
var SliderThumb = (0, _system.forwardRef)((props, ref)=>{
    const { getThumbProps } = useSliderContext();
    const styles = useSliderStyles();
    const thumbProps = getThumbProps(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...thumbProps,
        className: (0, _chunkDX64QB22Mjs.cx)("chakra-slider__thumb", props.className),
        __css: styles.thumb
    });
});
SliderThumb.displayName = "SliderThumb";
var SliderTrack = (0, _system.forwardRef)((props, ref)=>{
    const { getTrackProps } = useSliderContext();
    const styles = useSliderStyles();
    const trackProps = getTrackProps(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...trackProps,
        className: (0, _chunkDX64QB22Mjs.cx)("chakra-slider__track", props.className),
        __css: styles.track
    });
});
SliderTrack.displayName = "SliderTrack";
var SliderFilledTrack = (0, _system.forwardRef)((props, ref)=>{
    const { getInnerTrackProps } = useSliderContext();
    const styles = useSliderStyles();
    const trackProps = getInnerTrackProps(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...trackProps,
        className: (0, _chunkDX64QB22Mjs.cx)("chakra-slider__filled-track", props.className),
        __css: styles.filledTrack
    });
});
SliderFilledTrack.displayName = "SliderFilledTrack";
var SliderMark = (0, _system.forwardRef)((props, ref)=>{
    const { getMarkerProps } = useSliderContext();
    const styles = useSliderStyles();
    const markProps = getMarkerProps(props, ref);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...markProps,
        className: (0, _chunkDX64QB22Mjs.cx)("chakra-slider__marker", props.className),
        __css: styles.mark
    });
});
SliderMark.displayName = "SliderMark";

},{"./chunk-45OCWRAV.mjs":"hGG8d","./chunk-DX64QB22.mjs":"1oxgk","@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hGG8d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSlider", ()=>useSlider);
var _chunkDX64QB22Mjs = require("./chunk-DX64QB22.mjs");
var _chunkE23N4XENMjs = require("./chunk-E23N4XEN.mjs");
// src/use-slider.ts
var _reactUsePanEvent = require("@chakra-ui/react-use-pan-event");
var _reactUseCallbackRef = require("@chakra-ui/react-use-callback-ref");
var _reactUseUpdateEffect = require("@chakra-ui/react-use-update-effect");
var _reactUseControllableState = require("@chakra-ui/react-use-controllable-state");
var _reactUseSize = require("@chakra-ui/react-use-size");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _reactUseLatestRef = require("@chakra-ui/react-use-latest-ref");
var _numberUtils = require("@chakra-ui/number-utils");
var _react = require("react");
"use client";
function useSlider(props) {
    var _a;
    const { min = 0, max = 100, onChange, value: valueProp, defaultValue, isReversed: isReversedProp, direction = "ltr", orientation = "horizontal", id: idProp, isDisabled, isReadOnly, onChangeStart: onChangeStartProp, onChangeEnd: onChangeEndProp, step = 1, getAriaValueText: getAriaValueTextProp, "aria-valuetext": ariaValueText, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, name, focusThumbOnChange = true, ...htmlProps } = props;
    const onChangeStart = (0, _reactUseCallbackRef.useCallbackRef)(onChangeStartProp);
    const onChangeEnd = (0, _reactUseCallbackRef.useCallbackRef)(onChangeEndProp);
    const getAriaValueText = (0, _reactUseCallbackRef.useCallbackRef)(getAriaValueTextProp);
    const isReversed = (0, _chunkE23N4XENMjs.getIsReversed)({
        isReversed: isReversedProp,
        direction,
        orientation
    });
    const [computedValue, setValue] = (0, _reactUseControllableState.useControllableState)({
        value: valueProp,
        defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min, max),
        onChange
    });
    const [isDragging, setDragging] = (0, _react.useState)(false);
    const [isFocused, setFocused] = (0, _react.useState)(false);
    const isInteractive = !(isDisabled || isReadOnly);
    const tenSteps = (max - min) / 10;
    const oneStep = step || (max - min) / 100;
    const value = (0, _numberUtils.clampValue)(computedValue, min, max);
    const reversedValue = max - value + min;
    const trackValue = isReversed ? reversedValue : value;
    const thumbPercent = (0, _numberUtils.valueToPercent)(trackValue, min, max);
    const isVertical = orientation === "vertical";
    const stateRef = (0, _reactUseLatestRef.useLatestRef)({
        min,
        max,
        step,
        isDisabled,
        value,
        isInteractive,
        isReversed,
        isVertical,
        eventSource: null,
        focusThumbOnChange,
        orientation
    });
    const trackRef = (0, _react.useRef)(null);
    const thumbRef = (0, _react.useRef)(null);
    const rootRef = (0, _react.useRef)(null);
    const reactId = (0, _react.useId)();
    const uuid = idProp != null ? idProp : reactId;
    const [thumbId, trackId] = [
        `slider-thumb-${uuid}`,
        `slider-track-${uuid}`
    ];
    const getValueFromPointer = (0, _react.useCallback)((event)=>{
        var _a2, _b;
        if (!trackRef.current) return;
        const state2 = stateRef.current;
        state2.eventSource = "pointer";
        const trackRect = trackRef.current.getBoundingClientRect();
        const { clientX, clientY } = (_b = (_a2 = event.touches) == null ? void 0 : _a2[0]) != null ? _b : event;
        const diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;
        const length = isVertical ? trackRect.height : trackRect.width;
        let percent = diff / length;
        if (isReversed) percent = 1 - percent;
        let nextValue = (0, _numberUtils.percentToValue)(percent, state2.min, state2.max);
        if (state2.step) nextValue = parseFloat((0, _numberUtils.roundValueToStep)(nextValue, state2.min, state2.step));
        nextValue = (0, _numberUtils.clampValue)(nextValue, state2.min, state2.max);
        return nextValue;
    }, [
        isVertical,
        isReversed,
        stateRef
    ]);
    const constrain = (0, _react.useCallback)((value2)=>{
        const state2 = stateRef.current;
        if (!state2.isInteractive) return;
        value2 = parseFloat((0, _numberUtils.roundValueToStep)(value2, state2.min, oneStep));
        value2 = (0, _numberUtils.clampValue)(value2, state2.min, state2.max);
        setValue(value2);
    }, [
        oneStep,
        setValue,
        stateRef
    ]);
    const actions = (0, _react.useMemo)(()=>({
            stepUp (step2 = oneStep) {
                const next = isReversed ? value - step2 : value + step2;
                constrain(next);
            },
            stepDown (step2 = oneStep) {
                const next = isReversed ? value + step2 : value - step2;
                constrain(next);
            },
            reset () {
                constrain(defaultValue || 0);
            },
            stepTo (value2) {
                constrain(value2);
            }
        }), [
        constrain,
        isReversed,
        value,
        oneStep,
        defaultValue
    ]);
    const onKeyDown = (0, _react.useCallback)((event)=>{
        const state2 = stateRef.current;
        const keyMap = {
            ArrowRight: ()=>actions.stepUp(),
            ArrowUp: ()=>actions.stepUp(),
            ArrowLeft: ()=>actions.stepDown(),
            ArrowDown: ()=>actions.stepDown(),
            PageUp: ()=>actions.stepUp(tenSteps),
            PageDown: ()=>actions.stepDown(tenSteps),
            Home: ()=>constrain(state2.min),
            End: ()=>constrain(state2.max)
        };
        const action = keyMap[event.key];
        if (action) {
            event.preventDefault();
            event.stopPropagation();
            action(event);
            state2.eventSource = "keyboard";
        }
    }, [
        actions,
        constrain,
        tenSteps,
        stateRef
    ]);
    const valueText = (_a = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _a : ariaValueText;
    const thumbSize = (0, _reactUseSize.useSize)(thumbRef);
    const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } = (0, _react.useMemo)(()=>{
        const state2 = stateRef.current;
        const thumbRect = thumbSize != null ? thumbSize : {
            width: 0,
            height: 0
        };
        return (0, _chunkE23N4XENMjs.getStyles)({
            isReversed,
            orientation: state2.orientation,
            thumbRects: [
                thumbRect
            ],
            thumbPercents: [
                thumbPercent
            ]
        });
    }, [
        isReversed,
        thumbSize,
        thumbPercent,
        stateRef
    ]);
    const focusThumb = (0, _react.useCallback)(()=>{
        const state2 = stateRef.current;
        if (state2.focusThumbOnChange) setTimeout(()=>{
            var _a2;
            return (_a2 = thumbRef.current) == null ? void 0 : _a2.focus();
        });
    }, [
        stateRef
    ]);
    (0, _reactUseUpdateEffect.useUpdateEffect)(()=>{
        const state2 = stateRef.current;
        focusThumb();
        if (state2.eventSource === "keyboard") onChangeEnd == null || onChangeEnd(state2.value);
    }, [
        value,
        onChangeEnd
    ]);
    function setValueFromPointer(event) {
        const nextValue = getValueFromPointer(event);
        if (nextValue != null && nextValue !== stateRef.current.value) setValue(nextValue);
    }
    (0, _reactUsePanEvent.usePanEvent)(rootRef, {
        onPanSessionStart (event) {
            const state2 = stateRef.current;
            if (!state2.isInteractive) return;
            setDragging(true);
            focusThumb();
            setValueFromPointer(event);
            onChangeStart == null || onChangeStart(state2.value);
        },
        onPanSessionEnd () {
            const state2 = stateRef.current;
            if (!state2.isInteractive) return;
            setDragging(false);
            onChangeEnd == null || onChangeEnd(state2.value);
        },
        onPan (event) {
            const state2 = stateRef.current;
            if (!state2.isInteractive) return;
            setValueFromPointer(event);
        }
    });
    const getRootProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        return {
            ...props2,
            ...htmlProps,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, rootRef),
            tabIndex: -1,
            "aria-disabled": (0, _chunkDX64QB22Mjs.ariaAttr)(isDisabled),
            "data-focused": (0, _chunkDX64QB22Mjs.dataAttr)(isFocused),
            style: {
                ...props2.style,
                ...rootStyle
            }
        };
    }, [
        htmlProps,
        isDisabled,
        isFocused,
        rootStyle
    ]);
    const getTrackProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        return {
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, trackRef),
            id: trackId,
            "data-disabled": (0, _chunkDX64QB22Mjs.dataAttr)(isDisabled),
            style: {
                ...props2.style,
                ...trackStyle
            }
        };
    }, [
        isDisabled,
        trackId,
        trackStyle
    ]);
    const getInnerTrackProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        return {
            ...props2,
            ref,
            style: {
                ...props2.style,
                ...innerTrackStyle
            }
        };
    }, [
        innerTrackStyle
    ]);
    const getThumbProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        return {
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, thumbRef),
            role: "slider",
            tabIndex: isInteractive ? 0 : void 0,
            id: thumbId,
            "data-active": (0, _chunkDX64QB22Mjs.dataAttr)(isDragging),
            "aria-valuetext": valueText,
            "aria-valuemin": min,
            "aria-valuemax": max,
            "aria-valuenow": value,
            "aria-orientation": orientation,
            "aria-disabled": (0, _chunkDX64QB22Mjs.ariaAttr)(isDisabled),
            "aria-readonly": (0, _chunkDX64QB22Mjs.ariaAttr)(isReadOnly),
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabel ? void 0 : ariaLabelledBy,
            style: {
                ...props2.style,
                ...getThumbStyle(0)
            },
            onKeyDown: (0, _chunkDX64QB22Mjs.callAllHandlers)(props2.onKeyDown, onKeyDown),
            onFocus: (0, _chunkDX64QB22Mjs.callAllHandlers)(props2.onFocus, ()=>setFocused(true)),
            onBlur: (0, _chunkDX64QB22Mjs.callAllHandlers)(props2.onBlur, ()=>setFocused(false))
        };
    }, [
        isInteractive,
        thumbId,
        isDragging,
        valueText,
        min,
        max,
        value,
        orientation,
        isDisabled,
        isReadOnly,
        ariaLabel,
        ariaLabelledBy,
        getThumbStyle,
        onKeyDown
    ]);
    const getMarkerProps = (0, _react.useCallback)((props2, ref = null)=>{
        const isInRange = !(props2.value < min || props2.value > max);
        const isHighlighted = value >= props2.value;
        const markerPercent = (0, _numberUtils.valueToPercent)(props2.value, min, max);
        const markerStyle = {
            position: "absolute",
            pointerEvents: "none",
            ...orient({
                orientation,
                vertical: {
                    bottom: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`
                },
                horizontal: {
                    left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`
                }
            })
        };
        return {
            ...props2,
            ref,
            role: "presentation",
            "aria-hidden": true,
            "data-disabled": (0, _chunkDX64QB22Mjs.dataAttr)(isDisabled),
            "data-invalid": (0, _chunkDX64QB22Mjs.dataAttr)(!isInRange),
            "data-highlighted": (0, _chunkDX64QB22Mjs.dataAttr)(isHighlighted),
            style: {
                ...props2.style,
                ...markerStyle
            }
        };
    }, [
        isDisabled,
        isReversed,
        max,
        min,
        orientation,
        value
    ]);
    const getInputProps = (0, _react.useCallback)((props2 = {}, ref = null)=>{
        return {
            ...props2,
            ref,
            type: "hidden",
            value,
            name
        };
    }, [
        name,
        value
    ]);
    const state = {
        value,
        isFocused,
        isDragging
    };
    return {
        state,
        actions,
        getRootProps,
        getTrackProps,
        getInnerTrackProps,
        getThumbProps,
        getMarkerProps,
        getInputProps
    };
}
function orient(options) {
    const { orientation, vertical, horizontal } = options;
    return orientation === "vertical" ? vertical : horizontal;
}
function getDefaultValue(min, max) {
    return max < min ? min : min + (max - min) / 2;
}

},{"./chunk-DX64QB22.mjs":"1oxgk","./chunk-E23N4XEN.mjs":"9EQhM","@chakra-ui/react-use-pan-event":"3cdfP","@chakra-ui/react-use-callback-ref":"dbPJ9","@chakra-ui/react-use-update-effect":"kfB4Y","@chakra-ui/react-use-controllable-state":"ghlge","@chakra-ui/react-use-size":"3uyMN","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/react-use-latest-ref":"32Sbo","@chakra-ui/number-utils":"kC5H9","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"efQ3p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Stat", ()=>(0, _chunkW64KV3Y7Mjs.Stat));
parcelHelpers.export(exports, "StatArrow", ()=>(0, _chunkZKKHYQWOMjs.StatArrow));
parcelHelpers.export(exports, "StatDownArrow", ()=>(0, _chunkZKKHYQWOMjs.StatDownArrow));
parcelHelpers.export(exports, "StatGroup", ()=>(0, _chunkBSQ2CXMLMjs.StatGroup));
parcelHelpers.export(exports, "StatHelpText", ()=>(0, _chunkRMNGYPBKMjs.StatHelpText));
parcelHelpers.export(exports, "StatLabel", ()=>(0, _chunkZ457NQVEMjs.StatLabel));
parcelHelpers.export(exports, "StatNumber", ()=>(0, _chunkGF2QC326Mjs.StatNumber));
parcelHelpers.export(exports, "StatUpArrow", ()=>(0, _chunkZKKHYQWOMjs.StatUpArrow));
parcelHelpers.export(exports, "useStatStyles", ()=>(0, _chunkW64KV3Y7Mjs.useStatStyles));
var _chunkZKKHYQWOMjs = require("./chunk-ZKKHYQWO.mjs");
var _chunkBSQ2CXMLMjs = require("./chunk-BSQ2CXML.mjs");
var _chunkRMNGYPBKMjs = require("./chunk-RMNGYPBK.mjs");
var _chunkZ457NQVEMjs = require("./chunk-Z457NQVE.mjs");
var _chunkGF2QC326Mjs = require("./chunk-GF2QC326.mjs");
var _chunkW64KV3Y7Mjs = require("./chunk-W64KV3Y7.mjs");
"use client";

},{"./chunk-ZKKHYQWO.mjs":"aPHq8","./chunk-BSQ2CXML.mjs":"jG1y9","./chunk-RMNGYPBK.mjs":"aMV1H","./chunk-Z457NQVE.mjs":"9bgpm","./chunk-GF2QC326.mjs":"hJfSA","./chunk-W64KV3Y7.mjs":"32o53","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aPHq8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StatDownArrow", ()=>StatDownArrow);
parcelHelpers.export(exports, "StatUpArrow", ()=>StatUpArrow);
parcelHelpers.export(exports, "StatArrow", ()=>StatArrow);
var _chunkW64KV3Y7Mjs = require("./chunk-W64KV3Y7.mjs");
// src/stat-arrow.tsx
var _icon = require("@chakra-ui/icon");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StatDownArrow = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        color: "red.400",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
        })
    });
StatDownArrow.displayName = "StatDownArrow";
function StatUpArrow(props) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        color: "green.400",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
        })
    });
}
StatUpArrow.displayName = "StatUpArrow";
function StatArrow(props) {
    const { type, "aria-label": ariaLabel, ...rest } = props;
    const styles = (0, _chunkW64KV3Y7Mjs.useStatStyles)();
    const BaseIcon = type === "increase" ? StatUpArrow : StatDownArrow;
    const defaultAriaLabel = type === "increase" ? "increased by" : "decreased by";
    const label = ariaLabel || defaultAriaLabel;
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                srOnly: true,
                children: label
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsx)(BaseIcon, {
                "aria-hidden": true,
                ...rest,
                __css: styles.icon
            })
        ]
    });
}
StatArrow.displayName = "StatArrow";

},{"./chunk-W64KV3Y7.mjs":"32o53","@chakra-ui/icon":"jW1nH","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32o53":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useStatStyles", ()=>useStatStyles);
parcelHelpers.export(exports, "Stat", ()=>Stat);
// src/stat.tsx
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [StatStylesProvider, useStatStyles] = (0, _reactContext.createContext)({
    name: `StatStylesContext`,
    errorMessage: `useStatStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Stat />" `
});
var Stat = (0, _system.forwardRef)(function Stat2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Stat", props);
    const statStyles = {
        position: "relative",
        flex: "1 1 0%",
        ...styles.container
    };
    const { className, children, ...rest } = (0, _system.omitThemingProps)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StatStylesProvider, {
        value: styles,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
            ref,
            ...rest,
            className: (0, _sharedUtils.cx)("chakra-stat", className),
            __css: statStyles,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("dl", {
                children
            })
        })
    });
});
Stat.displayName = "Stat";

},{"@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jG1y9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StatGroup", ()=>StatGroup);
// src/stat-group.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StatGroup = (0, _system.forwardRef)(function StatGroup2(props, ref) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...props,
        ref,
        role: "group",
        className: (0, _sharedUtils.cx)("chakra-stat__group", props.className),
        __css: {
            display: "flex",
            flexWrap: "wrap",
            justifyContent: "space-around",
            alignItems: "flex-start"
        }
    });
});
StatGroup.displayName = "StatGroup";

},{"@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMV1H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StatHelpText", ()=>StatHelpText);
var _chunkW64KV3Y7Mjs = require("./chunk-W64KV3Y7.mjs");
// src/stat-help-text.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StatHelpText = (0, _system.forwardRef)(function StatHelpText2(props, ref) {
    const styles = (0, _chunkW64KV3Y7Mjs.useStatStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).dd, {
        ref,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-stat__help-text", props.className),
        __css: styles.helpText
    });
});
StatHelpText.displayName = "StatHelpText";

},{"./chunk-W64KV3Y7.mjs":"32o53","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9bgpm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StatLabel", ()=>StatLabel);
var _chunkW64KV3Y7Mjs = require("./chunk-W64KV3Y7.mjs");
// src/stat-label.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StatLabel = (0, _system.forwardRef)(function StatLabel2(props, ref) {
    const styles = (0, _chunkW64KV3Y7Mjs.useStatStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).dt, {
        ref,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-stat__label", props.className),
        __css: styles.label
    });
});
StatLabel.displayName = "StatLabel";

},{"./chunk-W64KV3Y7.mjs":"32o53","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hJfSA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StatNumber", ()=>StatNumber);
var _chunkW64KV3Y7Mjs = require("./chunk-W64KV3Y7.mjs");
// src/stat-number.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StatNumber = (0, _system.forwardRef)(function StatNumber2(props, ref) {
    const styles = (0, _chunkW64KV3Y7Mjs.useStatStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).dd, {
        ref,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-stat__number", props.className),
        __css: {
            ...styles.number,
            fontFeatureSettings: "pnum",
            fontVariantNumeric: "proportional-nums"
        }
    });
});
StatNumber.displayName = "StatNumber";

},{"./chunk-W64KV3Y7.mjs":"32o53","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ai0Iw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Step", ()=>(0, _chunkV5KO42CTMjs.Step));
parcelHelpers.export(exports, "StepDescription", ()=>(0, _chunkTT4IEOBJMjs.StepDescription));
parcelHelpers.export(exports, "StepIcon", ()=>(0, _chunk2EGA5JYMMjs.StepIcon));
parcelHelpers.export(exports, "StepIndicator", ()=>(0, _chunk4LPX3T3VMjs.StepIndicator));
parcelHelpers.export(exports, "StepIndicatorContent", ()=>(0, _chunk4LPX3T3VMjs.StepIndicatorContent));
parcelHelpers.export(exports, "StepNumber", ()=>(0, _chunkD3AI6OO6Mjs.StepNumber));
parcelHelpers.export(exports, "StepSeparator", ()=>(0, _chunkZAW7TYJDMjs.StepSeparator));
parcelHelpers.export(exports, "StepStatus", ()=>(0, _chunkZVCNMXD3Mjs.StepStatus));
parcelHelpers.export(exports, "StepTitle", ()=>(0, _chunkD2YOVTOTMjs.StepTitle));
parcelHelpers.export(exports, "Stepper", ()=>(0, _chunk3CJ44H2LMjs.Stepper));
parcelHelpers.export(exports, "useStepContext", ()=>(0, _chunk5JULEEQDMjs.useStepContext));
parcelHelpers.export(exports, "useStepperStyles", ()=>(0, _chunk5JULEEQDMjs.useStepperStyles));
parcelHelpers.export(exports, "useSteps", ()=>(0, _chunkYK2WH7TUMjs.useSteps));
var _chunkD2YOVTOTMjs = require("./chunk-D2YOVTOT.mjs");
var _chunkV5KO42CTMjs = require("./chunk-V5KO42CT.mjs");
var _chunk3CJ44H2LMjs = require("./chunk-3CJ44H2L.mjs");
var _chunkYK2WH7TUMjs = require("./chunk-YK2WH7TU.mjs");
var _chunkTT4IEOBJMjs = require("./chunk-TT4IEOBJ.mjs");
var _chunk4LPX3T3VMjs = require("./chunk-4LPX3T3V.mjs");
var _chunkZVCNMXD3Mjs = require("./chunk-ZVCNMXD3.mjs");
var _chunk2EGA5JYMMjs = require("./chunk-2EGA5JYM.mjs");
var _chunkBHFVWI2HMjs = require("./chunk-BHFVWI2H.mjs");
var _chunkD3AI6OO6Mjs = require("./chunk-D3AI6OO6.mjs");
var _chunkZAW7TYJDMjs = require("./chunk-ZAW7TYJD.mjs");
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
"use client";

},{"./chunk-D2YOVTOT.mjs":"12jva","./chunk-V5KO42CT.mjs":"7HMHw","./chunk-3CJ44H2L.mjs":"7ScbW","./chunk-YK2WH7TU.mjs":"1A9TP","./chunk-TT4IEOBJ.mjs":"kV9Kx","./chunk-4LPX3T3V.mjs":"aK0qo","./chunk-ZVCNMXD3.mjs":"f2e8G","./chunk-2EGA5JYM.mjs":"1LTRe","./chunk-BHFVWI2H.mjs":"5fCGC","./chunk-D3AI6OO6.mjs":"kT0xl","./chunk-ZAW7TYJD.mjs":"4VPuQ","./chunk-5JULEEQD.mjs":"kwtMU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"12jva":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StepTitle", ()=>StepTitle);
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
// src/step-title.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StepTitle = (0, _system.forwardRef)(function StepTitle2(props, ref) {
    const { status } = (0, _chunk5JULEEQDMjs.useStepContext)();
    const styles = (0, _chunk5JULEEQDMjs.useStepperStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).h3, {
        ref,
        "data-status": status,
        ...props,
        __css: styles.title,
        className: (0, _sharedUtils.cx)("chakra-step__title", props.className)
    });
});

},{"./chunk-5JULEEQD.mjs":"kwtMU","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kwtMU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StepContextProvider", ()=>StepContextProvider);
parcelHelpers.export(exports, "useStepContext", ()=>useStepContext);
parcelHelpers.export(exports, "StepperStylesProvider", ()=>StepperStylesProvider);
parcelHelpers.export(exports, "useStepperStyles", ()=>useStepperStyles);
// src/step-context.tsx
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
"use client";
var [StepContextProvider, useStepContext] = (0, _reactContext.createContext)({
    name: "StepContext"
});
var [StepperStylesProvider, useStepperStyles] = (0, _system.createStylesContext)("Stepper");

},{"@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7HMHw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Step", ()=>Step);
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
// src/step.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Step = (0, _system.forwardRef)(function Step2(props, ref) {
    const { orientation, status, showLastSeparator } = (0, _chunk5JULEEQDMjs.useStepContext)();
    const styles = (0, _chunk5JULEEQDMjs.useStepperStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        "data-status": status,
        "data-orientation": orientation,
        "data-stretch": (0, _sharedUtils.dataAttr)(showLastSeparator),
        __css: styles.step,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-step", props.className)
    });
});

},{"./chunk-5JULEEQD.mjs":"kwtMU","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ScbW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Stepper", ()=>Stepper);
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
// src/stepper.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Stepper = (0, _system.forwardRef)(function Stepper2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Stepper", props);
    const { children, index, orientation = "horizontal", showLastSeparator = false, ...restProps } = (0, _system.omitThemingProps)(props);
    const stepElements = (0, _react.Children).toArray(children);
    const stepCount = stepElements.length;
    function getStatus(step) {
        if (step < index) return "complete";
        if (step > index) return "incomplete";
        return "active";
    }
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        "aria-label": "Progress",
        "data-orientation": orientation,
        ...restProps,
        __css: styles.stepper,
        className: (0, _sharedUtils.cx)("chakra-stepper", props.className),
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk5JULEEQDMjs.StepperStylesProvider), {
            value: styles,
            children: stepElements.map((child, index2)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk5JULEEQDMjs.StepContextProvider), {
                    value: {
                        index: index2,
                        status: getStatus(index2),
                        orientation,
                        showLastSeparator,
                        count: stepCount,
                        isFirst: index2 === 0,
                        isLast: index2 === stepCount - 1
                    },
                    children: child
                }, index2))
        })
    });
});

},{"./chunk-5JULEEQD.mjs":"kwtMU","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1A9TP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSteps", ()=>useSteps);
// src/use-steps.ts
var _react = require("react");
"use client";
function useSteps(props = {}) {
    const { index = 0, count } = props;
    const [activeStep, setActiveStep] = (0, _react.useState)(index);
    const maxStep = typeof count === "number" ? count - 1 : 0;
    const activeStepPercent = activeStep / maxStep;
    return {
        activeStep,
        setActiveStep,
        activeStepPercent,
        isActiveStep (step) {
            return step === activeStep;
        },
        isCompleteStep (step) {
            return step < activeStep;
        },
        isIncompleteStep (step) {
            return step > activeStep;
        },
        getStatus (step) {
            if (step < activeStep) return "complete";
            if (step > activeStep) return "incomplete";
            return "active";
        },
        goToNext () {
            setActiveStep((step)=>{
                return typeof count === "number" ? Math.min(count, step + 1) : step + 1;
            });
        },
        goToPrevious () {
            setActiveStep((step)=>Math.max(0, step - 1));
        }
    };
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kV9Kx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StepDescription", ()=>StepDescription);
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
// src/step-description.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StepDescription = (0, _system.forwardRef)(function StepDescription2(props, ref) {
    const { status } = (0, _chunk5JULEEQDMjs.useStepContext)();
    const styles = (0, _chunk5JULEEQDMjs.useStepperStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).p, {
        ref,
        "data-status": status,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-step__description", props.className),
        __css: styles.description
    });
});

},{"./chunk-5JULEEQD.mjs":"kwtMU","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aK0qo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StepIndicator", ()=>StepIndicator);
parcelHelpers.export(exports, "StepIndicatorContent", ()=>StepIndicatorContent);
var _chunkZVCNMXD3Mjs = require("./chunk-ZVCNMXD3.mjs");
var _chunk2EGA5JYMMjs = require("./chunk-2EGA5JYM.mjs");
var _chunkD3AI6OO6Mjs = require("./chunk-D3AI6OO6.mjs");
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
// src/step-indicator.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function StepIndicator(props) {
    const { status } = (0, _chunk5JULEEQDMjs.useStepContext)();
    const styles = (0, _chunk5JULEEQDMjs.useStepperStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        "data-status": status,
        ...props,
        __css: styles.indicator,
        className: (0, _sharedUtils.cx)("chakra-step__indicator", props.className)
    });
}
function StepIndicatorContent() {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkZVCNMXD3Mjs.StepStatus), {
        complete: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunk2EGA5JYMMjs.StepIcon), {}),
        incomplete: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkD3AI6OO6Mjs.StepNumber), {}),
        active: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkD3AI6OO6Mjs.StepNumber), {})
    });
}

},{"./chunk-ZVCNMXD3.mjs":"f2e8G","./chunk-2EGA5JYM.mjs":"1LTRe","./chunk-D3AI6OO6.mjs":"kT0xl","./chunk-5JULEEQD.mjs":"kwtMU","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f2e8G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StepStatus", ()=>StepStatus);
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
// src/step-status.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function StepStatus(props) {
    const { complete, incomplete, active } = props;
    const context = (0, _chunk5JULEEQDMjs.useStepContext)();
    let render = null;
    switch(context.status){
        case "complete":
            render = (0, _sharedUtils.runIfFn)(complete, context);
            break;
        case "incomplete":
            render = (0, _sharedUtils.runIfFn)(incomplete, context);
            break;
        case "active":
            render = (0, _sharedUtils.runIfFn)(active, context);
            break;
    }
    return render ? /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _jsxRuntime.Fragment), {
        children: render
    }) : null;
}

},{"./chunk-5JULEEQD.mjs":"kwtMU","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1LTRe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StepIcon", ()=>StepIcon);
var _chunkBHFVWI2HMjs = require("./chunk-BHFVWI2H.mjs");
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
// src/step-icon.tsx
var _icon = require("@chakra-ui/icon");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function StepIcon(props) {
    const { status } = (0, _chunk5JULEEQDMjs.useStepContext)();
    const styles = (0, _chunk5JULEEQDMjs.useStepperStyles)();
    const icon = status === "complete" ? (0, _chunkBHFVWI2HMjs.CheckIcon) : void 0;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        as: icon,
        __css: styles.icon,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-step__icon", props.className)
    });
}

},{"./chunk-BHFVWI2H.mjs":"5fCGC","./chunk-5JULEEQD.mjs":"kwtMU","@chakra-ui/icon":"jW1nH","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5fCGC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CheckIcon", ()=>CheckIcon);
// src/icons.tsx
var _jsxRuntime = require("react/jsx-runtime");
"use client";
function CheckIcon(props) {
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)("svg", {
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: "0",
        viewBox: "0 0 20 20",
        "aria-hidden": "true",
        height: "1em",
        width: "1em",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fillRule: "evenodd",
            d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z",
            clipRule: "evenodd"
        })
    });
}

},{"react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kT0xl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StepNumber", ()=>StepNumber);
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
// src/step-number.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StepNumber = (0, _system.forwardRef)(function StepNumber2(props, ref) {
    const { children, ...restProps } = props;
    const { status, index } = (0, _chunk5JULEEQDMjs.useStepContext)();
    const styles = (0, _chunk5JULEEQDMjs.useStepperStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        "data-status": status,
        __css: styles.number,
        ...restProps,
        className: (0, _sharedUtils.cx)("chakra-step__number", props.className),
        children: children || index + 1
    });
});

},{"./chunk-5JULEEQD.mjs":"kwtMU","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4VPuQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StepSeparator", ()=>StepSeparator);
var _chunk5JULEEQDMjs = require("./chunk-5JULEEQD.mjs");
// src/step-separator.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var StepSeparator = (0, _system.forwardRef)(function StepSeparator2(props, ref) {
    const { orientation, status, isLast, showLastSeparator } = (0, _chunk5JULEEQDMjs.useStepContext)();
    const styles = (0, _chunk5JULEEQDMjs.useStepperStyles)();
    if (isLast && !showLastSeparator) return null;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        role: "separator",
        "data-orientation": orientation,
        "data-status": status,
        __css: styles.separator,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-step__separator", props.className)
    });
});

},{"./chunk-5JULEEQD.mjs":"kwtMU","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9zjXm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Switch", ()=>(0, _chunkVTV6N5LEMjs.Switch));
var _chunkVTV6N5LEMjs = require("./chunk-VTV6N5LE.mjs");
"use client";

},{"./chunk-VTV6N5LE.mjs":"7sEiT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7sEiT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Switch", ()=>Switch);
// src/switch.tsx
var _checkbox = require("@chakra-ui/checkbox");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Switch = (0, _system.forwardRef)(function Switch2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Switch", props);
    const { spacing = "0.5rem", children, ...ownProps } = (0, _system.omitThemingProps)(props);
    const { getIndicatorProps, getInputProps, getCheckboxProps, getRootProps, getLabelProps } = (0, _checkbox.useCheckbox)(ownProps);
    const containerStyles = (0, _react.useMemo)(()=>({
            display: "inline-block",
            position: "relative",
            verticalAlign: "middle",
            lineHeight: 0,
            ...styles.container
        }), [
        styles.container
    ]);
    const trackStyles = (0, _react.useMemo)(()=>({
            display: "inline-flex",
            flexShrink: 0,
            justifyContent: "flex-start",
            boxSizing: "content-box",
            cursor: "pointer",
            ...styles.track
        }), [
        styles.track
    ]);
    const labelStyles = (0, _react.useMemo)(()=>({
            userSelect: "none",
            marginStart: spacing,
            ...styles.label
        }), [
        spacing,
        styles.label
    ]);
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _system.chakra).label, {
        ...getRootProps(),
        className: (0, _sharedUtils.cx)("chakra-switch", props.className),
        __css: containerStyles,
        children: [
            /* @__PURE__ */ (0, _jsxRuntime.jsx)("input", {
                className: "chakra-switch__input",
                ...getInputProps({}, ref)
            }),
            /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                ...getCheckboxProps(),
                className: "chakra-switch__track",
                __css: trackStyles,
                children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                    __css: styles.thumb,
                    className: "chakra-switch__thumb",
                    ...getIndicatorProps()
                })
            }),
            children && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                className: "chakra-switch__label",
                ...getLabelProps(),
                __css: labelStyles,
                children
            })
        ]
    });
});
Switch.displayName = "Switch";

},{"@chakra-ui/checkbox":"irZ7S","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDfpU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Table", ()=>(0, _chunkGEJVU65NMjs.Table));
parcelHelpers.export(exports, "TableCaption", ()=>(0, _chunkV3K6UINCMjs.TableCaption));
parcelHelpers.export(exports, "TableContainer", ()=>(0, _chunkOA6OURRGMjs.TableContainer));
parcelHelpers.export(exports, "Tbody", ()=>(0, _chunkJ4QO5GAJMjs.Tbody));
parcelHelpers.export(exports, "Td", ()=>(0, _chunkT2WCTPDHMjs.Td));
parcelHelpers.export(exports, "Tfoot", ()=>(0, _chunkB5H2YLEFMjs.Tfoot));
parcelHelpers.export(exports, "Th", ()=>(0, _chunkMGVPL3OHMjs.Th));
parcelHelpers.export(exports, "Thead", ()=>(0, _chunkDRZNIHMGMjs.Thead));
parcelHelpers.export(exports, "Tr", ()=>(0, _chunkGIQFRSD6Mjs.Tr));
parcelHelpers.export(exports, "useTableStyles", ()=>(0, _chunkGEJVU65NMjs.useTableStyles));
var _chunkDRZNIHMGMjs = require("./chunk-DRZNIHMG.mjs");
var _chunkGIQFRSD6Mjs = require("./chunk-GIQFRSD6.mjs");
var _chunkV3K6UINCMjs = require("./chunk-V3K6UINC.mjs");
var _chunkOA6OURRGMjs = require("./chunk-OA6OURRG.mjs");
var _chunkJ4QO5GAJMjs = require("./chunk-J4QO5GAJ.mjs");
var _chunkT2WCTPDHMjs = require("./chunk-T2WCTPDH.mjs");
var _chunkB5H2YLEFMjs = require("./chunk-B5H2YLEF.mjs");
var _chunkMGVPL3OHMjs = require("./chunk-MGVPL3OH.mjs");
var _chunkGEJVU65NMjs = require("./chunk-GEJVU65N.mjs");
"use client";

},{"./chunk-DRZNIHMG.mjs":"jJR2I","./chunk-GIQFRSD6.mjs":"kzwiZ","./chunk-V3K6UINC.mjs":"91ce2","./chunk-OA6OURRG.mjs":"5WfeX","./chunk-J4QO5GAJ.mjs":"k6HpK","./chunk-T2WCTPDH.mjs":"20lxp","./chunk-B5H2YLEF.mjs":"3mNLV","./chunk-MGVPL3OH.mjs":"2lSHU","./chunk-GEJVU65N.mjs":"1jGZK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jJR2I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Thead", ()=>Thead);
var _chunkGEJVU65NMjs = require("./chunk-GEJVU65N.mjs");
// src/thead.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Thead = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _chunkGEJVU65NMjs.useTableStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).thead, {
        ...props,
        ref,
        __css: styles.thead
    });
});

},{"./chunk-GEJVU65N.mjs":"1jGZK","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1jGZK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useTableStyles", ()=>useTableStyles);
parcelHelpers.export(exports, "Table", ()=>Table);
// src/table.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _reactContext = require("@chakra-ui/react-context");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [TableStylesProvider, useTableStyles] = (0, _reactContext.createContext)({
    name: `TableStylesContext`,
    errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Table />" `
});
var Table = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _system.useMultiStyleConfig)("Table", props);
    const { className, layout, ...tableProps } = (0, _system.omitThemingProps)(props);
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TableStylesProvider, {
        value: styles,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).table, {
            ref,
            __css: {
                tableLayout: layout,
                ...styles.table
            },
            className: (0, _sharedUtils.cx)("chakra-table", className),
            ...tableProps
        })
    });
});
Table.displayName = "Table";

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/react-context":"7RVZP","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kzwiZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tr", ()=>Tr);
var _chunkGEJVU65NMjs = require("./chunk-GEJVU65N.mjs");
// src/tr.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Tr = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _chunkGEJVU65NMjs.useTableStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).tr, {
        ...props,
        ref,
        __css: styles.tr
    });
});

},{"./chunk-GEJVU65N.mjs":"1jGZK","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"91ce2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TableCaption", ()=>TableCaption);
var _chunkGEJVU65NMjs = require("./chunk-GEJVU65N.mjs");
// src/table-caption.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var TableCaption = (0, _system.forwardRef)((props, ref)=>{
    const { placement = "bottom", ...rest } = props;
    const styles = (0, _chunkGEJVU65NMjs.useTableStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).caption, {
        ...rest,
        ref,
        __css: {
            ...styles.caption,
            captionSide: placement
        }
    });
});
TableCaption.displayName = "TableCaption";

},{"./chunk-GEJVU65N.mjs":"1jGZK","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5WfeX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TableContainer", ()=>TableContainer);
// src/table-container.tsx
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var TableContainer = (0, _system.forwardRef)((props, ref)=>{
    var _a;
    const { overflow, overflowX, className, ...rest } = props;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        className: (0, _sharedUtils.cx)("chakra-table__container", className),
        ...rest,
        __css: {
            display: "block",
            whiteSpace: "nowrap",
            WebkitOverflowScrolling: "touch",
            overflowX: (_a = overflow != null ? overflow : overflowX) != null ? _a : "auto",
            overflowY: "hidden",
            maxWidth: "100%"
        }
    });
});

},{"@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k6HpK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tbody", ()=>Tbody);
var _chunkGEJVU65NMjs = require("./chunk-GEJVU65N.mjs");
// src/tbody.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Tbody = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _chunkGEJVU65NMjs.useTableStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).tbody, {
        ...props,
        ref,
        __css: styles.tbody
    });
});

},{"./chunk-GEJVU65N.mjs":"1jGZK","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"20lxp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Td", ()=>Td);
var _chunkGEJVU65NMjs = require("./chunk-GEJVU65N.mjs");
// src/td.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Td = (0, _system.forwardRef)(({ isNumeric, ...rest }, ref)=>{
    const styles = (0, _chunkGEJVU65NMjs.useTableStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).td, {
        ...rest,
        ref,
        __css: styles.td,
        "data-is-numeric": isNumeric
    });
});

},{"./chunk-GEJVU65N.mjs":"1jGZK","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mNLV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tfoot", ()=>Tfoot);
var _chunkGEJVU65NMjs = require("./chunk-GEJVU65N.mjs");
// src/tfooter.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Tfoot = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _chunkGEJVU65NMjs.useTableStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).tfoot, {
        ...props,
        ref,
        __css: styles.tfoot
    });
});

},{"./chunk-GEJVU65N.mjs":"1jGZK","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2lSHU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Th", ()=>Th);
var _chunkGEJVU65NMjs = require("./chunk-GEJVU65N.mjs");
// src/th.tsx
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Th = (0, _system.forwardRef)(({ isNumeric, ...rest }, ref)=>{
    const styles = (0, _chunkGEJVU65NMjs.useTableStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).th, {
        ...rest,
        ref,
        __css: styles.th,
        "data-is-numeric": isNumeric
    });
});

},{"./chunk-GEJVU65N.mjs":"1jGZK","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ACBI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tab", ()=>(0, _chunkIAXSQ4X2Mjs.Tab));
parcelHelpers.export(exports, "TabIndicator", ()=>(0, _chunkXYXC6MAFMjs.TabIndicator));
parcelHelpers.export(exports, "TabList", ()=>(0, _chunkBXDFYXZJMjs.TabList));
parcelHelpers.export(exports, "TabPanel", ()=>(0, _chunkKGTDXOFZMjs.TabPanel));
parcelHelpers.export(exports, "TabPanels", ()=>(0, _chunk4YMKQ5D4Mjs.TabPanels));
parcelHelpers.export(exports, "Tabs", ()=>(0, _chunkGTRZJDILMjs.Tabs));
parcelHelpers.export(exports, "TabsDescendantsProvider", ()=>(0, _chunkNXSBASJ3Mjs.TabsDescendantsProvider));
parcelHelpers.export(exports, "TabsProvider", ()=>(0, _chunkNXSBASJ3Mjs.TabsProvider));
parcelHelpers.export(exports, "useTab", ()=>(0, _chunkNXSBASJ3Mjs.useTab));
parcelHelpers.export(exports, "useTabIndicator", ()=>(0, _chunkNXSBASJ3Mjs.useTabIndicator));
parcelHelpers.export(exports, "useTabList", ()=>(0, _chunkNXSBASJ3Mjs.useTabList));
parcelHelpers.export(exports, "useTabPanel", ()=>(0, _chunkNXSBASJ3Mjs.useTabPanel));
parcelHelpers.export(exports, "useTabPanels", ()=>(0, _chunkNXSBASJ3Mjs.useTabPanels));
parcelHelpers.export(exports, "useTabs", ()=>(0, _chunkNXSBASJ3Mjs.useTabs));
parcelHelpers.export(exports, "useTabsContext", ()=>(0, _chunkNXSBASJ3Mjs.useTabsContext));
parcelHelpers.export(exports, "useTabsDescendant", ()=>(0, _chunkNXSBASJ3Mjs.useTabsDescendant));
parcelHelpers.export(exports, "useTabsDescendants", ()=>(0, _chunkNXSBASJ3Mjs.useTabsDescendants));
parcelHelpers.export(exports, "useTabsDescendantsContext", ()=>(0, _chunkNXSBASJ3Mjs.useTabsDescendantsContext));
parcelHelpers.export(exports, "useTabsStyles", ()=>(0, _chunkGTRZJDILMjs.useTabsStyles));
var _chunkXYXC6MAFMjs = require("./chunk-XYXC6MAF.mjs");
var _chunkBXDFYXZJMjs = require("./chunk-BXDFYXZJ.mjs");
var _chunkKGTDXOFZMjs = require("./chunk-KGTDXOFZ.mjs");
var _chunk4YMKQ5D4Mjs = require("./chunk-4YMKQ5D4.mjs");
var _chunkIAXSQ4X2Mjs = require("./chunk-IAXSQ4X2.mjs");
var _chunkGTRZJDILMjs = require("./chunk-GTRZJDIL.mjs");
var _chunkNXSBASJ3Mjs = require("./chunk-NXSBASJ3.mjs");
"use client";

},{"./chunk-XYXC6MAF.mjs":"4RAm8","./chunk-BXDFYXZJ.mjs":"6crsM","./chunk-KGTDXOFZ.mjs":"buG0w","./chunk-4YMKQ5D4.mjs":"dO166","./chunk-IAXSQ4X2.mjs":"gmcex","./chunk-GTRZJDIL.mjs":"65msD","./chunk-NXSBASJ3.mjs":"ctZFg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4RAm8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TabIndicator", ()=>TabIndicator);
var _chunkGTRZJDILMjs = require("./chunk-GTRZJDIL.mjs");
var _chunkNXSBASJ3Mjs = require("./chunk-NXSBASJ3.mjs");
// src/tab-indicator.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var TabIndicator = (0, _system.forwardRef)(function TabIndicator2(props, ref) {
    const indicatorStyle = (0, _chunkNXSBASJ3Mjs.useTabIndicator)();
    const style = {
        ...props.style,
        ...indicatorStyle
    };
    const styles = (0, _chunkGTRZJDILMjs.useTabsStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ref,
        ...props,
        className: (0, _sharedUtils.cx)("chakra-tabs__tab-indicator", props.className),
        style,
        __css: styles.indicator
    });
});
TabIndicator.displayName = "TabIndicator";

},{"./chunk-GTRZJDIL.mjs":"65msD","./chunk-NXSBASJ3.mjs":"ctZFg","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"65msD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useTabsStyles", ()=>useTabsStyles);
parcelHelpers.export(exports, "Tabs", ()=>Tabs);
var _chunkNXSBASJ3Mjs = require("./chunk-NXSBASJ3.mjs");
// src/tabs.tsx
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [TabsStylesProvider, useTabsStyles] = (0, _reactContext.createContext)({
    name: `TabsStylesContext`,
    errorMessage: `useTabsStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Tabs />" `
});
var Tabs = (0, _system.forwardRef)(function Tabs2(props, ref) {
    const styles = (0, _system.useMultiStyleConfig)("Tabs", props);
    const { children, className, ...rest } = (0, _system.omitThemingProps)(props);
    const { htmlProps, descendants, ...ctx } = (0, _chunkNXSBASJ3Mjs.useTabs)(rest);
    const context = (0, _react.useMemo)(()=>ctx, [
        ctx
    ]);
    const { isFitted: _, ...rootProps } = htmlProps;
    const tabsStyles = {
        position: "relative",
        ...styles.root
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkNXSBASJ3Mjs.TabsDescendantsProvider), {
        value: descendants,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _chunkNXSBASJ3Mjs.TabsProvider), {
            value: context,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(TabsStylesProvider, {
                value: styles,
                children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                    className: (0, _sharedUtils.cx)("chakra-tabs", className),
                    ref,
                    ...rootProps,
                    __css: tabsStyles,
                    children
                })
            })
        })
    });
});
Tabs.displayName = "Tabs";

},{"./chunk-NXSBASJ3.mjs":"ctZFg","@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ctZFg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TabsDescendantsProvider", ()=>TabsDescendantsProvider);
parcelHelpers.export(exports, "useTabsDescendantsContext", ()=>useTabsDescendantsContext);
parcelHelpers.export(exports, "useTabsDescendants", ()=>useTabsDescendants);
parcelHelpers.export(exports, "useTabsDescendant", ()=>useTabsDescendant);
parcelHelpers.export(exports, "useTabs", ()=>useTabs);
parcelHelpers.export(exports, "TabsProvider", ()=>TabsProvider);
parcelHelpers.export(exports, "useTabsContext", ()=>useTabsContext);
parcelHelpers.export(exports, "useTabList", ()=>useTabList);
parcelHelpers.export(exports, "useTab", ()=>useTab);
parcelHelpers.export(exports, "useTabPanels", ()=>useTabPanels);
parcelHelpers.export(exports, "useTabPanel", ()=>useTabPanel);
parcelHelpers.export(exports, "useTabIndicator", ()=>useTabIndicator);
// src/use-tabs.ts
var _clickable = require("@chakra-ui/clickable");
var _descendant = require("@chakra-ui/descendant");
var _reactContext = require("@chakra-ui/react-context");
var _reactUseSafeLayoutEffect = require("@chakra-ui/react-use-safe-layout-effect");
var _reactUseControllableState = require("@chakra-ui/react-use-controllable-state");
var _reactChildrenUtils = require("@chakra-ui/react-children-utils");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _lazyUtils = require("@chakra-ui/lazy-utils");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
"use client";
var [TabsDescendantsProvider, useTabsDescendantsContext, useTabsDescendants, useTabsDescendant] = (0, _descendant.createDescendantContext)();
function useTabs(props) {
    var _a;
    const { defaultIndex, onChange, index, isManual, isLazy, lazyBehavior = "unmount", orientation = "horizontal", direction = "ltr", ...htmlProps } = props;
    const [focusedIndex, setFocusedIndex] = (0, _react.useState)(defaultIndex != null ? defaultIndex : 0);
    const [selectedIndex, setSelectedIndex] = (0, _reactUseControllableState.useControllableState)({
        defaultValue: defaultIndex != null ? defaultIndex : 0,
        value: index,
        onChange
    });
    (0, _react.useEffect)(()=>{
        if (index != null) setFocusedIndex(index);
    }, [
        index
    ]);
    const descendants = useTabsDescendants();
    const uuid = (0, _react.useId)();
    const uid = (_a = props.id) != null ? _a : uuid;
    const id = `tabs-${uid}`;
    return {
        id,
        selectedIndex,
        focusedIndex,
        setSelectedIndex,
        setFocusedIndex,
        isManual,
        isLazy,
        lazyBehavior,
        orientation,
        descendants,
        direction,
        htmlProps
    };
}
var [TabsProvider, useTabsContext] = (0, _reactContext.createContext)({
    name: "TabsContext",
    errorMessage: "useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />"
});
function useTabList(props) {
    const { focusedIndex, orientation, direction } = useTabsContext();
    const descendants = useTabsDescendantsContext();
    const onKeyDown = (0, _react.useCallback)((event)=>{
        const nextTab = ()=>{
            var _a;
            const next = descendants.nextEnabled(focusedIndex);
            if (next) (_a = next.node) == null || _a.focus();
        };
        const prevTab = ()=>{
            var _a;
            const prev = descendants.prevEnabled(focusedIndex);
            if (prev) (_a = prev.node) == null || _a.focus();
        };
        const firstTab = ()=>{
            var _a;
            const first = descendants.firstEnabled();
            if (first) (_a = first.node) == null || _a.focus();
        };
        const lastTab = ()=>{
            var _a;
            const last = descendants.lastEnabled();
            if (last) (_a = last.node) == null || _a.focus();
        };
        const isHorizontal = orientation === "horizontal";
        const isVertical = orientation === "vertical";
        const eventKey = event.key;
        const ArrowStart = direction === "ltr" ? "ArrowLeft" : "ArrowRight";
        const ArrowEnd = direction === "ltr" ? "ArrowRight" : "ArrowLeft";
        const keyMap = {
            [ArrowStart]: ()=>isHorizontal && prevTab(),
            [ArrowEnd]: ()=>isHorizontal && nextTab(),
            ArrowDown: ()=>isVertical && nextTab(),
            ArrowUp: ()=>isVertical && prevTab(),
            Home: firstTab,
            End: lastTab
        };
        const action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            action(event);
        }
    }, [
        descendants,
        focusedIndex,
        orientation,
        direction
    ]);
    return {
        ...props,
        role: "tablist",
        "aria-orientation": orientation,
        onKeyDown: (0, _sharedUtils.callAllHandlers)(props.onKeyDown, onKeyDown)
    };
}
function useTab(props) {
    const { isDisabled = false, isFocusable = false, ...htmlProps } = props;
    const { setSelectedIndex, isManual, id, setFocusedIndex, selectedIndex } = useTabsContext();
    const { index, register } = useTabsDescendant({
        disabled: isDisabled && !isFocusable
    });
    const isSelected = index === selectedIndex;
    const onClick = ()=>{
        setSelectedIndex(index);
    };
    const onFocus = ()=>{
        setFocusedIndex(index);
        const isDisabledButFocusable = isDisabled && isFocusable;
        const shouldSelect = !isManual && !isDisabledButFocusable;
        if (shouldSelect) setSelectedIndex(index);
    };
    const clickableProps = (0, _clickable.useClickable)({
        ...htmlProps,
        ref: (0, _reactUseMergeRefs.mergeRefs)(register, props.ref),
        isDisabled,
        isFocusable,
        onClick: (0, _sharedUtils.callAllHandlers)(props.onClick, onClick)
    });
    const type = "button";
    return {
        ...clickableProps,
        id: makeTabId(id, index),
        role: "tab",
        tabIndex: isSelected ? 0 : -1,
        type,
        "aria-selected": isSelected,
        "aria-controls": makeTabPanelId(id, index),
        onFocus: isDisabled ? void 0 : (0, _sharedUtils.callAllHandlers)(props.onFocus, onFocus)
    };
}
var [TabPanelProvider, useTabPanelContext] = (0, _reactContext.createContext)({});
function useTabPanels(props) {
    const context = useTabsContext();
    const { id, selectedIndex } = context;
    const validChildren = (0, _reactChildrenUtils.getValidChildren)(props.children);
    const children = validChildren.map((child, index)=>(0, _react.createElement)(TabPanelProvider, {
            key: index,
            value: {
                isSelected: index === selectedIndex,
                id: makeTabPanelId(id, index),
                tabId: makeTabId(id, index),
                selectedIndex
            }
        }, child));
    return {
        ...props,
        children
    };
}
function useTabPanel(props) {
    const { children, ...htmlProps } = props;
    const { isLazy, lazyBehavior } = useTabsContext();
    const { isSelected, id, tabId } = useTabPanelContext();
    const hasBeenSelected = (0, _react.useRef)(false);
    if (isSelected) hasBeenSelected.current = true;
    const shouldRenderChildren = (0, _lazyUtils.lazyDisclosure)({
        wasSelected: hasBeenSelected.current,
        isSelected,
        enabled: isLazy,
        mode: lazyBehavior
    });
    return {
        // Puts the tabpanel in the page `Tab` sequence.
        tabIndex: 0,
        ...htmlProps,
        children: shouldRenderChildren ? children : null,
        role: "tabpanel",
        "aria-labelledby": tabId,
        hidden: !isSelected,
        id
    };
}
function useTabIndicator() {
    const context = useTabsContext();
    const descendants = useTabsDescendantsContext();
    const { selectedIndex, orientation } = context;
    const isHorizontal = orientation === "horizontal";
    const isVertical = orientation === "vertical";
    const [rect, setRect] = (0, _react.useState)(()=>{
        if (isHorizontal) return {
            left: 0,
            width: 0
        };
        if (isVertical) return {
            top: 0,
            height: 0
        };
        return void 0;
    });
    const [hasMeasured, setHasMeasured] = (0, _react.useState)(false);
    (0, _reactUseSafeLayoutEffect.useSafeLayoutEffect)(()=>{
        if (selectedIndex == null) return;
        const tab = descendants.item(selectedIndex);
        if (tab == null) return;
        if (isHorizontal) setRect({
            left: tab.node.offsetLeft,
            width: tab.node.offsetWidth
        });
        if (isVertical) setRect({
            top: tab.node.offsetTop,
            height: tab.node.offsetHeight
        });
        const id = requestAnimationFrame(()=>{
            setHasMeasured(true);
        });
        return ()=>{
            if (id) cancelAnimationFrame(id);
        };
    }, [
        selectedIndex,
        isHorizontal,
        isVertical,
        descendants
    ]);
    return {
        position: "absolute",
        transitionProperty: "left, right, top, bottom, height, width",
        transitionDuration: hasMeasured ? "200ms" : "0ms",
        transitionTimingFunction: "cubic-bezier(0, 0, 0.2, 1)",
        ...rect
    };
}
function makeTabId(id, index) {
    return `${id}--tab-${index}`;
}
function makeTabPanelId(id, index) {
    return `${id}--tabpanel-${index}`;
}

},{"@chakra-ui/clickable":"jduir","@chakra-ui/descendant":"4UCVd","@chakra-ui/react-context":"7RVZP","@chakra-ui/react-use-safe-layout-effect":"eJbER","@chakra-ui/react-use-controllable-state":"ghlge","@chakra-ui/react-children-utils":"49v95","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/lazy-utils":"hW1vr","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6crsM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TabList", ()=>TabList);
var _chunkGTRZJDILMjs = require("./chunk-GTRZJDIL.mjs");
var _chunkNXSBASJ3Mjs = require("./chunk-NXSBASJ3.mjs");
// src/tab-list.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var TabList = (0, _system.forwardRef)(function TabList2(props, ref) {
    const tablistProps = (0, _chunkNXSBASJ3Mjs.useTabList)({
        ...props,
        ref
    });
    const styles = (0, _chunkGTRZJDILMjs.useTabsStyles)();
    const tablistStyles = {
        display: "flex",
        ...styles.tablist
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...tablistProps,
        className: (0, _sharedUtils.cx)("chakra-tabs__tablist", props.className),
        __css: tablistStyles
    });
});
TabList.displayName = "TabList";

},{"./chunk-GTRZJDIL.mjs":"65msD","./chunk-NXSBASJ3.mjs":"ctZFg","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"buG0w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TabPanel", ()=>TabPanel);
var _chunkGTRZJDILMjs = require("./chunk-GTRZJDIL.mjs");
var _chunkNXSBASJ3Mjs = require("./chunk-NXSBASJ3.mjs");
// src/tab-panel.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var TabPanel = (0, _system.forwardRef)(function TabPanel2(props, ref) {
    const panelProps = (0, _chunkNXSBASJ3Mjs.useTabPanel)({
        ...props,
        ref
    });
    const styles = (0, _chunkGTRZJDILMjs.useTabsStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        outline: "0",
        ...panelProps,
        className: (0, _sharedUtils.cx)("chakra-tabs__tab-panel", props.className),
        __css: styles.tabpanel
    });
});
TabPanel.displayName = "TabPanel";

},{"./chunk-GTRZJDIL.mjs":"65msD","./chunk-NXSBASJ3.mjs":"ctZFg","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dO166":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TabPanels", ()=>TabPanels);
var _chunkGTRZJDILMjs = require("./chunk-GTRZJDIL.mjs");
var _chunkNXSBASJ3Mjs = require("./chunk-NXSBASJ3.mjs");
// src/tab-panels.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var TabPanels = (0, _system.forwardRef)(function TabPanels2(props, ref) {
    const panelsProps = (0, _chunkNXSBASJ3Mjs.useTabPanels)(props);
    const styles = (0, _chunkGTRZJDILMjs.useTabsStyles)();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
        ...panelsProps,
        width: "100%",
        ref,
        className: (0, _sharedUtils.cx)("chakra-tabs__tab-panels", props.className),
        __css: styles.tabpanels
    });
});
TabPanels.displayName = "TabPanels";

},{"./chunk-GTRZJDIL.mjs":"65msD","./chunk-NXSBASJ3.mjs":"ctZFg","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gmcex":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tab", ()=>Tab);
var _chunkGTRZJDILMjs = require("./chunk-GTRZJDIL.mjs");
var _chunkNXSBASJ3Mjs = require("./chunk-NXSBASJ3.mjs");
// src/tab.tsx
var _sharedUtils = require("@chakra-ui/shared-utils");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var Tab = (0, _system.forwardRef)(function Tab2(props, ref) {
    const styles = (0, _chunkGTRZJDILMjs.useTabsStyles)();
    const tabProps = (0, _chunkNXSBASJ3Mjs.useTab)({
        ...props,
        ref
    });
    const tabStyles = {
        outline: "0",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        ...styles.tab
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).button, {
        ...tabProps,
        className: (0, _sharedUtils.cx)("chakra-tabs__tab", props.className),
        __css: tabStyles
    });
});
Tab.displayName = "Tab";

},{"./chunk-GTRZJDIL.mjs":"65msD","./chunk-NXSBASJ3.mjs":"ctZFg","@chakra-ui/shared-utils":"h33Zu","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2wKcV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tag", ()=>(0, _chunkRPO2WXNLMjs.Tag));
parcelHelpers.export(exports, "TagCloseButton", ()=>(0, _chunkRPO2WXNLMjs.TagCloseButton));
parcelHelpers.export(exports, "TagLabel", ()=>(0, _chunkRPO2WXNLMjs.TagLabel));
parcelHelpers.export(exports, "TagLeftIcon", ()=>(0, _chunkRPO2WXNLMjs.TagLeftIcon));
parcelHelpers.export(exports, "TagRightIcon", ()=>(0, _chunkRPO2WXNLMjs.TagRightIcon));
parcelHelpers.export(exports, "useTagStyles", ()=>(0, _chunkRPO2WXNLMjs.useTagStyles));
var _chunkRPO2WXNLMjs = require("./chunk-RPO2WXNL.mjs");
"use client";

},{"./chunk-RPO2WXNL.mjs":"ivCJi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ivCJi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useTagStyles", ()=>useTagStyles);
parcelHelpers.export(exports, "Tag", ()=>Tag);
parcelHelpers.export(exports, "TagLabel", ()=>TagLabel);
parcelHelpers.export(exports, "TagLeftIcon", ()=>TagLeftIcon);
parcelHelpers.export(exports, "TagRightIcon", ()=>TagRightIcon);
parcelHelpers.export(exports, "TagCloseButton", ()=>TagCloseButton);
// src/tag.tsx
var _icon = require("@chakra-ui/icon");
var _reactContext = require("@chakra-ui/react-context");
var _system = require("@chakra-ui/system");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
var [TagStylesProvider, useTagStyles] = (0, _reactContext.createContext)({
    name: `TagStylesContext`,
    errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Tag />" `
});
var Tag = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _system.useMultiStyleConfig)("Tag", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    const containerStyles = {
        display: "inline-flex",
        verticalAlign: "top",
        alignItems: "center",
        maxWidth: "100%",
        ...styles.container
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TagStylesProvider, {
        value: styles,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
            ref,
            ...ownProps,
            __css: containerStyles
        })
    });
});
Tag.displayName = "Tag";
var TagLabel = (0, _system.forwardRef)((props, ref)=>{
    const styles = useTagStyles();
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        ref,
        noOfLines: 1,
        ...props,
        __css: styles.label
    });
});
TagLabel.displayName = "TagLabel";
var TagLeftIcon = (0, _system.forwardRef)((props, ref)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        ref,
        verticalAlign: "top",
        marginEnd: "0.5rem",
        ...props
    }));
TagLeftIcon.displayName = "TagLeftIcon";
var TagRightIcon = (0, _system.forwardRef)((props, ref)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        ref,
        verticalAlign: "top",
        marginStart: "0.5rem",
        ...props
    }));
TagRightIcon.displayName = "TagRightIcon";
var TagCloseIcon = (props)=>/* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _icon.Icon), {
        verticalAlign: "inherit",
        viewBox: "0 0 512 512",
        ...props,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
            fill: "currentColor",
            d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z"
        })
    });
TagCloseIcon.displayName = "TagCloseIcon";
var TagCloseButton = (0, _system.forwardRef)((props, ref)=>{
    const { isDisabled, children, ...rest } = props;
    const styles = useTagStyles();
    const btnStyles = {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        outline: "0",
        ...styles.closeButton
    };
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).button, {
        ref,
        "aria-label": "close",
        ...rest,
        type: "button",
        disabled: isDisabled,
        __css: btnStyles,
        children: children || /* @__PURE__ */ (0, _jsxRuntime.jsx)(TagCloseIcon, {})
    });
});
TagCloseButton.displayName = "TagCloseButton";

},{"@chakra-ui/icon":"jW1nH","@chakra-ui/react-context":"7RVZP","@chakra-ui/system":"jpRoG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lTBcs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Textarea", ()=>(0, _chunk4IH3O7BJMjs.Textarea));
var _chunk4IH3O7BJMjs = require("./chunk-4IH3O7BJ.mjs");
"use client";

},{"./chunk-4IH3O7BJ.mjs":"aT5DK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aT5DK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Textarea", ()=>Textarea);
// src/textarea.tsx
var _formControl = require("@chakra-ui/form-control");
var _system = require("@chakra-ui/system");
var _sharedUtils = require("@chakra-ui/shared-utils");
// src/textarea.tsx
var _jsxRuntime = require("react/jsx-runtime");
"use client";
// ../../utilities/object-utils/src/omit.ts
function omit(object, keysToOmit = []) {
    const clone = Object.assign({}, object);
    for (const key of keysToOmit)if (key in clone) delete clone[key];
    return clone;
}
var omitted = [
    "h",
    "minH",
    "height",
    "minHeight"
];
var Textarea = (0, _system.forwardRef)((props, ref)=>{
    const styles = (0, _system.useStyleConfig)("Textarea", props);
    const { className, rows, ...rest } = (0, _system.omitThemingProps)(props);
    const textareaProps = (0, _formControl.useFormControl)(rest);
    const textareaStyles = rows ? omit(styles, omitted) : styles;
    return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).textarea, {
        ref,
        rows,
        ...textareaProps,
        className: (0, _sharedUtils.cx)("chakra-textarea", className),
        __css: textareaStyles
    });
});
Textarea.displayName = "Textarea";

},{"@chakra-ui/form-control":"5Ic17","@chakra-ui/system":"jpRoG","@chakra-ui/shared-utils":"h33Zu","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9HMRA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tooltip", ()=>(0, _chunkKICXRNWJMjs.Tooltip));
parcelHelpers.export(exports, "useTooltip", ()=>(0, _chunkAOADCYOEMjs.useTooltip));
var _chunkKICXRNWJMjs = require("./chunk-KICXRNWJ.mjs");
var _chunkXRZH7COSMjs = require("./chunk-XRZH7COS.mjs");
var _chunkAOADCYOEMjs = require("./chunk-AOADCYOE.mjs");
"use client";

},{"./chunk-KICXRNWJ.mjs":"2T6MJ","./chunk-XRZH7COS.mjs":"jaAnm","./chunk-AOADCYOE.mjs":"gAku8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2T6MJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tooltip", ()=>Tooltip);
var _chunkXRZH7COSMjs = require("./chunk-XRZH7COS.mjs");
var _chunkAOADCYOEMjs = require("./chunk-AOADCYOE.mjs");
// src/tooltip.tsx
var _popper = require("@chakra-ui/popper");
var _portal = require("@chakra-ui/portal");
var _system = require("@chakra-ui/system");
// src/tooltip.tsx
var _framerMotion = require("framer-motion");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
"use client";
// ../../utilities/object-utils/src/omit.ts
function omit(object, keysToOmit = []) {
    const clone = Object.assign({}, object);
    for (const key of keysToOmit)if (key in clone) delete clone[key];
    return clone;
}
// ../../utilities/object-utils/src/pick.ts
function pick(object, keysToPick) {
    const result = {};
    for (const key of keysToPick)if (key in object) result[key] = object[key];
    return result;
}
var MotionDiv = (0, _system.chakra)((0, _framerMotion.motion).div);
var Tooltip = (0, _system.forwardRef)((props, ref)=>{
    var _a, _b;
    const styles = (0, _system.useStyleConfig)("Tooltip", props);
    const ownProps = (0, _system.omitThemingProps)(props);
    const theme = (0, _system.useTheme)();
    const { children, label, shouldWrapChildren, "aria-label": ariaLabel, hasArrow, bg, portalProps, background, backgroundColor, bgColor, motionProps, ...rest } = ownProps;
    const userDefinedBg = (_b = (_a = background != null ? background : backgroundColor) != null ? _a : bg) != null ? _b : bgColor;
    if (userDefinedBg) {
        styles.bg = userDefinedBg;
        const bgVar = (0, _system.getCSSVar)(theme, "colors", userDefinedBg);
        styles[(0, _popper.popperCSSVars).arrowBg.var] = bgVar;
    }
    const tooltip = (0, _chunkAOADCYOEMjs.useTooltip)({
        ...rest,
        direction: theme.direction
    });
    const shouldWrap = typeof children === "string" || shouldWrapChildren;
    let trigger;
    if (shouldWrap) trigger = /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
        display: "inline-block",
        tabIndex: 0,
        ...tooltip.getTriggerProps(),
        children
    });
    else {
        const child = (0, _react.Children).only(children);
        trigger = (0, _react.cloneElement)(child, tooltip.getTriggerProps(child.props, child.ref));
    }
    const hasAriaLabel = !!ariaLabel;
    const _tooltipProps = tooltip.getTooltipProps({}, ref);
    const tooltipProps = hasAriaLabel ? omit(_tooltipProps, [
        "role",
        "id"
    ]) : _tooltipProps;
    const srOnlyProps = pick(_tooltipProps, [
        "role",
        "id"
    ]);
    if (!label) return /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _jsxRuntime.Fragment), {
        children
    });
    return /* @__PURE__ */ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {
        children: [
            trigger,
            /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _framerMotion.AnimatePresence), {
                children: tooltip.isOpen && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _portal.Portal), {
                    ...portalProps,
                    children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                        ...tooltip.getTooltipPositionerProps(),
                        __css: {
                            zIndex: styles.zIndex,
                            pointerEvents: "none"
                        },
                        children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(MotionDiv, {
                            variants: (0, _chunkXRZH7COSMjs.scale),
                            initial: "exit",
                            animate: "enter",
                            exit: "exit",
                            ...motionProps,
                            ...tooltipProps,
                            __css: styles,
                            children: [
                                label,
                                hasAriaLabel && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).span, {
                                    srOnly: true,
                                    ...srOnlyProps,
                                    children: ariaLabel
                                }),
                                hasArrow && /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                                    "data-popper-arrow": true,
                                    className: "chakra-tooltip__arrow-wrapper",
                                    children: /* @__PURE__ */ (0, _jsxRuntime.jsx)((0, _system.chakra).div, {
                                        "data-popper-arrow-inner": true,
                                        className: "chakra-tooltip__arrow",
                                        __css: {
                                            bg: styles.bg
                                        }
                                    })
                                })
                            ]
                        })
                    })
                })
            })
        ]
    });
});
Tooltip.displayName = "Tooltip";

},{"./chunk-XRZH7COS.mjs":"jaAnm","./chunk-AOADCYOE.mjs":"gAku8","@chakra-ui/popper":"p5cnD","@chakra-ui/portal":"d4tN5","@chakra-ui/system":"jpRoG","framer-motion":"5bZBB","react":"21dqq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jaAnm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scale", ()=>scale);
"use client";
// src/tooltip.transition.tsx
var scale = {
    exit: {
        scale: 0.85,
        opacity: 0,
        transition: {
            opacity: {
                duration: 0.15,
                easings: "easeInOut"
            },
            scale: {
                duration: 0.2,
                easings: "easeInOut"
            }
        }
    },
    enter: {
        scale: 1,
        opacity: 1,
        transition: {
            opacity: {
                easings: "easeOut",
                duration: 0.2
            },
            scale: {
                duration: 0.2,
                ease: [
                    0.175,
                    0.885,
                    0.4,
                    1.1
                ]
            }
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gAku8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useTooltip", ()=>useTooltip);
// src/use-tooltip.ts
var _domUtils = require("@chakra-ui/dom-utils");
var _popper = require("@chakra-ui/popper");
var _reactUseDisclosure = require("@chakra-ui/react-use-disclosure");
var _reactUseEventListener = require("@chakra-ui/react-use-event-listener");
var _reactUseMergeRefs = require("@chakra-ui/react-use-merge-refs");
var _sharedUtils = require("@chakra-ui/shared-utils");
var _react = require("react");
"use client";
var getDoc = (ref)=>{
    var _a;
    return ((_a = ref.current) == null ? void 0 : _a.ownerDocument) || document;
};
var getWin = (ref)=>{
    var _a, _b;
    return ((_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) == null ? void 0 : _b.defaultView) || window;
};
function useTooltip(props = {}) {
    const { openDelay = 0, closeDelay = 0, closeOnClick = true, closeOnMouseDown, closeOnScroll, closeOnPointerDown = closeOnMouseDown, closeOnEsc = true, onOpen: onOpenProp, onClose: onCloseProp, placement, id, isOpen: isOpenProp, defaultIsOpen, arrowSize = 10, arrowShadowColor, arrowPadding, modifiers, isDisabled, gutter, offset, direction, ...htmlProps } = props;
    const { isOpen, onOpen, onClose } = (0, _reactUseDisclosure.useDisclosure)({
        isOpen: isOpenProp,
        defaultIsOpen,
        onOpen: onOpenProp,
        onClose: onCloseProp
    });
    const { referenceRef, getPopperProps, getArrowInnerProps, getArrowProps } = (0, _popper.usePopper)({
        enabled: isOpen,
        placement,
        arrowPadding,
        modifiers,
        gutter,
        offset,
        direction
    });
    const uuid = (0, _react.useId)();
    const uid = id != null ? id : uuid;
    const tooltipId = `tooltip-${uid}`;
    const ref = (0, _react.useRef)(null);
    const enterTimeout = (0, _react.useRef)();
    const clearEnterTimeout = (0, _react.useCallback)(()=>{
        if (enterTimeout.current) {
            clearTimeout(enterTimeout.current);
            enterTimeout.current = void 0;
        }
    }, []);
    const exitTimeout = (0, _react.useRef)();
    const clearExitTimeout = (0, _react.useCallback)(()=>{
        if (exitTimeout.current) {
            clearTimeout(exitTimeout.current);
            exitTimeout.current = void 0;
        }
    }, []);
    const closeNow = (0, _react.useCallback)(()=>{
        clearExitTimeout();
        onClose();
    }, [
        onClose,
        clearExitTimeout
    ]);
    const dispatchCloseEvent = useCloseEvent(ref, closeNow);
    const openWithDelay = (0, _react.useCallback)(()=>{
        if (!isDisabled && !enterTimeout.current) {
            if (isOpen) dispatchCloseEvent();
            const win = getWin(ref);
            enterTimeout.current = win.setTimeout(onOpen, openDelay);
        }
    }, [
        dispatchCloseEvent,
        isDisabled,
        isOpen,
        onOpen,
        openDelay
    ]);
    const closeWithDelay = (0, _react.useCallback)(()=>{
        clearEnterTimeout();
        const win = getWin(ref);
        exitTimeout.current = win.setTimeout(closeNow, closeDelay);
    }, [
        closeDelay,
        closeNow,
        clearEnterTimeout
    ]);
    const onClick = (0, _react.useCallback)(()=>{
        if (isOpen && closeOnClick) closeWithDelay();
    }, [
        closeOnClick,
        closeWithDelay,
        isOpen
    ]);
    const onPointerDown = (0, _react.useCallback)(()=>{
        if (isOpen && closeOnPointerDown) closeWithDelay();
    }, [
        closeOnPointerDown,
        closeWithDelay,
        isOpen
    ]);
    const onKeyDown = (0, _react.useCallback)((event)=>{
        if (isOpen && event.key === "Escape") closeWithDelay();
    }, [
        isOpen,
        closeWithDelay
    ]);
    (0, _reactUseEventListener.useEventListener)(()=>getDoc(ref), "keydown", closeOnEsc ? onKeyDown : void 0);
    (0, _reactUseEventListener.useEventListener)(()=>{
        const node = ref.current;
        if (!node) return null;
        const scrollParent = (0, _domUtils.getScrollParent)(node);
        return scrollParent.localName === "body" ? getWin(ref) : scrollParent;
    }, "scroll", ()=>{
        if (isOpen && closeOnScroll) closeNow();
    }, {
        passive: true,
        capture: true
    });
    (0, _react.useEffect)(()=>{
        if (!isDisabled) return;
        clearEnterTimeout();
        if (isOpen) onClose();
    }, [
        isDisabled,
        isOpen,
        onClose,
        clearEnterTimeout
    ]);
    (0, _react.useEffect)(()=>{
        return ()=>{
            clearEnterTimeout();
            clearExitTimeout();
        };
    }, [
        clearEnterTimeout,
        clearExitTimeout
    ]);
    (0, _reactUseEventListener.useEventListener)(()=>ref.current, "pointerleave", closeWithDelay);
    const getTriggerProps = (0, _react.useCallback)((props2 = {}, _ref = null)=>{
        const triggerProps = {
            ...props2,
            ref: (0, _reactUseMergeRefs.mergeRefs)(ref, _ref, referenceRef),
            onPointerEnter: (0, _sharedUtils.callAllHandlers)(props2.onPointerEnter, (e)=>{
                if (e.pointerType === "touch") return;
                openWithDelay();
            }),
            onClick: (0, _sharedUtils.callAllHandlers)(props2.onClick, onClick),
            onPointerDown: (0, _sharedUtils.callAllHandlers)(props2.onPointerDown, onPointerDown),
            onFocus: (0, _sharedUtils.callAllHandlers)(props2.onFocus, openWithDelay),
            onBlur: (0, _sharedUtils.callAllHandlers)(props2.onBlur, closeWithDelay),
            "aria-describedby": isOpen ? tooltipId : void 0
        };
        return triggerProps;
    }, [
        openWithDelay,
        closeWithDelay,
        onPointerDown,
        isOpen,
        tooltipId,
        onClick,
        referenceRef
    ]);
    const getTooltipPositionerProps = (0, _react.useCallback)((props2 = {}, forwardedRef = null)=>getPopperProps({
            ...props2,
            style: {
                ...props2.style,
                [(0, _popper.popperCSSVars).arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,
                [(0, _popper.popperCSSVars).arrowShadowColor.var]: arrowShadowColor
            }
        }, forwardedRef), [
        getPopperProps,
        arrowSize,
        arrowShadowColor
    ]);
    const getTooltipProps = (0, _react.useCallback)((props2 = {}, ref2 = null)=>{
        const styles = {
            ...props2.style,
            position: "relative",
            transformOrigin: (0, _popper.popperCSSVars).transformOrigin.varRef
        };
        return {
            ref: ref2,
            ...htmlProps,
            ...props2,
            id: tooltipId,
            role: "tooltip",
            style: styles
        };
    }, [
        htmlProps,
        tooltipId
    ]);
    return {
        isOpen,
        show: openWithDelay,
        hide: closeWithDelay,
        getTriggerProps,
        getTooltipProps,
        getTooltipPositionerProps,
        getArrowProps,
        getArrowInnerProps
    };
}
var closeEventName = "chakra-ui:close-tooltip";
function useCloseEvent(ref, close) {
    (0, _react.useEffect)(()=>{
        const doc = getDoc(ref);
        doc.addEventListener(closeEventName, close);
        return ()=>doc.removeEventListener(closeEventName, close);
    }, [
        close,
        ref
    ]);
    return ()=>{
        const doc = getDoc(ref);
        const win = getWin(ref);
        doc.dispatchEvent(new win.CustomEvent(closeEventName));
    };
}

},{"@chakra-ui/dom-utils":"cWgfO","@chakra-ui/popper":"p5cnD","@chakra-ui/react-use-disclosure":"kajTV","@chakra-ui/react-use-event-listener":"lQUDe","@chakra-ui/react-use-merge-refs":"9E5Ql","@chakra-ui/shared-utils":"h33Zu","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lOjBx":[function(require,module,exports) {
"use strict";
var m = require("aaccff5d309d9239");
var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
exports.createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.createRoot(c, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};
exports.hydrateRoot = function(c, h, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.hydrateRoot(c, h, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};

},{"aaccff5d309d9239":"j6uA9"}],"2kQhy":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$f00f = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$f00f.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
const App = ()=>/*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("h1", {
        children: "Hello World"
    }, void 0, false, {
        fileName: "src/App.js",
        lineNumber: 3,
        columnNumber: 19
    }, undefined);
_c = App;
exports.default = App;
var _c;
$RefreshReg$(_c, "App");

  $parcel$ReactRefreshHelpers$f00f.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"km3Ru":[function(require,module,exports) {
"use strict";
var Refresh = require("7422ead32dcc1e6b");
function debounce(func, delay) {
    {
        let timeout = undefined;
        let lastTime = 0;
        return function(args) {
            // Call immediately if last call was more than the delay ago.
            // Otherwise, set a timeout. This means the first call is fast
            // (for the common case of a single update), and subsequent updates
            // are batched.
            let now = Date.now();
            if (now - lastTime > delay) {
                lastTime = now;
                func.call(null, args);
            } else {
                clearTimeout(timeout);
                timeout = setTimeout(function() {
                    timeout = undefined;
                    lastTime = Date.now();
                    func.call(null, args);
                }, delay);
            }
        };
    }
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30);
// Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module1) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module1.id + " " + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module1) {
    if (isReactRefreshBoundary(module1.exports)) {
        registerExportsForReactRefresh(module1);
        if (module1.hot) {
            module1.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module1.exports;
            });
            module1.hot.accept(function(getParents) {
                var prevExports = module1.hot.data.prevExports;
                var nextExports = module1.exports;
                // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports);
                // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== "object") // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = "__esModule" in exports;
    for(var key in exports){
        hasExports = true;
        if (key === "__esModule") continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
}
// When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== "object") // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = "__esModule" in exports;
    for(var key in exports){
        if (key === "__esModule") continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module1) {
    var exports = module1.exports, id = module1.id;
    Refresh.register(exports, id + " %exports%");
    if (exports == null || typeof exports !== "object") // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = "__esModule" in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        var typeID = id + " %exports% " + key;
        Refresh.register(exportValue, typeID);
    }
}

},{"7422ead32dcc1e6b":"786KC"}]},["igKGj","1xC6H","8lqZg"], "8lqZg", "parcelRequireff64")

//# sourceMappingURL=index.975ef6c8.js.map
